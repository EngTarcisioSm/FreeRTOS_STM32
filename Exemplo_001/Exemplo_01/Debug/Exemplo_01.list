
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057cc  080057cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d4  080057d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080057dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004078  20000074  08005850  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ec  08005850  000240ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e30  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bca  00000000  00000000  00034ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00038a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d71  00000000  00000000  000398f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001225b  00000000  00000000  00051669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000954c4  00000000  00000000  000638c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8d88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b8  00000000  00000000  000f8ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054ec 	.word	0x080054ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080054ec 	.word	0x080054ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b2:	f000 fc6f 	bl	8000e94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b6:	f000 f87f 	bl	80006b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ba:	f000 f911 	bl	80007e0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005be:	f000 f8e5 	bl	800078c <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	xMutex = xSemaphoreCreateMutex();
 80005c2:	2001      	movs	r0, #1
 80005c4:	f002 fb25 	bl	8002c12 <xQueueCreateMutex>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <main+0xcc>)
 80005cc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	//criação da queue
	//Criado uma fila com 5 espaços e cada espaço possui um tamanho de uint32_t. Função que Cria uma fila
	if ((xQueue = xQueueCreate(5, sizeof(char *))) == NULL) {
 80005ce:	2200      	movs	r2, #0
 80005d0:	2104      	movs	r1, #4
 80005d2:	2005      	movs	r0, #5
 80005d4:	f002 faaa 	bl	8002b2c <xQueueGenericCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a28      	ldr	r2, [pc, #160]	; (800067c <main+0xd0>)
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <main+0xd0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d103      	bne.n	80005ee <main+0x42>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005e6:	4826      	ldr	r0, [pc, #152]	; (8000680 <main+0xd4>)
 80005e8:	f000 f9bc 	bl	8000964 <vPrintString>
 80005ec:	e002      	b.n	80005f4 <main+0x48>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005ee:	4825      	ldr	r0, [pc, #148]	; (8000684 <main+0xd8>)
 80005f0:	f000 f9b8 	bl	8000964 <vPrintString>
	// osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);   //removido
	// defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);        //removido
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask_print_q, "Task Print Q",
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000602:	4921      	ldr	r1, [pc, #132]	; (8000688 <main+0xdc>)
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <main+0xe0>)
 8000606:	f002 ff8c 	bl	8003522 <xTaskCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d003      	beq.n	8000618 <main+0x6c>
	configMINIMAL_STACK_SIZE * 3, NULL, 2, NULL)) != pdTRUE) {
		vPrintString(
 8000610:	481f      	ldr	r0, [pc, #124]	; (8000690 <main+0xe4>)
 8000612:	f000 f9a7 	bl	8000964 <vPrintString>
 8000616:	e002      	b.n	800061e <main+0x72>
				"Não foi possivel alocar tarefa Task Print Q no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print Q criada com sucesso!\n");
 8000618:	481e      	ldr	r0, [pc, #120]	; (8000694 <main+0xe8>)
 800061a:	f000 f9a3 	bl	8000964 <vPrintString>
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE, NULL,
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2301      	movs	r3, #1
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	491b      	ldr	r1, [pc, #108]	; (8000698 <main+0xec>)
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <main+0xf0>)
 800062e:	f002 ff78 	bl	8003522 <xTaskCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d003      	beq.n	8000640 <main+0x94>
			1, NULL)) != pdTRUE) {
		vPrintString(
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <main+0xf4>)
 800063a:	f000 f993 	bl	8000964 <vPrintString>
 800063e:	e002      	b.n	8000646 <main+0x9a>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 8000640:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0xf8>)
 8000642:	f000 f98f 	bl	8000964 <vPrintString>
	}

	if ((xTaskCreate(vTask_print, "Task Print", configMINIMAL_STACK_SIZE * 3,
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000654:	4914      	ldr	r1, [pc, #80]	; (80006a8 <main+0xfc>)
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <main+0x100>)
 8000658:	f002 ff63 	bl	8003522 <xTaskCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d003      	beq.n	800066a <main+0xbe>
	NULL, 1, NULL)) != pdTRUE) {
		vPrintString(
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0x104>)
 8000664:	f000 f97e 	bl	8000964 <vPrintString>
 8000668:	e002      	b.n	8000670 <main+0xc4>
				"Não foi possivel alocar tarefa Task Print no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print criada com sucesso!\n");
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <main+0x108>)
 800066c:	f000 f97a 	bl	8000964 <vPrintString>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	// osKernelStart();    //removido
	vTaskStartScheduler();
 8000670:	f003 f8c2 	bl	80037f8 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000674:	e7fe      	b.n	8000674 <main+0xc8>
 8000676:	bf00      	nop
 8000678:	20004044 	.word	0x20004044
 800067c:	2000408c 	.word	0x2000408c
 8000680:	08005504 	.word	0x08005504
 8000684:	08005528 	.word	0x08005528
 8000688:	08005544 	.word	0x08005544
 800068c:	08000a39 	.word	0x08000a39
 8000690:	08005554 	.word	0x08005554
 8000694:	08005594 	.word	0x08005594
 8000698:	080055c0 	.word	0x080055c0
 800069c:	08000b81 	.word	0x08000b81
 80006a0:	080055cc 	.word	0x080055cc
 80006a4:	08005610 	.word	0x08005610
 80006a8:	08005638 	.word	0x08005638
 80006ac:	08000b0d 	.word	0x08000b0d
 80006b0:	08005644 	.word	0x08005644
 80006b4:	08005680 	.word	0x08005680

080006b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fae8 	bl	8004c9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemClock_Config+0xd0>)
 8000706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000730:	2354      	movs	r3, #84	; 0x54
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fe9b 	bl	800147c <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x98>
		Error_Handler();
 800074c:	f000 fa38 	bl	8000bc0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2102      	movs	r1, #2
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f8fd 	bl	800196c <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xc4>
		Error_Handler();
 8000778:	f000 fa22 	bl	8000bc0 <Error_Handler>
	}
}
 800077c:	bf00      	nop
 800077e:	3750      	adds	r7, #80	; 0x50
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART1_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f001 fd80 	bl	80022c8 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80007ce:	f000 f9f7 	bl	8000bc0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20004048 	.word	0x20004048
 80007dc:	40011000 	.word	0x40011000

080007e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b55      	ldr	r3, [pc, #340]	; (8000950 <MX_GPIO_Init+0x170>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a54      	ldr	r2, [pc, #336]	; (8000950 <MX_GPIO_Init+0x170>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b52      	ldr	r3, [pc, #328]	; (8000950 <MX_GPIO_Init+0x170>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b4e      	ldr	r3, [pc, #312]	; (8000950 <MX_GPIO_Init+0x170>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a4d      	ldr	r2, [pc, #308]	; (8000950 <MX_GPIO_Init+0x170>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <MX_GPIO_Init+0x170>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_GPIO_Init+0x170>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a46      	ldr	r2, [pc, #280]	; (8000950 <MX_GPIO_Init+0x170>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_GPIO_Init+0x170>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <MX_GPIO_Init+0x170>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3f      	ldr	r2, [pc, #252]	; (8000950 <MX_GPIO_Init+0x170>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_GPIO_Init+0x170>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <MX_GPIO_Init+0x170>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a38      	ldr	r2, [pc, #224]	; (8000950 <MX_GPIO_Init+0x170>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <MX_GPIO_Init+0x170>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin | SEL_1_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2109      	movs	r1, #9
 8000886:	4833      	ldr	r0, [pc, #204]	; (8000954 <MX_GPIO_Init+0x174>)
 8000888:	f000 fdc4 	bl	8001414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000892:	4831      	ldr	r0, [pc, #196]	; (8000958 <MX_GPIO_Init+0x178>)
 8000894:	f000 fdbe 	bl	8001414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	482f      	ldr	r0, [pc, #188]	; (800095c <MX_GPIO_Init+0x17c>)
 800089e:	f000 fdb9 	bl	8001414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DOUT_LED1_Pin */
	GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4826      	ldr	r0, [pc, #152]	; (8000954 <MX_GPIO_Init+0x174>)
 80008ba:	f000 fc0f 	bl	80010dc <HAL_GPIO_Init>

	/*Configure GPIO pin : SEL_0_Pin */
	GPIO_InitStruct.Pin = SEL_0_Pin;
 80008be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <MX_GPIO_Init+0x178>)
 80008d8:	f000 fc00 	bl	80010dc <HAL_GPIO_Init>

	/*Configure GPIO pin : DIN_CFIG_Pin */
	GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 80008dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x180>)
 80008f2:	f000 fbf3 	bl	80010dc <HAL_GPIO_Init>

	/*Configure GPIO pin : EN_RX_485_Pin */
	GPIO_InitStruct.Pin = EN_RX_485_Pin;
 80008f6:	2304      	movs	r3, #4
 80008f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0x17c>)
 800090e:	f000 fbe5 	bl	80010dc <HAL_GPIO_Init>

	/*Configure GPIO pin : SEL_1_Pin */
	GPIO_InitStruct.Pin = SEL_1_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <MX_GPIO_Init+0x174>)
 800092a:	f000 fbd7 	bl	80010dc <HAL_GPIO_Init>

	/*Configure GPIO pin : DIN_TARA_Pin */
	GPIO_InitStruct.Pin = DIN_TARA_Pin;
 800092e:	2310      	movs	r3, #16
 8000930:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x174>)
 8000942:	f000 fbcb 	bl	80010dc <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40020000 	.word	0x40020000
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020800 	.word	0x40020800

08000964 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <vPrintString+0x74>)
 8000974:	f000 fd4e 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2108      	movs	r1, #8
 800097c:	4817      	ldr	r0, [pc, #92]	; (80009dc <vPrintString+0x78>)
 800097e:	f000 fd49 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	4816      	ldr	r0, [pc, #88]	; (80009e0 <vPrintString+0x7c>)
 8000988:	f000 fd44 	bl	8001414 <HAL_GPIO_WritePin>
//  taskENTER_CRITICAL();	//removido
	xSemaphoreTake(xMutex, portMAX_DELAY);
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <vPrintString+0x80>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fb33 	bl	8003000 <xQueueSemaphoreTake>
	{
		vUsartLib_Puts(pc_uartSend_f);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f834 	bl	8000a08 <vUsartLib_Puts>
	}
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <vPrintString+0x74>)
 80009a8:	f000 fd34 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <vPrintString+0x78>)
 80009b2:	f000 fd2f 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2104      	movs	r1, #4
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <vPrintString+0x7c>)
 80009bc:	f000 fd2a 	bl	8001414 <HAL_GPIO_WritePin>
	xSemaphoreGive(xMutex);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <vPrintString+0x80>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	f002 f93b 	bl	8002c44 <xQueueGenericSend>
//  taskEXIT_CRITICAL();		//removido
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	20004044 	.word	0x20004044

080009e8 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 80009f4:	1cf9      	adds	r1, r7, #3
 80009f6:	230a      	movs	r3, #10
 80009f8:	2201      	movs	r2, #1
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f001 fcb1 	bl	8002362 <HAL_UART_Transmit>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000a10:	e007      	b.n	8000a22 <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <vUsartLib_Puts+0x2c>)
 8000a1e:	f7ff ffe3 	bl	80009e8 <vUsartLib_Putc>
	while (*c_data) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f3      	bne.n	8000a12 <vUsartLib_Puts+0xa>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20004048 	.word	0x20004048

08000a38 <vTask_print_q>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_print_q(void *pvParameters) {
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint32_t u32_status = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24

	struct AMessage xMessage = 
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <vTask_print_q+0xbc>)
 8000a46:	f107 040c 	add.w	r4, r7, #12
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a54:	6020      	str	r0, [r4, #0]
 8000a56:	3404      	adds	r4, #4
 8000a58:	7021      	strb	r1, [r4, #0]
	{
		.c_messageID = 2,
		.c_data = "Curso RTOS STM32"
	};
	struct AMessage *px_message = &xMessage;
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	60bb      	str	r3, [r7, #8]

	vPrintString("Entrei na task Queue\n");
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <vTask_print_q+0xc0>)
 8000a62:	f7ff ff7f 	bl	8000964 <vPrintString>

	for (;;) {

		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000a66:	2110      	movs	r1, #16
 8000a68:	4824      	ldr	r0, [pc, #144]	; (8000afc <vTask_print_q+0xc4>)
 8000a6a:	f000 fcbb 	bl	80013e4 <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d11f      	bne.n	8000ab4 <vTask_print_q+0x7c>
				&& !u32_status) {
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11c      	bne.n	8000ab4 <vTask_print_q+0x7c>
			//Aguarda um periodo para evitar o efeito bounce bottão pressionado
			vTaskDelay(50 / portTICK_PERIOD_MS);
 8000a7a:	2032      	movs	r0, #50	; 0x32
 8000a7c:	f002 fe88 	bl	8003790 <vTaskDelay>

			if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000a80:	2110      	movs	r1, #16
 8000a82:	481e      	ldr	r0, [pc, #120]	; (8000afc <vTask_print_q+0xc4>)
 8000a84:	f000 fcae 	bl	80013e4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d110      	bne.n	8000ab0 <vTask_print_q+0x78>
					&& !u32_status) {
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10d      	bne.n	8000ab0 <vTask_print_q+0x78>
				//           xQueueSend(1:nome fila   2:endereço da variavel  3: timeout)
				if ( xQueueSend(xQueue, (void*)&px_message, ( 50 / portTICK_PERIOD_MS)) == pdPASS) {
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <vTask_print_q+0xc8>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f107 0108 	add.w	r1, r7, #8
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2232      	movs	r2, #50	; 0x32
 8000aa0:	f002 f8d0 	bl	8002c44 <xQueueGenericSend>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <vTask_print_q+0x78>

					vPrintString("Valor da constante button enviado na queue! \n\n");
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <vTask_print_q+0xcc>)
 8000aac:	f7ff ff5a 	bl	8000964 <vPrintString>
				}
			}

			u32_status = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24

		}

		//checa se o botão foi levantado
		if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && u32_status) {
 8000ab4:	2110      	movs	r1, #16
 8000ab6:	4811      	ldr	r0, [pc, #68]	; (8000afc <vTask_print_q+0xc4>)
 8000ab8:	f000 fc94 	bl	80013e4 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d014      	beq.n	8000aec <vTask_print_q+0xb4>
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d011      	beq.n	8000aec <vTask_print_q+0xb4>

			vTaskDelay(50 / portTICK_PERIOD_MS);	//delay para debounce
 8000ac8:	2032      	movs	r0, #50	; 0x32
 8000aca:	f002 fe61 	bl	8003790 <vTaskDelay>

			if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000ace:	2110      	movs	r1, #16
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <vTask_print_q+0xc4>)
 8000ad2:	f000 fc87 	bl	80013e4 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d007      	beq.n	8000aec <vTask_print_q+0xb4>
					&& u32_status) {
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <vTask_print_q+0xb4>

				vPrintString("Botão foi solto! \n\n");
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <vTask_print_q+0xd0>)
 8000ae4:	f7ff ff3e 	bl	8000964 <vPrintString>
				u32_status = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}

		vTaskDelay(50 / portTICK_PERIOD_MS);
 8000aec:	2032      	movs	r0, #50	; 0x32
 8000aee:	f002 fe4f 	bl	8003790 <vTaskDelay>
		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000af2:	e7b8      	b.n	8000a66 <vTask_print_q+0x2e>
 8000af4:	08005708 	.word	0x08005708
 8000af8:	080056a8 	.word	0x080056a8
 8000afc:	40020400 	.word	0x40020400
 8000b00:	2000408c 	.word	0x2000408c
 8000b04:	080056c0 	.word	0x080056c0
 8000b08:	080056f0 	.word	0x080056f0

08000b0c <vTask_print>:
	}

	vTaskDelete( NULL); //caso ocorra algo que faça o for sair
}

void vTask_print(void *pvParameters) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint32_t u32_status;
	// char *ps_receve_string;
	struct AMessage * msg;

	vPrintString("Entrei na task Print\n");
 8000b14:	4816      	ldr	r0, [pc, #88]	; (8000b70 <vTask_print+0x64>)
 8000b16:	f7ff ff25 	bl	8000964 <vPrintString>

	for (;;) {
		//xQueueReceive(1:nome da fila 2:endereço variavel de recebimento, 3:timeout)
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <vTask_print+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f107 010c 	add.w	r1, r7, #12
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 f98a 	bl	8002e40 <xQueueReceive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	617b      	str	r3, [r7, #20]
		if (u32_status == pdPASS) {
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d117      	bne.n	8000b66 <vTask_print+0x5a>
			//Para entender a necessidade de alocação dinamica de memoria
			//deixo o link abaixo, onde explica porque precisamos fazer um malloc
			//para alocar um buffer ao nosso ponteiro para uso na função sprintf
			//lembrando que iremos usar o pvPortMalloc que é safe thread para o FreeRTOS
			//https://stackoverflow.com/questions/19772667/c-sprintf-array-char-pointers
			char *pc_uartSend = pvPortMalloc(sizeof(msg)+1);
 8000b36:	2005      	movs	r0, #5
 8000b38:	f003 fe8e 	bl	8004858 <pvPortMalloc>
 8000b3c:	6138      	str	r0, [r7, #16]

			sprintf(pc_uartSend, "Estrutura recebida : ID = %d , MSG = \" %s \" \n", msg->c_messageID, msg->c_data);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	490b      	ldr	r1, [pc, #44]	; (8000b78 <vTask_print+0x6c>)
 8000b4a:	6938      	ldr	r0, [r7, #16]
 8000b4c:	f004 f8ae 	bl	8004cac <siprintf>
			vPrintString(pc_uartSend);
 8000b50:	6938      	ldr	r0, [r7, #16]
 8000b52:	f7ff ff07 	bl	8000964 <vPrintString>
			vPortFree(pc_uartSend);
 8000b56:	6938      	ldr	r0, [r7, #16]
 8000b58:	f003 ff4a 	bl	80049f0 <vPortFree>

			msg->c_messageID++;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	3201      	adds	r2, #1
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	701a      	strb	r2, [r3, #0]
		}
		vPrintString("Task print \r\n\n");
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <vTask_print+0x70>)
 8000b68:	f7ff fefc 	bl	8000964 <vPrintString>
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000b6c:	e7d5      	b.n	8000b1a <vTask_print+0xe>
 8000b6e:	bf00      	nop
 8000b70:	08005720 	.word	0x08005720
 8000b74:	2000408c 	.word	0x2000408c
 8000b78:	08005738 	.word	0x08005738
 8000b7c:	08005768 	.word	0x08005768

08000b80 <vTask_blink>:
		//vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
	vTaskDelete( NULL);
}

void vTask_blink(void *pvParameters) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <vTask_blink+0x18>)
 8000b8c:	f000 fc5b 	bl	8001446 <HAL_GPIO_TogglePin>
		vTaskDelay(250 / portTICK_PERIOD_MS);
 8000b90:	20fa      	movs	r0, #250	; 0xfa
 8000b92:	f002 fdfd 	bl	8003790 <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000b96:	e7f7      	b.n	8000b88 <vTask_blink+0x8>
 8000b98:	40020400 	.word	0x40020400

08000b9c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000bae:	f000 f993 	bl	8000ed8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40000800 	.word	0x40000800

08000bc0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_MspInit+0x54>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_MspInit+0x54>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x54>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_MspInit+0x54>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_MspInit+0x54>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_MspInit+0x54>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f000 fa39 	bl	8001088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9a:	f000 fa1f 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	; 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	201e      	movs	r0, #30
 8000cca:	f000 f9dd 	bl	8001088 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cce:	201e      	movs	r0, #30
 8000cd0:	f000 f9f6 	bl	80010c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_InitTick+0xa4>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_InitTick+0xa4>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_InitTick+0xa4>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf0:	f107 0210 	add.w	r2, r7, #16
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f832 	bl	8001d64 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d00:	f001 f808 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8000d04:	4603      	mov	r3, r0
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_InitTick+0xa8>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3b01      	subs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_InitTick+0xac>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_InitTick+0xb0>)
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_InitTick+0xac>)
 8000d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_InitTick+0xac>)
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_InitTick+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_InitTick+0xac>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_InitTick+0xac>)
 8000d3a:	f001 f845 	bl	8001dc8 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d104      	bne.n	8000d4e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_InitTick+0xac>)
 8000d46:	f001 f899 	bl	8001e7c <HAL_TIM_Base_Start_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20004090 	.word	0x20004090
 8000d64:	40000800 	.word	0x40000800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM4_IRQHandler+0x10>)
 8000d9a:	f001 f8d1 	bl	8001f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20004090 	.word	0x20004090

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f003 ff28 	bl	8004c2c <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20010000 	.word	0x20010000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200002e4 	.word	0x200002e4
 8000e10:	200040f0 	.word	0x200040f0

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <SystemInit+0x28>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SystemInit+0x28>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SystemInit+0x28>)
 8000e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e46:	e003      	b.n	8000e50 <LoopCopyDataInit>

08000e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4e:	3104      	adds	r1, #4

08000e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e58:	d3f6      	bcc.n	8000e48 <CopyDataInit>
  ldr  r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e5c:	e002      	b.n	8000e64 <LoopFillZerobss>

08000e5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e60:	f842 3b04 	str.w	r3, [r2], #4

08000e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e68:	d3f9      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd3 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f003 fee3 	bl	8004c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb9b 	bl	80005ac <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000e7c:	080057dc 	.word	0x080057dc
  ldr  r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e84:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e88:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e8c:	200040ec 	.word	0x200040ec

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f8d8 	bl	8001072 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fef6 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe80 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	200040d8 	.word	0x200040d8

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200040d8 	.word	0x200040d8

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff4c 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109a:	f7ff ff61 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 800109e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	6978      	ldr	r0, [r7, #20]
 80010a6:	f7ff ffb1 	bl	800100c <NVIC_EncodePriority>
 80010aa:	4602      	mov	r2, r0
 80010ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff80 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff54 	bl	8000f7c <__NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e159      	b.n	80013ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8148 	bne.w	80013a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a2 	beq.w	80013a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a56      	ldr	r2, [pc, #344]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x202>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_GPIO_Init+0x2f4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1fe>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <HAL_GPIO_Init+0x2f8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1fa>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <HAL_GPIO_Init+0x2fc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1f6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <HAL_GPIO_Init+0x300>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1f2>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a2f      	ldr	r2, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_GPIO_Init+0x304>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f aea2 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43d9      	mvns	r1, r3
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	400b      	ands	r3, r1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e264      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d075      	beq.n	8001586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149a:	4ba3      	ldr	r3, [pc, #652]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d00c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d112      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4b9d      	ldr	r3, [pc, #628]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014be:	d10b      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4b99      	ldr	r3, [pc, #612]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d05b      	beq.n	8001584 <HAL_RCC_OscConfig+0x108>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d157      	bne.n	8001584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e23f      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d106      	bne.n	80014f0 <HAL_RCC_OscConfig+0x74>
 80014e2:	4b91      	ldr	r3, [pc, #580]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a90      	ldr	r2, [pc, #576]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e01d      	b.n	800152c <HAL_RCC_OscConfig+0xb0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x98>
 80014fa:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a8a      	ldr	r2, [pc, #552]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a87      	ldr	r2, [pc, #540]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0xb0>
 8001514:	4b84      	ldr	r3, [pc, #528]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a83      	ldr	r2, [pc, #524]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b81      	ldr	r3, [pc, #516]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a80      	ldr	r2, [pc, #512]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fce4 	bl	8000f00 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fce0 	bl	8000f00 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e204      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	4b76      	ldr	r3, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0xc0>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fcd0 	bl	8000f00 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fccc 	bl	8000f00 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1f0      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	4b6c      	ldr	r3, [pc, #432]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0xe8>
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d063      	beq.n	800165a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001592:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d11c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x152>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e1c4      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4952      	ldr	r1, [pc, #328]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	e03a      	b.n	800165a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x2b0>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fc85 	bl	8000f00 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fc81 	bl	8000f00 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1a5      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	4b46      	ldr	r3, [pc, #280]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4940      	ldr	r1, [pc, #256]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <HAL_RCC_OscConfig+0x2b0>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc64 	bl	8000f00 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fc60 	bl	8000f00 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e184      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d030      	beq.n	80016c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d016      	beq.n	800169c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_RCC_OscConfig+0x2b4>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fc44 	bl	8000f00 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fc40 	bl	8000f00 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e164      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x200>
 800169a:	e015      	b.n	80016c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_OscConfig+0x2b4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fc2d 	bl	8000f00 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff fc29 	bl	8000f00 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e14d      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a0 	beq.w	8001816 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x2b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d121      	bne.n	8001756 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_RCC_OscConfig+0x2b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_RCC_OscConfig+0x2b8>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fbef 	bl	8000f00 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e011      	b.n	800174a <HAL_RCC_OscConfig+0x2ce>
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	42470000 	.word	0x42470000
 8001730:	42470e80 	.word	0x42470e80
 8001734:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001738:	f7ff fbe2 	bl	8000f00 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e106      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b85      	ldr	r3, [pc, #532]	; (8001960 <HAL_RCC_OscConfig+0x4e4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d106      	bne.n	800176c <HAL_RCC_OscConfig+0x2f0>
 800175e:	4b81      	ldr	r3, [pc, #516]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a80      	ldr	r2, [pc, #512]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
 800176a:	e01c      	b.n	80017a6 <HAL_RCC_OscConfig+0x32a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x312>
 8001774:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a7a      	ldr	r2, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
 8001780:	4b78      	ldr	r3, [pc, #480]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	e00b      	b.n	80017a6 <HAL_RCC_OscConfig+0x32a>
 800178e:	4b75      	ldr	r3, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	4a74      	ldr	r2, [pc, #464]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
 800179a:	4b72      	ldr	r3, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a71      	ldr	r2, [pc, #452]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d015      	beq.n	80017da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fba7 	bl	8000f00 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff fba3 	bl	8000f00 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0c5      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ee      	beq.n	80017b6 <HAL_RCC_OscConfig+0x33a>
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fb91 	bl	8000f00 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fb8d 	bl	8000f00 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0af      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ee      	bne.n	80017e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b56      	ldr	r3, [pc, #344]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a55      	ldr	r2, [pc, #340]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 809b 	beq.w	8001956 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d05c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d141      	bne.n	80018b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x4ec>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fb61 	bl	8000f00 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fb5d 	bl	8000f00 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e081      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	019b      	lsls	r3, r3, #6
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	061b      	lsls	r3, r3, #24
 8001884:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_RCC_OscConfig+0x4ec>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fb36 	bl	8000f00 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fb32 	bl	8000f00 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e056      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x41c>
 80018b6:	e04e      	b.n	8001956 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_OscConfig+0x4ec>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fb1f 	bl	8000f00 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fb1b 	bl	8000f00 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e03f      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x44a>
 80018e4:	e037      	b.n	8001956 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e032      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0x4e8>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d028      	beq.n	8001952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d121      	bne.n	8001952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d11a      	bne.n	8001952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001928:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800192a:	4293      	cmp	r3, r2
 800192c:	d111      	bne.n	8001952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	3b01      	subs	r3, #1
 800193c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d107      	bne.n	8001952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40007000 	.word	0x40007000
 8001964:	40023800 	.word	0x40023800
 8001968:	42470060 	.word	0x42470060

0800196c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0cc      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d90c      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0b8      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	494d      	ldr	r1, [pc, #308]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d044      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d119      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e07f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e06f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e067      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4934      	ldr	r1, [pc, #208]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff fa50 	bl	8000f00 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff fa4c 	bl	8000f00 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e04f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d20c      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e032      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4916      	ldr	r1, [pc, #88]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	490e      	ldr	r1, [pc, #56]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af2:	f000 f821 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	490a      	ldr	r1, [pc, #40]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f8ce 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08005780 	.word	0x08005780
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b50:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d00d      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x40>
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	f200 80bd 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x34>
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6a:	e0b7      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b6e:	60bb      	str	r3, [r7, #8]
       break;
 8001b70:	e0b7      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b74:	60bb      	str	r3, [r7, #8]
      break;
 8001b76:	e0b4      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b82:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04d      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	461a      	mov	r2, r3
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	ea02 0800 	and.w	r8, r2, r0
 8001ba6:	ea03 0901 	and.w	r9, r3, r1
 8001baa:	4640      	mov	r0, r8
 8001bac:	4649      	mov	r1, r9
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	014b      	lsls	r3, r1, #5
 8001bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bbc:	0142      	lsls	r2, r0, #5
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	ebb0 0008 	subs.w	r0, r0, r8
 8001bc6:	eb61 0109 	sbc.w	r1, r1, r9
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bd8:	0182      	lsls	r2, r0, #6
 8001bda:	1a12      	subs	r2, r2, r0
 8001bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	00d9      	lsls	r1, r3, #3
 8001bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bee:	00d0      	lsls	r0, r2, #3
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	eb12 0208 	adds.w	r2, r2, r8
 8001bf8:	eb43 0309 	adc.w	r3, r3, r9
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	0259      	lsls	r1, r3, #9
 8001c06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c0a:	0250      	lsls	r0, r2, #9
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	461a      	mov	r2, r3
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	f7fe fb30 	bl	8000280 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e04a      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	461a      	mov	r2, r3
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	ea02 0400 	and.w	r4, r2, r0
 8001c42:	ea03 0501 	and.w	r5, r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	014b      	lsls	r3, r1, #5
 8001c54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c58:	0142      	lsls	r2, r0, #5
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	1b00      	subs	r0, r0, r4
 8001c60:	eb61 0105 	sbc.w	r1, r1, r5
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	018b      	lsls	r3, r1, #6
 8001c6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c72:	0182      	lsls	r2, r0, #6
 8001c74:	1a12      	subs	r2, r2, r0
 8001c76:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	00d9      	lsls	r1, r3, #3
 8001c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c88:	00d0      	lsls	r0, r2, #3
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	1912      	adds	r2, r2, r4
 8001c90:	eb45 0303 	adc.w	r3, r5, r3
 8001c94:	f04f 0000 	mov.w	r0, #0
 8001c98:	f04f 0100 	mov.w	r1, #0
 8001c9c:	0299      	lsls	r1, r3, #10
 8001c9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ca2:	0290      	lsls	r0, r2, #10
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	f7fe fae4 	bl	8000280 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	60bb      	str	r3, [r7, #8]
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cde:	60bb      	str	r3, [r7, #8]
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08005790 	.word	0x08005790

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08005790 	.word	0x08005790

08001d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	220f      	movs	r2, #15
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCC_GetClockConfig+0x60>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e041      	b.n	8001e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f839 	bl	8001e66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f9ca 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d001      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e044      	b.n	8001f1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_TIM_Base_Start_IT+0xb0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d013      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_TIM_Base_Start_IT+0xbc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d010      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	e007      	b.n	8001f1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40014000 	.word	0x40014000

08001f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d122      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d11b      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0202 	mvn.w	r2, #2
 8001f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ee 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8e0 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8f1 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d122      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0204 	mvn.w	r2, #4
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8c4 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8b6 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8c7 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0208 	mvn.w	r2, #8
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f89a 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f88c 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f89d 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b10      	cmp	r3, #16
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b10      	cmp	r3, #16
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0210 	mvn.w	r2, #16
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2208      	movs	r2, #8
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f870 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f862 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f873 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0201 	mvn.w	r2, #1
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fd6c 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b80      	cmp	r3, #128	; 0x80
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8e2 	bl	80022b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f838 	bl	800218c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b20      	cmp	r3, #32
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b20      	cmp	r3, #32
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0220 	mvn.w	r2, #32
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8ac 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a34      	ldr	r2, [pc, #208]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <TIM_Base_SetConfig+0xe8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <TIM_Base_SetConfig+0xec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <TIM_Base_SetConfig+0xf0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <TIM_Base_SetConfig+0xe8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <TIM_Base_SetConfig+0xec>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <TIM_Base_SetConfig+0xf0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <TIM_Base_SetConfig+0xf4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <TIM_Base_SetConfig+0xf8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <TIM_Base_SetConfig+0xfc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d103      	bne.n	8002270 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	615a      	str	r2, [r3, #20]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800

080022a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e03f      	b.n	800235a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fc98 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800230a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f929 	bl	8002564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b08a      	sub	sp, #40	; 0x28
 8002366:	af02      	add	r7, sp, #8
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	d17c      	bne.n	800247c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_UART_Transmit+0x2c>
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e075      	b.n	800247e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_UART_Transmit+0x3e>
 800239c:	2302      	movs	r3, #2
 800239e:	e06e      	b.n	800247e <HAL_UART_Transmit+0x11c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2221      	movs	r2, #33	; 0x21
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b6:	f7fe fda3 	bl	8000f00 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	88fa      	ldrh	r2, [r7, #6]
 80023c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d0:	d108      	bne.n	80023e4 <HAL_UART_Transmit+0x82>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e003      	b.n	80023ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023f4:	e02a      	b.n	800244c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f840 	bl	8002486 <UART_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e036      	b.n	800247e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	3302      	adds	r3, #2
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e007      	b.n	800243e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1cf      	bne.n	80023f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f810 	bl	8002486 <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e006      	b.n	800247e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b090      	sub	sp, #64	; 0x40
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002496:	e050      	b.n	800253a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249e:	d04c      	beq.n	800253a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80024a6:	f7fe fd2b 	bl	8000f00 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d241      	bcs.n	800253a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d6:	637a      	str	r2, [r7, #52]	; 0x34
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024de:	e841 2300 	strex	r3, r2, [r1]
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e5      	bne.n	80024b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3314      	adds	r3, #20
 80024f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	613b      	str	r3, [r7, #16]
   return(result);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250a:	623a      	str	r2, [r7, #32]
 800250c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	69f9      	ldr	r1, [r7, #28]
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	61bb      	str	r3, [r7, #24]
   return(result);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e5      	bne.n	80024ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e00f      	b.n	800255a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	429a      	cmp	r2, r3
 8002556:	d09f      	beq.n	8002498 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3740      	adds	r7, #64	; 0x40
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002568:	b09f      	sub	sp, #124	; 0x7c
 800256a:	af00      	add	r7, sp, #0
 800256c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	68d9      	ldr	r1, [r3, #12]
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	ea40 0301 	orr.w	r3, r0, r1
 8002584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	431a      	orrs	r2, r3
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	431a      	orrs	r2, r3
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4313      	orrs	r3, r2
 800259c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025a8:	f021 010c 	bic.w	r1, r1, #12
 80025ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b2:	430b      	orrs	r3, r1
 80025b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c2:	6999      	ldr	r1, [r3, #24]
 80025c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	ea40 0301 	orr.w	r3, r0, r1
 80025cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4bc5      	ldr	r3, [pc, #788]	; (80028e8 <UART_SetConfig+0x384>)
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d004      	beq.n	80025e2 <UART_SetConfig+0x7e>
 80025d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4bc3      	ldr	r3, [pc, #780]	; (80028ec <UART_SetConfig+0x388>)
 80025de:	429a      	cmp	r2, r3
 80025e0:	d103      	bne.n	80025ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025e2:	f7ff fbab 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80025e6:	6778      	str	r0, [r7, #116]	; 0x74
 80025e8:	e002      	b.n	80025f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ea:	f7ff fb93 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80025ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f8:	f040 80b6 	bne.w	8002768 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fe:	461c      	mov	r4, r3
 8002600:	f04f 0500 	mov.w	r5, #0
 8002604:	4622      	mov	r2, r4
 8002606:	462b      	mov	r3, r5
 8002608:	1891      	adds	r1, r2, r2
 800260a:	6439      	str	r1, [r7, #64]	; 0x40
 800260c:	415b      	adcs	r3, r3
 800260e:	647b      	str	r3, [r7, #68]	; 0x44
 8002610:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002614:	1912      	adds	r2, r2, r4
 8002616:	eb45 0303 	adc.w	r3, r5, r3
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	00d9      	lsls	r1, r3, #3
 8002624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002628:	00d0      	lsls	r0, r2, #3
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	1911      	adds	r1, r2, r4
 8002630:	6639      	str	r1, [r7, #96]	; 0x60
 8002632:	416b      	adcs	r3, r5
 8002634:	667b      	str	r3, [r7, #100]	; 0x64
 8002636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	461a      	mov	r2, r3
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	1891      	adds	r1, r2, r2
 8002642:	63b9      	str	r1, [r7, #56]	; 0x38
 8002644:	415b      	adcs	r3, r3
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800264c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002650:	f7fd fe16 	bl	8000280 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4ba5      	ldr	r3, [pc, #660]	; (80028f0 <UART_SetConfig+0x38c>)
 800265a:	fba3 2302 	umull	r2, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	011e      	lsls	r6, r3, #4
 8002662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002664:	461c      	mov	r4, r3
 8002666:	f04f 0500 	mov.w	r5, #0
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	1891      	adds	r1, r2, r2
 8002670:	6339      	str	r1, [r7, #48]	; 0x30
 8002672:	415b      	adcs	r3, r3
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
 8002676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800267a:	1912      	adds	r2, r2, r4
 800267c:	eb45 0303 	adc.w	r3, r5, r3
 8002680:	f04f 0000 	mov.w	r0, #0
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	00d9      	lsls	r1, r3, #3
 800268a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800268e:	00d0      	lsls	r0, r2, #3
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	1911      	adds	r1, r2, r4
 8002696:	65b9      	str	r1, [r7, #88]	; 0x58
 8002698:	416b      	adcs	r3, r5
 800269a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800269c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	1891      	adds	r1, r2, r2
 80026a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80026aa:	415b      	adcs	r3, r3
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026b6:	f7fd fde3 	bl	8000280 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <UART_SetConfig+0x38c>)
 80026c0:	fba3 1302 	umull	r1, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	2164      	movs	r1, #100	; 0x64
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	3332      	adds	r3, #50	; 0x32
 80026d2:	4a87      	ldr	r2, [pc, #540]	; (80028f0 <UART_SetConfig+0x38c>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026e0:	441e      	add	r6, r3
 80026e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e4:	4618      	mov	r0, r3
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	1894      	adds	r4, r2, r2
 80026f0:	623c      	str	r4, [r7, #32]
 80026f2:	415b      	adcs	r3, r3
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026fa:	1812      	adds	r2, r2, r0
 80026fc:	eb41 0303 	adc.w	r3, r1, r3
 8002700:	f04f 0400 	mov.w	r4, #0
 8002704:	f04f 0500 	mov.w	r5, #0
 8002708:	00dd      	lsls	r5, r3, #3
 800270a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800270e:	00d4      	lsls	r4, r2, #3
 8002710:	4622      	mov	r2, r4
 8002712:	462b      	mov	r3, r5
 8002714:	1814      	adds	r4, r2, r0
 8002716:	653c      	str	r4, [r7, #80]	; 0x50
 8002718:	414b      	adcs	r3, r1
 800271a:	657b      	str	r3, [r7, #84]	; 0x54
 800271c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	461a      	mov	r2, r3
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	1891      	adds	r1, r2, r2
 8002728:	61b9      	str	r1, [r7, #24]
 800272a:	415b      	adcs	r3, r3
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002732:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002736:	f7fd fda3 	bl	8000280 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4b6c      	ldr	r3, [pc, #432]	; (80028f0 <UART_SetConfig+0x38c>)
 8002740:	fba3 1302 	umull	r1, r3, r3, r2
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	2164      	movs	r1, #100	; 0x64
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	3332      	adds	r3, #50	; 0x32
 8002752:	4a67      	ldr	r2, [pc, #412]	; (80028f0 <UART_SetConfig+0x38c>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	f003 0207 	and.w	r2, r3, #7
 800275e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4432      	add	r2, r6
 8002764:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002766:	e0b9      	b.n	80028dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276a:	461c      	mov	r4, r3
 800276c:	f04f 0500 	mov.w	r5, #0
 8002770:	4622      	mov	r2, r4
 8002772:	462b      	mov	r3, r5
 8002774:	1891      	adds	r1, r2, r2
 8002776:	6139      	str	r1, [r7, #16]
 8002778:	415b      	adcs	r3, r3
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002780:	1912      	adds	r2, r2, r4
 8002782:	eb45 0303 	adc.w	r3, r5, r3
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	00d9      	lsls	r1, r3, #3
 8002790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002794:	00d0      	lsls	r0, r2, #3
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	eb12 0804 	adds.w	r8, r2, r4
 800279e:	eb43 0905 	adc.w	r9, r3, r5
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	008b      	lsls	r3, r1, #2
 80027b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027ba:	0082      	lsls	r2, r0, #2
 80027bc:	4640      	mov	r0, r8
 80027be:	4649      	mov	r1, r9
 80027c0:	f7fd fd5e 	bl	8000280 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <UART_SetConfig+0x38c>)
 80027ca:	fba3 2302 	umull	r2, r3, r3, r2
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	011e      	lsls	r6, r3, #4
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	4618      	mov	r0, r3
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	1894      	adds	r4, r2, r2
 80027e0:	60bc      	str	r4, [r7, #8]
 80027e2:	415b      	adcs	r3, r3
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ea:	1812      	adds	r2, r2, r0
 80027ec:	eb41 0303 	adc.w	r3, r1, r3
 80027f0:	f04f 0400 	mov.w	r4, #0
 80027f4:	f04f 0500 	mov.w	r5, #0
 80027f8:	00dd      	lsls	r5, r3, #3
 80027fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027fe:	00d4      	lsls	r4, r2, #3
 8002800:	4622      	mov	r2, r4
 8002802:	462b      	mov	r3, r5
 8002804:	1814      	adds	r4, r2, r0
 8002806:	64bc      	str	r4, [r7, #72]	; 0x48
 8002808:	414b      	adcs	r3, r1
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	008b      	lsls	r3, r1, #2
 8002820:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002824:	0082      	lsls	r2, r0, #2
 8002826:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800282a:	f7fd fd29 	bl	8000280 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <UART_SetConfig+0x38c>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	; 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	3332      	adds	r3, #50	; 0x32
 8002846:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <UART_SetConfig+0x38c>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002852:	441e      	add	r6, r3
 8002854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002856:	4618      	mov	r0, r3
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	1894      	adds	r4, r2, r2
 8002862:	603c      	str	r4, [r7, #0]
 8002864:	415b      	adcs	r3, r3
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286c:	1812      	adds	r2, r2, r0
 800286e:	eb41 0303 	adc.w	r3, r1, r3
 8002872:	f04f 0400 	mov.w	r4, #0
 8002876:	f04f 0500 	mov.w	r5, #0
 800287a:	00dd      	lsls	r5, r3, #3
 800287c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002880:	00d4      	lsls	r4, r2, #3
 8002882:	4622      	mov	r2, r4
 8002884:	462b      	mov	r3, r5
 8002886:	eb12 0a00 	adds.w	sl, r2, r0
 800288a:	eb43 0b01 	adc.w	fp, r3, r1
 800288e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	008b      	lsls	r3, r1, #2
 80028a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028a6:	0082      	lsls	r2, r0, #2
 80028a8:	4650      	mov	r0, sl
 80028aa:	4659      	mov	r1, fp
 80028ac:	f7fd fce8 	bl	8000280 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <UART_SetConfig+0x38c>)
 80028b6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2164      	movs	r1, #100	; 0x64
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	3332      	adds	r3, #50	; 0x32
 80028c8:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <UART_SetConfig+0x38c>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4432      	add	r2, r6
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	377c      	adds	r7, #124	; 0x7c
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e6:	bf00      	nop
 80028e8:	40011000 	.word	0x40011000
 80028ec:	40011400 	.word	0x40011400
 80028f0:	51eb851f 	.word	0x51eb851f

080028f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0208 	add.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0208 	add.w	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f103 0208 	add.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d103      	bne.n	80029b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e00c      	b.n	80029d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3308      	adds	r3, #8
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e002      	b.n	80029c4 <vListInsert+0x2e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d2f6      	bcs.n	80029be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6852      	ldr	r2, [r2, #4]
 8002a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d103      	bne.n	8002a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a86:	f001 fe05 	bl	8004694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d114      	bne.n	8002b06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01a      	beq.n	8002b1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f8c7 	bl	8003c7c <xTaskRemoveFromEventList>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <xQueueGenericReset+0xcc>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	e009      	b.n	8002b1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3310      	adds	r3, #16
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fef2 	bl	80028f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff feed 	bl	80028f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b1a:	f001 fdeb 	bl	80046f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	613b      	str	r3, [r7, #16]
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3348      	adds	r3, #72	; 0x48
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fe77 	bl	8004858 <pvPortMalloc>
 8002b6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d011      	beq.n	8002b96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3348      	adds	r3, #72	; 0x48
 8002b7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b84:	79fa      	ldrb	r2, [r7, #7]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f805 	bl	8002ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b96:	69bb      	ldr	r3, [r7, #24]
	}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e002      	b.n	8002bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bce:	2101      	movs	r1, #1
 8002bd0:	69b8      	ldr	r0, [r7, #24]
 8002bd2:	f7ff ff43 	bl	8002a5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f81d 	bl	8002c44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	461a      	mov	r2, r3
 8002c28:	6939      	ldr	r1, [r7, #16]
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff7e 	bl	8002b2c <xQueueGenericCreate>
 8002c30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff ffd3 	bl	8002bde <prvInitialiseMutex>

		return xNewQueue;
 8002c38:	68fb      	ldr	r3, [r7, #12]
	}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueGenericSend+0x32>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <xQueueGenericSend+0x40>
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <xQueueGenericSend+0x44>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <xQueueGenericSend+0x46>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <xQueueGenericSend+0x60>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d103      	bne.n	8002cb2 <xQueueGenericSend+0x6e>
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <xQueueGenericSend+0x72>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xQueueGenericSend+0x74>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	623b      	str	r3, [r7, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cd2:	f001 f98f 	bl	8003ff4 <xTaskGetSchedulerState>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <xQueueGenericSend+0x9e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <xQueueGenericSend+0xa2>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <xQueueGenericSend+0xa4>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <xQueueGenericSend+0xbe>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	61fb      	str	r3, [r7, #28]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d02:	f001 fcc7 	bl	8004694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <xQueueGenericSend+0xd4>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d129      	bne.n	8002d6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d1e:	f000 fa93 	bl	8003248 <prvCopyDataToQueue>
 8002d22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	3324      	adds	r3, #36	; 0x24
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 ffa3 	bl	8003c7c <xTaskRemoveFromEventList>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <xQueueGenericSend+0x1f8>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	e00a      	b.n	8002d64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d54:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <xQueueGenericSend+0x1f8>)
 8002d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d64:	f001 fcc6 	bl	80046f4 <vPortExitCritical>
				return pdPASS;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e063      	b.n	8002e34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d72:	f001 fcbf 	bl	80046f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e05c      	b.n	8002e34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ffdb 	bl	8003d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d8e:	f001 fcb1 	bl	80046f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d92:	f000 fd91 	bl	80038b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d96:	f001 fc7d 	bl	8004694 <vPortEnterCritical>
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d103      	bne.n	8002db0 <xQueueGenericSend+0x16c>
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d103      	bne.n	8002dc6 <xQueueGenericSend+0x182>
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dc6:	f001 fc95 	bl	80046f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dca:	1d3a      	adds	r2, r7, #4
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ffca 	bl	8003d6c <xTaskCheckForTimeOut>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d124      	bne.n	8002e28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de0:	f000 fb2a 	bl	8003438 <prvIsQueueFull>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d018      	beq.n	8002e1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	3310      	adds	r3, #16
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 ff1e 	bl	8003c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 fab5 	bl	8003368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dfe:	f000 fd69 	bl	80038d4 <xTaskResumeAll>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f af7c 	bne.w	8002d02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <xQueueGenericSend+0x1f8>)
 8002e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	e772      	b.n	8002d02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1e:	f000 faa3 	bl	8003368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e22:	f000 fd57 	bl	80038d4 <xTaskResumeAll>
 8002e26:	e76c      	b.n	8002d02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e2a:	f000 fa9d 	bl	8003368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e2e:	f000 fd51 	bl	80038d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3738      	adds	r7, #56	; 0x38
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	; 0x30
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <xQueueReceive+0x30>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	623b      	str	r3, [r7, #32]
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <xQueueReceive+0x3e>
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <xQueueReceive+0x42>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <xQueueReceive+0x44>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <xQueueReceive+0x5e>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	61fb      	str	r3, [r7, #28]
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e9e:	f001 f8a9 	bl	8003ff4 <xTaskGetSchedulerState>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <xQueueReceive+0x6e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <xQueueReceive+0x72>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <xQueueReceive+0x74>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueReceive+0x8e>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	61bb      	str	r3, [r7, #24]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ece:	f001 fbe1 	bl	8004694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01f      	beq.n	8002f1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee2:	f000 fa1b 	bl	800331c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00f      	beq.n	8002f16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	3310      	adds	r3, #16
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 febe 	bl	8003c7c <xTaskRemoveFromEventList>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f06:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <xQueueReceive+0x1bc>)
 8002f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f16:	f001 fbed 	bl	80046f4 <vPortExitCritical>
				return pdPASS;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e069      	b.n	8002ff2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f24:	f001 fbe6 	bl	80046f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e062      	b.n	8002ff2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff02 	bl	8003d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f40:	f001 fbd8 	bl	80046f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f44:	f000 fcb8 	bl	80038b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f48:	f001 fba4 	bl	8004694 <vPortEnterCritical>
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f52:	b25b      	sxtb	r3, r3
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d103      	bne.n	8002f62 <xQueueReceive+0x122>
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d103      	bne.n	8002f78 <xQueueReceive+0x138>
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f78:	f001 fbbc 	bl	80046f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f7c:	1d3a      	adds	r2, r7, #4
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fef1 	bl	8003d6c <xTaskCheckForTimeOut>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d123      	bne.n	8002fd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f92:	f000 fa3b 	bl	800340c <prvIsQueueEmpty>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	3324      	adds	r3, #36	; 0x24
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fe45 	bl	8003c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fac:	f000 f9dc 	bl	8003368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fb0:	f000 fc90 	bl	80038d4 <xTaskResumeAll>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d189      	bne.n	8002ece <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <xQueueReceive+0x1bc>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	e780      	b.n	8002ece <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fce:	f000 f9cb 	bl	8003368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd2:	f000 fc7f 	bl	80038d4 <xTaskResumeAll>
 8002fd6:	e77a      	b.n	8002ece <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fda:	f000 f9c5 	bl	8003368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fde:	f000 fc79 	bl	80038d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe4:	f000 fa12 	bl	800340c <prvIsQueueEmpty>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f43f af6f 	beq.w	8002ece <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3730      	adds	r7, #48	; 0x30
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08e      	sub	sp, #56	; 0x38
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003012:	2300      	movs	r3, #0
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	623b      	str	r3, [r7, #32]
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	61fb      	str	r3, [r7, #28]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003050:	f000 ffd0 	bl	8003ff4 <xTaskGetSchedulerState>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <xQueueSemaphoreTake+0x60>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <xQueueSemaphoreTake+0x64>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <xQueueSemaphoreTake+0x66>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	61bb      	str	r3, [r7, #24]
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003080:	f001 fb08 	bl	8004694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d024      	beq.n	80030da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	1e5a      	subs	r2, r3, #1
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80030a0:	f001 f950 	bl	8004344 <pvTaskIncrementMutexHeldCount>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	3310      	adds	r3, #16
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fde0 	bl	8003c7c <xTaskRemoveFromEventList>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030c2:	4b54      	ldr	r3, [pc, #336]	; (8003214 <xQueueSemaphoreTake+0x214>)
 80030c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030d2:	f001 fb0f 	bl	80046f4 <vPortExitCritical>
				return pdPASS;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e097      	b.n	800320a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	617b      	str	r3, [r7, #20]
}
 80030f8:	bf00      	nop
 80030fa:	e7fe      	b.n	80030fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030fc:	f001 fafa 	bl	80046f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003100:	2300      	movs	r3, #0
 8003102:	e082      	b.n	800320a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fe16 	bl	8003d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003118:	f001 faec 	bl	80046f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800311c:	f000 fbcc 	bl	80038b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003120:	f001 fab8 	bl	8004694 <vPortEnterCritical>
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800312a:	b25b      	sxtb	r3, r3
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d103      	bne.n	800313a <xQueueSemaphoreTake+0x13a>
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003140:	b25b      	sxtb	r3, r3
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d103      	bne.n	8003150 <xQueueSemaphoreTake+0x150>
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003150:	f001 fad0 	bl	80046f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003154:	463a      	mov	r2, r7
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fe05 	bl	8003d6c <xTaskCheckForTimeOut>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d132      	bne.n	80031ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800316a:	f000 f94f 	bl	800340c <prvIsQueueEmpty>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d026      	beq.n	80031c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800317c:	f001 fa8a 	bl	8004694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 ff53 	bl	8004030 <xTaskPriorityInherit>
 800318a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800318c:	f001 fab2 	bl	80046f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	3324      	adds	r3, #36	; 0x24
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fd4b 	bl	8003c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800319e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a0:	f000 f8e2 	bl	8003368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031a4:	f000 fb96 	bl	80038d4 <xTaskResumeAll>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f47f af68 	bne.w	8003080 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <xQueueSemaphoreTake+0x214>)
 80031b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	e75e      	b.n	8003080 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80031c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031c4:	f000 f8d0 	bl	8003368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031c8:	f000 fb84 	bl	80038d4 <xTaskResumeAll>
 80031cc:	e758      	b.n	8003080 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80031ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031d0:	f000 f8ca 	bl	8003368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031d4:	f000 fb7e 	bl	80038d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031da:	f000 f917 	bl	800340c <prvIsQueueEmpty>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f43f af4d 	beq.w	8003080 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80031ec:	f001 fa52 	bl	8004694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031f2:	f000 f811 	bl	8003218 <prvGetDisinheritPriorityAfterTimeout>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 f812 	bl	8004228 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003204:	f001 fa76 	bl	80046f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003208:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800320a:	4618      	mov	r0, r3
 800320c:	3738      	adds	r7, #56	; 0x38
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e001      	b.n	800323a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800323a:	68fb      	ldr	r3, [r7, #12]
	}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d14d      	bne.n	800330a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff52 	bl	800411c <xTaskPriorityDisinherit>
 8003278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e043      	b.n	800330a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d119      	bne.n	80032bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6858      	ldr	r0, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	f001 fcf4 	bl	8004c80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d32b      	bcc.n	800330a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	e026      	b.n	800330a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68d8      	ldr	r0, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	461a      	mov	r2, r3
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	f001 fcda 	bl	8004c80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	425b      	negs	r3, r3
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d207      	bcs.n	80032f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	425b      	negs	r3, r3
 80032f2:	441a      	add	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d105      	bne.n	800330a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	3b01      	subs	r3, #1
 8003308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003312:	697b      	ldr	r3, [r7, #20]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d303      	bcc.n	8003350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	461a      	mov	r2, r3
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f001 fc90 	bl	8004c80 <memcpy>
	}
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003370:	f001 f990 	bl	8004694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800337a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800337c:	e011      	b.n	80033a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d012      	beq.n	80033ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3324      	adds	r3, #36	; 0x24
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fc76 	bl	8003c7c <xTaskRemoveFromEventList>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003396:	f000 fd4b 	bl	8003e30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	3b01      	subs	r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	dce9      	bgt.n	800337e <prvUnlockQueue+0x16>
 80033aa:	e000      	b.n	80033ae <prvUnlockQueue+0x46>
					break;
 80033ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033b6:	f001 f99d 	bl	80046f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ba:	f001 f96b 	bl	8004694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c6:	e011      	b.n	80033ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3310      	adds	r3, #16
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fc51 	bl	8003c7c <xTaskRemoveFromEventList>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033e0:	f000 fd26 	bl	8003e30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	dce9      	bgt.n	80033c8 <prvUnlockQueue+0x60>
 80033f4:	e000      	b.n	80033f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003400:	f001 f978 	bl	80046f4 <vPortExitCritical>
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003414:	f001 f93e 	bl	8004694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e001      	b.n	800342a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800342a:	f001 f963 	bl	80046f4 <vPortExitCritical>

	return xReturn;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003440:	f001 f928 	bl	8004694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	429a      	cmp	r2, r3
 800344e:	d102      	bne.n	8003456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003450:	2301      	movs	r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e001      	b.n	800345a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800345a:	f001 f94b 	bl	80046f4 <vPortExitCritical>

	return xReturn;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08e      	sub	sp, #56	; 0x38
 800346c:	af04      	add	r7, sp, #16
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <xTaskCreateStatic+0x2a>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	623b      	str	r3, [r7, #32]
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xTaskCreateStatic+0x46>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	61fb      	str	r3, [r7, #28]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ae:	2354      	movs	r3, #84	; 0x54
 80034b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b54      	cmp	r3, #84	; 0x54
 80034b6:	d00a      	beq.n	80034ce <xTaskCreateStatic+0x66>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	61bb      	str	r3, [r7, #24]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01e      	beq.n	8003514 <xTaskCreateStatic+0xac>
 80034d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034ee:	2300      	movs	r3, #0
 80034f0:	9303      	str	r3, [sp, #12]
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f850 	bl	80035ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800350c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800350e:	f000 f8d5 	bl	80036bc <prvAddNewTaskToReadyList>
 8003512:	e001      	b.n	8003518 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003518:	697b      	ldr	r3, [r7, #20]
	}
 800351a:	4618      	mov	r0, r3
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003522:	b580      	push	{r7, lr}
 8003524:	b08c      	sub	sp, #48	; 0x30
 8003526:	af04      	add	r7, sp, #16
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f98e 	bl	8004858 <pvPortMalloc>
 800353c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00e      	beq.n	8003562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003544:	2054      	movs	r0, #84	; 0x54
 8003546:	f001 f987 	bl	8004858 <pvPortMalloc>
 800354a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
 8003558:	e005      	b.n	8003566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f001 fa48 	bl	80049f0 <vPortFree>
 8003560:	e001      	b.n	8003566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	2300      	movs	r3, #0
 8003578:	9303      	str	r3, [sp, #12]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f80e 	bl	80035ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003590:	69f8      	ldr	r0, [r7, #28]
 8003592:	f000 f893 	bl	80036bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e002      	b.n	80035a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035a2:	69bb      	ldr	r3, [r7, #24]
	}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035c4:	3b01      	subs	r3, #1
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	617b      	str	r3, [r7, #20]
}
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01f      	beq.n	800363a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	e012      	b.n	8003626 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	7819      	ldrb	r1, [r3, #0]
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	3334      	adds	r3, #52	; 0x34
 8003610:	460a      	mov	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b0f      	cmp	r3, #15
 800362a:	d9e9      	bls.n	8003600 <prvInitialiseNewTask+0x54>
 800362c:	e000      	b.n	8003630 <prvInitialiseNewTask+0x84>
			{
				break;
 800362e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003638:	e003      	b.n	8003642 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	2b06      	cmp	r3, #6
 8003646:	d901      	bls.n	800364c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003648:	2306      	movs	r3, #6
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	2200      	movs	r2, #0
 800365c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f966 	bl	8002934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	3318      	adds	r3, #24
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f961 	bl	8002934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003676:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	f1c3 0207 	rsb	r2, r3, #7
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	2200      	movs	r2, #0
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	69b8      	ldr	r0, [r7, #24]
 800369c:	f000 fecc 	bl	8004438 <pxPortInitialiseStack>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036c4:	f000 ffe6 	bl	8004694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <prvAddNewTaskToReadyList+0xb8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <prvAddNewTaskToReadyList+0xb8>)
 80036d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <prvAddNewTaskToReadyList+0xbc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036da:	4a27      	ldr	r2, [pc, #156]	; (8003778 <prvAddNewTaskToReadyList+0xbc>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <prvAddNewTaskToReadyList+0xb8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d110      	bne.n	800370a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036e8:	f000 fbc6 	bl	8003e78 <prvInitialiseTaskLists>
 80036ec:	e00d      	b.n	800370a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <prvAddNewTaskToReadyList+0xc0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <prvAddNewTaskToReadyList+0xbc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	429a      	cmp	r2, r3
 8003702:	d802      	bhi.n	800370a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003704:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <prvAddNewTaskToReadyList+0xbc>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <prvAddNewTaskToReadyList+0xc4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <prvAddNewTaskToReadyList+0xc4>)
 8003712:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2201      	movs	r2, #1
 800371a:	409a      	lsls	r2, r3
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <prvAddNewTaskToReadyList+0xc8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <prvAddNewTaskToReadyList+0xc8>)
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <prvAddNewTaskToReadyList+0xcc>)
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f7ff f906 	bl	800294e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003742:	f000 ffd7 	bl	80046f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <prvAddNewTaskToReadyList+0xc0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <prvAddNewTaskToReadyList+0xbc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d207      	bcs.n	800376c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <prvAddNewTaskToReadyList+0xd0>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200003e8 	.word	0x200003e8
 8003778:	200002e8 	.word	0x200002e8
 800377c:	200003f4 	.word	0x200003f4
 8003780:	20000404 	.word	0x20000404
 8003784:	200003f0 	.word	0x200003f0
 8003788:	200002ec 	.word	0x200002ec
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d017      	beq.n	80037d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <vTaskDelay+0x60>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <vTaskDelay+0x30>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	60bb      	str	r3, [r7, #8]
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037c0:	f000 f87a 	bl	80038b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037c4:	2100      	movs	r1, #0
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fdd0 	bl	800436c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037cc:	f000 f882 	bl	80038d4 <xTaskResumeAll>
 80037d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <vTaskDelay+0x64>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000410 	.word	0x20000410
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003806:	463a      	mov	r2, r7
 8003808:	1d39      	adds	r1, r7, #4
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	4618      	mov	r0, r3
 8003810:	f7fc feb2 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	9202      	str	r2, [sp, #8]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	460a      	mov	r2, r1
 8003826:	491e      	ldr	r1, [pc, #120]	; (80038a0 <vTaskStartScheduler+0xa8>)
 8003828:	481e      	ldr	r0, [pc, #120]	; (80038a4 <vTaskStartScheduler+0xac>)
 800382a:	f7ff fe1d 	bl	8003468 <xTaskCreateStatic>
 800382e:	4603      	mov	r3, r0
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <vTaskStartScheduler+0xb0>)
 8003832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <vTaskStartScheduler+0xb0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e001      	b.n	8003846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d116      	bne.n	800387a <vTaskStartScheduler+0x82>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	613b      	str	r3, [r7, #16]
}
 800385e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <vTaskStartScheduler+0xb4>)
 8003862:	f04f 32ff 	mov.w	r2, #4294967295
 8003866:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <vTaskStartScheduler+0xb8>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <vTaskStartScheduler+0xbc>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003874:	f000 fe6c 	bl	8004550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003878:	e00e      	b.n	8003898 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d10a      	bne.n	8003898 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	60fb      	str	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <vTaskStartScheduler+0x9e>
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	08005778 	.word	0x08005778
 80038a4:	08003e49 	.word	0x08003e49
 80038a8:	2000040c 	.word	0x2000040c
 80038ac:	20000408 	.word	0x20000408
 80038b0:	200003f4 	.word	0x200003f4
 80038b4:	200003ec 	.word	0x200003ec

080038b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <vTaskSuspendAll+0x18>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <vTaskSuspendAll+0x18>)
 80038c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	20000410 	.word	0x20000410

080038d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <xTaskResumeAll+0x114>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xTaskResumeAll+0x2c>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	603b      	str	r3, [r7, #0]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003900:	f000 fec8 	bl	8004694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003904:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <xTaskResumeAll+0x114>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3b01      	subs	r3, #1
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <xTaskResumeAll+0x114>)
 800390c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <xTaskResumeAll+0x114>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d161      	bne.n	80039da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003916:	4b35      	ldr	r3, [pc, #212]	; (80039ec <xTaskResumeAll+0x118>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d05d      	beq.n	80039da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800391e:	e02e      	b.n	800397e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <xTaskResumeAll+0x11c>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3318      	adds	r3, #24
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff f86b 	bl	8002a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f866 	bl	8002a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	2201      	movs	r2, #1
 8003942:	409a      	lsls	r2, r3
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <xTaskResumeAll+0x120>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <xTaskResumeAll+0x120>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <xTaskResumeAll+0x124>)
 800395c:	441a      	add	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe fff2 	bl	800294e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <xTaskResumeAll+0x128>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	429a      	cmp	r2, r3
 8003976:	d302      	bcc.n	800397e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <xTaskResumeAll+0x12c>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <xTaskResumeAll+0x11c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cc      	bne.n	8003920 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800398c:	f000 fb12 	bl	8003fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003990:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <xTaskResumeAll+0x130>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800399c:	f000 f836 	bl	8003a0c <xTaskIncrementTick>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <xTaskResumeAll+0x12c>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f1      	bne.n	800399c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <xTaskResumeAll+0x130>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <xTaskResumeAll+0x12c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <xTaskResumeAll+0x134>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039da:	f000 fe8b 	bl	80046f4 <vPortExitCritical>

	return xAlreadyYielded;
 80039de:	68bb      	ldr	r3, [r7, #8]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000410 	.word	0x20000410
 80039ec:	200003e8 	.word	0x200003e8
 80039f0:	200003a8 	.word	0x200003a8
 80039f4:	200003f0 	.word	0x200003f0
 80039f8:	200002ec 	.word	0x200002ec
 80039fc:	200002e8 	.word	0x200002e8
 8003a00:	200003fc 	.word	0x200003fc
 8003a04:	200003f8 	.word	0x200003f8
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a16:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <xTaskIncrementTick+0x144>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 808e 	bne.w	8003b3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a20:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <xTaskIncrementTick+0x148>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a28:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <xTaskIncrementTick+0x148>)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d120      	bne.n	8003a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	603b      	str	r3, [r7, #0]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xTaskIncrementTick+0x46>
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <xTaskIncrementTick+0x150>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4a3e      	ldr	r2, [pc, #248]	; (8003b5c <xTaskIncrementTick+0x150>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <xTaskIncrementTick+0x154>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a3c      	ldr	r2, [pc, #240]	; (8003b60 <xTaskIncrementTick+0x154>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	f000 fa9f 	bl	8003fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <xTaskIncrementTick+0x158>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d348      	bcc.n	8003b12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <xTaskIncrementTick+0x158>)
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	601a      	str	r2, [r3, #0]
					break;
 8003a92:	e03e      	b.n	8003b12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a94:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d203      	bcs.n	8003ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <xTaskIncrementTick+0x158>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ab2:	e02e      	b.n	8003b12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe ffa5 	bl	8002a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ff9c 	bl	8002a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <xTaskIncrementTick+0x15c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <xTaskIncrementTick+0x15c>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <xTaskIncrementTick+0x160>)
 8003af0:	441a      	add	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7fe ff28 	bl	800294e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <xTaskIncrementTick+0x164>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3b9      	bcc.n	8003a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b10:	e7b6      	b.n	8003a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <xTaskIncrementTick+0x164>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4914      	ldr	r1, [pc, #80]	; (8003b6c <xTaskIncrementTick+0x160>)
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d901      	bls.n	8003b2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <xTaskIncrementTick+0x168>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e004      	b.n	8003b46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <xTaskIncrementTick+0x16c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <xTaskIncrementTick+0x16c>)
 8003b44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000410 	.word	0x20000410
 8003b54:	200003ec 	.word	0x200003ec
 8003b58:	200003a0 	.word	0x200003a0
 8003b5c:	200003a4 	.word	0x200003a4
 8003b60:	20000400 	.word	0x20000400
 8003b64:	20000408 	.word	0x20000408
 8003b68:	200003f0 	.word	0x200003f0
 8003b6c:	200002ec 	.word	0x200002ec
 8003b70:	200002e8 	.word	0x200002e8
 8003b74:	200003fc 	.word	0x200003fc
 8003b78:	200003f8 	.word	0x200003f8

08003b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b82:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <vTaskSwitchContext+0xa4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <vTaskSwitchContext+0xa8>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b90:	e03f      	b.n	8003c12 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <vTaskSwitchContext+0xa8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <vTaskSwitchContext+0xac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f1c3 031f 	rsb	r3, r3, #31
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	491f      	ldr	r1, [pc, #124]	; (8003c2c <vTaskSwitchContext+0xb0>)
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	607b      	str	r3, [r7, #4]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskSwitchContext+0x5a>
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <vTaskSwitchContext+0xb0>)
 8003be4:	4413      	add	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d104      	bne.n	8003c08 <vTaskSwitchContext+0x8c>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <vTaskSwitchContext+0xb4>)
 8003c10:	6013      	str	r3, [r2, #0]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000410 	.word	0x20000410
 8003c24:	200003fc 	.word	0x200003fc
 8003c28:	200003f0 	.word	0x200003f0
 8003c2c:	200002ec 	.word	0x200002ec
 8003c30:	200002e8 	.word	0x200002e8

08003c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60fb      	str	r3, [r7, #12]
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <vTaskPlaceOnEventList+0x44>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3318      	adds	r3, #24
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe fe97 	bl	8002996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c68:	2101      	movs	r1, #1
 8003c6a:	6838      	ldr	r0, [r7, #0]
 8003c6c:	f000 fb7e 	bl	800436c <prvAddCurrentTaskToDelayedList>
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	200002e8 	.word	0x200002e8

08003c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	60fb      	str	r3, [r7, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	3318      	adds	r3, #24
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe feab 	bl	8002a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <xTaskRemoveFromEventList+0xac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11c      	bne.n	8003cf4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fea2 	bl	8002a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	2201      	movs	r2, #1
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <xTaskRemoveFromEventList+0xb0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <xTaskRemoveFromEventList+0xb0>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <xTaskRemoveFromEventList+0xb4>)
 8003ce4:	441a      	add	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe fe2e 	bl	800294e <vListInsertEnd>
 8003cf2:	e005      	b.n	8003d00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	3318      	adds	r3, #24
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	480e      	ldr	r0, [pc, #56]	; (8003d34 <xTaskRemoveFromEventList+0xb8>)
 8003cfc:	f7fe fe27 	bl	800294e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <xTaskRemoveFromEventList+0xbc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d905      	bls.n	8003d1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <xTaskRemoveFromEventList+0xc0>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e001      	b.n	8003d1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d1e:	697b      	ldr	r3, [r7, #20]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000410 	.word	0x20000410
 8003d2c:	200003f0 	.word	0x200003f0
 8003d30:	200002ec 	.word	0x200002ec
 8003d34:	200003a8 	.word	0x200003a8
 8003d38:	200002e8 	.word	0x200002e8
 8003d3c:	200003fc 	.word	0x200003fc

08003d40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <vTaskInternalSetTimeOutState+0x24>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <vTaskInternalSetTimeOutState+0x28>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	605a      	str	r2, [r3, #4]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	20000400 	.word	0x20000400
 8003d68:	200003ec 	.word	0x200003ec

08003d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	613b      	str	r3, [r7, #16]
}
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dae:	f000 fc71 	bl	8004694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <xTaskCheckForTimeOut+0xbc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d102      	bne.n	8003dd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	e023      	b.n	8003e1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <xTaskCheckForTimeOut+0xc0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d007      	beq.n	8003dee <xTaskCheckForTimeOut+0x82>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e015      	b.n	8003e1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d20b      	bcs.n	8003e10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff9b 	bl	8003d40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e004      	b.n	8003e1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e1a:	f000 fc6b 	bl	80046f4 <vPortExitCritical>

	return xReturn;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200003ec 	.word	0x200003ec
 8003e2c:	20000400 	.word	0x20000400

08003e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <vTaskMissedYield+0x14>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	200003fc 	.word	0x200003fc

08003e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e50:	f000 f852 	bl	8003ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <prvIdleTask+0x28>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d9f9      	bls.n	8003e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <prvIdleTask+0x2c>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e6c:	e7f0      	b.n	8003e50 <prvIdleTask+0x8>
 8003e6e:	bf00      	nop
 8003e70:	200002ec 	.word	0x200002ec
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	e00c      	b.n	8003e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <prvInitialiseTaskLists+0x60>)
 8003e90:	4413      	add	r3, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fd2e 	bl	80028f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d9ef      	bls.n	8003e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <prvInitialiseTaskLists+0x64>)
 8003ea6:	f7fe fd25 	bl	80028f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003eaa:	480d      	ldr	r0, [pc, #52]	; (8003ee0 <prvInitialiseTaskLists+0x68>)
 8003eac:	f7fe fd22 	bl	80028f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003eb0:	480c      	ldr	r0, [pc, #48]	; (8003ee4 <prvInitialiseTaskLists+0x6c>)
 8003eb2:	f7fe fd1f 	bl	80028f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eb6:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <prvInitialiseTaskLists+0x70>)
 8003eb8:	f7fe fd1c 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <prvInitialiseTaskLists+0x74>)
 8003ebe:	f7fe fd19 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <prvInitialiseTaskLists+0x78>)
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <prvInitialiseTaskLists+0x64>)
 8003ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvInitialiseTaskLists+0x7c>)
 8003eca:	4a05      	ldr	r2, [pc, #20]	; (8003ee0 <prvInitialiseTaskLists+0x68>)
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200002ec 	.word	0x200002ec
 8003edc:	20000378 	.word	0x20000378
 8003ee0:	2000038c 	.word	0x2000038c
 8003ee4:	200003a8 	.word	0x200003a8
 8003ee8:	200003bc 	.word	0x200003bc
 8003eec:	200003d4 	.word	0x200003d4
 8003ef0:	200003a0 	.word	0x200003a0
 8003ef4:	200003a4 	.word	0x200003a4

08003ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003efe:	e019      	b.n	8003f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f00:	f000 fbc8 	bl	8004694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <prvCheckTasksWaitingTermination+0x50>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fd79 	bl	8002a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <prvCheckTasksWaitingTermination+0x54>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <prvCheckTasksWaitingTermination+0x54>)
 8003f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <prvCheckTasksWaitingTermination+0x58>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <prvCheckTasksWaitingTermination+0x58>)
 8003f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f2a:	f000 fbe3 	bl	80046f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f810 	bl	8003f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <prvCheckTasksWaitingTermination+0x58>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e1      	bne.n	8003f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200003bc 	.word	0x200003bc
 8003f4c:	200003e8 	.word	0x200003e8
 8003f50:	200003d0 	.word	0x200003d0

08003f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fd40 	bl	80049f0 <vPortFree>
				vPortFree( pxTCB );
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fd3d 	bl	80049f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f76:	e018      	b.n	8003faa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d103      	bne.n	8003f8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fd34 	bl	80049f0 <vPortFree>
	}
 8003f88:	e00f      	b.n	8003faa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00a      	beq.n	8003faa <prvDeleteTCB+0x56>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <prvDeleteTCB+0x54>
	}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <prvResetNextTaskUnblockTime+0x38>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fcc:	e008      	b.n	8003fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <prvResetNextTaskUnblockTime+0x38>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	200003a0 	.word	0x200003a0
 8003ff0:	20000408 	.word	0x20000408

08003ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <xTaskGetSchedulerState+0x34>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004002:	2301      	movs	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	e008      	b.n	800401a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <xTaskGetSchedulerState+0x38>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004010:	2302      	movs	r3, #2
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	e001      	b.n	800401a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800401a:	687b      	ldr	r3, [r7, #4]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	200003f4 	.word	0x200003f4
 800402c:	20000410 	.word	0x20000410

08004030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05e      	beq.n	8004104 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4b31      	ldr	r3, [pc, #196]	; (8004110 <xTaskPriorityInherit+0xe0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d24e      	bcs.n	80040f2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db06      	blt.n	800406a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <xTaskPriorityInherit+0xe0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f1c3 0207 	rsb	r2, r3, #7
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6959      	ldr	r1, [r3, #20]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a26      	ldr	r2, [pc, #152]	; (8004114 <xTaskPriorityInherit+0xe4>)
 800407c:	4413      	add	r3, r2
 800407e:	4299      	cmp	r1, r3
 8004080:	d12f      	bne.n	80040e2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fcbe 	bl	8002a08 <uxListRemove>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43da      	mvns	r2, r3
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4013      	ands	r3, r2
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <xTaskPriorityInherit+0xe0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	4a15      	ldr	r2, [pc, #84]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4a10      	ldr	r2, [pc, #64]	; (8004114 <xTaskPriorityInherit+0xe4>)
 80040d2:	441a      	add	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f7fe fc37 	bl	800294e <vListInsertEnd>
 80040e0:	e004      	b.n	80040ec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <xTaskPriorityInherit+0xe0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e008      	b.n	8004104 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <xTaskPriorityInherit+0xe0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d201      	bcs.n	8004104 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004104:	68fb      	ldr	r3, [r7, #12]
	}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200002e8 	.word	0x200002e8
 8004114:	200002ec 	.word	0x200002ec
 8004118:	200003f0 	.word	0x200003f0

0800411c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d06e      	beq.n	8004210 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004132:	4b3a      	ldr	r3, [pc, #232]	; (800421c <xTaskPriorityDisinherit+0x100>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d00a      	beq.n	8004152 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60bb      	str	r3, [r7, #8]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	429a      	cmp	r2, r3
 8004184:	d044      	beq.n	8004210 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418a:	2b00      	cmp	r3, #0
 800418c:	d140      	bne.n	8004210 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc38 	bl	8002a08 <uxListRemove>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	491f      	ldr	r1, [pc, #124]	; (8004220 <xTaskPriorityDisinherit+0x104>)
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xTaskPriorityDisinherit+0xae>
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	2201      	movs	r2, #1
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <xTaskPriorityDisinherit+0x108>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4013      	ands	r3, r2
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <xTaskPriorityDisinherit+0x108>)
 80041c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	f1c3 0207 	rsb	r2, r3, #7
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <xTaskPriorityDisinherit+0x108>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <xTaskPriorityDisinherit+0x108>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <xTaskPriorityDisinherit+0x104>)
 80041fe:	441a      	add	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	3304      	adds	r3, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f7fe fba1 	bl	800294e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004210:	697b      	ldr	r3, [r7, #20]
	}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200002e8 	.word	0x200002e8
 8004220:	200002ec 	.word	0x200002ec
 8004224:	200003f0 	.word	0x200003f0

08004228 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d077      	beq.n	8004330 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	60fb      	str	r3, [r7, #12]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d902      	bls.n	800426e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e002      	b.n	8004274 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	429a      	cmp	r2, r3
 800427c:	d058      	beq.n	8004330 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d153      	bne.n	8004330 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	429a      	cmp	r2, r3
 8004290:	d10a      	bne.n	80042a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60bb      	str	r3, [r7, #8]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db04      	blt.n	80042c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f1c3 0207 	rsb	r2, r3, #7
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	6959      	ldr	r1, [r3, #20]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042d6:	4413      	add	r3, r2
 80042d8:	4299      	cmp	r1, r3
 80042da:	d129      	bne.n	8004330 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	3304      	adds	r3, #4
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fb91 	bl	8002a08 <uxListRemove>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2201      	movs	r2, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43da      	mvns	r2, r3
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4013      	ands	r3, r2
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004300:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	2201      	movs	r2, #1
 8004308:	409a      	lsls	r2, r3
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4a06      	ldr	r2, [pc, #24]	; (800433c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004322:	441a      	add	r2, r3
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7fe fb0f 	bl	800294e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004330:	bf00      	nop
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	200002e8 	.word	0x200002e8
 800433c:	200002ec 	.word	0x200002ec
 8004340:	200003f0 	.word	0x200003f0

08004344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <pvTaskIncrementMutexHeldCount+0x24>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <pvTaskIncrementMutexHeldCount+0x24>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004356:	3201      	adds	r2, #1
 8004358:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800435a:	4b03      	ldr	r3, [pc, #12]	; (8004368 <pvTaskIncrementMutexHeldCount+0x24>)
 800435c:	681b      	ldr	r3, [r3, #0]
	}
 800435e:	4618      	mov	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	200002e8 	.word	0x200002e8

0800436c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fb40 	bl	8002a08 <uxListRemove>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2201      	movs	r2, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	4b21      	ldr	r3, [pc, #132]	; (8004424 <prvAddCurrentTaskToDelayedList+0xb8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4013      	ands	r3, r2
 80043a2:	4a20      	ldr	r2, [pc, #128]	; (8004424 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d10a      	bne.n	80043c4 <prvAddCurrentTaskToDelayedList+0x58>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b4:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	481a      	ldr	r0, [pc, #104]	; (8004428 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043be:	f7fe fac6 	bl	800294e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043c2:	e026      	b.n	8004412 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d209      	bcs.n	80043f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <prvAddCurrentTaskToDelayedList+0xc0>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f7fe fad4 	bl	8002996 <vListInsert>
}
 80043ee:	e010      	b.n	8004412 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f7fe faca 	bl	8002996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	d202      	bcs.n	8004412 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <prvAddCurrentTaskToDelayedList+0xc8>)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6013      	str	r3, [r2, #0]
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200003ec 	.word	0x200003ec
 8004420:	200002e8 	.word	0x200002e8
 8004424:	200003f0 	.word	0x200003f0
 8004428:	200003d4 	.word	0x200003d4
 800442c:	200003a4 	.word	0x200003a4
 8004430:	200003a0 	.word	0x200003a0
 8004434:	20000408 	.word	0x20000408

08004438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b04      	subs	r3, #4
 8004448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3b04      	subs	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b04      	subs	r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004468:	4a0c      	ldr	r2, [pc, #48]	; (800449c <pxPortInitialiseStack+0x64>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b14      	subs	r3, #20
 8004472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3b04      	subs	r3, #4
 800447e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f06f 0202 	mvn.w	r2, #2
 8004486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b20      	subs	r3, #32
 800448c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800448e:	68fb      	ldr	r3, [r7, #12]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	080044a1 	.word	0x080044a1

080044a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <prvTaskExitError+0x54>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d00a      	beq.n	80044ca <prvTaskExitError+0x2a>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <prvTaskExitError+0x28>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60bb      	str	r3, [r7, #8]
}
 80044dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044de:	bf00      	nop
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0fc      	beq.n	80044e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	2000000c 	.word	0x2000000c
	...

08004500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <pxCurrentTCBConst2>)
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	6808      	ldr	r0, [r1, #0]
 8004506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450a:	f380 8809 	msr	PSP, r0
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f380 8811 	msr	BASEPRI, r0
 800451a:	4770      	bx	lr
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst2>:
 8004520:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004528:	4808      	ldr	r0, [pc, #32]	; (800454c <prvPortStartFirstTask+0x24>)
 800452a:	6800      	ldr	r0, [r0, #0]
 800452c:	6800      	ldr	r0, [r0, #0]
 800452e:	f380 8808 	msr	MSP, r0
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8814 	msr	CONTROL, r0
 800453a:	b662      	cpsie	i
 800453c:	b661      	cpsie	f
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	df00      	svc	0
 8004548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800454a:	bf00      	nop
 800454c:	e000ed08 	.word	0xe000ed08

08004550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004556:	4b46      	ldr	r3, [pc, #280]	; (8004670 <xPortStartScheduler+0x120>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a46      	ldr	r2, [pc, #280]	; (8004674 <xPortStartScheduler+0x124>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10a      	bne.n	8004576 <xPortStartScheduler+0x26>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	613b      	str	r3, [r7, #16]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004576:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <xPortStartScheduler+0x120>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <xPortStartScheduler+0x128>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10a      	bne.n	8004596 <xPortStartScheduler+0x46>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <xPortStartScheduler+0x12c>)
 8004598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b31      	ldr	r3, [pc, #196]	; (8004680 <xPortStartScheduler+0x130>)
 80045bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <xPortStartScheduler+0x134>)
 80045c0:	2207      	movs	r2, #7
 80045c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c4:	e009      	b.n	80045da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80045c6:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <xPortStartScheduler+0x134>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	4a2d      	ldr	r2, [pc, #180]	; (8004684 <xPortStartScheduler+0x134>)
 80045ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d0ef      	beq.n	80045c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045e6:	4b27      	ldr	r3, [pc, #156]	; (8004684 <xPortStartScheduler+0x134>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1c3 0307 	rsb	r3, r3, #7
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d00a      	beq.n	8004608 <xPortStartScheduler+0xb8>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	60bb      	str	r3, [r7, #8]
}
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <xPortStartScheduler+0x134>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <xPortStartScheduler+0x134>)
 8004610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <xPortStartScheduler+0x134>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800461a:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <xPortStartScheduler+0x134>)
 800461c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <xPortStartScheduler+0x138>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <xPortStartScheduler+0x138>)
 800462c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <xPortStartScheduler+0x138>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a14      	ldr	r2, [pc, #80]	; (8004688 <xPortStartScheduler+0x138>)
 8004638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800463c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800463e:	f000 f8dd 	bl	80047fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <xPortStartScheduler+0x13c>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004648:	f000 f8fc 	bl	8004844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800464c:	4b10      	ldr	r3, [pc, #64]	; (8004690 <xPortStartScheduler+0x140>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <xPortStartScheduler+0x140>)
 8004652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004658:	f7ff ff66 	bl	8004528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800465c:	f7ff fa8e 	bl	8003b7c <vTaskSwitchContext>
	prvTaskExitError();
 8004660:	f7ff ff1e 	bl	80044a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00
 8004674:	410fc271 	.word	0x410fc271
 8004678:	410fc270 	.word	0x410fc270
 800467c:	e000e400 	.word	0xe000e400
 8004680:	20000414 	.word	0x20000414
 8004684:	20000418 	.word	0x20000418
 8004688:	e000ed20 	.word	0xe000ed20
 800468c:	2000000c 	.word	0x2000000c
 8004690:	e000ef34 	.word	0xe000ef34

08004694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	607b      	str	r3, [r7, #4]
}
 80046ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <vPortEnterCritical+0x58>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <vPortEnterCritical+0x58>)
 80046b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <vPortEnterCritical+0x58>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10f      	bne.n	80046e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <vPortEnterCritical+0x5c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	603b      	str	r3, [r7, #0]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <vPortEnterCritical+0x4a>
	}
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	2000000c 	.word	0x2000000c
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <vPortExitCritical+0x50>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <vPortExitCritical+0x24>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <vPortExitCritical+0x50>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <vPortExitCritical+0x50>)
 8004720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <vPortExitCritical+0x50>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d105      	bne.n	8004736 <vPortExitCritical+0x42>
 800472a:	2300      	movs	r3, #0
 800472c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	2000000c 	.word	0x2000000c
	...

08004750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004750:	f3ef 8009 	mrs	r0, PSP
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <pxCurrentTCBConst>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f01e 0f10 	tst.w	lr, #16
 8004760:	bf08      	it	eq
 8004762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	6010      	str	r0, [r2, #0]
 800476c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004774:	f380 8811 	msr	BASEPRI, r0
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f7ff f9fc 	bl	8003b7c <vTaskSwitchContext>
 8004784:	f04f 0000 	mov.w	r0, #0
 8004788:	f380 8811 	msr	BASEPRI, r0
 800478c:	bc09      	pop	{r0, r3}
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004796:	f01e 0f10 	tst.w	lr, #16
 800479a:	bf08      	it	eq
 800479c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047a0:	f380 8809 	msr	PSP, r0
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w

080047b0 <pxCurrentTCBConst>:
 80047b0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047d2:	f7ff f91b 	bl	8003a0c <xTaskIncrementTick>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <SysTick_Handler+0x40>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	2300      	movs	r3, #0
 80047e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f383 8811 	msr	BASEPRI, r3
}
 80047ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <vPortSetupTimerInterrupt+0x34>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <vPortSetupTimerInterrupt+0x38>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <vPortSetupTimerInterrupt+0x3c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <vPortSetupTimerInterrupt+0x40>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <vPortSetupTimerInterrupt+0x44>)
 800481a:	3b01      	subs	r3, #1
 800481c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <vPortSetupTimerInterrupt+0x34>)
 8004820:	2207      	movs	r2, #7
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000e010 	.word	0xe000e010
 8004834:	e000e018 	.word	0xe000e018
 8004838:	20000000 	.word	0x20000000
 800483c:	10624dd3 	.word	0x10624dd3
 8004840:	e000e014 	.word	0xe000e014

08004844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004854 <vPortEnableVFP+0x10>
 8004848:	6801      	ldr	r1, [r0, #0]
 800484a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800484e:	6001      	str	r1, [r0, #0]
 8004850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004852:	bf00      	nop
 8004854:	e000ed88 	.word	0xe000ed88

08004858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004864:	f7ff f828 	bl	80038b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <pvPortMalloc+0x180>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004870:	f000 f920 	bl	8004ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <pvPortMalloc+0x184>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8093 	bne.w	80049a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01d      	beq.n	80048c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004888:	2208      	movs	r2, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f023 0307 	bic.w	r3, r3, #7
 80048a0:	3308      	adds	r3, #8
 80048a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <pvPortMalloc+0x6c>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	617b      	str	r3, [r7, #20]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d06e      	beq.n	80049a8 <pvPortMalloc+0x150>
 80048ca:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <pvPortMalloc+0x188>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d869      	bhi.n	80049a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048d4:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <pvPortMalloc+0x18c>)
 80048d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048d8:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <pvPortMalloc+0x18c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048de:	e004      	b.n	80048ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d903      	bls.n	80048fc <pvPortMalloc+0xa4>
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f1      	bne.n	80048e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <pvPortMalloc+0x180>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	429a      	cmp	r2, r3
 8004904:	d050      	beq.n	80049a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2208      	movs	r2, #8
 800490c:	4413      	add	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	2308      	movs	r3, #8
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	429a      	cmp	r2, r3
 8004926:	d91f      	bls.n	8004968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <pvPortMalloc+0xf8>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	613b      	str	r3, [r7, #16]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004962:	69b8      	ldr	r0, [r7, #24]
 8004964:	f000 f908 	bl	8004b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <pvPortMalloc+0x188>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <pvPortMalloc+0x188>)
 8004974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <pvPortMalloc+0x188>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <pvPortMalloc+0x190>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d203      	bcs.n	800498a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <pvPortMalloc+0x188>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <pvPortMalloc+0x190>)
 8004988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <pvPortMalloc+0x184>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	431a      	orrs	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <pvPortMalloc+0x194>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <pvPortMalloc+0x194>)
 80049a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049a8:	f7fe ff94 	bl	80038d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <pvPortMalloc+0x174>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60fb      	str	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <pvPortMalloc+0x172>
	return pvReturn;
 80049cc:	69fb      	ldr	r3, [r7, #28]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3728      	adds	r7, #40	; 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20004024 	.word	0x20004024
 80049dc:	20004038 	.word	0x20004038
 80049e0:	20004028 	.word	0x20004028
 80049e4:	2000401c 	.word	0x2000401c
 80049e8:	2000402c 	.word	0x2000402c
 80049ec:	20004030 	.word	0x20004030

080049f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04d      	beq.n	8004a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a02:	2308      	movs	r3, #8
 8004a04:	425b      	negs	r3, r3
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4413      	add	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <vPortFree+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <vPortFree+0x44>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <vPortFree+0x62>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60bb      	str	r3, [r7, #8]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <vPortFree+0xb8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11a      	bne.n	8004a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <vPortFree+0xb8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a78:	f7fe ff1e 	bl	80038b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <vPortFree+0xbc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4413      	add	r3, r2
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <vPortFree+0xbc>)
 8004a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a8a:	6938      	ldr	r0, [r7, #16]
 8004a8c:	f000 f874 	bl	8004b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <vPortFree+0xc0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	4a06      	ldr	r2, [pc, #24]	; (8004ab0 <vPortFree+0xc0>)
 8004a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a9a:	f7fe ff1b 	bl	80038d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20004038 	.word	0x20004038
 8004aac:	20004028 	.word	0x20004028
 8004ab0:	20004034 	.word	0x20004034

08004ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <prvHeapInit+0xac>)
 8004ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3307      	adds	r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <prvHeapInit+0xac>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <prvHeapInit+0xb0>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <prvHeapInit+0xb0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b00:	2208      	movs	r2, #8
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <prvHeapInit+0xb4>)
 8004b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <prvHeapInit+0xb4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <prvHeapInit+0xb4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <prvHeapInit+0xb4>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <prvHeapInit+0xb8>)
 8004b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <prvHeapInit+0xbc>)
 8004b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <prvHeapInit+0xc0>)
 8004b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	2000041c 	.word	0x2000041c
 8004b64:	2000401c 	.word	0x2000401c
 8004b68:	20004024 	.word	0x20004024
 8004b6c:	2000402c 	.word	0x2000402c
 8004b70:	20004028 	.word	0x20004028
 8004b74:	20004038 	.word	0x20004038

08004b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <prvInsertBlockIntoFreeList+0xac>)
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e002      	b.n	8004b8c <prvInsertBlockIntoFreeList+0x14>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d8f7      	bhi.n	8004b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d108      	bne.n	8004bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d118      	bne.n	8004c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <prvInsertBlockIntoFreeList+0xb0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d00d      	beq.n	8004bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e008      	b.n	8004c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <prvInsertBlockIntoFreeList+0xb0>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e003      	b.n	8004c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d002      	beq.n	8004c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000401c 	.word	0x2000401c
 8004c28:	20004024 	.word	0x20004024

08004c2c <__errno>:
 8004c2c:	4b01      	ldr	r3, [pc, #4]	; (8004c34 <__errno+0x8>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000010 	.word	0x20000010

08004c38 <__libc_init_array>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4d0d      	ldr	r5, [pc, #52]	; (8004c70 <__libc_init_array+0x38>)
 8004c3c:	4c0d      	ldr	r4, [pc, #52]	; (8004c74 <__libc_init_array+0x3c>)
 8004c3e:	1b64      	subs	r4, r4, r5
 8004c40:	10a4      	asrs	r4, r4, #2
 8004c42:	2600      	movs	r6, #0
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	d109      	bne.n	8004c5c <__libc_init_array+0x24>
 8004c48:	4d0b      	ldr	r5, [pc, #44]	; (8004c78 <__libc_init_array+0x40>)
 8004c4a:	4c0c      	ldr	r4, [pc, #48]	; (8004c7c <__libc_init_array+0x44>)
 8004c4c:	f000 fc4e 	bl	80054ec <_init>
 8004c50:	1b64      	subs	r4, r4, r5
 8004c52:	10a4      	asrs	r4, r4, #2
 8004c54:	2600      	movs	r6, #0
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d105      	bne.n	8004c66 <__libc_init_array+0x2e>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c60:	4798      	blx	r3
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7ee      	b.n	8004c44 <__libc_init_array+0xc>
 8004c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6a:	4798      	blx	r3
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	e7f2      	b.n	8004c56 <__libc_init_array+0x1e>
 8004c70:	080057d4 	.word	0x080057d4
 8004c74:	080057d4 	.word	0x080057d4
 8004c78:	080057d4 	.word	0x080057d4
 8004c7c:	080057d8 	.word	0x080057d8

08004c80 <memcpy>:
 8004c80:	440a      	add	r2, r1
 8004c82:	4291      	cmp	r1, r2
 8004c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c88:	d100      	bne.n	8004c8c <memcpy+0xc>
 8004c8a:	4770      	bx	lr
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c96:	4291      	cmp	r1, r2
 8004c98:	d1f9      	bne.n	8004c8e <memcpy+0xe>
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <siprintf>:
 8004cac:	b40e      	push	{r1, r2, r3}
 8004cae:	b500      	push	{lr}
 8004cb0:	b09c      	sub	sp, #112	; 0x70
 8004cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cb4:	9002      	str	r0, [sp, #8]
 8004cb6:	9006      	str	r0, [sp, #24]
 8004cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cbc:	4809      	ldr	r0, [pc, #36]	; (8004ce4 <siprintf+0x38>)
 8004cbe:	9107      	str	r1, [sp, #28]
 8004cc0:	9104      	str	r1, [sp, #16]
 8004cc2:	4909      	ldr	r1, [pc, #36]	; (8004ce8 <siprintf+0x3c>)
 8004cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cc8:	9105      	str	r1, [sp, #20]
 8004cca:	6800      	ldr	r0, [r0, #0]
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	a902      	add	r1, sp, #8
 8004cd0:	f000 f868 	bl	8004da4 <_svfiprintf_r>
 8004cd4:	9b02      	ldr	r3, [sp, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	b01c      	add	sp, #112	; 0x70
 8004cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce0:	b003      	add	sp, #12
 8004ce2:	4770      	bx	lr
 8004ce4:	20000010 	.word	0x20000010
 8004ce8:	ffff0208 	.word	0xffff0208

08004cec <__ssputs_r>:
 8004cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf0:	688e      	ldr	r6, [r1, #8]
 8004cf2:	429e      	cmp	r6, r3
 8004cf4:	4682      	mov	sl, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4690      	mov	r8, r2
 8004cfa:	461f      	mov	r7, r3
 8004cfc:	d838      	bhi.n	8004d70 <__ssputs_r+0x84>
 8004cfe:	898a      	ldrh	r2, [r1, #12]
 8004d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d04:	d032      	beq.n	8004d6c <__ssputs_r+0x80>
 8004d06:	6825      	ldr	r5, [r4, #0]
 8004d08:	6909      	ldr	r1, [r1, #16]
 8004d0a:	eba5 0901 	sub.w	r9, r5, r1
 8004d0e:	6965      	ldr	r5, [r4, #20]
 8004d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d18:	3301      	adds	r3, #1
 8004d1a:	444b      	add	r3, r9
 8004d1c:	106d      	asrs	r5, r5, #1
 8004d1e:	429d      	cmp	r5, r3
 8004d20:	bf38      	it	cc
 8004d22:	461d      	movcc	r5, r3
 8004d24:	0553      	lsls	r3, r2, #21
 8004d26:	d531      	bpl.n	8004d8c <__ssputs_r+0xa0>
 8004d28:	4629      	mov	r1, r5
 8004d2a:	f000 fb39 	bl	80053a0 <_malloc_r>
 8004d2e:	4606      	mov	r6, r0
 8004d30:	b950      	cbnz	r0, 8004d48 <__ssputs_r+0x5c>
 8004d32:	230c      	movs	r3, #12
 8004d34:	f8ca 3000 	str.w	r3, [sl]
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d48:	6921      	ldr	r1, [r4, #16]
 8004d4a:	464a      	mov	r2, r9
 8004d4c:	f7ff ff98 	bl	8004c80 <memcpy>
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	81a3      	strh	r3, [r4, #12]
 8004d5c:	6126      	str	r6, [r4, #16]
 8004d5e:	6165      	str	r5, [r4, #20]
 8004d60:	444e      	add	r6, r9
 8004d62:	eba5 0509 	sub.w	r5, r5, r9
 8004d66:	6026      	str	r6, [r4, #0]
 8004d68:	60a5      	str	r5, [r4, #8]
 8004d6a:	463e      	mov	r6, r7
 8004d6c:	42be      	cmp	r6, r7
 8004d6e:	d900      	bls.n	8004d72 <__ssputs_r+0x86>
 8004d70:	463e      	mov	r6, r7
 8004d72:	4632      	mov	r2, r6
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	4641      	mov	r1, r8
 8004d78:	f000 faa8 	bl	80052cc <memmove>
 8004d7c:	68a3      	ldr	r3, [r4, #8]
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	1b9b      	subs	r3, r3, r6
 8004d82:	4432      	add	r2, r6
 8004d84:	60a3      	str	r3, [r4, #8]
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e7db      	b.n	8004d44 <__ssputs_r+0x58>
 8004d8c:	462a      	mov	r2, r5
 8004d8e:	f000 fb61 	bl	8005454 <_realloc_r>
 8004d92:	4606      	mov	r6, r0
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d1e1      	bne.n	8004d5c <__ssputs_r+0x70>
 8004d98:	6921      	ldr	r1, [r4, #16]
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	f000 fab0 	bl	8005300 <_free_r>
 8004da0:	e7c7      	b.n	8004d32 <__ssputs_r+0x46>
	...

08004da4 <_svfiprintf_r>:
 8004da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da8:	4698      	mov	r8, r3
 8004daa:	898b      	ldrh	r3, [r1, #12]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	b09d      	sub	sp, #116	; 0x74
 8004db0:	4607      	mov	r7, r0
 8004db2:	460d      	mov	r5, r1
 8004db4:	4614      	mov	r4, r2
 8004db6:	d50e      	bpl.n	8004dd6 <_svfiprintf_r+0x32>
 8004db8:	690b      	ldr	r3, [r1, #16]
 8004dba:	b963      	cbnz	r3, 8004dd6 <_svfiprintf_r+0x32>
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	f000 faef 	bl	80053a0 <_malloc_r>
 8004dc2:	6028      	str	r0, [r5, #0]
 8004dc4:	6128      	str	r0, [r5, #16]
 8004dc6:	b920      	cbnz	r0, 8004dd2 <_svfiprintf_r+0x2e>
 8004dc8:	230c      	movs	r3, #12
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e0d1      	b.n	8004f76 <_svfiprintf_r+0x1d2>
 8004dd2:	2340      	movs	r3, #64	; 0x40
 8004dd4:	616b      	str	r3, [r5, #20]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dda:	2320      	movs	r3, #32
 8004ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004de4:	2330      	movs	r3, #48	; 0x30
 8004de6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f90 <_svfiprintf_r+0x1ec>
 8004dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dee:	f04f 0901 	mov.w	r9, #1
 8004df2:	4623      	mov	r3, r4
 8004df4:	469a      	mov	sl, r3
 8004df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dfa:	b10a      	cbz	r2, 8004e00 <_svfiprintf_r+0x5c>
 8004dfc:	2a25      	cmp	r2, #37	; 0x25
 8004dfe:	d1f9      	bne.n	8004df4 <_svfiprintf_r+0x50>
 8004e00:	ebba 0b04 	subs.w	fp, sl, r4
 8004e04:	d00b      	beq.n	8004e1e <_svfiprintf_r+0x7a>
 8004e06:	465b      	mov	r3, fp
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7ff ff6d 	bl	8004cec <__ssputs_r>
 8004e12:	3001      	adds	r0, #1
 8004e14:	f000 80aa 	beq.w	8004f6c <_svfiprintf_r+0x1c8>
 8004e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e1a:	445a      	add	r2, fp
 8004e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80a2 	beq.w	8004f6c <_svfiprintf_r+0x1c8>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e32:	f10a 0a01 	add.w	sl, sl, #1
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	9307      	str	r3, [sp, #28]
 8004e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e40:	4654      	mov	r4, sl
 8004e42:	2205      	movs	r2, #5
 8004e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e48:	4851      	ldr	r0, [pc, #324]	; (8004f90 <_svfiprintf_r+0x1ec>)
 8004e4a:	f7fb f9c9 	bl	80001e0 <memchr>
 8004e4e:	9a04      	ldr	r2, [sp, #16]
 8004e50:	b9d8      	cbnz	r0, 8004e8a <_svfiprintf_r+0xe6>
 8004e52:	06d0      	lsls	r0, r2, #27
 8004e54:	bf44      	itt	mi
 8004e56:	2320      	movmi	r3, #32
 8004e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e5c:	0711      	lsls	r1, r2, #28
 8004e5e:	bf44      	itt	mi
 8004e60:	232b      	movmi	r3, #43	; 0x2b
 8004e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e66:	f89a 3000 	ldrb.w	r3, [sl]
 8004e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e6c:	d015      	beq.n	8004e9a <_svfiprintf_r+0xf6>
 8004e6e:	9a07      	ldr	r2, [sp, #28]
 8004e70:	4654      	mov	r4, sl
 8004e72:	2000      	movs	r0, #0
 8004e74:	f04f 0c0a 	mov.w	ip, #10
 8004e78:	4621      	mov	r1, r4
 8004e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e7e:	3b30      	subs	r3, #48	; 0x30
 8004e80:	2b09      	cmp	r3, #9
 8004e82:	d94e      	bls.n	8004f22 <_svfiprintf_r+0x17e>
 8004e84:	b1b0      	cbz	r0, 8004eb4 <_svfiprintf_r+0x110>
 8004e86:	9207      	str	r2, [sp, #28]
 8004e88:	e014      	b.n	8004eb4 <_svfiprintf_r+0x110>
 8004e8a:	eba0 0308 	sub.w	r3, r0, r8
 8004e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e92:	4313      	orrs	r3, r2
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	46a2      	mov	sl, r4
 8004e98:	e7d2      	b.n	8004e40 <_svfiprintf_r+0x9c>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	1d19      	adds	r1, r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	9103      	str	r1, [sp, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bfbb      	ittet	lt
 8004ea6:	425b      	neglt	r3, r3
 8004ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8004eac:	9307      	strge	r3, [sp, #28]
 8004eae:	9307      	strlt	r3, [sp, #28]
 8004eb0:	bfb8      	it	lt
 8004eb2:	9204      	strlt	r2, [sp, #16]
 8004eb4:	7823      	ldrb	r3, [r4, #0]
 8004eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8004eb8:	d10c      	bne.n	8004ed4 <_svfiprintf_r+0x130>
 8004eba:	7863      	ldrb	r3, [r4, #1]
 8004ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ebe:	d135      	bne.n	8004f2c <_svfiprintf_r+0x188>
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	9203      	str	r2, [sp, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bfb8      	it	lt
 8004ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ed0:	3402      	adds	r4, #2
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004fa0 <_svfiprintf_r+0x1fc>
 8004ed8:	7821      	ldrb	r1, [r4, #0]
 8004eda:	2203      	movs	r2, #3
 8004edc:	4650      	mov	r0, sl
 8004ede:	f7fb f97f 	bl	80001e0 <memchr>
 8004ee2:	b140      	cbz	r0, 8004ef6 <_svfiprintf_r+0x152>
 8004ee4:	2340      	movs	r3, #64	; 0x40
 8004ee6:	eba0 000a 	sub.w	r0, r0, sl
 8004eea:	fa03 f000 	lsl.w	r0, r3, r0
 8004eee:	9b04      	ldr	r3, [sp, #16]
 8004ef0:	4303      	orrs	r3, r0
 8004ef2:	3401      	adds	r4, #1
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efa:	4826      	ldr	r0, [pc, #152]	; (8004f94 <_svfiprintf_r+0x1f0>)
 8004efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f00:	2206      	movs	r2, #6
 8004f02:	f7fb f96d 	bl	80001e0 <memchr>
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d038      	beq.n	8004f7c <_svfiprintf_r+0x1d8>
 8004f0a:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <_svfiprintf_r+0x1f4>)
 8004f0c:	bb1b      	cbnz	r3, 8004f56 <_svfiprintf_r+0x1b2>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	3307      	adds	r3, #7
 8004f12:	f023 0307 	bic.w	r3, r3, #7
 8004f16:	3308      	adds	r3, #8
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1c:	4433      	add	r3, r6
 8004f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f20:	e767      	b.n	8004df2 <_svfiprintf_r+0x4e>
 8004f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f26:	460c      	mov	r4, r1
 8004f28:	2001      	movs	r0, #1
 8004f2a:	e7a5      	b.n	8004e78 <_svfiprintf_r+0xd4>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	3401      	adds	r4, #1
 8004f30:	9305      	str	r3, [sp, #20]
 8004f32:	4619      	mov	r1, r3
 8004f34:	f04f 0c0a 	mov.w	ip, #10
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f3e:	3a30      	subs	r2, #48	; 0x30
 8004f40:	2a09      	cmp	r2, #9
 8004f42:	d903      	bls.n	8004f4c <_svfiprintf_r+0x1a8>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0c5      	beq.n	8004ed4 <_svfiprintf_r+0x130>
 8004f48:	9105      	str	r1, [sp, #20]
 8004f4a:	e7c3      	b.n	8004ed4 <_svfiprintf_r+0x130>
 8004f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f50:	4604      	mov	r4, r0
 8004f52:	2301      	movs	r3, #1
 8004f54:	e7f0      	b.n	8004f38 <_svfiprintf_r+0x194>
 8004f56:	ab03      	add	r3, sp, #12
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	462a      	mov	r2, r5
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <_svfiprintf_r+0x1f8>)
 8004f5e:	a904      	add	r1, sp, #16
 8004f60:	4638      	mov	r0, r7
 8004f62:	f3af 8000 	nop.w
 8004f66:	1c42      	adds	r2, r0, #1
 8004f68:	4606      	mov	r6, r0
 8004f6a:	d1d6      	bne.n	8004f1a <_svfiprintf_r+0x176>
 8004f6c:	89ab      	ldrh	r3, [r5, #12]
 8004f6e:	065b      	lsls	r3, r3, #25
 8004f70:	f53f af2c 	bmi.w	8004dcc <_svfiprintf_r+0x28>
 8004f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f76:	b01d      	add	sp, #116	; 0x74
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7c:	ab03      	add	r3, sp, #12
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	462a      	mov	r2, r5
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <_svfiprintf_r+0x1f8>)
 8004f84:	a904      	add	r1, sp, #16
 8004f86:	4638      	mov	r0, r7
 8004f88:	f000 f87a 	bl	8005080 <_printf_i>
 8004f8c:	e7eb      	b.n	8004f66 <_svfiprintf_r+0x1c2>
 8004f8e:	bf00      	nop
 8004f90:	08005798 	.word	0x08005798
 8004f94:	080057a2 	.word	0x080057a2
 8004f98:	00000000 	.word	0x00000000
 8004f9c:	08004ced 	.word	0x08004ced
 8004fa0:	0800579e 	.word	0x0800579e

08004fa4 <_printf_common>:
 8004fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	4616      	mov	r6, r2
 8004faa:	4699      	mov	r9, r3
 8004fac:	688a      	ldr	r2, [r1, #8]
 8004fae:	690b      	ldr	r3, [r1, #16]
 8004fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	bfb8      	it	lt
 8004fb8:	4613      	movlt	r3, r2
 8004fba:	6033      	str	r3, [r6, #0]
 8004fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	b10a      	cbz	r2, 8004fca <_printf_common+0x26>
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	6033      	str	r3, [r6, #0]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	0699      	lsls	r1, r3, #26
 8004fce:	bf42      	ittt	mi
 8004fd0:	6833      	ldrmi	r3, [r6, #0]
 8004fd2:	3302      	addmi	r3, #2
 8004fd4:	6033      	strmi	r3, [r6, #0]
 8004fd6:	6825      	ldr	r5, [r4, #0]
 8004fd8:	f015 0506 	ands.w	r5, r5, #6
 8004fdc:	d106      	bne.n	8004fec <_printf_common+0x48>
 8004fde:	f104 0a19 	add.w	sl, r4, #25
 8004fe2:	68e3      	ldr	r3, [r4, #12]
 8004fe4:	6832      	ldr	r2, [r6, #0]
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	42ab      	cmp	r3, r5
 8004fea:	dc26      	bgt.n	800503a <_printf_common+0x96>
 8004fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ff0:	1e13      	subs	r3, r2, #0
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	bf18      	it	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	0692      	lsls	r2, r2, #26
 8004ffa:	d42b      	bmi.n	8005054 <_printf_common+0xb0>
 8004ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005000:	4649      	mov	r1, r9
 8005002:	4638      	mov	r0, r7
 8005004:	47c0      	blx	r8
 8005006:	3001      	adds	r0, #1
 8005008:	d01e      	beq.n	8005048 <_printf_common+0xa4>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	68e5      	ldr	r5, [r4, #12]
 800500e:	6832      	ldr	r2, [r6, #0]
 8005010:	f003 0306 	and.w	r3, r3, #6
 8005014:	2b04      	cmp	r3, #4
 8005016:	bf08      	it	eq
 8005018:	1aad      	subeq	r5, r5, r2
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	bf0c      	ite	eq
 8005020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005024:	2500      	movne	r5, #0
 8005026:	4293      	cmp	r3, r2
 8005028:	bfc4      	itt	gt
 800502a:	1a9b      	subgt	r3, r3, r2
 800502c:	18ed      	addgt	r5, r5, r3
 800502e:	2600      	movs	r6, #0
 8005030:	341a      	adds	r4, #26
 8005032:	42b5      	cmp	r5, r6
 8005034:	d11a      	bne.n	800506c <_printf_common+0xc8>
 8005036:	2000      	movs	r0, #0
 8005038:	e008      	b.n	800504c <_printf_common+0xa8>
 800503a:	2301      	movs	r3, #1
 800503c:	4652      	mov	r2, sl
 800503e:	4649      	mov	r1, r9
 8005040:	4638      	mov	r0, r7
 8005042:	47c0      	blx	r8
 8005044:	3001      	adds	r0, #1
 8005046:	d103      	bne.n	8005050 <_printf_common+0xac>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005050:	3501      	adds	r5, #1
 8005052:	e7c6      	b.n	8004fe2 <_printf_common+0x3e>
 8005054:	18e1      	adds	r1, r4, r3
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	2030      	movs	r0, #48	; 0x30
 800505a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800505e:	4422      	add	r2, r4
 8005060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005068:	3302      	adds	r3, #2
 800506a:	e7c7      	b.n	8004ffc <_printf_common+0x58>
 800506c:	2301      	movs	r3, #1
 800506e:	4622      	mov	r2, r4
 8005070:	4649      	mov	r1, r9
 8005072:	4638      	mov	r0, r7
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d0e6      	beq.n	8005048 <_printf_common+0xa4>
 800507a:	3601      	adds	r6, #1
 800507c:	e7d9      	b.n	8005032 <_printf_common+0x8e>
	...

08005080 <_printf_i>:
 8005080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	4691      	mov	r9, r2
 8005088:	7e27      	ldrb	r7, [r4, #24]
 800508a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800508c:	2f78      	cmp	r7, #120	; 0x78
 800508e:	4680      	mov	r8, r0
 8005090:	469a      	mov	sl, r3
 8005092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005096:	d807      	bhi.n	80050a8 <_printf_i+0x28>
 8005098:	2f62      	cmp	r7, #98	; 0x62
 800509a:	d80a      	bhi.n	80050b2 <_printf_i+0x32>
 800509c:	2f00      	cmp	r7, #0
 800509e:	f000 80d8 	beq.w	8005252 <_printf_i+0x1d2>
 80050a2:	2f58      	cmp	r7, #88	; 0x58
 80050a4:	f000 80a3 	beq.w	80051ee <_printf_i+0x16e>
 80050a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050b0:	e03a      	b.n	8005128 <_printf_i+0xa8>
 80050b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050b6:	2b15      	cmp	r3, #21
 80050b8:	d8f6      	bhi.n	80050a8 <_printf_i+0x28>
 80050ba:	a001      	add	r0, pc, #4	; (adr r0, 80050c0 <_printf_i+0x40>)
 80050bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050c0:	08005119 	.word	0x08005119
 80050c4:	0800512d 	.word	0x0800512d
 80050c8:	080050a9 	.word	0x080050a9
 80050cc:	080050a9 	.word	0x080050a9
 80050d0:	080050a9 	.word	0x080050a9
 80050d4:	080050a9 	.word	0x080050a9
 80050d8:	0800512d 	.word	0x0800512d
 80050dc:	080050a9 	.word	0x080050a9
 80050e0:	080050a9 	.word	0x080050a9
 80050e4:	080050a9 	.word	0x080050a9
 80050e8:	080050a9 	.word	0x080050a9
 80050ec:	08005239 	.word	0x08005239
 80050f0:	0800515d 	.word	0x0800515d
 80050f4:	0800521b 	.word	0x0800521b
 80050f8:	080050a9 	.word	0x080050a9
 80050fc:	080050a9 	.word	0x080050a9
 8005100:	0800525b 	.word	0x0800525b
 8005104:	080050a9 	.word	0x080050a9
 8005108:	0800515d 	.word	0x0800515d
 800510c:	080050a9 	.word	0x080050a9
 8005110:	080050a9 	.word	0x080050a9
 8005114:	08005223 	.word	0x08005223
 8005118:	680b      	ldr	r3, [r1, #0]
 800511a:	1d1a      	adds	r2, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	600a      	str	r2, [r1, #0]
 8005120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005128:	2301      	movs	r3, #1
 800512a:	e0a3      	b.n	8005274 <_printf_i+0x1f4>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	6808      	ldr	r0, [r1, #0]
 8005130:	062e      	lsls	r6, r5, #24
 8005132:	f100 0304 	add.w	r3, r0, #4
 8005136:	d50a      	bpl.n	800514e <_printf_i+0xce>
 8005138:	6805      	ldr	r5, [r0, #0]
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	2d00      	cmp	r5, #0
 800513e:	da03      	bge.n	8005148 <_printf_i+0xc8>
 8005140:	232d      	movs	r3, #45	; 0x2d
 8005142:	426d      	negs	r5, r5
 8005144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005148:	485e      	ldr	r0, [pc, #376]	; (80052c4 <_printf_i+0x244>)
 800514a:	230a      	movs	r3, #10
 800514c:	e019      	b.n	8005182 <_printf_i+0x102>
 800514e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005152:	6805      	ldr	r5, [r0, #0]
 8005154:	600b      	str	r3, [r1, #0]
 8005156:	bf18      	it	ne
 8005158:	b22d      	sxthne	r5, r5
 800515a:	e7ef      	b.n	800513c <_printf_i+0xbc>
 800515c:	680b      	ldr	r3, [r1, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	1d18      	adds	r0, r3, #4
 8005162:	6008      	str	r0, [r1, #0]
 8005164:	0628      	lsls	r0, r5, #24
 8005166:	d501      	bpl.n	800516c <_printf_i+0xec>
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	e002      	b.n	8005172 <_printf_i+0xf2>
 800516c:	0669      	lsls	r1, r5, #25
 800516e:	d5fb      	bpl.n	8005168 <_printf_i+0xe8>
 8005170:	881d      	ldrh	r5, [r3, #0]
 8005172:	4854      	ldr	r0, [pc, #336]	; (80052c4 <_printf_i+0x244>)
 8005174:	2f6f      	cmp	r7, #111	; 0x6f
 8005176:	bf0c      	ite	eq
 8005178:	2308      	moveq	r3, #8
 800517a:	230a      	movne	r3, #10
 800517c:	2100      	movs	r1, #0
 800517e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005182:	6866      	ldr	r6, [r4, #4]
 8005184:	60a6      	str	r6, [r4, #8]
 8005186:	2e00      	cmp	r6, #0
 8005188:	bfa2      	ittt	ge
 800518a:	6821      	ldrge	r1, [r4, #0]
 800518c:	f021 0104 	bicge.w	r1, r1, #4
 8005190:	6021      	strge	r1, [r4, #0]
 8005192:	b90d      	cbnz	r5, 8005198 <_printf_i+0x118>
 8005194:	2e00      	cmp	r6, #0
 8005196:	d04d      	beq.n	8005234 <_printf_i+0x1b4>
 8005198:	4616      	mov	r6, r2
 800519a:	fbb5 f1f3 	udiv	r1, r5, r3
 800519e:	fb03 5711 	mls	r7, r3, r1, r5
 80051a2:	5dc7      	ldrb	r7, [r0, r7]
 80051a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051a8:	462f      	mov	r7, r5
 80051aa:	42bb      	cmp	r3, r7
 80051ac:	460d      	mov	r5, r1
 80051ae:	d9f4      	bls.n	800519a <_printf_i+0x11a>
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d10b      	bne.n	80051cc <_printf_i+0x14c>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	07df      	lsls	r7, r3, #31
 80051b8:	d508      	bpl.n	80051cc <_printf_i+0x14c>
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	6861      	ldr	r1, [r4, #4]
 80051be:	4299      	cmp	r1, r3
 80051c0:	bfde      	ittt	le
 80051c2:	2330      	movle	r3, #48	; 0x30
 80051c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051cc:	1b92      	subs	r2, r2, r6
 80051ce:	6122      	str	r2, [r4, #16]
 80051d0:	f8cd a000 	str.w	sl, [sp]
 80051d4:	464b      	mov	r3, r9
 80051d6:	aa03      	add	r2, sp, #12
 80051d8:	4621      	mov	r1, r4
 80051da:	4640      	mov	r0, r8
 80051dc:	f7ff fee2 	bl	8004fa4 <_printf_common>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d14c      	bne.n	800527e <_printf_i+0x1fe>
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	b004      	add	sp, #16
 80051ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ee:	4835      	ldr	r0, [pc, #212]	; (80052c4 <_printf_i+0x244>)
 80051f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	680e      	ldr	r6, [r1, #0]
 80051f8:	061f      	lsls	r7, r3, #24
 80051fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80051fe:	600e      	str	r6, [r1, #0]
 8005200:	d514      	bpl.n	800522c <_printf_i+0x1ac>
 8005202:	07d9      	lsls	r1, r3, #31
 8005204:	bf44      	itt	mi
 8005206:	f043 0320 	orrmi.w	r3, r3, #32
 800520a:	6023      	strmi	r3, [r4, #0]
 800520c:	b91d      	cbnz	r5, 8005216 <_printf_i+0x196>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f023 0320 	bic.w	r3, r3, #32
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	2310      	movs	r3, #16
 8005218:	e7b0      	b.n	800517c <_printf_i+0xfc>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	f043 0320 	orr.w	r3, r3, #32
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	2378      	movs	r3, #120	; 0x78
 8005224:	4828      	ldr	r0, [pc, #160]	; (80052c8 <_printf_i+0x248>)
 8005226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800522a:	e7e3      	b.n	80051f4 <_printf_i+0x174>
 800522c:	065e      	lsls	r6, r3, #25
 800522e:	bf48      	it	mi
 8005230:	b2ad      	uxthmi	r5, r5
 8005232:	e7e6      	b.n	8005202 <_printf_i+0x182>
 8005234:	4616      	mov	r6, r2
 8005236:	e7bb      	b.n	80051b0 <_printf_i+0x130>
 8005238:	680b      	ldr	r3, [r1, #0]
 800523a:	6826      	ldr	r6, [r4, #0]
 800523c:	6960      	ldr	r0, [r4, #20]
 800523e:	1d1d      	adds	r5, r3, #4
 8005240:	600d      	str	r5, [r1, #0]
 8005242:	0635      	lsls	r5, r6, #24
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	d501      	bpl.n	800524c <_printf_i+0x1cc>
 8005248:	6018      	str	r0, [r3, #0]
 800524a:	e002      	b.n	8005252 <_printf_i+0x1d2>
 800524c:	0671      	lsls	r1, r6, #25
 800524e:	d5fb      	bpl.n	8005248 <_printf_i+0x1c8>
 8005250:	8018      	strh	r0, [r3, #0]
 8005252:	2300      	movs	r3, #0
 8005254:	6123      	str	r3, [r4, #16]
 8005256:	4616      	mov	r6, r2
 8005258:	e7ba      	b.n	80051d0 <_printf_i+0x150>
 800525a:	680b      	ldr	r3, [r1, #0]
 800525c:	1d1a      	adds	r2, r3, #4
 800525e:	600a      	str	r2, [r1, #0]
 8005260:	681e      	ldr	r6, [r3, #0]
 8005262:	6862      	ldr	r2, [r4, #4]
 8005264:	2100      	movs	r1, #0
 8005266:	4630      	mov	r0, r6
 8005268:	f7fa ffba 	bl	80001e0 <memchr>
 800526c:	b108      	cbz	r0, 8005272 <_printf_i+0x1f2>
 800526e:	1b80      	subs	r0, r0, r6
 8005270:	6060      	str	r0, [r4, #4]
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	2300      	movs	r3, #0
 8005278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527c:	e7a8      	b.n	80051d0 <_printf_i+0x150>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	4632      	mov	r2, r6
 8005282:	4649      	mov	r1, r9
 8005284:	4640      	mov	r0, r8
 8005286:	47d0      	blx	sl
 8005288:	3001      	adds	r0, #1
 800528a:	d0ab      	beq.n	80051e4 <_printf_i+0x164>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	079b      	lsls	r3, r3, #30
 8005290:	d413      	bmi.n	80052ba <_printf_i+0x23a>
 8005292:	68e0      	ldr	r0, [r4, #12]
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	4298      	cmp	r0, r3
 8005298:	bfb8      	it	lt
 800529a:	4618      	movlt	r0, r3
 800529c:	e7a4      	b.n	80051e8 <_printf_i+0x168>
 800529e:	2301      	movs	r3, #1
 80052a0:	4632      	mov	r2, r6
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	47d0      	blx	sl
 80052a8:	3001      	adds	r0, #1
 80052aa:	d09b      	beq.n	80051e4 <_printf_i+0x164>
 80052ac:	3501      	adds	r5, #1
 80052ae:	68e3      	ldr	r3, [r4, #12]
 80052b0:	9903      	ldr	r1, [sp, #12]
 80052b2:	1a5b      	subs	r3, r3, r1
 80052b4:	42ab      	cmp	r3, r5
 80052b6:	dcf2      	bgt.n	800529e <_printf_i+0x21e>
 80052b8:	e7eb      	b.n	8005292 <_printf_i+0x212>
 80052ba:	2500      	movs	r5, #0
 80052bc:	f104 0619 	add.w	r6, r4, #25
 80052c0:	e7f5      	b.n	80052ae <_printf_i+0x22e>
 80052c2:	bf00      	nop
 80052c4:	080057a9 	.word	0x080057a9
 80052c8:	080057ba 	.word	0x080057ba

080052cc <memmove>:
 80052cc:	4288      	cmp	r0, r1
 80052ce:	b510      	push	{r4, lr}
 80052d0:	eb01 0402 	add.w	r4, r1, r2
 80052d4:	d902      	bls.n	80052dc <memmove+0x10>
 80052d6:	4284      	cmp	r4, r0
 80052d8:	4623      	mov	r3, r4
 80052da:	d807      	bhi.n	80052ec <memmove+0x20>
 80052dc:	1e43      	subs	r3, r0, #1
 80052de:	42a1      	cmp	r1, r4
 80052e0:	d008      	beq.n	80052f4 <memmove+0x28>
 80052e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ea:	e7f8      	b.n	80052de <memmove+0x12>
 80052ec:	4402      	add	r2, r0
 80052ee:	4601      	mov	r1, r0
 80052f0:	428a      	cmp	r2, r1
 80052f2:	d100      	bne.n	80052f6 <memmove+0x2a>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052fe:	e7f7      	b.n	80052f0 <memmove+0x24>

08005300 <_free_r>:
 8005300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005302:	2900      	cmp	r1, #0
 8005304:	d048      	beq.n	8005398 <_free_r+0x98>
 8005306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800530a:	9001      	str	r0, [sp, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f1a1 0404 	sub.w	r4, r1, #4
 8005312:	bfb8      	it	lt
 8005314:	18e4      	addlt	r4, r4, r3
 8005316:	f000 f8d3 	bl	80054c0 <__malloc_lock>
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <_free_r+0x9c>)
 800531c:	9801      	ldr	r0, [sp, #4]
 800531e:	6813      	ldr	r3, [r2, #0]
 8005320:	4615      	mov	r5, r2
 8005322:	b933      	cbnz	r3, 8005332 <_free_r+0x32>
 8005324:	6063      	str	r3, [r4, #4]
 8005326:	6014      	str	r4, [r2, #0]
 8005328:	b003      	add	sp, #12
 800532a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800532e:	f000 b8cd 	b.w	80054cc <__malloc_unlock>
 8005332:	42a3      	cmp	r3, r4
 8005334:	d90b      	bls.n	800534e <_free_r+0x4e>
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	1862      	adds	r2, r4, r1
 800533a:	4293      	cmp	r3, r2
 800533c:	bf04      	itt	eq
 800533e:	681a      	ldreq	r2, [r3, #0]
 8005340:	685b      	ldreq	r3, [r3, #4]
 8005342:	6063      	str	r3, [r4, #4]
 8005344:	bf04      	itt	eq
 8005346:	1852      	addeq	r2, r2, r1
 8005348:	6022      	streq	r2, [r4, #0]
 800534a:	602c      	str	r4, [r5, #0]
 800534c:	e7ec      	b.n	8005328 <_free_r+0x28>
 800534e:	461a      	mov	r2, r3
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	b10b      	cbz	r3, 8005358 <_free_r+0x58>
 8005354:	42a3      	cmp	r3, r4
 8005356:	d9fa      	bls.n	800534e <_free_r+0x4e>
 8005358:	6811      	ldr	r1, [r2, #0]
 800535a:	1855      	adds	r5, r2, r1
 800535c:	42a5      	cmp	r5, r4
 800535e:	d10b      	bne.n	8005378 <_free_r+0x78>
 8005360:	6824      	ldr	r4, [r4, #0]
 8005362:	4421      	add	r1, r4
 8005364:	1854      	adds	r4, r2, r1
 8005366:	42a3      	cmp	r3, r4
 8005368:	6011      	str	r1, [r2, #0]
 800536a:	d1dd      	bne.n	8005328 <_free_r+0x28>
 800536c:	681c      	ldr	r4, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	6053      	str	r3, [r2, #4]
 8005372:	4421      	add	r1, r4
 8005374:	6011      	str	r1, [r2, #0]
 8005376:	e7d7      	b.n	8005328 <_free_r+0x28>
 8005378:	d902      	bls.n	8005380 <_free_r+0x80>
 800537a:	230c      	movs	r3, #12
 800537c:	6003      	str	r3, [r0, #0]
 800537e:	e7d3      	b.n	8005328 <_free_r+0x28>
 8005380:	6825      	ldr	r5, [r4, #0]
 8005382:	1961      	adds	r1, r4, r5
 8005384:	428b      	cmp	r3, r1
 8005386:	bf04      	itt	eq
 8005388:	6819      	ldreq	r1, [r3, #0]
 800538a:	685b      	ldreq	r3, [r3, #4]
 800538c:	6063      	str	r3, [r4, #4]
 800538e:	bf04      	itt	eq
 8005390:	1949      	addeq	r1, r1, r5
 8005392:	6021      	streq	r1, [r4, #0]
 8005394:	6054      	str	r4, [r2, #4]
 8005396:	e7c7      	b.n	8005328 <_free_r+0x28>
 8005398:	b003      	add	sp, #12
 800539a:	bd30      	pop	{r4, r5, pc}
 800539c:	2000403c 	.word	0x2000403c

080053a0 <_malloc_r>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	1ccd      	adds	r5, r1, #3
 80053a4:	f025 0503 	bic.w	r5, r5, #3
 80053a8:	3508      	adds	r5, #8
 80053aa:	2d0c      	cmp	r5, #12
 80053ac:	bf38      	it	cc
 80053ae:	250c      	movcc	r5, #12
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	4606      	mov	r6, r0
 80053b4:	db01      	blt.n	80053ba <_malloc_r+0x1a>
 80053b6:	42a9      	cmp	r1, r5
 80053b8:	d903      	bls.n	80053c2 <_malloc_r+0x22>
 80053ba:	230c      	movs	r3, #12
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	2000      	movs	r0, #0
 80053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c2:	f000 f87d 	bl	80054c0 <__malloc_lock>
 80053c6:	4921      	ldr	r1, [pc, #132]	; (800544c <_malloc_r+0xac>)
 80053c8:	680a      	ldr	r2, [r1, #0]
 80053ca:	4614      	mov	r4, r2
 80053cc:	b99c      	cbnz	r4, 80053f6 <_malloc_r+0x56>
 80053ce:	4f20      	ldr	r7, [pc, #128]	; (8005450 <_malloc_r+0xb0>)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b923      	cbnz	r3, 80053de <_malloc_r+0x3e>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4630      	mov	r0, r6
 80053d8:	f000 f862 	bl	80054a0 <_sbrk_r>
 80053dc:	6038      	str	r0, [r7, #0]
 80053de:	4629      	mov	r1, r5
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f85d 	bl	80054a0 <_sbrk_r>
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	d123      	bne.n	8005432 <_malloc_r+0x92>
 80053ea:	230c      	movs	r3, #12
 80053ec:	6033      	str	r3, [r6, #0]
 80053ee:	4630      	mov	r0, r6
 80053f0:	f000 f86c 	bl	80054cc <__malloc_unlock>
 80053f4:	e7e3      	b.n	80053be <_malloc_r+0x1e>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	1b5b      	subs	r3, r3, r5
 80053fa:	d417      	bmi.n	800542c <_malloc_r+0x8c>
 80053fc:	2b0b      	cmp	r3, #11
 80053fe:	d903      	bls.n	8005408 <_malloc_r+0x68>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	441c      	add	r4, r3
 8005404:	6025      	str	r5, [r4, #0]
 8005406:	e004      	b.n	8005412 <_malloc_r+0x72>
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	42a2      	cmp	r2, r4
 800540c:	bf0c      	ite	eq
 800540e:	600b      	streq	r3, [r1, #0]
 8005410:	6053      	strne	r3, [r2, #4]
 8005412:	4630      	mov	r0, r6
 8005414:	f000 f85a 	bl	80054cc <__malloc_unlock>
 8005418:	f104 000b 	add.w	r0, r4, #11
 800541c:	1d23      	adds	r3, r4, #4
 800541e:	f020 0007 	bic.w	r0, r0, #7
 8005422:	1ac2      	subs	r2, r0, r3
 8005424:	d0cc      	beq.n	80053c0 <_malloc_r+0x20>
 8005426:	1a1b      	subs	r3, r3, r0
 8005428:	50a3      	str	r3, [r4, r2]
 800542a:	e7c9      	b.n	80053c0 <_malloc_r+0x20>
 800542c:	4622      	mov	r2, r4
 800542e:	6864      	ldr	r4, [r4, #4]
 8005430:	e7cc      	b.n	80053cc <_malloc_r+0x2c>
 8005432:	1cc4      	adds	r4, r0, #3
 8005434:	f024 0403 	bic.w	r4, r4, #3
 8005438:	42a0      	cmp	r0, r4
 800543a:	d0e3      	beq.n	8005404 <_malloc_r+0x64>
 800543c:	1a21      	subs	r1, r4, r0
 800543e:	4630      	mov	r0, r6
 8005440:	f000 f82e 	bl	80054a0 <_sbrk_r>
 8005444:	3001      	adds	r0, #1
 8005446:	d1dd      	bne.n	8005404 <_malloc_r+0x64>
 8005448:	e7cf      	b.n	80053ea <_malloc_r+0x4a>
 800544a:	bf00      	nop
 800544c:	2000403c 	.word	0x2000403c
 8005450:	20004040 	.word	0x20004040

08005454 <_realloc_r>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	4607      	mov	r7, r0
 8005458:	4614      	mov	r4, r2
 800545a:	460e      	mov	r6, r1
 800545c:	b921      	cbnz	r1, 8005468 <_realloc_r+0x14>
 800545e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005462:	4611      	mov	r1, r2
 8005464:	f7ff bf9c 	b.w	80053a0 <_malloc_r>
 8005468:	b922      	cbnz	r2, 8005474 <_realloc_r+0x20>
 800546a:	f7ff ff49 	bl	8005300 <_free_r>
 800546e:	4625      	mov	r5, r4
 8005470:	4628      	mov	r0, r5
 8005472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005474:	f000 f830 	bl	80054d8 <_malloc_usable_size_r>
 8005478:	42a0      	cmp	r0, r4
 800547a:	d20f      	bcs.n	800549c <_realloc_r+0x48>
 800547c:	4621      	mov	r1, r4
 800547e:	4638      	mov	r0, r7
 8005480:	f7ff ff8e 	bl	80053a0 <_malloc_r>
 8005484:	4605      	mov	r5, r0
 8005486:	2800      	cmp	r0, #0
 8005488:	d0f2      	beq.n	8005470 <_realloc_r+0x1c>
 800548a:	4631      	mov	r1, r6
 800548c:	4622      	mov	r2, r4
 800548e:	f7ff fbf7 	bl	8004c80 <memcpy>
 8005492:	4631      	mov	r1, r6
 8005494:	4638      	mov	r0, r7
 8005496:	f7ff ff33 	bl	8005300 <_free_r>
 800549a:	e7e9      	b.n	8005470 <_realloc_r+0x1c>
 800549c:	4635      	mov	r5, r6
 800549e:	e7e7      	b.n	8005470 <_realloc_r+0x1c>

080054a0 <_sbrk_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_sbrk_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fb fc7c 	bl	8000da8 <_sbrk>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_sbrk_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_sbrk_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200040dc 	.word	0x200040dc

080054c0 <__malloc_lock>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__malloc_lock+0x8>)
 80054c2:	f000 b811 	b.w	80054e8 <__retarget_lock_acquire_recursive>
 80054c6:	bf00      	nop
 80054c8:	200040e4 	.word	0x200040e4

080054cc <__malloc_unlock>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__malloc_unlock+0x8>)
 80054ce:	f000 b80c 	b.w	80054ea <__retarget_lock_release_recursive>
 80054d2:	bf00      	nop
 80054d4:	200040e4 	.word	0x200040e4

080054d8 <_malloc_usable_size_r>:
 80054d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054dc:	1f18      	subs	r0, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bfbc      	itt	lt
 80054e2:	580b      	ldrlt	r3, [r1, r0]
 80054e4:	18c0      	addlt	r0, r0, r3
 80054e6:	4770      	bx	lr

080054e8 <__retarget_lock_acquire_recursive>:
 80054e8:	4770      	bx	lr

080054ea <__retarget_lock_release_recursive>:
 80054ea:	4770      	bx	lr

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
