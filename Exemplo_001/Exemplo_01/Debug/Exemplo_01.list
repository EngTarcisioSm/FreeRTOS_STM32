
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de2c  20000090  080063c8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000debc  080063c8  0002debc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016acd  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecc  00000000  00000000  00036b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00039a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003753  00000000  00000000  0003bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001308c  00000000  00000000  0003f46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000960e1  00000000  00000000  000524f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e85d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  000e862c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e04 	.word	0x08005e04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08005e04 	.word	0x08005e04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fe05 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f8e7 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f979 	bl	800088c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f94d 	bl	8000838 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	xMutex = xSemaphoreCreateMutex();
 800059e:	2001      	movs	r0, #1
 80005a0:	f002 fcdb 	bl	8002f5a <xQueueCreateMutex>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a54      	ldr	r2, [pc, #336]	; (80006f8 <main+0x170>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	//criação da queue
	//Criado uma fila com 5 espaços e cada espaço possui um tamanho de uint32_t. Função que Cria uma fila
	if ((xQueue = xQueueCreate(5, sizeof(struct AMessage*))) == NULL) {
 80005aa:	2200      	movs	r2, #0
 80005ac:	2104      	movs	r1, #4
 80005ae:	2005      	movs	r0, #5
 80005b0:	f002 fc60 	bl	8002e74 <xQueueGenericCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a51      	ldr	r2, [pc, #324]	; (80006fc <main+0x174>)
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <main+0x174>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <main+0x42>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005c2:	484f      	ldr	r0, [pc, #316]	; (8000700 <main+0x178>)
 80005c4:	f000 fa2c 	bl	8000a20 <vPrintString>
 80005c8:	e002      	b.n	80005d0 <main+0x48>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005ca:	484e      	ldr	r0, [pc, #312]	; (8000704 <main+0x17c>)
 80005cc:	f000 fa28 	bl	8000a20 <vPrintString>
	}

	//Nova fila criada para a struct do tipo xData_t
	if ((xQueue_count = xQueueCreate(5, sizeof(xData_t))) == NULL) {
 80005d0:	2200      	movs	r2, #0
 80005d2:	210c      	movs	r1, #12
 80005d4:	2005      	movs	r0, #5
 80005d6:	f002 fc4d 	bl	8002e74 <xQueueGenericCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a4a      	ldr	r2, [pc, #296]	; (8000708 <main+0x180>)
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b49      	ldr	r3, [pc, #292]	; (8000708 <main+0x180>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <main+0x68>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005e8:	4845      	ldr	r0, [pc, #276]	; (8000700 <main+0x178>)
 80005ea:	f000 fa19 	bl	8000a20 <vPrintString>
 80005ee:	e002      	b.n	80005f6 <main+0x6e>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005f0:	4844      	ldr	r0, [pc, #272]	; (8000704 <main+0x17c>)
 80005f2:	f000 fa15 	bl	8000a20 <vPrintString>
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask_print_q, "Task Print Q",
 80005f6:	2300      	movs	r3, #0
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000604:	4941      	ldr	r1, [pc, #260]	; (800070c <main+0x184>)
 8000606:	4842      	ldr	r0, [pc, #264]	; (8000710 <main+0x188>)
 8000608:	f003 f96e 	bl	80038e8 <xTaskCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d003      	beq.n	800061a <main+0x92>
	configMINIMAL_STACK_SIZE * 3, NULL, 2, NULL)) != pdTRUE) {
		vPrintString(
 8000612:	4840      	ldr	r0, [pc, #256]	; (8000714 <main+0x18c>)
 8000614:	f000 fa04 	bl	8000a20 <vPrintString>
 8000618:	e002      	b.n	8000620 <main+0x98>
				"Não foi possivel alocar tarefa Task Print Q no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print Q criada com sucesso!\n");
 800061a:	483f      	ldr	r0, [pc, #252]	; (8000718 <main+0x190>)
 800061c:	f000 fa00 	bl	8000a20 <vPrintString>
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE * 2, NULL,
 8000620:	2300      	movs	r3, #0
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2301      	movs	r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800062e:	493b      	ldr	r1, [pc, #236]	; (800071c <main+0x194>)
 8000630:	483b      	ldr	r0, [pc, #236]	; (8000720 <main+0x198>)
 8000632:	f003 f959 	bl	80038e8 <xTaskCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d003      	beq.n	8000644 <main+0xbc>
			1, NULL)) != pdTRUE) {
		vPrintString(
 800063c:	4839      	ldr	r0, [pc, #228]	; (8000724 <main+0x19c>)
 800063e:	f000 f9ef 	bl	8000a20 <vPrintString>
 8000642:	e002      	b.n	800064a <main+0xc2>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 8000644:	4838      	ldr	r0, [pc, #224]	; (8000728 <main+0x1a0>)
 8000646:	f000 f9eb 	bl	8000a20 <vPrintString>
	}

	if ((xTaskCreate(vTask_print, "Task Print", configMINIMAL_STACK_SIZE * 3,
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000658:	4934      	ldr	r1, [pc, #208]	; (800072c <main+0x1a4>)
 800065a:	4835      	ldr	r0, [pc, #212]	; (8000730 <main+0x1a8>)
 800065c:	f003 f944 	bl	80038e8 <xTaskCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d003      	beq.n	800066e <main+0xe6>
	NULL, 1, NULL)) != pdTRUE) {
		vPrintString(
 8000666:	4833      	ldr	r0, [pc, #204]	; (8000734 <main+0x1ac>)
 8000668:	f000 f9da 	bl	8000a20 <vPrintString>
 800066c:	e002      	b.n	8000674 <main+0xec>
				"Não foi possivel alocar tarefa Task Print no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print criada com sucesso!\n");
 800066e:	4832      	ldr	r0, [pc, #200]	; (8000738 <main+0x1b0>)
 8000670:	f000 f9d6 	bl	8000a20 <vPrintString>
	}

	if ((xTaskCreate(vTask1, "task_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 8000674:	2300      	movs	r3, #0
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2301      	movs	r3, #1
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	492e      	ldr	r1, [pc, #184]	; (800073c <main+0x1b4>)
 8000682:	482f      	ldr	r0, [pc, #188]	; (8000740 <main+0x1b8>)
 8000684:	f003 f930 	bl	80038e8 <xTaskCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d003      	beq.n	8000696 <main+0x10e>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_1 no escalonador\n");
 800068e:	482d      	ldr	r0, [pc, #180]	; (8000744 <main+0x1bc>)
 8000690:	f000 f9c6 	bl	8000a20 <vPrintString>
 8000694:	e002      	b.n	800069c <main+0x114>
	} else {
		vPrintString("Tarefa Task_1 criada com sucesso!\n");
 8000696:	482c      	ldr	r0, [pc, #176]	; (8000748 <main+0x1c0>)
 8000698:	f000 f9c2 	bl	8000a20 <vPrintString>
	}

	if ((xTaskCreate(vTask2, "task_2", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 800069c:	2300      	movs	r3, #0
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	2301      	movs	r3, #1
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	4928      	ldr	r1, [pc, #160]	; (800074c <main+0x1c4>)
 80006aa:	4829      	ldr	r0, [pc, #164]	; (8000750 <main+0x1c8>)
 80006ac:	f003 f91c 	bl	80038e8 <xTaskCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d003      	beq.n	80006be <main+0x136>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 80006b6:	4827      	ldr	r0, [pc, #156]	; (8000754 <main+0x1cc>)
 80006b8:	f000 f9b2 	bl	8000a20 <vPrintString>
 80006bc:	e002      	b.n	80006c4 <main+0x13c>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80006be:	4826      	ldr	r0, [pc, #152]	; (8000758 <main+0x1d0>)
 80006c0:	f000 f9ae 	bl	8000a20 <vPrintString>
	}

	if ((xTaskCreate(vTask_print_count, "vTask_print_count",
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006d2:	4922      	ldr	r1, [pc, #136]	; (800075c <main+0x1d4>)
 80006d4:	4822      	ldr	r0, [pc, #136]	; (8000760 <main+0x1d8>)
 80006d6:	f003 f907 	bl	80038e8 <xTaskCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d003      	beq.n	80006e8 <main+0x160>
			configMINIMAL_STACK_SIZE * 3, NULL, 1, NULL)) != pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <main+0x1cc>)
 80006e2:	f000 f99d 	bl	8000a20 <vPrintString>
 80006e6:	e002      	b.n	80006ee <main+0x166>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <main+0x1d0>)
 80006ea:	f000 f999 	bl	8000a20 <vPrintString>
	}

	vTaskStartScheduler();
 80006ee:	f003 fad3 	bl	8003c98 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f2:	f002 fa9b 	bl	8002c2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006f6:	e7fe      	b.n	80006f6 <main+0x16e>
 80006f8:	2000de10 	.word	0x2000de10
 80006fc:	2000de5c 	.word	0x2000de5c
 8000700:	08005e2c 	.word	0x08005e2c
 8000704:	08005e50 	.word	0x08005e50
 8000708:	2000de14 	.word	0x2000de14
 800070c:	08005e6c 	.word	0x08005e6c
 8000710:	08000b5d 	.word	0x08000b5d
 8000714:	08005e7c 	.word	0x08005e7c
 8000718:	08005ebc 	.word	0x08005ebc
 800071c:	08005ee8 	.word	0x08005ee8
 8000720:	08000ca5 	.word	0x08000ca5
 8000724:	08005ef4 	.word	0x08005ef4
 8000728:	08005f38 	.word	0x08005f38
 800072c:	08005f60 	.word	0x08005f60
 8000730:	08000c31 	.word	0x08000c31
 8000734:	08005f6c 	.word	0x08005f6c
 8000738:	08005fa8 	.word	0x08005fa8
 800073c:	08005e1c 	.word	0x08005e1c
 8000740:	08000dcd 	.word	0x08000dcd
 8000744:	08005fd0 	.word	0x08005fd0
 8000748:	08006008 	.word	0x08006008
 800074c:	08005e24 	.word	0x08005e24
 8000750:	08000e31 	.word	0x08000e31
 8000754:	0800602c 	.word	0x0800602c
 8000758:	08006064 	.word	0x08006064
 800075c:	08006088 	.word	0x08006088
 8000760:	08000d6d 	.word	0x08000d6d

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 ff16 	bl	80055a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <SystemClock_Config+0xd0>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007dc:	2354      	movs	r3, #84	; 0x54
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 ffe1 	bl	80017b4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f8:	f000 fb5e 	bl	8000eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fa43 	bl	8001ca4 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 fb48 	bl	8000eb8 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART1_UART_Init+0x4c>)
 8000870:	f001 fec6 	bl	8002600 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 fb1d 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000de18 	.word	0x2000de18
 8000888:	40011000 	.word	0x40011000

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a51      	ldr	r2, [pc, #324]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a4a      	ldr	r2, [pc, #296]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b48      	ldr	r3, [pc, #288]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <MX_GPIO_Init+0x180>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a43      	ldr	r2, [pc, #268]	; (8000a0c <MX_GPIO_Init+0x180>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b41      	ldr	r3, [pc, #260]	; (8000a0c <MX_GPIO_Init+0x180>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x180>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a3c      	ldr	r2, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x180>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <MX_GPIO_Init+0x180>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin|SEL_1_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2109      	movs	r1, #9
 8000932:	4837      	ldr	r0, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x184>)
 8000934:	f000 fef2 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	4835      	ldr	r0, [pc, #212]	; (8000a14 <MX_GPIO_Init+0x188>)
 8000940:	f000 feec 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	4833      	ldr	r0, [pc, #204]	; (8000a18 <MX_GPIO_Init+0x18c>)
 800094a:	f000 fee7 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOUT_LED1_Pin */
  GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <MX_GPIO_Init+0x184>)
 8000966:	f000 fd3d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_0_Pin */
  GPIO_InitStruct.Pin = SEL_0_Pin;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4824      	ldr	r0, [pc, #144]	; (8000a14 <MX_GPIO_Init+0x188>)
 8000984:	f000 fd2e 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_CFIG_Pin */
  GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	481f      	ldr	r0, [pc, #124]	; (8000a1c <MX_GPIO_Init+0x190>)
 80009a0:	f000 fd20 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_RX_485_Pin */
  GPIO_InitStruct.Pin = EN_RX_485_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <MX_GPIO_Init+0x18c>)
 80009bc:	f000 fd12 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_Pin */
  GPIO_InitStruct.Pin = SEL_1_Pin;
 80009c0:	2308      	movs	r3, #8
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x184>)
 80009d8:	f000 fd04 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_TARA_Pin */
  GPIO_InitStruct.Pin = DIN_TARA_Pin;
 80009dc:	2310      	movs	r3, #16
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_GPIO_Init+0x184>)
 80009f0:	f000 fcf8 	bl	80013e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2105      	movs	r1, #5
 80009f8:	2028      	movs	r0, #40	; 0x28
 80009fa:	f000 fcc9 	bl	8001390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009fe:	2028      	movs	r0, #40	; 0x28
 8000a00:	f000 fce2 	bl	80013c8 <HAL_NVIC_EnableIRQ>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020800 	.word	0x40020800

08000a20 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2e:	4819      	ldr	r0, [pc, #100]	; (8000a94 <vPrintString+0x74>)
 8000a30:	f000 fe74 	bl	800171c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2108      	movs	r1, #8
 8000a38:	4817      	ldr	r0, [pc, #92]	; (8000a98 <vPrintString+0x78>)
 8000a3a:	f000 fe6f 	bl	800171c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2104      	movs	r1, #4
 8000a42:	4816      	ldr	r0, [pc, #88]	; (8000a9c <vPrintString+0x7c>)
 8000a44:	f000 fe6a 	bl	800171c <HAL_GPIO_WritePin>
	//taskENTER_CRITICAL();	//removido
	xSemaphoreTake(xMutex, portMAX_DELAY);
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <vPrintString+0x80>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fd15 	bl	8003480 <xQueueSemaphoreTake>
	{
		vUsartLib_Puts(pc_uartSend_f);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f834 	bl	8000ac4 <vUsartLib_Puts>
	}
	//taskEXIT_CRITICAL();		//removido
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	xSemaphoreGive(xMutex);
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <vPrintString+0x80>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	2300      	movs	r3, #0
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	f002 fa91 	bl	8002f8c <xQueueGenericSend>
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <vPrintString+0x74>)
 8000a72:	f000 fe53 	bl	800171c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <vPrintString+0x78>)
 8000a7c:	f000 fe4e 	bl	800171c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2104      	movs	r1, #4
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <vPrintString+0x7c>)
 8000a86:	f000 fe49 	bl	800171c <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	2000de10 	.word	0x2000de10

08000aa4 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 8000ab0:	1cf9      	adds	r1, r7, #3
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f001 fdef 	bl	800269a <HAL_UART_Transmit>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000acc:	e007      	b.n	8000ade <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <vUsartLib_Puts+0x2c>)
 8000ada:	f7ff ffe3 	bl	8000aa4 <vUsartLib_Putc>
	while (*c_data) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f3      	bne.n	8000ace <vUsartLib_Puts+0xa>
	}
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000de18 	.word	0x2000de18

08000af4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]

	aux++;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x58>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x58>)
 8000b0c:	701a      	strb	r2, [r3, #0]
	};

	static struct AMessage * px_isr_message = &xISR_Message;


	if( GPIO_Pin == DIN_CFIG_Pin) {
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b14:	d115      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x4e>
		// xHigherPriorityTaskWoken -> gera a resposta se de fato foi enviado ou não, não possui temporização
		// pois essa função deve ocupar o menor tempo possivel
		xQueueSendFromISR(xQueue, (void *)&px_isr_message, &xHigherPriorityTaskWoken);
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	f107 020c 	add.w	r2, r7, #12
 8000b1e:	2300      	movs	r3, #0
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x60>)
 8000b22:	f002 fb31 	bl	8003188 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken == pdTRUE ){
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10a      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x4e>
			//Devolve o contexto para a tarefa de maior prioridade no sistema, caso xHigherPriorityTaskWoken seja falso é
			//retornado para a tarefa que estava sendo executada anteriormente
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_EXTI_Callback+0x4e>
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x64>)
 8000b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	f3bf 8f4f 	dsb	sy
 8000b3e:	f3bf 8f6f 	isb	sy
		}
	}
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000ac 	.word	0x200000ac
 8000b50:	2000de5c 	.word	0x2000de5c
 8000b54:	20000000 	.word	0x20000000
 8000b58:	e000ed04 	.word	0xe000ed04

08000b5c <vTask_print_q>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_print_q(void *pvParameters) {
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	uint32_t u32_status = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24

	struct AMessage xMessage =
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <vTask_print_q+0xbc>)
 8000b6a:	f107 040c 	add.w	r4, r7, #12
 8000b6e:	461d      	mov	r5, r3
 8000b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b78:	6020      	str	r0, [r4, #0]
 8000b7a:	3404      	adds	r4, #4
 8000b7c:	7021      	strb	r1, [r4, #0]
			{ .c_messageID = 2, .c_data = "Curso RTOS STM32" };
	struct AMessage *px_message = &xMessage;
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	60bb      	str	r3, [r7, #8]

	vPrintString("Entrei na task Queue\n");
 8000b84:	4825      	ldr	r0, [pc, #148]	; (8000c1c <vTask_print_q+0xc0>)
 8000b86:	f7ff ff4b 	bl	8000a20 <vPrintString>

	for (;;) {

		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4824      	ldr	r0, [pc, #144]	; (8000c20 <vTask_print_q+0xc4>)
 8000b8e:	f000 fdad 	bl	80016ec <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11f      	bne.n	8000bd8 <vTask_print_q+0x7c>
				&& !u32_status) {
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11c      	bne.n	8000bd8 <vTask_print_q+0x7c>
			//Aguarda um periodo para evitar o efeito bounce bottão pressionado
			vTaskDelay(50 / portTICK_PERIOD_MS);
 8000b9e:	2032      	movs	r0, #50	; 0x32
 8000ba0:	f002 ffe0 	bl	8003b64 <vTaskDelay>

			if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	481e      	ldr	r0, [pc, #120]	; (8000c20 <vTask_print_q+0xc4>)
 8000ba8:	f000 fda0 	bl	80016ec <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d110      	bne.n	8000bd4 <vTask_print_q+0x78>
					&& !u32_status) {
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10d      	bne.n	8000bd4 <vTask_print_q+0x78>
				//           xQueueSend(1:nome fila   2:endereço da variavel  3: timeout)
				if ( xQueueSend(xQueue, (void* )&px_message,
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <vTask_print_q+0xc8>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f107 0108 	add.w	r1, r7, #8
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2232      	movs	r2, #50	; 0x32
 8000bc4:	f002 f9e2 	bl	8002f8c <xQueueGenericSend>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d102      	bne.n	8000bd4 <vTask_print_q+0x78>
						( 50 / portTICK_PERIOD_MS)) == pdPASS) {

					vPrintString(
 8000bce:	4816      	ldr	r0, [pc, #88]	; (8000c28 <vTask_print_q+0xcc>)
 8000bd0:	f7ff ff26 	bl	8000a20 <vPrintString>
							"Valor da constante button enviado na queue! \n\n");
				}
			}

			u32_status = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24

		}

		//checa se o botão foi levantado
		if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && u32_status) {
 8000bd8:	2110      	movs	r1, #16
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <vTask_print_q+0xc4>)
 8000bdc:	f000 fd86 	bl	80016ec <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d014      	beq.n	8000c10 <vTask_print_q+0xb4>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d011      	beq.n	8000c10 <vTask_print_q+0xb4>

			vTaskDelay(50 / portTICK_PERIOD_MS);	//delay para debounce
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f002 ffb9 	bl	8003b64 <vTaskDelay>

			if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <vTask_print_q+0xc4>)
 8000bf6:	f000 fd79 	bl	80016ec <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d007      	beq.n	8000c10 <vTask_print_q+0xb4>
					&& u32_status) {
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <vTask_print_q+0xb4>

				vPrintString("Botão foi solto! \n\n");
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <vTask_print_q+0xd0>)
 8000c08:	f7ff ff0a 	bl	8000a20 <vPrintString>
				u32_status = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}

		vTaskDelay(50 / portTICK_PERIOD_MS);
 8000c10:	2032      	movs	r0, #50	; 0x32
 8000c12:	f002 ffa7 	bl	8003b64 <vTaskDelay>
		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000c16:	e7b8      	b.n	8000b8a <vTask_print_q+0x2e>
 8000c18:	080060fc 	.word	0x080060fc
 8000c1c:	0800609c 	.word	0x0800609c
 8000c20:	40020400 	.word	0x40020400
 8000c24:	2000de5c 	.word	0x2000de5c
 8000c28:	080060b4 	.word	0x080060b4
 8000c2c:	080060e4 	.word	0x080060e4

08000c30 <vTask_print>:
	}

	vTaskDelete( NULL); //caso ocorra algo que faça o for sair
}

void vTask_print(void *pvParameters) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint32_t u32_status;
	// char *ps_receve_string;
	struct AMessage *msg;

	vPrintString("Entrei na task Print\n");
 8000c38:	4816      	ldr	r0, [pc, #88]	; (8000c94 <vTask_print+0x64>)
 8000c3a:	f7ff fef1 	bl	8000a20 <vPrintString>

	for (;;) {
		//xQueueReceive(1:nome da fila 2:endereço variavel de recebimento, 3:timeout)
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <vTask_print+0x68>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f107 010c 	add.w	r1, r7, #12
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fb38 	bl	80032c0 <xQueueReceive>
 8000c50:	4603      	mov	r3, r0
 8000c52:	617b      	str	r3, [r7, #20]
		if (u32_status == pdPASS) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d117      	bne.n	8000c8a <vTask_print+0x5a>
			//Para entender a necessidade de alocação dinamica de memoria
			//deixo o link abaixo, onde explica porque precisamos fazer um malloc
			//para alocar um buffer ao nosso ponteiro para uso na função sprintf
			//lembrando que iremos usar o pvPortMalloc que é safe thread para o FreeRTOS
			//https://stackoverflow.com/questions/19772667/c-sprintf-array-char-pointers
			char *pc_uartSend = pvPortMalloc(sizeof(msg) + 1);
 8000c5a:	2005      	movs	r0, #5
 8000c5c:	f004 fa74 	bl	8005148 <pvPortMalloc>
 8000c60:	6138      	str	r0, [r7, #16]

			sprintf(pc_uartSend,
					"Estrutura recebida : ID = %d , MSG = \" %s \" \n",
					msg->c_messageID, msg->c_data);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	781b      	ldrb	r3, [r3, #0]
			sprintf(pc_uartSend,
 8000c66:	461a      	mov	r2, r3
					msg->c_messageID, msg->c_data);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
			sprintf(pc_uartSend,
 8000c6c:	490b      	ldr	r1, [pc, #44]	; (8000c9c <vTask_print+0x6c>)
 8000c6e:	6938      	ldr	r0, [r7, #16]
 8000c70:	f004 fca0 	bl	80055b4 <siprintf>
			vPrintString(pc_uartSend);
 8000c74:	6938      	ldr	r0, [r7, #16]
 8000c76:	f7ff fed3 	bl	8000a20 <vPrintString>
			vPortFree(pc_uartSend);
 8000c7a:	6938      	ldr	r0, [r7, #16]
 8000c7c:	f004 fb30 	bl	80052e0 <vPortFree>

			msg->c_messageID++;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	3201      	adds	r2, #1
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]
		}
		vPrintString("Task print \r\n\n");
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <vTask_print+0x70>)
 8000c8c:	f7ff fec8 	bl	8000a20 <vPrintString>
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000c90:	e7d5      	b.n	8000c3e <vTask_print+0xe>
 8000c92:	bf00      	nop
 8000c94:	08006114 	.word	0x08006114
 8000c98:	2000de5c 	.word	0x2000de5c
 8000c9c:	0800612c 	.word	0x0800612c
 8000ca0:	0800615c 	.word	0x0800615c

08000ca4 <vTask_blink>:
		//vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
	vTaskDelete( NULL);
}

void vTask_blink(void *pvParameters) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0b4      	sub	sp, #208	; 0xd0
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	char  c_buff[200];

	vPrintString("Entrando da Task de debug");
 8000cac:	4827      	ldr	r0, [pc, #156]	; (8000d4c <vTask_blink+0xa8>)
 8000cae:	f7ff feb7 	bl	8000a20 <vPrintString>

	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4826      	ldr	r0, [pc, #152]	; (8000d50 <vTask_blink+0xac>)
 8000cb6:	f000 fd4a 	bl	800174e <HAL_GPIO_TogglePin>

		vTaskList(c_buff);
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fee0 	bl	8004a84 <vTaskList>

		vPrintString("\n\r\nTask-------------State-----Prio------Stack---Num\r\n");
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <vTask_blink+0xb0>)
 8000cc6:	f7ff feab 	bl	8000a20 <vPrintString>
		vPrintString(c_buff);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fea6 	bl	8000a20 <vPrintString>
		vPrintString("\n");
 8000cd4:	4820      	ldr	r0, [pc, #128]	; (8000d58 <vTask_blink+0xb4>)
 8000cd6:	f7ff fea3 	bl	8000a20 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	22c8      	movs	r2, #200	; 0xc8
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fc5e 	bl	80055a4 <memset>

		sprintf(c_buff, "Free Heap: %d bytes \n\n", xPortGetMinimumEverFreeHeapSize());
 8000ce8:	f004 fb5c 	bl	80053a4 <xPortGetMinimumEverFreeHeapSize>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	491a      	ldr	r1, [pc, #104]	; (8000d5c <vTask_blink+0xb8>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fc5d 	bl	80055b4 <siprintf>
		vPrintString(c_buff);
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fe8e 	bl	8000a20 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	22c8      	movs	r2, #200	; 0xc8
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 fc49 	bl	80055a4 <memset>



		sprintf(c_buff, "%d entradas\n\n", aux);
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <vTask_blink+0xbc>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4911      	ldr	r1, [pc, #68]	; (8000d64 <vTask_blink+0xc0>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f004 fc48 	bl	80055b4 <siprintf>
		memset(c_buff, 0, sizeof(c_buff));
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	22c8      	movs	r2, #200	; 0xc8
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fc39 	bl	80055a4 <memset>
		vPrintString(c_buff);
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fe72 	bl	8000a20 <vPrintString>


		vPrintString("\n\n\n");
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <vTask_blink+0xc4>)
 8000d3e:	f7ff fe6f 	bl	8000a20 <vPrintString>
		vTaskDelay(5000 / portTICK_PERIOD_MS);
 8000d42:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d46:	f002 ff0d 	bl	8003b64 <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000d4a:	e7b2      	b.n	8000cb2 <vTask_blink+0xe>
 8000d4c:	0800616c 	.word	0x0800616c
 8000d50:	40020400 	.word	0x40020400
 8000d54:	08006188 	.word	0x08006188
 8000d58:	080061c0 	.word	0x080061c0
 8000d5c:	080061c4 	.word	0x080061c4
 8000d60:	200000ac 	.word	0x200000ac
 8000d64:	080061dc 	.word	0x080061dc
 8000d68:	080061ec 	.word	0x080061ec

08000d6c <vTask_print_count>:
	}
	vTaskDelete( NULL);
}

void vTask_print_count(void *pvParameters) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
	xData_t x_count;

	vPrintString("vTask_Print_Count iniciada!");
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <vTask_print_count+0x54>)
 8000d76:	f7ff fe53 	bl	8000a20 <vPrintString>

		/*
		 * Realiza a leitura da fila. Caso tenha algum valor a ser lido
		 * este será armazenado em count;
		 */
		xQueueReceive(xQueue_count, &x_count, portMAX_DELAY);
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <vTask_print_count+0x58>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	f04f 32ff 	mov.w	r2, #4294967295
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fa9a 	bl	80032c0 <xQueueReceive>

		char *pc_uartSend = pvPortMalloc(sizeof(x_count) + 1);
 8000d8c:	200d      	movs	r0, #13
 8000d8e:	f004 f9db 	bl	8005148 <pvPortMalloc>
 8000d92:	6178      	str	r0, [r7, #20]

		sprintf(pc_uartSend,
				"Estrutura recebida : task_id = %d, task_name = \" %s \", value = %ld \n\n",
				x_count.c_task_id, x_count.task_name, x_count.u32_value);
 8000d94:	7b3b      	ldrb	r3, [r7, #12]
		sprintf(pc_uartSend,
 8000d96:	4619      	mov	r1, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	460a      	mov	r2, r1
 8000da2:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <vTask_print_count+0x5c>)
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f004 fc05 	bl	80055b4 <siprintf>

		vPrintString(pc_uartSend);
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff fe38 	bl	8000a20 <vPrintString>

		vPortFree(pc_uartSend);
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f004 fa95 	bl	80052e0 <vPortFree>

		vTaskDelay( 10 / portTICK_PERIOD_MS );
 8000db6:	200a      	movs	r0, #10
 8000db8:	f002 fed4 	bl	8003b64 <vTaskDelay>
	for (;;) {
 8000dbc:	e7dd      	b.n	8000d7a <vTask_print_count+0xe>
 8000dbe:	bf00      	nop
 8000dc0:	080061f0 	.word	0x080061f0
 8000dc4:	2000de14 	.word	0x2000de14
 8000dc8:	0800620c 	.word	0x0800620c

08000dcc <vTask1>:
	}
}

void vTask1(void *pvParameters) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	xData_t x_count_1 = {
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <vTask1+0x54>)
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.task_name = "task_1"
	};

	char c_value_char[30];

	vPrintString("vTask_1 iniciada!");
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <vTask1+0x58>)
 8000de2:	f7ff fe1d 	bl	8000a20 <vPrintString>
		 * Caso a fila esteja cheia, esta task será bloqueada
		 *
		 * Não é checada se foi enviado pois caso não consiga existe o portMAX_DELAY, a tarefa
		 * se manterá bloqueada até que seja enviada
		 */
		xQueueSend( xQueue_count, &x_count_1, portMAX_DELAY);
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <vTask1+0x5c>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000dee:	2300      	movs	r3, #0
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	f002 f8ca 	bl	8002f8c <xQueueGenericSend>

		sprintf(c_value_char, "vTask_1 envia: %ld \r\n", x_count_1.u32_value);
 8000df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	490b      	ldr	r1, [pc, #44]	; (8000e2c <vTask1+0x60>)
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fbd7 	bl	80055b4 <siprintf>
		vPrintString(c_value_char);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe08 	bl	8000a20 <vPrintString>

		x_count_1.u32_value++;
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	3301      	adds	r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c

		vTaskDelay( 1000 / portTICK_PERIOD_MS );
 8000e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1a:	f002 fea3 	bl	8003b64 <vTaskDelay>
		xQueueSend( xQueue_count, &x_count_1, portMAX_DELAY);
 8000e1e:	e7e2      	b.n	8000de6 <vTask1+0x1a>
 8000e20:	08006280 	.word	0x08006280
 8000e24:	08006254 	.word	0x08006254
 8000e28:	2000de14 	.word	0x2000de14
 8000e2c:	08006268 	.word	0x08006268

08000e30 <vTask2>:
	}
}

void vTask2(void *pvParameters) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	xData_t x_count_2 = {
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <vTask2+0x54>)
 8000e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.task_name = "task_2"
	};

	char c_value_char[30];

	vPrintString("vTask_2 iniciada!");
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <vTask2+0x58>)
 8000e46:	f7ff fdeb 	bl	8000a20 <vPrintString>
		 * Envia uma cópia do valor de count_1 na fila.
		 * Caso a fila esteja cheia, esta task será bloqueada
		 * Não é checada se foi enviado pois caso não consiga existe o portMAX_DELAY, a tarefa
		 * se manterá bloqueada até que seja enviada
		 */
		xQueueSend( xQueue_count, &x_count_2, portMAX_DELAY);
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <vTask2+0x5c>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e52:	2300      	movs	r3, #0
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	f002 f898 	bl	8002f8c <xQueueGenericSend>

		sprintf(c_value_char, "vTask_2 envia: %ld \r\n", x_count_2.u32_value);
 8000e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	490b      	ldr	r1, [pc, #44]	; (8000e90 <vTask2+0x60>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fba5 	bl	80055b4 <siprintf>
		vPrintString(c_value_char);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fdd6 	bl	8000a20 <vPrintString>

		x_count_2.u32_value++;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	3301      	adds	r3, #1
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c

		vTaskDelay( 1000 / portTICK_PERIOD_MS );
 8000e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7e:	f002 fe71 	bl	8003b64 <vTaskDelay>
		xQueueSend( xQueue_count, &x_count_2, portMAX_DELAY);
 8000e82:	e7e2      	b.n	8000e4a <vTask2+0x1a>
 8000e84:	080062b8 	.word	0x080062b8
 8000e88:	0800628c 	.word	0x0800628c
 8000e8c:	2000de14 	.word	0x2000de14
 8000e90:	080062a0 	.word	0x080062a0

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea6:	f000 f99b 	bl	80011e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40000800 	.word	0x40000800

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_MspInit+0x54>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_MspInit+0x54>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x54>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_MspInit+0x54>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_MspInit+0x54>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_MspInit+0x54>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	210f      	movs	r1, #15
 8000f06:	f06f 0001 	mvn.w	r0, #1
 8000f0a:	f000 fa41 	bl	8001390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_UART_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f76:	23c0      	movs	r3, #192	; 0xc0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f86:	2307      	movs	r3, #7
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_UART_MspInit+0x8c>)
 8000f92:	f000 fa27 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020400 	.word	0x40020400

08000fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	201e      	movs	r0, #30
 8000fc2:	f000 f9e5 	bl	8001390 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fc6:	201e      	movs	r0, #30
 8000fc8:	f000 f9fe 	bl	80013c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_InitTick+0xa4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_InitTick+0xa4>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_InitTick+0xa4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe8:	f107 0210 	add.w	r2, r7, #16
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f852 	bl	800209c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ff8:	f001 f828 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_InitTick+0xa8>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	3b01      	subs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_InitTick+0xac>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_InitTick+0xb0>)
 8001014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_InitTick+0xac>)
 8001018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_InitTick+0xac>)
 8001020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001022:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_InitTick+0xac>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_InitTick+0xac>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <HAL_InitTick+0xac>)
 8001032:	f001 f865 	bl	8002100 <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d104      	bne.n	8001046 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <HAL_InitTick+0xac>)
 800103e:	f001 f8b9 	bl	80021b4 <HAL_TIM_Base_Start_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	; 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	431bde83 	.word	0x431bde83
 8001058:	2000de60 	.word	0x2000de60
 800105c:	40000800 	.word	0x40000800

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM4_IRQHandler+0x10>)
 8001092:	f001 f8f1 	bl	8002278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000de60 	.word	0x2000de60

080010a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010a8:	f000 fb6c 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f004 fa28 	bl	8005534 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20010000 	.word	0x20010000
 8001110:	00000400 	.word	0x00000400
 8001114:	200000b0 	.word	0x200000b0
 8001118:	2000dec0 	.word	0x2000dec0

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <SystemInit+0x28>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <SystemInit+0x28>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SystemInit+0x28>)
 8001132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001136:	609a      	str	r2, [r3, #8]
#endif
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800114c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800115c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
  ldr  r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001168:	f842 3b04 	str.w	r3, [r2], #4

0800116c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001172:	f7ff ffd3 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f004 f9e3 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fa05 	bl	8000588 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001184:	08006338 	.word	0x08006338
  ldr  r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800118c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001190:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001194:	2000debc 	.word	0x2000debc

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_Init+0x40>)
 80011a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_Init+0x40>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_Init+0x40>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f8d8 	bl	800137a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff feee 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fe78 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000024 	.word	0x20000024
 8001204:	2000dea8 	.word	0x2000dea8

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000dea8 	.word	0x2000dea8

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff4c 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a2:	f7ff ff61 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	6978      	ldr	r0, [r7, #20]
 80013ae:	f7ff ffb1 	bl	8001314 <NVIC_EncodePriority>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff80 	bl	80012c0 <__NVIC_SetPriority>
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff54 	bl	8001284 <__NVIC_EnableIRQ>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e159      	b.n	80016b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8148 	bne.w	80016ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	2b02      	cmp	r3, #2
 8001434:	d130      	bne.n	8001498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d017      	beq.n	80014d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d123      	bne.n	8001528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	69b9      	ldr	r1, [r7, #24]
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0203 	and.w	r2, r3, #3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a2 	beq.w	80016ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b57      	ldr	r3, [pc, #348]	; (80016cc <HAL_GPIO_Init+0x2e8>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a56      	ldr	r2, [pc, #344]	; (80016cc <HAL_GPIO_Init+0x2e8>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_GPIO_Init+0x2e8>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001586:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_GPIO_Init+0x2ec>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a49      	ldr	r2, [pc, #292]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x202>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a48      	ldr	r2, [pc, #288]	; (80016d8 <HAL_GPIO_Init+0x2f4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x1fe>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a47      	ldr	r2, [pc, #284]	; (80016dc <HAL_GPIO_Init+0x2f8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x1fa>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a46      	ldr	r2, [pc, #280]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x1f6>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <HAL_GPIO_Init+0x300>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x1f2>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x2ec>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162a:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x304>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001654:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_GPIO_Init+0x304>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f aea2 	bls.w	8001400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40013c00 	.word	0x40013c00

080016ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e001      	b.n	800170e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001760:	887a      	ldrh	r2, [r7, #2]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43d9      	mvns	r1, r3
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	400b      	ands	r3, r1
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f9a6 	bl	8000af4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40013c00 	.word	0x40013c00

080017b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e264      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d075      	beq.n	80018be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d2:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d00c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017de:	4ba0      	ldr	r3, [pc, #640]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ea:	4b9d      	ldr	r3, [pc, #628]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f6:	d10b      	bne.n	8001810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	4b99      	ldr	r3, [pc, #612]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d05b      	beq.n	80018bc <HAL_RCC_OscConfig+0x108>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d157      	bne.n	80018bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e23f      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x74>
 800181a:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a90      	ldr	r2, [pc, #576]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xb0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x98>
 8001832:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a8a      	ldr	r2, [pc, #552]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xb0>
 800184c:	4b84      	ldr	r3, [pc, #528]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a83      	ldr	r2, [pc, #524]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fccc 	bl	8001208 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fcc8 	bl	8001208 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e204      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xc0>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fcb8 	bl	8001208 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fcb4 	bl	8001208 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1f0      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0xe8>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d063      	beq.n	8001992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d6:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d11c      	bne.n	800191c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e2:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x152>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1c4      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4952      	ldr	r1, [pc, #328]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	e03a      	b.n	8001992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <HAL_RCC_OscConfig+0x2b0>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff fc6d 	bl	8001208 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff fc69 	bl	8001208 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1a5      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4940      	ldr	r1, [pc, #256]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_OscConfig+0x2b0>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fc4c 	bl	8001208 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fc48 	bl	8001208 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e184      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d030      	beq.n	8001a00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d016      	beq.n	80019d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_RCC_OscConfig+0x2b4>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fc2c 	bl	8001208 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff fc28 	bl	8001208 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e164      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x200>
 80019d2:	e015      	b.n	8001a00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x2b4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7ff fc15 	bl	8001208 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fc11 	bl	8001208 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e14d      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a0 	beq.w	8001b4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x2b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d121      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_RCC_OscConfig+0x2b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_RCC_OscConfig+0x2b8>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fbd7 	bl	8001208 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e011      	b.n	8001a82 <HAL_RCC_OscConfig+0x2ce>
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470000 	.word	0x42470000
 8001a68:	42470e80 	.word	0x42470e80
 8001a6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a70:	f7ff fbca 	bl	8001208 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e106      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <HAL_RCC_OscConfig+0x4e4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d106      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2f0>
 8001a96:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	4a80      	ldr	r2, [pc, #512]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa2:	e01c      	b.n	8001ade <HAL_RCC_OscConfig+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x312>
 8001aac:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab8:	4b78      	ldr	r3, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a77      	ldr	r2, [pc, #476]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0x32a>
 8001ac6:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a74      	ldr	r2, [pc, #464]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	4b72      	ldr	r3, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a71      	ldr	r2, [pc, #452]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001ad8:	f023 0304 	bic.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d015      	beq.n	8001b12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb8f 	bl	8001208 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb8b 	bl	8001208 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0c5      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ee      	beq.n	8001aee <HAL_RCC_OscConfig+0x33a>
 8001b10:	e014      	b.n	8001b3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff fb79 	bl	8001208 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fb75 	bl	8001208 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0af      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ee      	bne.n	8001b1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d105      	bne.n	8001b4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 809b 	beq.w	8001c8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d05c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d141      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <HAL_RCC_OscConfig+0x4ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fb49 	bl	8001208 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fb45 	bl	8001208 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e081      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8c:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x4ec>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb1e 	bl	8001208 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fb1a 	bl	8001208 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e056      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x41c>
 8001bee:	e04e      	b.n	8001c8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_RCC_OscConfig+0x4ec>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fb07 	bl	8001208 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff fb03 	bl	8001208 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e03f      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x44a>
 8001c1c:	e037      	b.n	8001c8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e032      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_RCC_OscConfig+0x4e8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d028      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d121      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d11a      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d111      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470060 	.word	0x42470060

08001ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0cc      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d90c      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0b8      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	494d      	ldr	r1, [pc, #308]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d044      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d119      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e07f      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d003      	beq.n	8001d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06f      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e067      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4934      	ldr	r1, [pc, #208]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff fa38 	bl	8001208 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff fa34 	bl	8001208 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e04f      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d20c      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e032      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4916      	ldr	r1, [pc, #88]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	490e      	ldr	r1, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e2a:	f000 f821 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	490a      	ldr	r1, [pc, #40]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	5ccb      	ldrb	r3, [r1, r3]
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f8ae 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023c00 	.word	0x40023c00
 8001e60:	40023800 	.word	0x40023800
 8001e64:	080062dc 	.word	0x080062dc
 8001e68:	2000001c 	.word	0x2000001c
 8001e6c:	20000020 	.word	0x20000020

08001e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e88:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d00d      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	f200 80bd 	bhi.w	8002014 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d003      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ea2:	e0b7      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4b61      	ldr	r3, [pc, #388]	; (800202c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ea6:	60bb      	str	r3, [r7, #8]
       break;
 8001ea8:	e0b7      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eaa:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001eac:	60bb      	str	r3, [r7, #8]
      break;
 8001eae:	e0b4      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb0:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d04d      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	099b      	lsrs	r3, r3, #6
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	ea02 0800 	and.w	r8, r2, r0
 8001ede:	ea03 0901 	and.w	r9, r3, r1
 8001ee2:	4640      	mov	r0, r8
 8001ee4:	4649      	mov	r1, r9
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	014b      	lsls	r3, r1, #5
 8001ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ef4:	0142      	lsls	r2, r0, #5
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	ebb0 0008 	subs.w	r0, r0, r8
 8001efe:	eb61 0109 	sbc.w	r1, r1, r9
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	018b      	lsls	r3, r1, #6
 8001f0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f10:	0182      	lsls	r2, r0, #6
 8001f12:	1a12      	subs	r2, r2, r0
 8001f14:	eb63 0301 	sbc.w	r3, r3, r1
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	00d9      	lsls	r1, r3, #3
 8001f22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f26:	00d0      	lsls	r0, r2, #3
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	eb12 0208 	adds.w	r2, r2, r8
 8001f30:	eb43 0309 	adc.w	r3, r3, r9
 8001f34:	f04f 0000 	mov.w	r0, #0
 8001f38:	f04f 0100 	mov.w	r1, #0
 8001f3c:	0259      	lsls	r1, r3, #9
 8001f3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f42:	0250      	lsls	r0, r2, #9
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	f7fe f99c 	bl	8000290 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e04a      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	ea02 0400 	and.w	r4, r2, r0
 8001f7a:	ea03 0501 	and.w	r5, r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	014b      	lsls	r3, r1, #5
 8001f8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f90:	0142      	lsls	r2, r0, #5
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	1b00      	subs	r0, r0, r4
 8001f98:	eb61 0105 	sbc.w	r1, r1, r5
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	018b      	lsls	r3, r1, #6
 8001fa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001faa:	0182      	lsls	r2, r0, #6
 8001fac:	1a12      	subs	r2, r2, r0
 8001fae:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb2:	f04f 0000 	mov.w	r0, #0
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	00d9      	lsls	r1, r3, #3
 8001fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fc0:	00d0      	lsls	r0, r2, #3
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	1912      	adds	r2, r2, r4
 8001fc8:	eb45 0303 	adc.w	r3, r5, r3
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	0299      	lsls	r1, r3, #10
 8001fd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fda:	0290      	lsls	r0, r2, #10
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	f7fe f950 	bl	8000290 <__aeabi_uldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	3301      	adds	r3, #1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	60bb      	str	r3, [r7, #8]
      break;
 8002012:	e002      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002016:	60bb      	str	r3, [r7, #8]
      break;
 8002018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201a:	68bb      	ldr	r3, [r7, #8]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	00f42400 	.word	0x00f42400
 8002030:	007a1200 	.word	0x007a1200

08002034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_RCC_GetHCLKFreq+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000001c 	.word	0x2000001c

0800204c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002050:	f7ff fff0 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	080062ec 	.word	0x080062ec

08002074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002078:	f7ff ffdc 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0b5b      	lsrs	r3, r3, #13
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	080062ec 	.word	0x080062ec

0800209c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	220f      	movs	r2, #15
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_GetClockConfig+0x5c>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0203 	and.w	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_GetClockConfig+0x5c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_GetClockConfig+0x5c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_GetClockConfig+0x5c>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCC_GetClockConfig+0x60>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0207 	and.w	r2, r3, #7
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40023c00 	.word	0x40023c00

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e041      	b.n	8002196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f839 	bl	800219e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 f9ca 	bl	80024d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d001      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e044      	b.n	8002256 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <HAL_TIM_Base_Start_IT+0xb0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d018      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x6c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f6:	d013      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x6c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_TIM_Base_Start_IT+0xb4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00e      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x6c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_TIM_Base_Start_IT+0xb8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d009      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x6c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_TIM_Base_Start_IT+0xbc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x6c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_TIM_Base_Start_IT+0xc0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d111      	bne.n	8002244 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d010      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002242:	e007      	b.n	8002254 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40014000 	.word	0x40014000

08002278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0202 	mvn.w	r2, #2
 80022a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8ee 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8e0 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8f1 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0204 	mvn.w	r2, #4
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8c4 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8b6 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8c7 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0208 	mvn.w	r2, #8
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f89a 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f88c 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f89d 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b10      	cmp	r3, #16
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0210 	mvn.w	r2, #16
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2208      	movs	r2, #8
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f870 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f862 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f873 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0201 	mvn.w	r2, #1
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fd4c 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b80      	cmp	r3, #128	; 0x80
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8e2 	bl	80025ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f838 	bl	80024c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b20      	cmp	r3, #32
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0220 	mvn.w	r2, #32
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8ac 	bl	80025d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <TIM_Base_SetConfig+0xe4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00f      	beq.n	8002510 <TIM_Base_SetConfig+0x38>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0x38>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <TIM_Base_SetConfig+0xe8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0x38>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <TIM_Base_SetConfig+0xec>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0x38>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <TIM_Base_SetConfig+0xf0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <TIM_Base_SetConfig+0xe4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01b      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d017      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <TIM_Base_SetConfig+0xe8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <TIM_Base_SetConfig+0xec>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00f      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <TIM_Base_SetConfig+0xf0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <TIM_Base_SetConfig+0xf4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <TIM_Base_SetConfig+0xf8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_Base_SetConfig+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <TIM_Base_SetConfig+0xfc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d108      	bne.n	8002574 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <TIM_Base_SetConfig+0xe4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d103      	bne.n	80025a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	615a      	str	r2, [r3, #20]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800
 80025c8:	40000c00 	.word	0x40000c00
 80025cc:	40014000 	.word	0x40014000
 80025d0:	40014400 	.word	0x40014400
 80025d4:	40014800 	.word	0x40014800

080025d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e03f      	b.n	8002692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fc78 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f929 	bl	800289c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b08a      	sub	sp, #40	; 0x28
 800269e:	af02      	add	r7, sp, #8
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d17c      	bne.n	80027b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_UART_Transmit+0x2c>
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e075      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x3e>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e06e      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2221      	movs	r2, #33	; 0x21
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fd8b 	bl	8001208 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	d108      	bne.n	800271c <HAL_UART_Transmit+0x82>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	e003      	b.n	8002724 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800272c:	e02a      	b.n	8002784 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f840 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e036      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	3302      	adds	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e007      	b.n	8002776 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3301      	adds	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1cf      	bne.n	800272e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f810 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e006      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b090      	sub	sp, #64	; 0x40
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ce:	e050      	b.n	8002872 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d04c      	beq.n	8002872 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x30>
 80027de:	f7fe fd13 	bl	8001208 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d241      	bcs.n	8002872 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280e:	637a      	str	r2, [r7, #52]	; 0x34
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e5      	bne.n	80027ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	613b      	str	r3, [r7, #16]
   return(result);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002842:	623a      	str	r2, [r7, #32]
 8002844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	69f9      	ldr	r1, [r7, #28]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e5      	bne.n	8002822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e00f      	b.n	8002892 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	429a      	cmp	r2, r3
 800288e:	d09f      	beq.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3740      	adds	r7, #64	; 0x40
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a0:	b09f      	sub	sp, #124	; 0x7c
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	68d9      	ldr	r1, [r3, #12]
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	ea40 0301 	orr.w	r3, r0, r1
 80028bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028e0:	f021 010c 	bic.w	r1, r1, #12
 80028e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ea:	430b      	orrs	r3, r1
 80028ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	6999      	ldr	r1, [r3, #24]
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	ea40 0301 	orr.w	r3, r0, r1
 8002904:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4bc5      	ldr	r3, [pc, #788]	; (8002c20 <UART_SetConfig+0x384>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d004      	beq.n	800291a <UART_SetConfig+0x7e>
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4bc3      	ldr	r3, [pc, #780]	; (8002c24 <UART_SetConfig+0x388>)
 8002916:	429a      	cmp	r2, r3
 8002918:	d103      	bne.n	8002922 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800291a:	f7ff fbab 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 800291e:	6778      	str	r0, [r7, #116]	; 0x74
 8002920:	e002      	b.n	8002928 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002922:	f7ff fb93 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8002926:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002930:	f040 80b6 	bne.w	8002aa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002936:	461c      	mov	r4, r3
 8002938:	f04f 0500 	mov.w	r5, #0
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	1891      	adds	r1, r2, r2
 8002942:	6439      	str	r1, [r7, #64]	; 0x40
 8002944:	415b      	adcs	r3, r3
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800294c:	1912      	adds	r2, r2, r4
 800294e:	eb45 0303 	adc.w	r3, r5, r3
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	00d9      	lsls	r1, r3, #3
 800295c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002960:	00d0      	lsls	r0, r2, #3
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	1911      	adds	r1, r2, r4
 8002968:	6639      	str	r1, [r7, #96]	; 0x60
 800296a:	416b      	adcs	r3, r5
 800296c:	667b      	str	r3, [r7, #100]	; 0x64
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	1891      	adds	r1, r2, r2
 800297a:	63b9      	str	r1, [r7, #56]	; 0x38
 800297c:	415b      	adcs	r3, r3
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002984:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002988:	f7fd fc82 	bl	8000290 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4ba5      	ldr	r3, [pc, #660]	; (8002c28 <UART_SetConfig+0x38c>)
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	011e      	lsls	r6, r3, #4
 800299a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299c:	461c      	mov	r4, r3
 800299e:	f04f 0500 	mov.w	r5, #0
 80029a2:	4622      	mov	r2, r4
 80029a4:	462b      	mov	r3, r5
 80029a6:	1891      	adds	r1, r2, r2
 80029a8:	6339      	str	r1, [r7, #48]	; 0x30
 80029aa:	415b      	adcs	r3, r3
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
 80029ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029b2:	1912      	adds	r2, r2, r4
 80029b4:	eb45 0303 	adc.w	r3, r5, r3
 80029b8:	f04f 0000 	mov.w	r0, #0
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	00d9      	lsls	r1, r3, #3
 80029c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c6:	00d0      	lsls	r0, r2, #3
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	1911      	adds	r1, r2, r4
 80029ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80029d0:	416b      	adcs	r3, r5
 80029d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80029e2:	415b      	adcs	r3, r3
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029ee:	f7fd fc4f 	bl	8000290 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <UART_SetConfig+0x38c>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	; 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <UART_SetConfig+0x38c>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a18:	441e      	add	r6, r3
 8002a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	1894      	adds	r4, r2, r2
 8002a28:	623c      	str	r4, [r7, #32]
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a32:	1812      	adds	r2, r2, r0
 8002a34:	eb41 0303 	adc.w	r3, r1, r3
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	f04f 0500 	mov.w	r5, #0
 8002a40:	00dd      	lsls	r5, r3, #3
 8002a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a46:	00d4      	lsls	r4, r2, #3
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	1814      	adds	r4, r2, r0
 8002a4e:	653c      	str	r4, [r7, #80]	; 0x50
 8002a50:	414b      	adcs	r3, r1
 8002a52:	657b      	str	r3, [r7, #84]	; 0x54
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	1891      	adds	r1, r2, r2
 8002a60:	61b9      	str	r1, [r7, #24]
 8002a62:	415b      	adcs	r3, r3
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a6e:	f7fd fc0f 	bl	8000290 <__aeabi_uldivmod>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4b6c      	ldr	r3, [pc, #432]	; (8002c28 <UART_SetConfig+0x38c>)
 8002a78:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	2164      	movs	r1, #100	; 0x64
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	3332      	adds	r3, #50	; 0x32
 8002a8a:	4a67      	ldr	r2, [pc, #412]	; (8002c28 <UART_SetConfig+0x38c>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	f003 0207 	and.w	r2, r3, #7
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4432      	add	r2, r6
 8002a9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a9e:	e0b9      	b.n	8002c14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa2:	461c      	mov	r4, r3
 8002aa4:	f04f 0500 	mov.w	r5, #0
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	462b      	mov	r3, r5
 8002aac:	1891      	adds	r1, r2, r2
 8002aae:	6139      	str	r1, [r7, #16]
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ab8:	1912      	adds	r2, r2, r4
 8002aba:	eb45 0303 	adc.w	r3, r5, r3
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	00d9      	lsls	r1, r3, #3
 8002ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002acc:	00d0      	lsls	r0, r2, #3
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	eb12 0804 	adds.w	r8, r2, r4
 8002ad6:	eb43 0905 	adc.w	r9, r3, r5
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	008b      	lsls	r3, r1, #2
 8002aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002af2:	0082      	lsls	r2, r0, #2
 8002af4:	4640      	mov	r0, r8
 8002af6:	4649      	mov	r1, r9
 8002af8:	f7fd fbca 	bl	8000290 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <UART_SetConfig+0x38c>)
 8002b02:	fba3 2302 	umull	r2, r3, r3, r2
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	011e      	lsls	r6, r3, #4
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	1894      	adds	r4, r2, r2
 8002b18:	60bc      	str	r4, [r7, #8]
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b22:	1812      	adds	r2, r2, r0
 8002b24:	eb41 0303 	adc.w	r3, r1, r3
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	f04f 0500 	mov.w	r5, #0
 8002b30:	00dd      	lsls	r5, r3, #3
 8002b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b36:	00d4      	lsls	r4, r2, #3
 8002b38:	4622      	mov	r2, r4
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	1814      	adds	r4, r2, r0
 8002b3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b40:	414b      	adcs	r3, r1
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	008b      	lsls	r3, r1, #2
 8002b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b5c:	0082      	lsls	r2, r0, #2
 8002b5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b62:	f7fd fb95 	bl	8000290 <__aeabi_uldivmod>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <UART_SetConfig+0x38c>)
 8002b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	2164      	movs	r1, #100	; 0x64
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	3332      	adds	r3, #50	; 0x32
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <UART_SetConfig+0x38c>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8a:	441e      	add	r6, r3
 8002b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	1894      	adds	r4, r2, r2
 8002b9a:	603c      	str	r4, [r7, #0]
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba4:	1812      	adds	r2, r2, r0
 8002ba6:	eb41 0303 	adc.w	r3, r1, r3
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	f04f 0500 	mov.w	r5, #0
 8002bb2:	00dd      	lsls	r5, r3, #3
 8002bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bb8:	00d4      	lsls	r4, r2, #3
 8002bba:	4622      	mov	r2, r4
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	eb12 0a00 	adds.w	sl, r2, r0
 8002bc2:	eb43 0b01 	adc.w	fp, r3, r1
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	008b      	lsls	r3, r1, #2
 8002bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bde:	0082      	lsls	r2, r0, #2
 8002be0:	4650      	mov	r0, sl
 8002be2:	4659      	mov	r1, fp
 8002be4:	f7fd fb54 	bl	8000290 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <UART_SetConfig+0x38c>)
 8002bee:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2164      	movs	r1, #100	; 0x64
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <UART_SetConfig+0x38c>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4432      	add	r2, r6
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	377c      	adds	r7, #124	; 0x7c
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	51eb851f 	.word	0x51eb851f

08002c2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c30:	f001 f832 	bl	8003c98 <vTaskStartScheduler>
  
  return osOK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f103 0208 	add.w	r2, r3, #8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f103 0208 	add.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 0208 	add.w	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d103      	bne.n	8002cfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e00c      	b.n	8002d16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e002      	b.n	8002d0a <vListInsert+0x2e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d2f6      	bcs.n	8002d04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6852      	ldr	r2, [r2, #4]
 8002d6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d103      	bne.n	8002d82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dce:	f002 f899 	bl	8004f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	441a      	add	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d114      	bne.n	8002e4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01a      	beq.n	8002e62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3310      	adds	r3, #16
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 f9e9 	bl	8004208 <xTaskRemoveFromEventList>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <xQueueGenericReset+0xcc>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	e009      	b.n	8002e62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3310      	adds	r3, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fef1 	bl	8002c3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3324      	adds	r3, #36	; 0x24
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff feec 	bl	8002c3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e62:	f002 f87f 	bl	8004f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	e000ed04 	.word	0xe000ed04

08002e74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	613b      	str	r3, [r7, #16]
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3350      	adds	r3, #80	; 0x50
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 f94b 	bl	8005148 <pvPortMalloc>
 8002eb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3350      	adds	r3, #80	; 0x50
 8002ec2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f805 	bl	8002ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e002      	b.n	8002f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f0e:	2101      	movs	r1, #1
 8002f10:	69b8      	ldr	r0, [r7, #24]
 8002f12:	f7ff ff47 	bl	8002da4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f46:	2300      	movs	r3, #0
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f81d 	bl	8002f8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f64:	2301      	movs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6939      	ldr	r1, [r7, #16]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff7e 	bl	8002e74 <xQueueGenericCreate>
 8002f78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ffd3 	bl	8002f26 <prvInitialiseMutex>

		return xNewQueue;
 8002f80:	68fb      	ldr	r3, [r7, #12]
	}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericSend+0x32>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <xQueueGenericSend+0x40>
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <xQueueGenericSend+0x44>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <xQueueGenericSend+0x46>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <xQueueGenericSend+0x60>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d103      	bne.n	8002ffa <xQueueGenericSend+0x6e>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <xQueueGenericSend+0x72>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <xQueueGenericSend+0x74>
 8002ffe:	2300      	movs	r3, #0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <xQueueGenericSend+0x8e>
	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	623b      	str	r3, [r7, #32]
}
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800301a:	f001 fb65 	bl	80046e8 <xTaskGetSchedulerState>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <xQueueGenericSend+0x9e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueGenericSend+0xa2>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericSend+0xa4>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xQueueGenericSend+0xbe>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	61fb      	str	r3, [r7, #28]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800304a:	f001 ff5b 	bl	8004f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <xQueueGenericSend+0xd4>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d129      	bne.n	80030b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003066:	f000 fb2f 	bl	80036c8 <prvCopyDataToQueue>
 800306a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f001 f8c5 	bl	8004208 <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <xQueueGenericSend+0x1f8>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	e00a      	b.n	80030ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <xQueueGenericSend+0x1f8>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030ac:	f001 ff5a 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e063      	b.n	800317c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ba:	f001 ff53 	bl	8004f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	e05c      	b.n	800317c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f8fd 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d2:	2301      	movs	r3, #1
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d6:	f001 ff45 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030da:	f000 fe25 	bl	8003d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030de:	f001 ff11 	bl	8004f04 <vPortEnterCritical>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d103      	bne.n	80030f8 <xQueueGenericSend+0x16c>
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d103      	bne.n	800310e <xQueueGenericSend+0x182>
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310e:	f001 ff29 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003112:	1d3a      	adds	r2, r7, #4
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f8ec 	bl	80042f8 <xTaskCheckForTimeOut>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d124      	bne.n	8003170 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003128:	f000 fbc6 	bl	80038b8 <prvIsQueueFull>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d018      	beq.n	8003164 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	3310      	adds	r3, #16
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f001 f840 	bl	80041c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003142:	f000 fb51 	bl	80037e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003146:	f000 fdfd 	bl	8003d44 <xTaskResumeAll>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f af7c 	bne.w	800304a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <xQueueGenericSend+0x1f8>)
 8003154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	e772      	b.n	800304a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003166:	f000 fb3f 	bl	80037e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800316a:	f000 fdeb 	bl	8003d44 <xTaskResumeAll>
 800316e:	e76c      	b.n	800304a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003172:	f000 fb39 	bl	80037e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003176:	f000 fde5 	bl	8003d44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800317a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800317c:	4618      	mov	r0, r3
 800317e:	3738      	adds	r7, #56	; 0x38
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b090      	sub	sp, #64	; 0x40
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <xQueueGenericSendFromISR+0x3c>
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueGenericSendFromISR+0x40>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueGenericSendFromISR+0x42>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d103      	bne.n	80031f2 <xQueueGenericSendFromISR+0x6a>
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <xQueueGenericSendFromISR+0x6e>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <xQueueGenericSendFromISR+0x70>
 80031f6:	2300      	movs	r3, #0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	623b      	str	r3, [r7, #32]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003212:	f001 ff59 	bl	80050c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003216:	f3ef 8211 	mrs	r2, BASEPRI
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	61fa      	str	r2, [r7, #28]
 800322c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800322e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <xQueueGenericSendFromISR+0xbc>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d12f      	bne.n	80032a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800324a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800325a:	f000 fa35 	bl	80036c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800325e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d112      	bne.n	800328e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	4618      	mov	r0, r3
 8003276:	f000 ffc7 	bl	8004208 <xTaskRemoveFromEventList>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e007      	b.n	800329e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800328e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003292:	3301      	adds	r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	b25a      	sxtb	r2, r3
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800329e:	2301      	movs	r3, #1
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032a2:	e001      	b.n	80032a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3740      	adds	r7, #64	; 0x40
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <xQueueReceive+0x30>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	623b      	str	r3, [r7, #32]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <xQueueReceive+0x3e>
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <xQueueReceive+0x42>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueReceive+0x44>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <xQueueReceive+0x5e>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	61fb      	str	r3, [r7, #28]
}
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800331e:	f001 f9e3 	bl	80046e8 <xTaskGetSchedulerState>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <xQueueReceive+0x6e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <xQueueReceive+0x72>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueReceive+0x74>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueReceive+0x8e>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61bb      	str	r3, [r7, #24]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800334e:	f001 fdd9 	bl	8004f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01f      	beq.n	800339e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f000 fa1b 	bl	800379c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00f      	beq.n	8003396 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	3310      	adds	r3, #16
 800337a:	4618      	mov	r0, r3
 800337c:	f000 ff44 	bl	8004208 <xTaskRemoveFromEventList>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <xQueueReceive+0x1bc>)
 8003388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003396:	f001 fde5 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 800339a:	2301      	movs	r3, #1
 800339c:	e069      	b.n	8003472 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033a4:	f001 fdde 	bl	8004f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e062      	b.n	8003472 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 ff88 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033bc:	2301      	movs	r3, #1
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033c0:	f001 fdd0 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033c4:	f000 fcb0 	bl	8003d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033c8:	f001 fd9c 	bl	8004f04 <vPortEnterCritical>
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d103      	bne.n	80033e2 <xQueueReceive+0x122>
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d103      	bne.n	80033f8 <xQueueReceive+0x138>
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033f8:	f001 fdb4 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033fc:	1d3a      	adds	r2, r7, #4
 80033fe:	f107 0310 	add.w	r3, r7, #16
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 ff77 	bl	80042f8 <xTaskCheckForTimeOut>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d123      	bne.n	8003458 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003412:	f000 fa3b 	bl	800388c <prvIsQueueEmpty>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	3324      	adds	r3, #36	; 0x24
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fecb 	bl	80041c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800342a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342c:	f000 f9dc 	bl	80037e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003430:	f000 fc88 	bl	8003d44 <xTaskResumeAll>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d189      	bne.n	800334e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <xQueueReceive+0x1bc>)
 800343c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	e780      	b.n	800334e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800344c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344e:	f000 f9cb 	bl	80037e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003452:	f000 fc77 	bl	8003d44 <xTaskResumeAll>
 8003456:	e77a      	b.n	800334e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800345a:	f000 f9c5 	bl	80037e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800345e:	f000 fc71 	bl	8003d44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003464:	f000 fa12 	bl	800388c <prvIsQueueEmpty>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	f43f af6f 	beq.w	800334e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003472:	4618      	mov	r0, r3
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61fb      	str	r3, [r7, #28]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d0:	f001 f90a 	bl	80046e8 <xTaskGetSchedulerState>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <xQueueSemaphoreTake+0x60>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <xQueueSemaphoreTake+0x64>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <xQueueSemaphoreTake+0x66>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	61bb      	str	r3, [r7, #24]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003500:	f001 fd00 	bl	8004f04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d024      	beq.n	800355a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003520:	f001 fb46 	bl	8004bb0 <pvTaskIncrementMutexHeldCount>
 8003524:	4602      	mov	r2, r0
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00f      	beq.n	8003552 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	3310      	adds	r3, #16
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fe66 	bl	8004208 <xTaskRemoveFromEventList>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <xQueueSemaphoreTake+0x214>)
 8003544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003552:	f001 fd07 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 8003556:	2301      	movs	r3, #1
 8003558:	e097      	b.n	800368a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	617b      	str	r3, [r7, #20]
}
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800357c:	f001 fcf2 	bl	8004f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003580:	2300      	movs	r3, #0
 8003582:	e082      	b.n	800368a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fe9c 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003598:	f001 fce4 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359c:	f000 fbc4 	bl	8003d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035a0:	f001 fcb0 	bl	8004f04 <vPortEnterCritical>
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d103      	bne.n	80035ba <xQueueSemaphoreTake+0x13a>
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d103      	bne.n	80035d0 <xQueueSemaphoreTake+0x150>
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d0:	f001 fcc8 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d4:	463a      	mov	r2, r7
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fe8b 	bl	80042f8 <xTaskCheckForTimeOut>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d132      	bne.n	800364e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ea:	f000 f94f 	bl	800388c <prvIsQueueEmpty>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d026      	beq.n	8003642 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035fc:	f001 fc82 	bl	8004f04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f88d 	bl	8004724 <xTaskPriorityInherit>
 800360a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800360c:	f001 fcaa 	bl	8004f64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	3324      	adds	r3, #36	; 0x24
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fdd1 	bl	80041c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800361e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003620:	f000 f8e2 	bl	80037e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003624:	f000 fb8e 	bl	8003d44 <xTaskResumeAll>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	f47f af68 	bne.w	8003500 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <xQueueSemaphoreTake+0x214>)
 8003632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	e75e      	b.n	8003500 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003644:	f000 f8d0 	bl	80037e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003648:	f000 fb7c 	bl	8003d44 <xTaskResumeAll>
 800364c:	e758      	b.n	8003500 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800364e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003650:	f000 f8ca 	bl	80037e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003654:	f000 fb76 	bl	8003d44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800365a:	f000 f917 	bl	800388c <prvIsQueueEmpty>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f43f af4d 	beq.w	8003500 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800366c:	f001 fc4a 	bl	8004f04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003672:	f000 f811 	bl	8003698 <prvGetDisinheritPriorityAfterTimeout>
 8003676:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367e:	4618      	mov	r0, r3
 8003680:	f001 f94c 	bl	800491c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003684:	f001 fc6e 	bl	8004f64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800368a:	4618      	mov	r0, r3
 800368c:	3738      	adds	r7, #56	; 0x38
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1c3 0307 	rsb	r3, r3, #7
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e001      	b.n	80036ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036ba:	68fb      	ldr	r3, [r7, #12]
	}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d14d      	bne.n	800378a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f88c 	bl	8004810 <xTaskPriorityDisinherit>
 80036f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	e043      	b.n	800378a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d119      	bne.n	800373c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6858      	ldr	r0, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	461a      	mov	r2, r3
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	f001 ff38 	bl	8005588 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	d32b      	bcc.n	800378a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e026      	b.n	800378a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68d8      	ldr	r0, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	461a      	mov	r2, r3
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	f001 ff1e 	bl	8005588 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	425b      	negs	r3, r3
 8003756:	441a      	add	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d207      	bcs.n	8003778 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	425b      	negs	r3, r3
 8003772:	441a      	add	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d105      	bne.n	800378a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3b01      	subs	r3, #1
 8003788:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003792:	697b      	ldr	r3, [r7, #20]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	441a      	add	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d303      	bcc.n	80037d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68d9      	ldr	r1, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	461a      	mov	r2, r3
 80037da:	6838      	ldr	r0, [r7, #0]
 80037dc:	f001 fed4 	bl	8005588 <memcpy>
	}
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037f0:	f001 fb88 	bl	8004f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037fc:	e011      	b.n	8003822 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3324      	adds	r3, #36	; 0x24
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fcfc 	bl	8004208 <xTaskRemoveFromEventList>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003816:	f000 fdd1 	bl	80043bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	3b01      	subs	r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	dce9      	bgt.n	80037fe <prvUnlockQueue+0x16>
 800382a:	e000      	b.n	800382e <prvUnlockQueue+0x46>
					break;
 800382c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003836:	f001 fb95 	bl	8004f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800383a:	f001 fb63 	bl	8004f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003844:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003846:	e011      	b.n	800386c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d012      	beq.n	8003876 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3310      	adds	r3, #16
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fcd7 	bl	8004208 <xTaskRemoveFromEventList>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003860:	f000 fdac 	bl	80043bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	3b01      	subs	r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800386c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003870:	2b00      	cmp	r3, #0
 8003872:	dce9      	bgt.n	8003848 <prvUnlockQueue+0x60>
 8003874:	e000      	b.n	8003878 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003876:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	22ff      	movs	r2, #255	; 0xff
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003880:	f001 fb70 	bl	8004f64 <vPortExitCritical>
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003894:	f001 fb36 	bl	8004f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e001      	b.n	80038aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038aa:	f001 fb5b 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038c0:	f001 fb20 	bl	8004f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d102      	bne.n	80038d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e001      	b.n	80038da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038da:	f001 fb43 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af04      	add	r7, sp, #16
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fc23 	bl	8005148 <pvPortMalloc>
 8003902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00e      	beq.n	8003928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800390a:	205c      	movs	r0, #92	; 0x5c
 800390c:	f001 fc1c 	bl	8005148 <pvPortMalloc>
 8003910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
 800391e:	e005      	b.n	800392c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f001 fcdd 	bl	80052e0 <vPortFree>
 8003926:	e001      	b.n	800392c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d013      	beq.n	800395a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	2300      	movs	r3, #0
 8003936:	9303      	str	r3, [sp, #12]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	9302      	str	r3, [sp, #8]
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f80e 	bl	800396a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394e:	69f8      	ldr	r0, [r7, #28]
 8003950:	f000 f89a 	bl	8003a88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003954:	2301      	movs	r3, #1
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e002      	b.n	8003960 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
 800395e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003960:	69bb      	ldr	r3, [r7, #24]
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b088      	sub	sp, #32
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	461a      	mov	r2, r3
 8003982:	21a5      	movs	r1, #165	; 0xa5
 8003984:	f001 fe0e 	bl	80055a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003992:	3b01      	subs	r3, #1
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f023 0307 	bic.w	r3, r3, #7
 80039a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	617b      	str	r3, [r7, #20]
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01f      	beq.n	8003a08 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	e012      	b.n	80039f4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	7819      	ldrb	r1, [r3, #0]
 80039d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	3334      	adds	r3, #52	; 0x34
 80039de:	460a      	mov	r2, r1
 80039e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3301      	adds	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	d9e9      	bls.n	80039ce <prvInitialiseNewTask+0x64>
 80039fa:	e000      	b.n	80039fe <prvInitialiseNewTask+0x94>
			{
				break;
 80039fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a06:	e003      	b.n	8003a10 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d901      	bls.n	8003a1a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a16:	2306      	movs	r3, #6
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2200      	movs	r2, #0
 8003a2a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff f922 	bl	8002c7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	3318      	adds	r3, #24
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f91d 	bl	8002c7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	f1c3 0207 	rsb	r2, r3, #7
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	69b8      	ldr	r0, [r7, #24]
 8003a6a:	f001 f91b 	bl	8004ca4 <pxPortInitialiseStack>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a80:	bf00      	nop
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a90:	f001 fa38 	bl	8004f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <prvAddNewTaskToReadyList+0xc0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <prvAddNewTaskToReadyList+0xc0>)
 8003a9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <prvAddNewTaskToReadyList+0xc4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <prvAddNewTaskToReadyList+0xc4>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <prvAddNewTaskToReadyList+0xc0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d110      	bne.n	8003ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ab4:	f000 fca6 	bl	8004404 <prvInitialiseTaskLists>
 8003ab8:	e00d      	b.n	8003ad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aba:	4b25      	ldr	r3, [pc, #148]	; (8003b50 <prvAddNewTaskToReadyList+0xc8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <prvAddNewTaskToReadyList+0xc4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d802      	bhi.n	8003ad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <prvAddNewTaskToReadyList+0xc4>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <prvAddNewTaskToReadyList+0xcc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <prvAddNewTaskToReadyList+0xcc>)
 8003ade:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <prvAddNewTaskToReadyList+0xcc>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <prvAddNewTaskToReadyList+0xd0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <prvAddNewTaskToReadyList+0xd0>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <prvAddNewTaskToReadyList+0xd4>)
 8003b08:	441a      	add	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7ff f8bf 	bl	8002c94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b16:	f001 fa25 	bl	8004f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <prvAddNewTaskToReadyList+0xc8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <prvAddNewTaskToReadyList+0xc4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <prvAddNewTaskToReadyList+0xd8>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200001b4 	.word	0x200001b4
 8003b4c:	200000b4 	.word	0x200000b4
 8003b50:	200001c0 	.word	0x200001c0
 8003b54:	200001d0 	.word	0x200001d0
 8003b58:	200001bc 	.word	0x200001bc
 8003b5c:	200000b8 	.word	0x200000b8
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <vTaskDelay+0x60>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <vTaskDelay+0x30>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b94:	f000 f8c8 	bl	8003d28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b98:	2100      	movs	r1, #0
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f001 f81c 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ba0:	f000 f8d0 	bl	8003d44 <xTaskResumeAll>
 8003ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <vTaskDelay+0x64>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	200001dc 	.word	0x200001dc
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <eTaskGetState+0x28>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	60bb      	str	r3, [r7, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <eTaskGetState+0xb8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d102      	bne.n	8003c04 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e03a      	b.n	8003c7a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8003c04:	f001 f97e 	bl	8004f04 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <eTaskGetState+0xbc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <eTaskGetState+0xc0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003c1a:	f001 f9a3 	bl	8004f64 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d003      	beq.n	8003c2e <eTaskGetState+0x62>
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d102      	bne.n	8003c34 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e022      	b.n	8003c7a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <eTaskGetState+0xc4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d112      	bne.n	8003c62 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d102      	bne.n	8003c56 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8003c50:	2302      	movs	r3, #2
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e011      	b.n	8003c7a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8003c56:	2303      	movs	r3, #3
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e00e      	b.n	8003c7a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e00b      	b.n	8003c7a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <eTaskGetState+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d002      	beq.n	8003c70 <eTaskGetState+0xa4>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003c70:	2304      	movs	r3, #4
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e001      	b.n	8003c7a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003c76:	2301      	movs	r3, #1
 8003c78:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003c7a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	200000b4 	.word	0x200000b4
 8003c88:	2000016c 	.word	0x2000016c
 8003c8c:	20000170 	.word	0x20000170
 8003c90:	200001a0 	.word	0x200001a0
 8003c94:	20000188 	.word	0x20000188

08003c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <vTaskStartScheduler+0x78>)
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	491a      	ldr	r1, [pc, #104]	; (8003d14 <vTaskStartScheduler+0x7c>)
 8003cac:	481a      	ldr	r0, [pc, #104]	; (8003d18 <vTaskStartScheduler+0x80>)
 8003cae:	f7ff fe1b 	bl	80038e8 <xTaskCreate>
 8003cb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d116      	bne.n	8003ce8 <vTaskStartScheduler+0x50>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <vTaskStartScheduler+0x84>)
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <vTaskStartScheduler+0x88>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <vTaskStartScheduler+0x8c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ce2:	f001 f86d 	bl	8004dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ce6:	e00e      	b.n	8003d06 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d10a      	bne.n	8003d06 <vTaskStartScheduler+0x6e>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	607b      	str	r3, [r7, #4]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <vTaskStartScheduler+0x6c>
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200001d8 	.word	0x200001d8
 8003d14:	080062c4 	.word	0x080062c4
 8003d18:	080043d5 	.word	0x080043d5
 8003d1c:	200001d4 	.word	0x200001d4
 8003d20:	200001c0 	.word	0x200001c0
 8003d24:	200001b8 	.word	0x200001b8

08003d28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <vTaskSuspendAll+0x18>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	4a03      	ldr	r2, [pc, #12]	; (8003d40 <vTaskSuspendAll+0x18>)
 8003d34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	200001dc 	.word	0x200001dc

08003d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <xTaskResumeAll+0x114>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	603b      	str	r3, [r7, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d70:	f001 f8c8 	bl	8004f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <xTaskResumeAll+0x114>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	4a37      	ldr	r2, [pc, #220]	; (8003e58 <xTaskResumeAll+0x114>)
 8003d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <xTaskResumeAll+0x114>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d161      	bne.n	8003e4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d86:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <xTaskResumeAll+0x118>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d05d      	beq.n	8003e4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d8e:	e02e      	b.n	8003dee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <xTaskResumeAll+0x11c>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3318      	adds	r3, #24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe ffd6 	bl	8002d4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ffd1 	bl	8002d4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <xTaskResumeAll+0x120>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <xTaskResumeAll+0x120>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <xTaskResumeAll+0x124>)
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7fe ff5d 	bl	8002c94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <xTaskResumeAll+0x128>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <xTaskResumeAll+0x12c>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <xTaskResumeAll+0x11c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cc      	bne.n	8003d90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dfc:	f000 fc54 	bl	80046a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e00:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <xTaskResumeAll+0x130>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e0c:	f000 f8c4 	bl	8003f98 <xTaskIncrementTick>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e16:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <xTaskResumeAll+0x12c>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f1      	bne.n	8003e0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <xTaskResumeAll+0x130>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <xTaskResumeAll+0x12c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <xTaskResumeAll+0x134>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e4a:	f001 f88b 	bl	8004f64 <vPortExitCritical>

	return xAlreadyYielded;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	200001dc 	.word	0x200001dc
 8003e5c:	200001b4 	.word	0x200001b4
 8003e60:	20000174 	.word	0x20000174
 8003e64:	200001bc 	.word	0x200001bc
 8003e68:	200000b8 	.word	0x200000b8
 8003e6c:	200000b4 	.word	0x200000b4
 8003e70:	200001c8 	.word	0x200001c8
 8003e74:	200001c4 	.word	0x200001c4
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8003e90:	f7ff ff4a 	bl	8003d28 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003e94:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <uxTaskGetSystemState+0x104>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d368      	bcc.n	8003f70 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1898      	adds	r0, r3, r2
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <uxTaskGetSystemState+0x108>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f000 fb71 	bl	80045ac <prvListTasksWithinSingleList>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	4413      	add	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e2      	bne.n	8003e9e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <uxTaskGetSystemState+0x10c>)
 8003eea:	6811      	ldr	r1, [r2, #0]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb5c 	bl	80045ac <prvListTasksWithinSingleList>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <uxTaskGetSystemState+0x110>)
 8003f0e:	6811      	ldr	r1, [r2, #0]
 8003f10:	2202      	movs	r2, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fb4a 	bl	80045ac <prvListTasksWithinSingleList>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	2204      	movs	r2, #4
 8003f32:	4917      	ldr	r1, [pc, #92]	; (8003f90 <uxTaskGetSystemState+0x114>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fb39 	bl	80045ac <prvListTasksWithinSingleList>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4413      	add	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	2203      	movs	r2, #3
 8003f54:	490f      	ldr	r1, [pc, #60]	; (8003f94 <uxTaskGetSystemState+0x118>)
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fb28 	bl	80045ac <prvListTasksWithinSingleList>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	4413      	add	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003f70:	f7ff fee8 	bl	8003d44 <xTaskResumeAll>

		return uxTask;
 8003f74:	697b      	ldr	r3, [r7, #20]
	}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200001b4 	.word	0x200001b4
 8003f84:	200000b8 	.word	0x200000b8
 8003f88:	2000016c 	.word	0x2000016c
 8003f8c:	20000170 	.word	0x20000170
 8003f90:	20000188 	.word	0x20000188
 8003f94:	200001a0 	.word	0x200001a0

08003f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa2:	4b4e      	ldr	r3, [pc, #312]	; (80040dc <xTaskIncrementTick+0x144>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 808e 	bne.w	80040c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fac:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <xTaskIncrementTick+0x148>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fb4:	4a4a      	ldr	r2, [pc, #296]	; (80040e0 <xTaskIncrementTick+0x148>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d120      	bne.n	8004002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fc0:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <xTaskIncrementTick+0x14c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	603b      	str	r3, [r7, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <xTaskIncrementTick+0x46>
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <xTaskIncrementTick+0x14c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <xTaskIncrementTick+0x150>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a3e      	ldr	r2, [pc, #248]	; (80040e4 <xTaskIncrementTick+0x14c>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4a3e      	ldr	r2, [pc, #248]	; (80040e8 <xTaskIncrementTick+0x150>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <xTaskIncrementTick+0x154>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <xTaskIncrementTick+0x154>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	f000 fb53 	bl	80046a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <xTaskIncrementTick+0x158>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d348      	bcc.n	800409e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400c:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <xTaskIncrementTick+0x14c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <xTaskIncrementTick+0x158>)
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	601a      	str	r2, [r3, #0]
					break;
 800401e:	e03e      	b.n	800409e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004020:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <xTaskIncrementTick+0x14c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	d203      	bcs.n	8004040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004038:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <xTaskIncrementTick+0x158>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800403e:	e02e      	b.n	800409e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	3304      	adds	r3, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fe82 	bl	8002d4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3318      	adds	r3, #24
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fe79 	bl	8002d4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	2201      	movs	r2, #1
 8004062:	409a      	lsls	r2, r3
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <xTaskIncrementTick+0x15c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <xTaskIncrementTick+0x15c>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <xTaskIncrementTick+0x160>)
 800407c:	441a      	add	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe fe05 	bl	8002c94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <xTaskIncrementTick+0x164>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	429a      	cmp	r2, r3
 8004096:	d3b9      	bcc.n	800400c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	e7b6      	b.n	800400c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <xTaskIncrementTick+0x164>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4914      	ldr	r1, [pc, #80]	; (80040f8 <xTaskIncrementTick+0x160>)
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d901      	bls.n	80040ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <xTaskIncrementTick+0x168>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e004      	b.n	80040d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040c8:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <xTaskIncrementTick+0x16c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <xTaskIncrementTick+0x16c>)
 80040d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	200001dc 	.word	0x200001dc
 80040e0:	200001b8 	.word	0x200001b8
 80040e4:	2000016c 	.word	0x2000016c
 80040e8:	20000170 	.word	0x20000170
 80040ec:	200001cc 	.word	0x200001cc
 80040f0:	200001d4 	.word	0x200001d4
 80040f4:	200001bc 	.word	0x200001bc
 80040f8:	200000b8 	.word	0x200000b8
 80040fc:	200000b4 	.word	0x200000b4
 8004100:	200001c8 	.word	0x200001c8
 8004104:	200001c4 	.word	0x200001c4

08004108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800410e:	4b27      	ldr	r3, [pc, #156]	; (80041ac <vTaskSwitchContext+0xa4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <vTaskSwitchContext+0xa8>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800411c:	e03f      	b.n	800419e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <vTaskSwitchContext+0xa8>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004124:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <vTaskSwitchContext+0xac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004132:	7afb      	ldrb	r3, [r7, #11]
 8004134:	f1c3 031f 	rsb	r3, r3, #31
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	491f      	ldr	r1, [pc, #124]	; (80041b8 <vTaskSwitchContext+0xb0>)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <vTaskSwitchContext+0x5c>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
}
 8004160:	bf00      	nop
 8004162:	e7fe      	b.n	8004162 <vTaskSwitchContext+0x5a>
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <vTaskSwitchContext+0xb0>)
 8004170:	4413      	add	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3308      	adds	r3, #8
 8004186:	429a      	cmp	r2, r3
 8004188:	d104      	bne.n	8004194 <vTaskSwitchContext+0x8c>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <vTaskSwitchContext+0xb4>)
 800419c:	6013      	str	r3, [r2, #0]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	200001dc 	.word	0x200001dc
 80041b0:	200001c8 	.word	0x200001c8
 80041b4:	200001bc 	.word	0x200001bc
 80041b8:	200000b8 	.word	0x200000b8
 80041bc:	200000b4 	.word	0x200000b4

080041c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60fb      	str	r3, [r7, #12]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <vTaskPlaceOnEventList+0x44>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3318      	adds	r3, #24
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fd74 	bl	8002cdc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041f4:	2101      	movs	r1, #1
 80041f6:	6838      	ldr	r0, [r7, #0]
 80041f8:	f000 fcee 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200000b4 	.word	0x200000b4

08004208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	60fb      	str	r3, [r7, #12]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3318      	adds	r3, #24
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fd88 	bl	8002d4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <xTaskRemoveFromEventList+0xac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11c      	bne.n	8004280 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fd7f 	bl	8002d4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	2201      	movs	r2, #1
 8004256:	409a      	lsls	r2, r3
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <xTaskRemoveFromEventList+0xb0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4313      	orrs	r3, r2
 800425e:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <xTaskRemoveFromEventList+0xb0>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <xTaskRemoveFromEventList+0xb4>)
 8004270:	441a      	add	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7fe fd0b 	bl	8002c94 <vListInsertEnd>
 800427e:	e005      	b.n	800428c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3318      	adds	r3, #24
 8004284:	4619      	mov	r1, r3
 8004286:	480e      	ldr	r0, [pc, #56]	; (80042c0 <xTaskRemoveFromEventList+0xb8>)
 8004288:	f7fe fd04 	bl	8002c94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <xTaskRemoveFromEventList+0xbc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d905      	bls.n	80042a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <xTaskRemoveFromEventList+0xc0>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e001      	b.n	80042aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042aa:	697b      	ldr	r3, [r7, #20]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200001dc 	.word	0x200001dc
 80042b8:	200001bc 	.word	0x200001bc
 80042bc:	200000b8 	.word	0x200000b8
 80042c0:	20000174 	.word	0x20000174
 80042c4:	200000b4 	.word	0x200000b4
 80042c8:	200001c8 	.word	0x200001c8

080042cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <vTaskInternalSetTimeOutState+0x24>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <vTaskInternalSetTimeOutState+0x28>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	200001cc 	.word	0x200001cc
 80042f4:	200001b8 	.word	0x200001b8

080042f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800433a:	f000 fde3 	bl	8004f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <xTaskCheckForTimeOut+0xbc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d102      	bne.n	800435e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e023      	b.n	80043a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <xTaskCheckForTimeOut+0xc0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d007      	beq.n	800437a <xTaskCheckForTimeOut+0x82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	e015      	b.n	80043a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	d20b      	bcs.n	800439c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff9b 	bl	80042cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e004      	b.n	80043a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043a6:	f000 fddd 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 80043aa:	69fb      	ldr	r3, [r7, #28]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200001b8 	.word	0x200001b8
 80043b8:	200001cc 	.word	0x200001cc

080043bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <vTaskMissedYield+0x14>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	200001c8 	.word	0x200001c8

080043d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043dc:	f000 f852 	bl	8004484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <prvIdleTask+0x28>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d9f9      	bls.n	80043dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <prvIdleTask+0x2c>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043f8:	e7f0      	b.n	80043dc <prvIdleTask+0x8>
 80043fa:	bf00      	nop
 80043fc:	200000b8 	.word	0x200000b8
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	e00c      	b.n	800442a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <prvInitialiseTaskLists+0x60>)
 800441c:	4413      	add	r3, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fc0b 	bl	8002c3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3301      	adds	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d9ef      	bls.n	8004410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004430:	480d      	ldr	r0, [pc, #52]	; (8004468 <prvInitialiseTaskLists+0x64>)
 8004432:	f7fe fc02 	bl	8002c3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004436:	480d      	ldr	r0, [pc, #52]	; (800446c <prvInitialiseTaskLists+0x68>)
 8004438:	f7fe fbff 	bl	8002c3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800443c:	480c      	ldr	r0, [pc, #48]	; (8004470 <prvInitialiseTaskLists+0x6c>)
 800443e:	f7fe fbfc 	bl	8002c3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004442:	480c      	ldr	r0, [pc, #48]	; (8004474 <prvInitialiseTaskLists+0x70>)
 8004444:	f7fe fbf9 	bl	8002c3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004448:	480b      	ldr	r0, [pc, #44]	; (8004478 <prvInitialiseTaskLists+0x74>)
 800444a:	f7fe fbf6 	bl	8002c3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <prvInitialiseTaskLists+0x78>)
 8004450:	4a05      	ldr	r2, [pc, #20]	; (8004468 <prvInitialiseTaskLists+0x64>)
 8004452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <prvInitialiseTaskLists+0x7c>)
 8004456:	4a05      	ldr	r2, [pc, #20]	; (800446c <prvInitialiseTaskLists+0x68>)
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200000b8 	.word	0x200000b8
 8004468:	20000144 	.word	0x20000144
 800446c:	20000158 	.word	0x20000158
 8004470:	20000174 	.word	0x20000174
 8004474:	20000188 	.word	0x20000188
 8004478:	200001a0 	.word	0x200001a0
 800447c:	2000016c 	.word	0x2000016c
 8004480:	20000170 	.word	0x20000170

08004484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800448a:	e019      	b.n	80044c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800448c:	f000 fd3a 	bl	8004f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <prvCheckTasksWaitingTermination+0x50>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe fc56 	bl	8002d4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <prvCheckTasksWaitingTermination+0x54>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <prvCheckTasksWaitingTermination+0x54>)
 80044aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <prvCheckTasksWaitingTermination+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <prvCheckTasksWaitingTermination+0x58>)
 80044b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044b6:	f000 fd55 	bl	8004f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8e4 	bl	8004688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <prvCheckTasksWaitingTermination+0x58>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e1      	bne.n	800448c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000188 	.word	0x20000188
 80044d8:	200001b4 	.word	0x200001b4
 80044dc:	2000019c 	.word	0x2000019c

080044e0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <vTaskGetInfo+0x1a>
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <vTaskGetInfo+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	e000      	b.n	80044fc <vTaskGetInfo+0x1c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b05      	cmp	r3, #5
 8004538:	d01a      	beq.n	8004570 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <vTaskGetInfo+0xc8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	429a      	cmp	r2, r3
 8004542:	d103      	bne.n	800454c <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	731a      	strb	r2, [r3, #12]
 800454a:	e018      	b.n	800457e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d112      	bne.n	800457e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8004558:	f7ff fbe6 	bl	8003d28 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2202      	movs	r2, #2
 8004568:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800456a:	f7ff fbeb 	bl	8003d44 <xTaskResumeAll>
 800456e:	e006      	b.n	800457e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f7ff fb2b 	bl	8003bcc <eTaskGetState>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f861 	bl	8004650 <prvTaskCheckFreeStackSpace>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004596:	e002      	b.n	800459e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	841a      	strh	r2, [r3, #32]
	}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200000b4 	.word	0x200000b4

080045ac <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d03f      	beq.n	8004646 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	3308      	adds	r3, #8
 80045dc:	429a      	cmp	r2, r3
 80045de:	d104      	bne.n	80045ea <prvListTasksWithinSingleList+0x3e>
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	3308      	adds	r3, #8
 8004608:	429a      	cmp	r2, r3
 800460a:	d104      	bne.n	8004616 <prvListTasksWithinSingleList+0x6a>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	461a      	mov	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1899      	adds	r1, r3, r2
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2201      	movs	r2, #1
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff54 	bl	80044e0 <vTaskGetInfo>
				uxTask++;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	3301      	adds	r3, #1
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	429a      	cmp	r2, r3
 8004644:	d1d5      	bne.n	80045f2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004648:	4618      	mov	r0, r3
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800465c:	e005      	b.n	800466a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3301      	adds	r3, #1
 8004662:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2ba5      	cmp	r3, #165	; 0xa5
 8004670:	d0f5      	beq.n	800465e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	089b      	lsrs	r3, r3, #2
 8004676:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	b29b      	uxth	r3, r3
	}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fe23 	bl	80052e0 <vPortFree>
			vPortFree( pxTCB );
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fe20 	bl	80052e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <prvResetNextTaskUnblockTime+0x38>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d104      	bne.n	80046c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <prvResetNextTaskUnblockTime+0x3c>)
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295
 80046be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046c0:	e008      	b.n	80046d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <prvResetNextTaskUnblockTime+0x38>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <prvResetNextTaskUnblockTime+0x3c>)
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000016c 	.word	0x2000016c
 80046e4:	200001d4 	.word	0x200001d4

080046e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <xTaskGetSchedulerState+0x34>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046f6:	2301      	movs	r3, #1
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	e008      	b.n	800470e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fc:	4b08      	ldr	r3, [pc, #32]	; (8004720 <xTaskGetSchedulerState+0x38>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004704:	2302      	movs	r3, #2
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e001      	b.n	800470e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800470e:	687b      	ldr	r3, [r7, #4]
	}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	200001c0 	.word	0x200001c0
 8004720:	200001dc 	.word	0x200001dc

08004724 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d05e      	beq.n	80047f8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <xTaskPriorityInherit+0xe0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	429a      	cmp	r2, r3
 8004746:	d24e      	bcs.n	80047e6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	db06      	blt.n	800475e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <xTaskPriorityInherit+0xe0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f1c3 0207 	rsb	r2, r3, #7
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6959      	ldr	r1, [r3, #20]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4a26      	ldr	r2, [pc, #152]	; (8004808 <xTaskPriorityInherit+0xe4>)
 8004770:	4413      	add	r3, r2
 8004772:	4299      	cmp	r1, r3
 8004774:	d12f      	bne.n	80047d6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3304      	adds	r3, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fae7 	bl	8002d4e <uxListRemove>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43da      	mvns	r2, r3
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <xTaskPriorityInherit+0xe8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4013      	ands	r3, r2
 8004798:	4a1c      	ldr	r2, [pc, #112]	; (800480c <xTaskPriorityInherit+0xe8>)
 800479a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <xTaskPriorityInherit+0xe0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	2201      	movs	r2, #1
 80047ac:	409a      	lsls	r2, r3
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <xTaskPriorityInherit+0xe8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <xTaskPriorityInherit+0xe8>)
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4a10      	ldr	r2, [pc, #64]	; (8004808 <xTaskPriorityInherit+0xe4>)
 80047c6:	441a      	add	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7fe fa60 	bl	8002c94 <vListInsertEnd>
 80047d4:	e004      	b.n	80047e0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <xTaskPriorityInherit+0xe0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e008      	b.n	80047f8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <xTaskPriorityInherit+0xe0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d201      	bcs.n	80047f8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047f8:	68fb      	ldr	r3, [r7, #12]
	}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200000b4 	.word	0x200000b4
 8004808:	200000b8 	.word	0x200000b8
 800480c:	200001bc 	.word	0x200001bc

08004810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d06e      	beq.n	8004904 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004826:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <xTaskPriorityDisinherit+0x100>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	429a      	cmp	r2, r3
 800482e:	d00a      	beq.n	8004846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60fb      	str	r3, [r7, #12]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60bb      	str	r3, [r7, #8]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	1e5a      	subs	r2, r3, #1
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	429a      	cmp	r2, r3
 8004878:	d044      	beq.n	8004904 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	2b00      	cmp	r3, #0
 8004880:	d140      	bne.n	8004904 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3304      	adds	r3, #4
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fa61 	bl	8002d4e <uxListRemove>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d115      	bne.n	80048be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004896:	491f      	ldr	r1, [pc, #124]	; (8004914 <xTaskPriorityDisinherit+0x104>)
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xTaskPriorityDisinherit+0xae>
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2201      	movs	r2, #1
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	4b18      	ldr	r3, [pc, #96]	; (8004918 <xTaskPriorityDisinherit+0x108>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4013      	ands	r3, r2
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <xTaskPriorityDisinherit+0x108>)
 80048bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f1c3 0207 	rsb	r2, r3, #7
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	2201      	movs	r2, #1
 80048d8:	409a      	lsls	r2, r3
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <xTaskPriorityDisinherit+0x108>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <xTaskPriorityDisinherit+0x108>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4a08      	ldr	r2, [pc, #32]	; (8004914 <xTaskPriorityDisinherit+0x104>)
 80048f2:	441a      	add	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fe f9ca 	bl	8002c94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004904:	697b      	ldr	r3, [r7, #20]
	}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200000b4 	.word	0x200000b4
 8004914:	200000b8 	.word	0x200000b8
 8004918:	200001bc 	.word	0x200001bc

0800491c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800492a:	2301      	movs	r3, #1
 800492c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d077      	beq.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d902      	bls.n	8004962 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e002      	b.n	8004968 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	429a      	cmp	r2, r3
 8004970:	d058      	beq.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	d153      	bne.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800497c:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	429a      	cmp	r2, r3
 8004984:	d10a      	bne.n	800499c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60bb      	str	r3, [r7, #8]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db04      	blt.n	80049ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f1c3 0207 	rsb	r2, r3, #7
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6959      	ldr	r1, [r3, #20]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80049ca:	4413      	add	r3, r2
 80049cc:	4299      	cmp	r1, r3
 80049ce:	d129      	bne.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe f9ba 	bl	8002d4e <uxListRemove>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4013      	ands	r3, r2
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	2201      	movs	r2, #1
 80049fc:	409a      	lsls	r2, r3
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a06      	ldr	r2, [pc, #24]	; (8004a30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a16:	441a      	add	r2, r3
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe f938 	bl	8002c94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a24:	bf00      	nop
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200000b4 	.word	0x200000b4
 8004a30:	200000b8 	.word	0x200000b8
 8004a34:	200001bc 	.word	0x200001bc

08004a38 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fdd5 	bl	80055f4 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fb fbc8 	bl	80001e0 <strlen>
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	e007      	b.n	8004a64 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b0e      	cmp	r3, #14
 8004a68:	d9f4      	bls.n	8004a54 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
	}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b089      	sub	sp, #36	; 0x24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8004a92:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <vTaskList+0x124>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <vTaskList+0x124>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fb4f 	bl	8005148 <pvPortMalloc>
 8004aaa:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d076      	beq.n	8004ba0 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	68b8      	ldr	r0, [r7, #8]
 8004ab8:	f7ff f9e0 	bl	8003e7c <uxTaskGetSystemState>
 8004abc:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e066      	b.n	8004b92 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	7b1b      	ldrb	r3, [r3, #12]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d81b      	bhi.n	8004b12 <vTaskList+0x8e>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <vTaskList+0x5c>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af5 	.word	0x08004af5
 8004ae4:	08004afb 	.word	0x08004afb
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004b07 	.word	0x08004b07
 8004af0:	08004b0d 	.word	0x08004b0d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8004af4:	2358      	movs	r3, #88	; 0x58
 8004af6:	74fb      	strb	r3, [r7, #19]
										break;
 8004af8:	e00e      	b.n	8004b18 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8004afa:	2352      	movs	r3, #82	; 0x52
 8004afc:	74fb      	strb	r3, [r7, #19]
										break;
 8004afe:	e00b      	b.n	8004b18 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8004b00:	2342      	movs	r3, #66	; 0x42
 8004b02:	74fb      	strb	r3, [r7, #19]
										break;
 8004b04:	e008      	b.n	8004b18 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8004b06:	2353      	movs	r3, #83	; 0x53
 8004b08:	74fb      	strb	r3, [r7, #19]
										break;
 8004b0a:	e005      	b.n	8004b18 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8004b0c:	2344      	movs	r3, #68	; 0x44
 8004b0e:	74fb      	strb	r3, [r7, #19]
										break;
 8004b10:	e002      	b.n	8004b18 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8004b12:	2300      	movs	r3, #0
 8004b14:	74fb      	strb	r3, [r7, #19]
										break;
 8004b16:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4413      	add	r3, r2
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff83 	bl	8004a38 <prvWriteNameToBuffer>
 8004b32:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004b34:	7cf9      	ldrb	r1, [r7, #19]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	461a      	mov	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	6918      	ldr	r0, [r3, #16]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4413      	add	r3, r2
 8004b58:	8c1b      	ldrh	r3, [r3, #32]
 8004b5a:	461c      	mov	r4, r3
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	9400      	str	r4, [sp, #0]
 8004b72:	4603      	mov	r3, r0
 8004b74:	460a      	mov	r2, r1
 8004b76:	490d      	ldr	r1, [pc, #52]	; (8004bac <vTaskList+0x128>)
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fd1b 	bl	80055b4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fb fb2e 	bl	80001e0 <strlen>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4413      	add	r3, r2
 8004b8a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d394      	bcc.n	8004ac4 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f000 fba0 	bl	80052e0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd90      	pop	{r4, r7, pc}
 8004ba8:	200001b4 	.word	0x200001b4
 8004bac:	080062cc 	.word	0x080062cc

08004bb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bc2:	3201      	adds	r2, #1
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004bc6:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
	}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	200000b4 	.word	0x200000b4

08004bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe f8ad 	bl	8002d4e <uxListRemove>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10b      	bne.n	8004c12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	2201      	movs	r2, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43da      	mvns	r2, r3
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d10a      	bne.n	8004c30 <prvAddCurrentTaskToDelayedList+0x58>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c20:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4619      	mov	r1, r3
 8004c28:	481a      	ldr	r0, [pc, #104]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c2a:	f7fe f833 	bl	8002c94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c2e:	e026      	b.n	8004c7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d209      	bcs.n	8004c5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f7fe f841 	bl	8002cdc <vListInsert>
}
 8004c5a:	e010      	b.n	8004c7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7fe f837 	bl	8002cdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d202      	bcs.n	8004c7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200001b8 	.word	0x200001b8
 8004c8c:	200000b4 	.word	0x200000b4
 8004c90:	200001bc 	.word	0x200001bc
 8004c94:	200001a0 	.word	0x200001a0
 8004c98:	20000170 	.word	0x20000170
 8004c9c:	2000016c 	.word	0x2000016c
 8004ca0:	200001d4 	.word	0x200001d4

08004ca4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b04      	subs	r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3b04      	subs	r3, #4
 8004cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <pxPortInitialiseStack+0x64>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b14      	subs	r3, #20
 8004cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f06f 0202 	mvn.w	r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b20      	subs	r3, #32
 8004cf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	08004d0d 	.word	0x08004d0d

08004d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <prvTaskExitError+0x54>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d00a      	beq.n	8004d36 <prvTaskExitError+0x2a>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <prvTaskExitError+0x28>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60bb      	str	r3, [r7, #8]
}
 8004d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d4a:	bf00      	nop
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0fc      	beq.n	8004d4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000028 	.word	0x20000028
	...

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	4770      	bx	lr
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst2>:
 8004d90:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d98:	4808      	ldr	r0, [pc, #32]	; (8004dbc <prvPortStartFirstTask+0x24>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8814 	msr	CONTROL, r0
 8004daa:	b662      	cpsie	i
 8004dac:	b661      	cpsie	f
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	df00      	svc	0
 8004db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dba:	bf00      	nop
 8004dbc:	e000ed08 	.word	0xe000ed08

08004dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <xPortStartScheduler+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10a      	bne.n	8004de6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <xPortStartScheduler+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x46>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <xPortStartScheduler+0x12c>)
 8004e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <xPortStartScheduler+0x130>)
 8004e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e34:	e009      	b.n	8004e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d0ef      	beq.n	8004e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e56:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00a      	beq.n	8004e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eae:	f000 f8dd 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <xPortStartScheduler+0x13c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004eb8:	f000 f8fc 	bl	80050b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ec8:	f7ff ff66 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ecc:	f7ff f91c 	bl	8004108 <vTaskSwitchContext>
	prvTaskExitError();
 8004ed0:	f7ff ff1c 	bl	8004d0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00
 8004ee4:	410fc271 	.word	0x410fc271
 8004ee8:	410fc270 	.word	0x410fc270
 8004eec:	e000e400 	.word	0xe000e400
 8004ef0:	200001e0 	.word	0x200001e0
 8004ef4:	200001e4 	.word	0x200001e4
 8004ef8:	e000ed20 	.word	0xe000ed20
 8004efc:	20000028 	.word	0x20000028
 8004f00:	e000ef34 	.word	0xe000ef34

08004f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10f      	bne.n	8004f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortEnterCritical+0x5c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	603b      	str	r3, [r7, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <vPortEnterCritical+0x4a>
	}
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000028 	.word	0x20000028
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <vPortExitCritical+0x24>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <vPortExitCritical+0x42>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f383 8811 	msr	BASEPRI, r3
}
 8004fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000028 	.word	0x20000028
	...

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7ff f88a 	bl	8004108 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
}
 8005040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005042:	f7fe ffa9 	bl	8003f98 <xTaskIncrementTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <SysTick_Handler+0x40>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
}
 800505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <vPortSetupTimerInterrupt+0x38>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <vPortSetupTimerInterrupt+0x40>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <vPortSetupTimerInterrupt+0x44>)
 800508a:	3b01      	subs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010
 80050a4:	e000e018 	.word	0xe000e018
 80050a8:	2000001c 	.word	0x2000001c
 80050ac:	10624dd3 	.word	0x10624dd3
 80050b0:	e000e014 	.word	0xe000e014

080050b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c4 <vPortEnableVFP+0x10>
 80050b8:	6801      	ldr	r1, [r0, #0]
 80050ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050be:	6001      	str	r1, [r0, #0]
 80050c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed88 	.word	0xe000ed88

080050c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ce:	f3ef 8305 	mrs	r3, IPSR
 80050d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	d914      	bls.n	8005104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <vPortValidateInterruptPriority+0x70>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <vPortValidateInterruptPriority+0x74>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	7afa      	ldrb	r2, [r7, #11]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d20a      	bcs.n	8005104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <vPortValidateInterruptPriority+0x78>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <vPortValidateInterruptPriority+0x7c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d90a      	bls.n	800512a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	603b      	str	r3, [r7, #0]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <vPortValidateInterruptPriority+0x60>
	}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	e000e3f0 	.word	0xe000e3f0
 800513c:	200001e0 	.word	0x200001e0
 8005140:	e000ed0c 	.word	0xe000ed0c
 8005144:	200001e4 	.word	0x200001e4

08005148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005154:	f7fe fde8 	bl	8003d28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <pvPortMalloc+0x180>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005160:	f000 f92c 	bl	80053bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <pvPortMalloc+0x184>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8093 	bne.w	8005298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01d      	beq.n	80051b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005178:	2208      	movs	r2, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d014      	beq.n	80051b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <pvPortMalloc+0x6c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	617b      	str	r3, [r7, #20]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d06e      	beq.n	8005298 <pvPortMalloc+0x150>
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <pvPortMalloc+0x188>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d869      	bhi.n	8005298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <pvPortMalloc+0x18c>)
 80051c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <pvPortMalloc+0x18c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ce:	e004      	b.n	80051da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d903      	bls.n	80051ec <pvPortMalloc+0xa4>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f1      	bne.n	80051d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <pvPortMalloc+0x180>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d050      	beq.n	8005298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2208      	movs	r2, #8
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	2308      	movs	r3, #8
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	429a      	cmp	r2, r3
 8005216:	d91f      	bls.n	8005258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <pvPortMalloc+0xf8>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005252:	69b8      	ldr	r0, [r7, #24]
 8005254:	f000 f914 	bl	8005480 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <pvPortMalloc+0x188>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <pvPortMalloc+0x188>)
 8005264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <pvPortMalloc+0x188>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <pvPortMalloc+0x190>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <pvPortMalloc+0x188>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <pvPortMalloc+0x190>)
 8005278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <pvPortMalloc+0x184>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	431a      	orrs	r2, r3
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <pvPortMalloc+0x194>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a11      	ldr	r2, [pc, #68]	; (80052dc <pvPortMalloc+0x194>)
 8005296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005298:	f7fe fd54 	bl	8003d44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <pvPortMalloc+0x174>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <pvPortMalloc+0x172>
	return pvReturn;
 80052bc:	69fb      	ldr	r3, [r7, #28]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000ddf0 	.word	0x2000ddf0
 80052cc:	2000de04 	.word	0x2000de04
 80052d0:	2000ddf4 	.word	0x2000ddf4
 80052d4:	2000dde8 	.word	0x2000dde8
 80052d8:	2000ddf8 	.word	0x2000ddf8
 80052dc:	2000ddfc 	.word	0x2000ddfc

080052e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04d      	beq.n	800538e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052f2:	2308      	movs	r3, #8
 80052f4:	425b      	negs	r3, r3
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4b24      	ldr	r3, [pc, #144]	; (8005398 <vPortFree+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <vPortFree+0x44>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <vPortFree+0x62>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60bb      	str	r3, [r7, #8]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <vPortFree+0xb8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11a      	bne.n	800538e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <vPortFree+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005368:	f7fe fcde 	bl	8003d28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vPortFree+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4413      	add	r3, r2
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <vPortFree+0xbc>)
 8005378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800537a:	6938      	ldr	r0, [r7, #16]
 800537c:	f000 f880 	bl	8005480 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <vPortFree+0xc0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <vPortFree+0xc0>)
 8005388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800538a:	f7fe fcdb 	bl	8003d44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	2000de04 	.word	0x2000de04
 800539c:	2000ddf4 	.word	0x2000ddf4
 80053a0:	2000de00 	.word	0x2000de00

080053a4 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000ddf8 	.word	0x2000ddf8

080053bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053c2:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80053c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053c8:	4b27      	ldr	r3, [pc, #156]	; (8005468 <prvHeapInit+0xac>)
 80053ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3307      	adds	r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0307 	bic.w	r3, r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <prvHeapInit+0xac>)
 80053ec:	4413      	add	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <prvHeapInit+0xb0>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053fa:	4b1c      	ldr	r3, [pc, #112]	; (800546c <prvHeapInit+0xb0>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4413      	add	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005408:	2208      	movs	r2, #8
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0307 	bic.w	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a15      	ldr	r2, [pc, #84]	; (8005470 <prvHeapInit+0xb4>)
 800541c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <prvHeapInit+0xb4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <prvHeapInit+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <prvHeapInit+0xb4>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <prvHeapInit+0xb8>)
 800544a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a09      	ldr	r2, [pc, #36]	; (8005478 <prvHeapInit+0xbc>)
 8005452:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <prvHeapInit+0xc0>)
 8005456:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	200001e8 	.word	0x200001e8
 800546c:	2000dde8 	.word	0x2000dde8
 8005470:	2000ddf0 	.word	0x2000ddf0
 8005474:	2000ddf8 	.word	0x2000ddf8
 8005478:	2000ddf4 	.word	0x2000ddf4
 800547c:	2000de04 	.word	0x2000de04

08005480 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005488:	4b28      	ldr	r3, [pc, #160]	; (800552c <prvInsertBlockIntoFreeList+0xac>)
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e002      	b.n	8005494 <prvInsertBlockIntoFreeList+0x14>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d8f7      	bhi.n	800548e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d108      	bne.n	80054c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	441a      	add	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	441a      	add	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d118      	bne.n	8005508 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <prvInsertBlockIntoFreeList+0xb0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d00d      	beq.n	80054fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	441a      	add	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e008      	b.n	8005510 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <prvInsertBlockIntoFreeList+0xb0>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	e003      	b.n	8005510 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d002      	beq.n	800551e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	2000dde8 	.word	0x2000dde8
 8005530:	2000ddf0 	.word	0x2000ddf0

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000002c 	.word	0x2000002c

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4d0d      	ldr	r5, [pc, #52]	; (8005578 <__libc_init_array+0x38>)
 8005544:	4c0d      	ldr	r4, [pc, #52]	; (800557c <__libc_init_array+0x3c>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	2600      	movs	r6, #0
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	4d0b      	ldr	r5, [pc, #44]	; (8005580 <__libc_init_array+0x40>)
 8005552:	4c0c      	ldr	r4, [pc, #48]	; (8005584 <__libc_init_array+0x44>)
 8005554:	f000 fc56 	bl	8005e04 <_init>
 8005558:	1b64      	subs	r4, r4, r5
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	2600      	movs	r6, #0
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	08006330 	.word	0x08006330
 800557c:	08006330 	.word	0x08006330
 8005580:	08006330 	.word	0x08006330
 8005584:	08006334 	.word	0x08006334

08005588 <memcpy>:
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005590:	d100      	bne.n	8005594 <memcpy+0xc>
 8005592:	4770      	bx	lr
 8005594:	b510      	push	{r4, lr}
 8005596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800559e:	4291      	cmp	r1, r2
 80055a0:	d1f9      	bne.n	8005596 <memcpy+0xe>
 80055a2:	bd10      	pop	{r4, pc}

080055a4 <memset>:
 80055a4:	4402      	add	r2, r0
 80055a6:	4603      	mov	r3, r0
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d100      	bne.n	80055ae <memset+0xa>
 80055ac:	4770      	bx	lr
 80055ae:	f803 1b01 	strb.w	r1, [r3], #1
 80055b2:	e7f9      	b.n	80055a8 <memset+0x4>

080055b4 <siprintf>:
 80055b4:	b40e      	push	{r1, r2, r3}
 80055b6:	b500      	push	{lr}
 80055b8:	b09c      	sub	sp, #112	; 0x70
 80055ba:	ab1d      	add	r3, sp, #116	; 0x74
 80055bc:	9002      	str	r0, [sp, #8]
 80055be:	9006      	str	r0, [sp, #24]
 80055c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055c4:	4809      	ldr	r0, [pc, #36]	; (80055ec <siprintf+0x38>)
 80055c6:	9107      	str	r1, [sp, #28]
 80055c8:	9104      	str	r1, [sp, #16]
 80055ca:	4909      	ldr	r1, [pc, #36]	; (80055f0 <siprintf+0x3c>)
 80055cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d0:	9105      	str	r1, [sp, #20]
 80055d2:	6800      	ldr	r0, [r0, #0]
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	a902      	add	r1, sp, #8
 80055d8:	f000 f870 	bl	80056bc <_svfiprintf_r>
 80055dc:	9b02      	ldr	r3, [sp, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	b01c      	add	sp, #112	; 0x70
 80055e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055e8:	b003      	add	sp, #12
 80055ea:	4770      	bx	lr
 80055ec:	2000002c 	.word	0x2000002c
 80055f0:	ffff0208 	.word	0xffff0208

080055f4 <strcpy>:
 80055f4:	4603      	mov	r3, r0
 80055f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fa:	f803 2b01 	strb.w	r2, [r3], #1
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d1f9      	bne.n	80055f6 <strcpy+0x2>
 8005602:	4770      	bx	lr

08005604 <__ssputs_r>:
 8005604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005608:	688e      	ldr	r6, [r1, #8]
 800560a:	429e      	cmp	r6, r3
 800560c:	4682      	mov	sl, r0
 800560e:	460c      	mov	r4, r1
 8005610:	4690      	mov	r8, r2
 8005612:	461f      	mov	r7, r3
 8005614:	d838      	bhi.n	8005688 <__ssputs_r+0x84>
 8005616:	898a      	ldrh	r2, [r1, #12]
 8005618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800561c:	d032      	beq.n	8005684 <__ssputs_r+0x80>
 800561e:	6825      	ldr	r5, [r4, #0]
 8005620:	6909      	ldr	r1, [r1, #16]
 8005622:	eba5 0901 	sub.w	r9, r5, r1
 8005626:	6965      	ldr	r5, [r4, #20]
 8005628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800562c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005630:	3301      	adds	r3, #1
 8005632:	444b      	add	r3, r9
 8005634:	106d      	asrs	r5, r5, #1
 8005636:	429d      	cmp	r5, r3
 8005638:	bf38      	it	cc
 800563a:	461d      	movcc	r5, r3
 800563c:	0553      	lsls	r3, r2, #21
 800563e:	d531      	bpl.n	80056a4 <__ssputs_r+0xa0>
 8005640:	4629      	mov	r1, r5
 8005642:	f000 fb39 	bl	8005cb8 <_malloc_r>
 8005646:	4606      	mov	r6, r0
 8005648:	b950      	cbnz	r0, 8005660 <__ssputs_r+0x5c>
 800564a:	230c      	movs	r3, #12
 800564c:	f8ca 3000 	str.w	r3, [sl]
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005660:	6921      	ldr	r1, [r4, #16]
 8005662:	464a      	mov	r2, r9
 8005664:	f7ff ff90 	bl	8005588 <memcpy>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800566e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	6126      	str	r6, [r4, #16]
 8005676:	6165      	str	r5, [r4, #20]
 8005678:	444e      	add	r6, r9
 800567a:	eba5 0509 	sub.w	r5, r5, r9
 800567e:	6026      	str	r6, [r4, #0]
 8005680:	60a5      	str	r5, [r4, #8]
 8005682:	463e      	mov	r6, r7
 8005684:	42be      	cmp	r6, r7
 8005686:	d900      	bls.n	800568a <__ssputs_r+0x86>
 8005688:	463e      	mov	r6, r7
 800568a:	4632      	mov	r2, r6
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	4641      	mov	r1, r8
 8005690:	f000 faa8 	bl	8005be4 <memmove>
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	1b9b      	subs	r3, r3, r6
 800569a:	4432      	add	r2, r6
 800569c:	60a3      	str	r3, [r4, #8]
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	2000      	movs	r0, #0
 80056a2:	e7db      	b.n	800565c <__ssputs_r+0x58>
 80056a4:	462a      	mov	r2, r5
 80056a6:	f000 fb61 	bl	8005d6c <_realloc_r>
 80056aa:	4606      	mov	r6, r0
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d1e1      	bne.n	8005674 <__ssputs_r+0x70>
 80056b0:	6921      	ldr	r1, [r4, #16]
 80056b2:	4650      	mov	r0, sl
 80056b4:	f000 fab0 	bl	8005c18 <_free_r>
 80056b8:	e7c7      	b.n	800564a <__ssputs_r+0x46>
	...

080056bc <_svfiprintf_r>:
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	4698      	mov	r8, r3
 80056c2:	898b      	ldrh	r3, [r1, #12]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	b09d      	sub	sp, #116	; 0x74
 80056c8:	4607      	mov	r7, r0
 80056ca:	460d      	mov	r5, r1
 80056cc:	4614      	mov	r4, r2
 80056ce:	d50e      	bpl.n	80056ee <_svfiprintf_r+0x32>
 80056d0:	690b      	ldr	r3, [r1, #16]
 80056d2:	b963      	cbnz	r3, 80056ee <_svfiprintf_r+0x32>
 80056d4:	2140      	movs	r1, #64	; 0x40
 80056d6:	f000 faef 	bl	8005cb8 <_malloc_r>
 80056da:	6028      	str	r0, [r5, #0]
 80056dc:	6128      	str	r0, [r5, #16]
 80056de:	b920      	cbnz	r0, 80056ea <_svfiprintf_r+0x2e>
 80056e0:	230c      	movs	r3, #12
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e0d1      	b.n	800588e <_svfiprintf_r+0x1d2>
 80056ea:	2340      	movs	r3, #64	; 0x40
 80056ec:	616b      	str	r3, [r5, #20]
 80056ee:	2300      	movs	r3, #0
 80056f0:	9309      	str	r3, [sp, #36]	; 0x24
 80056f2:	2320      	movs	r3, #32
 80056f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80056fc:	2330      	movs	r3, #48	; 0x30
 80056fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058a8 <_svfiprintf_r+0x1ec>
 8005702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005706:	f04f 0901 	mov.w	r9, #1
 800570a:	4623      	mov	r3, r4
 800570c:	469a      	mov	sl, r3
 800570e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005712:	b10a      	cbz	r2, 8005718 <_svfiprintf_r+0x5c>
 8005714:	2a25      	cmp	r2, #37	; 0x25
 8005716:	d1f9      	bne.n	800570c <_svfiprintf_r+0x50>
 8005718:	ebba 0b04 	subs.w	fp, sl, r4
 800571c:	d00b      	beq.n	8005736 <_svfiprintf_r+0x7a>
 800571e:	465b      	mov	r3, fp
 8005720:	4622      	mov	r2, r4
 8005722:	4629      	mov	r1, r5
 8005724:	4638      	mov	r0, r7
 8005726:	f7ff ff6d 	bl	8005604 <__ssputs_r>
 800572a:	3001      	adds	r0, #1
 800572c:	f000 80aa 	beq.w	8005884 <_svfiprintf_r+0x1c8>
 8005730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005732:	445a      	add	r2, fp
 8005734:	9209      	str	r2, [sp, #36]	; 0x24
 8005736:	f89a 3000 	ldrb.w	r3, [sl]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80a2 	beq.w	8005884 <_svfiprintf_r+0x1c8>
 8005740:	2300      	movs	r3, #0
 8005742:	f04f 32ff 	mov.w	r2, #4294967295
 8005746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800574a:	f10a 0a01 	add.w	sl, sl, #1
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	9307      	str	r3, [sp, #28]
 8005752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005756:	931a      	str	r3, [sp, #104]	; 0x68
 8005758:	4654      	mov	r4, sl
 800575a:	2205      	movs	r2, #5
 800575c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005760:	4851      	ldr	r0, [pc, #324]	; (80058a8 <_svfiprintf_r+0x1ec>)
 8005762:	f7fa fd45 	bl	80001f0 <memchr>
 8005766:	9a04      	ldr	r2, [sp, #16]
 8005768:	b9d8      	cbnz	r0, 80057a2 <_svfiprintf_r+0xe6>
 800576a:	06d0      	lsls	r0, r2, #27
 800576c:	bf44      	itt	mi
 800576e:	2320      	movmi	r3, #32
 8005770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005774:	0711      	lsls	r1, r2, #28
 8005776:	bf44      	itt	mi
 8005778:	232b      	movmi	r3, #43	; 0x2b
 800577a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800577e:	f89a 3000 	ldrb.w	r3, [sl]
 8005782:	2b2a      	cmp	r3, #42	; 0x2a
 8005784:	d015      	beq.n	80057b2 <_svfiprintf_r+0xf6>
 8005786:	9a07      	ldr	r2, [sp, #28]
 8005788:	4654      	mov	r4, sl
 800578a:	2000      	movs	r0, #0
 800578c:	f04f 0c0a 	mov.w	ip, #10
 8005790:	4621      	mov	r1, r4
 8005792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005796:	3b30      	subs	r3, #48	; 0x30
 8005798:	2b09      	cmp	r3, #9
 800579a:	d94e      	bls.n	800583a <_svfiprintf_r+0x17e>
 800579c:	b1b0      	cbz	r0, 80057cc <_svfiprintf_r+0x110>
 800579e:	9207      	str	r2, [sp, #28]
 80057a0:	e014      	b.n	80057cc <_svfiprintf_r+0x110>
 80057a2:	eba0 0308 	sub.w	r3, r0, r8
 80057a6:	fa09 f303 	lsl.w	r3, r9, r3
 80057aa:	4313      	orrs	r3, r2
 80057ac:	9304      	str	r3, [sp, #16]
 80057ae:	46a2      	mov	sl, r4
 80057b0:	e7d2      	b.n	8005758 <_svfiprintf_r+0x9c>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	1d19      	adds	r1, r3, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	9103      	str	r1, [sp, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bfbb      	ittet	lt
 80057be:	425b      	neglt	r3, r3
 80057c0:	f042 0202 	orrlt.w	r2, r2, #2
 80057c4:	9307      	strge	r3, [sp, #28]
 80057c6:	9307      	strlt	r3, [sp, #28]
 80057c8:	bfb8      	it	lt
 80057ca:	9204      	strlt	r2, [sp, #16]
 80057cc:	7823      	ldrb	r3, [r4, #0]
 80057ce:	2b2e      	cmp	r3, #46	; 0x2e
 80057d0:	d10c      	bne.n	80057ec <_svfiprintf_r+0x130>
 80057d2:	7863      	ldrb	r3, [r4, #1]
 80057d4:	2b2a      	cmp	r3, #42	; 0x2a
 80057d6:	d135      	bne.n	8005844 <_svfiprintf_r+0x188>
 80057d8:	9b03      	ldr	r3, [sp, #12]
 80057da:	1d1a      	adds	r2, r3, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	9203      	str	r2, [sp, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bfb8      	it	lt
 80057e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80057e8:	3402      	adds	r4, #2
 80057ea:	9305      	str	r3, [sp, #20]
 80057ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058b8 <_svfiprintf_r+0x1fc>
 80057f0:	7821      	ldrb	r1, [r4, #0]
 80057f2:	2203      	movs	r2, #3
 80057f4:	4650      	mov	r0, sl
 80057f6:	f7fa fcfb 	bl	80001f0 <memchr>
 80057fa:	b140      	cbz	r0, 800580e <_svfiprintf_r+0x152>
 80057fc:	2340      	movs	r3, #64	; 0x40
 80057fe:	eba0 000a 	sub.w	r0, r0, sl
 8005802:	fa03 f000 	lsl.w	r0, r3, r0
 8005806:	9b04      	ldr	r3, [sp, #16]
 8005808:	4303      	orrs	r3, r0
 800580a:	3401      	adds	r4, #1
 800580c:	9304      	str	r3, [sp, #16]
 800580e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005812:	4826      	ldr	r0, [pc, #152]	; (80058ac <_svfiprintf_r+0x1f0>)
 8005814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005818:	2206      	movs	r2, #6
 800581a:	f7fa fce9 	bl	80001f0 <memchr>
 800581e:	2800      	cmp	r0, #0
 8005820:	d038      	beq.n	8005894 <_svfiprintf_r+0x1d8>
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <_svfiprintf_r+0x1f4>)
 8005824:	bb1b      	cbnz	r3, 800586e <_svfiprintf_r+0x1b2>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	3307      	adds	r3, #7
 800582a:	f023 0307 	bic.w	r3, r3, #7
 800582e:	3308      	adds	r3, #8
 8005830:	9303      	str	r3, [sp, #12]
 8005832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005834:	4433      	add	r3, r6
 8005836:	9309      	str	r3, [sp, #36]	; 0x24
 8005838:	e767      	b.n	800570a <_svfiprintf_r+0x4e>
 800583a:	fb0c 3202 	mla	r2, ip, r2, r3
 800583e:	460c      	mov	r4, r1
 8005840:	2001      	movs	r0, #1
 8005842:	e7a5      	b.n	8005790 <_svfiprintf_r+0xd4>
 8005844:	2300      	movs	r3, #0
 8005846:	3401      	adds	r4, #1
 8005848:	9305      	str	r3, [sp, #20]
 800584a:	4619      	mov	r1, r3
 800584c:	f04f 0c0a 	mov.w	ip, #10
 8005850:	4620      	mov	r0, r4
 8005852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005856:	3a30      	subs	r2, #48	; 0x30
 8005858:	2a09      	cmp	r2, #9
 800585a:	d903      	bls.n	8005864 <_svfiprintf_r+0x1a8>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0c5      	beq.n	80057ec <_svfiprintf_r+0x130>
 8005860:	9105      	str	r1, [sp, #20]
 8005862:	e7c3      	b.n	80057ec <_svfiprintf_r+0x130>
 8005864:	fb0c 2101 	mla	r1, ip, r1, r2
 8005868:	4604      	mov	r4, r0
 800586a:	2301      	movs	r3, #1
 800586c:	e7f0      	b.n	8005850 <_svfiprintf_r+0x194>
 800586e:	ab03      	add	r3, sp, #12
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	462a      	mov	r2, r5
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <_svfiprintf_r+0x1f8>)
 8005876:	a904      	add	r1, sp, #16
 8005878:	4638      	mov	r0, r7
 800587a:	f3af 8000 	nop.w
 800587e:	1c42      	adds	r2, r0, #1
 8005880:	4606      	mov	r6, r0
 8005882:	d1d6      	bne.n	8005832 <_svfiprintf_r+0x176>
 8005884:	89ab      	ldrh	r3, [r5, #12]
 8005886:	065b      	lsls	r3, r3, #25
 8005888:	f53f af2c 	bmi.w	80056e4 <_svfiprintf_r+0x28>
 800588c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800588e:	b01d      	add	sp, #116	; 0x74
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	ab03      	add	r3, sp, #12
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	462a      	mov	r2, r5
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <_svfiprintf_r+0x1f8>)
 800589c:	a904      	add	r1, sp, #16
 800589e:	4638      	mov	r0, r7
 80058a0:	f000 f87a 	bl	8005998 <_printf_i>
 80058a4:	e7eb      	b.n	800587e <_svfiprintf_r+0x1c2>
 80058a6:	bf00      	nop
 80058a8:	080062f4 	.word	0x080062f4
 80058ac:	080062fe 	.word	0x080062fe
 80058b0:	00000000 	.word	0x00000000
 80058b4:	08005605 	.word	0x08005605
 80058b8:	080062fa 	.word	0x080062fa

080058bc <_printf_common>:
 80058bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	4616      	mov	r6, r2
 80058c2:	4699      	mov	r9, r3
 80058c4:	688a      	ldr	r2, [r1, #8]
 80058c6:	690b      	ldr	r3, [r1, #16]
 80058c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	bfb8      	it	lt
 80058d0:	4613      	movlt	r3, r2
 80058d2:	6033      	str	r3, [r6, #0]
 80058d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058d8:	4607      	mov	r7, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	b10a      	cbz	r2, 80058e2 <_printf_common+0x26>
 80058de:	3301      	adds	r3, #1
 80058e0:	6033      	str	r3, [r6, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	0699      	lsls	r1, r3, #26
 80058e6:	bf42      	ittt	mi
 80058e8:	6833      	ldrmi	r3, [r6, #0]
 80058ea:	3302      	addmi	r3, #2
 80058ec:	6033      	strmi	r3, [r6, #0]
 80058ee:	6825      	ldr	r5, [r4, #0]
 80058f0:	f015 0506 	ands.w	r5, r5, #6
 80058f4:	d106      	bne.n	8005904 <_printf_common+0x48>
 80058f6:	f104 0a19 	add.w	sl, r4, #25
 80058fa:	68e3      	ldr	r3, [r4, #12]
 80058fc:	6832      	ldr	r2, [r6, #0]
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	42ab      	cmp	r3, r5
 8005902:	dc26      	bgt.n	8005952 <_printf_common+0x96>
 8005904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005908:	1e13      	subs	r3, r2, #0
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	bf18      	it	ne
 800590e:	2301      	movne	r3, #1
 8005910:	0692      	lsls	r2, r2, #26
 8005912:	d42b      	bmi.n	800596c <_printf_common+0xb0>
 8005914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005918:	4649      	mov	r1, r9
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	3001      	adds	r0, #1
 8005920:	d01e      	beq.n	8005960 <_printf_common+0xa4>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	68e5      	ldr	r5, [r4, #12]
 8005926:	6832      	ldr	r2, [r6, #0]
 8005928:	f003 0306 	and.w	r3, r3, #6
 800592c:	2b04      	cmp	r3, #4
 800592e:	bf08      	it	eq
 8005930:	1aad      	subeq	r5, r5, r2
 8005932:	68a3      	ldr	r3, [r4, #8]
 8005934:	6922      	ldr	r2, [r4, #16]
 8005936:	bf0c      	ite	eq
 8005938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800593c:	2500      	movne	r5, #0
 800593e:	4293      	cmp	r3, r2
 8005940:	bfc4      	itt	gt
 8005942:	1a9b      	subgt	r3, r3, r2
 8005944:	18ed      	addgt	r5, r5, r3
 8005946:	2600      	movs	r6, #0
 8005948:	341a      	adds	r4, #26
 800594a:	42b5      	cmp	r5, r6
 800594c:	d11a      	bne.n	8005984 <_printf_common+0xc8>
 800594e:	2000      	movs	r0, #0
 8005950:	e008      	b.n	8005964 <_printf_common+0xa8>
 8005952:	2301      	movs	r3, #1
 8005954:	4652      	mov	r2, sl
 8005956:	4649      	mov	r1, r9
 8005958:	4638      	mov	r0, r7
 800595a:	47c0      	blx	r8
 800595c:	3001      	adds	r0, #1
 800595e:	d103      	bne.n	8005968 <_printf_common+0xac>
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005968:	3501      	adds	r5, #1
 800596a:	e7c6      	b.n	80058fa <_printf_common+0x3e>
 800596c:	18e1      	adds	r1, r4, r3
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	2030      	movs	r0, #48	; 0x30
 8005972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005976:	4422      	add	r2, r4
 8005978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800597c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005980:	3302      	adds	r3, #2
 8005982:	e7c7      	b.n	8005914 <_printf_common+0x58>
 8005984:	2301      	movs	r3, #1
 8005986:	4622      	mov	r2, r4
 8005988:	4649      	mov	r1, r9
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d0e6      	beq.n	8005960 <_printf_common+0xa4>
 8005992:	3601      	adds	r6, #1
 8005994:	e7d9      	b.n	800594a <_printf_common+0x8e>
	...

08005998 <_printf_i>:
 8005998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	460c      	mov	r4, r1
 800599e:	4691      	mov	r9, r2
 80059a0:	7e27      	ldrb	r7, [r4, #24]
 80059a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059a4:	2f78      	cmp	r7, #120	; 0x78
 80059a6:	4680      	mov	r8, r0
 80059a8:	469a      	mov	sl, r3
 80059aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ae:	d807      	bhi.n	80059c0 <_printf_i+0x28>
 80059b0:	2f62      	cmp	r7, #98	; 0x62
 80059b2:	d80a      	bhi.n	80059ca <_printf_i+0x32>
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	f000 80d8 	beq.w	8005b6a <_printf_i+0x1d2>
 80059ba:	2f58      	cmp	r7, #88	; 0x58
 80059bc:	f000 80a3 	beq.w	8005b06 <_printf_i+0x16e>
 80059c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059c8:	e03a      	b.n	8005a40 <_printf_i+0xa8>
 80059ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ce:	2b15      	cmp	r3, #21
 80059d0:	d8f6      	bhi.n	80059c0 <_printf_i+0x28>
 80059d2:	a001      	add	r0, pc, #4	; (adr r0, 80059d8 <_printf_i+0x40>)
 80059d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059d8:	08005a31 	.word	0x08005a31
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	080059c1 	.word	0x080059c1
 80059e4:	080059c1 	.word	0x080059c1
 80059e8:	080059c1 	.word	0x080059c1
 80059ec:	080059c1 	.word	0x080059c1
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	080059c1 	.word	0x080059c1
 80059f8:	080059c1 	.word	0x080059c1
 80059fc:	080059c1 	.word	0x080059c1
 8005a00:	080059c1 	.word	0x080059c1
 8005a04:	08005b51 	.word	0x08005b51
 8005a08:	08005a75 	.word	0x08005a75
 8005a0c:	08005b33 	.word	0x08005b33
 8005a10:	080059c1 	.word	0x080059c1
 8005a14:	080059c1 	.word	0x080059c1
 8005a18:	08005b73 	.word	0x08005b73
 8005a1c:	080059c1 	.word	0x080059c1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059c1 	.word	0x080059c1
 8005a28:	080059c1 	.word	0x080059c1
 8005a2c:	08005b3b 	.word	0x08005b3b
 8005a30:	680b      	ldr	r3, [r1, #0]
 8005a32:	1d1a      	adds	r2, r3, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	600a      	str	r2, [r1, #0]
 8005a38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0a3      	b.n	8005b8c <_printf_i+0x1f4>
 8005a44:	6825      	ldr	r5, [r4, #0]
 8005a46:	6808      	ldr	r0, [r1, #0]
 8005a48:	062e      	lsls	r6, r5, #24
 8005a4a:	f100 0304 	add.w	r3, r0, #4
 8005a4e:	d50a      	bpl.n	8005a66 <_printf_i+0xce>
 8005a50:	6805      	ldr	r5, [r0, #0]
 8005a52:	600b      	str	r3, [r1, #0]
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	da03      	bge.n	8005a60 <_printf_i+0xc8>
 8005a58:	232d      	movs	r3, #45	; 0x2d
 8005a5a:	426d      	negs	r5, r5
 8005a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a60:	485e      	ldr	r0, [pc, #376]	; (8005bdc <_printf_i+0x244>)
 8005a62:	230a      	movs	r3, #10
 8005a64:	e019      	b.n	8005a9a <_printf_i+0x102>
 8005a66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a6a:	6805      	ldr	r5, [r0, #0]
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	bf18      	it	ne
 8005a70:	b22d      	sxthne	r5, r5
 8005a72:	e7ef      	b.n	8005a54 <_printf_i+0xbc>
 8005a74:	680b      	ldr	r3, [r1, #0]
 8005a76:	6825      	ldr	r5, [r4, #0]
 8005a78:	1d18      	adds	r0, r3, #4
 8005a7a:	6008      	str	r0, [r1, #0]
 8005a7c:	0628      	lsls	r0, r5, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0xec>
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <_printf_i+0xf2>
 8005a84:	0669      	lsls	r1, r5, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0xe8>
 8005a88:	881d      	ldrh	r5, [r3, #0]
 8005a8a:	4854      	ldr	r0, [pc, #336]	; (8005bdc <_printf_i+0x244>)
 8005a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a8e:	bf0c      	ite	eq
 8005a90:	2308      	moveq	r3, #8
 8005a92:	230a      	movne	r3, #10
 8005a94:	2100      	movs	r1, #0
 8005a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a9a:	6866      	ldr	r6, [r4, #4]
 8005a9c:	60a6      	str	r6, [r4, #8]
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	bfa2      	ittt	ge
 8005aa2:	6821      	ldrge	r1, [r4, #0]
 8005aa4:	f021 0104 	bicge.w	r1, r1, #4
 8005aa8:	6021      	strge	r1, [r4, #0]
 8005aaa:	b90d      	cbnz	r5, 8005ab0 <_printf_i+0x118>
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	d04d      	beq.n	8005b4c <_printf_i+0x1b4>
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8005aba:	5dc7      	ldrb	r7, [r0, r7]
 8005abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ac0:	462f      	mov	r7, r5
 8005ac2:	42bb      	cmp	r3, r7
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	d9f4      	bls.n	8005ab2 <_printf_i+0x11a>
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d10b      	bne.n	8005ae4 <_printf_i+0x14c>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	07df      	lsls	r7, r3, #31
 8005ad0:	d508      	bpl.n	8005ae4 <_printf_i+0x14c>
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	6861      	ldr	r1, [r4, #4]
 8005ad6:	4299      	cmp	r1, r3
 8005ad8:	bfde      	ittt	le
 8005ada:	2330      	movle	r3, #48	; 0x30
 8005adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ae4:	1b92      	subs	r2, r2, r6
 8005ae6:	6122      	str	r2, [r4, #16]
 8005ae8:	f8cd a000 	str.w	sl, [sp]
 8005aec:	464b      	mov	r3, r9
 8005aee:	aa03      	add	r2, sp, #12
 8005af0:	4621      	mov	r1, r4
 8005af2:	4640      	mov	r0, r8
 8005af4:	f7ff fee2 	bl	80058bc <_printf_common>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d14c      	bne.n	8005b96 <_printf_i+0x1fe>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	b004      	add	sp, #16
 8005b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b06:	4835      	ldr	r0, [pc, #212]	; (8005bdc <_printf_i+0x244>)
 8005b08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	680e      	ldr	r6, [r1, #0]
 8005b10:	061f      	lsls	r7, r3, #24
 8005b12:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b16:	600e      	str	r6, [r1, #0]
 8005b18:	d514      	bpl.n	8005b44 <_printf_i+0x1ac>
 8005b1a:	07d9      	lsls	r1, r3, #31
 8005b1c:	bf44      	itt	mi
 8005b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b22:	6023      	strmi	r3, [r4, #0]
 8005b24:	b91d      	cbnz	r5, 8005b2e <_printf_i+0x196>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	f023 0320 	bic.w	r3, r3, #32
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	2310      	movs	r3, #16
 8005b30:	e7b0      	b.n	8005a94 <_printf_i+0xfc>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f043 0320 	orr.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	2378      	movs	r3, #120	; 0x78
 8005b3c:	4828      	ldr	r0, [pc, #160]	; (8005be0 <_printf_i+0x248>)
 8005b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b42:	e7e3      	b.n	8005b0c <_printf_i+0x174>
 8005b44:	065e      	lsls	r6, r3, #25
 8005b46:	bf48      	it	mi
 8005b48:	b2ad      	uxthmi	r5, r5
 8005b4a:	e7e6      	b.n	8005b1a <_printf_i+0x182>
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	e7bb      	b.n	8005ac8 <_printf_i+0x130>
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	6826      	ldr	r6, [r4, #0]
 8005b54:	6960      	ldr	r0, [r4, #20]
 8005b56:	1d1d      	adds	r5, r3, #4
 8005b58:	600d      	str	r5, [r1, #0]
 8005b5a:	0635      	lsls	r5, r6, #24
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	d501      	bpl.n	8005b64 <_printf_i+0x1cc>
 8005b60:	6018      	str	r0, [r3, #0]
 8005b62:	e002      	b.n	8005b6a <_printf_i+0x1d2>
 8005b64:	0671      	lsls	r1, r6, #25
 8005b66:	d5fb      	bpl.n	8005b60 <_printf_i+0x1c8>
 8005b68:	8018      	strh	r0, [r3, #0]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	4616      	mov	r6, r2
 8005b70:	e7ba      	b.n	8005ae8 <_printf_i+0x150>
 8005b72:	680b      	ldr	r3, [r1, #0]
 8005b74:	1d1a      	adds	r2, r3, #4
 8005b76:	600a      	str	r2, [r1, #0]
 8005b78:	681e      	ldr	r6, [r3, #0]
 8005b7a:	6862      	ldr	r2, [r4, #4]
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7fa fb36 	bl	80001f0 <memchr>
 8005b84:	b108      	cbz	r0, 8005b8a <_printf_i+0x1f2>
 8005b86:	1b80      	subs	r0, r0, r6
 8005b88:	6060      	str	r0, [r4, #4]
 8005b8a:	6863      	ldr	r3, [r4, #4]
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b94:	e7a8      	b.n	8005ae8 <_printf_i+0x150>
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	4632      	mov	r2, r6
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	47d0      	blx	sl
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d0ab      	beq.n	8005afc <_printf_i+0x164>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	079b      	lsls	r3, r3, #30
 8005ba8:	d413      	bmi.n	8005bd2 <_printf_i+0x23a>
 8005baa:	68e0      	ldr	r0, [r4, #12]
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	4298      	cmp	r0, r3
 8005bb0:	bfb8      	it	lt
 8005bb2:	4618      	movlt	r0, r3
 8005bb4:	e7a4      	b.n	8005b00 <_printf_i+0x168>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4649      	mov	r1, r9
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	47d0      	blx	sl
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d09b      	beq.n	8005afc <_printf_i+0x164>
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	9903      	ldr	r1, [sp, #12]
 8005bca:	1a5b      	subs	r3, r3, r1
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dcf2      	bgt.n	8005bb6 <_printf_i+0x21e>
 8005bd0:	e7eb      	b.n	8005baa <_printf_i+0x212>
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	f104 0619 	add.w	r6, r4, #25
 8005bd8:	e7f5      	b.n	8005bc6 <_printf_i+0x22e>
 8005bda:	bf00      	nop
 8005bdc:	08006305 	.word	0x08006305
 8005be0:	08006316 	.word	0x08006316

08005be4 <memmove>:
 8005be4:	4288      	cmp	r0, r1
 8005be6:	b510      	push	{r4, lr}
 8005be8:	eb01 0402 	add.w	r4, r1, r2
 8005bec:	d902      	bls.n	8005bf4 <memmove+0x10>
 8005bee:	4284      	cmp	r4, r0
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	d807      	bhi.n	8005c04 <memmove+0x20>
 8005bf4:	1e43      	subs	r3, r0, #1
 8005bf6:	42a1      	cmp	r1, r4
 8005bf8:	d008      	beq.n	8005c0c <memmove+0x28>
 8005bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c02:	e7f8      	b.n	8005bf6 <memmove+0x12>
 8005c04:	4402      	add	r2, r0
 8005c06:	4601      	mov	r1, r0
 8005c08:	428a      	cmp	r2, r1
 8005c0a:	d100      	bne.n	8005c0e <memmove+0x2a>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c16:	e7f7      	b.n	8005c08 <memmove+0x24>

08005c18 <_free_r>:
 8005c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	d048      	beq.n	8005cb0 <_free_r+0x98>
 8005c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c22:	9001      	str	r0, [sp, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f1a1 0404 	sub.w	r4, r1, #4
 8005c2a:	bfb8      	it	lt
 8005c2c:	18e4      	addlt	r4, r4, r3
 8005c2e:	f000 f8d3 	bl	8005dd8 <__malloc_lock>
 8005c32:	4a20      	ldr	r2, [pc, #128]	; (8005cb4 <_free_r+0x9c>)
 8005c34:	9801      	ldr	r0, [sp, #4]
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	4615      	mov	r5, r2
 8005c3a:	b933      	cbnz	r3, 8005c4a <_free_r+0x32>
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	6014      	str	r4, [r2, #0]
 8005c40:	b003      	add	sp, #12
 8005c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c46:	f000 b8cd 	b.w	8005de4 <__malloc_unlock>
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	d90b      	bls.n	8005c66 <_free_r+0x4e>
 8005c4e:	6821      	ldr	r1, [r4, #0]
 8005c50:	1862      	adds	r2, r4, r1
 8005c52:	4293      	cmp	r3, r2
 8005c54:	bf04      	itt	eq
 8005c56:	681a      	ldreq	r2, [r3, #0]
 8005c58:	685b      	ldreq	r3, [r3, #4]
 8005c5a:	6063      	str	r3, [r4, #4]
 8005c5c:	bf04      	itt	eq
 8005c5e:	1852      	addeq	r2, r2, r1
 8005c60:	6022      	streq	r2, [r4, #0]
 8005c62:	602c      	str	r4, [r5, #0]
 8005c64:	e7ec      	b.n	8005c40 <_free_r+0x28>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x58>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x4e>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1855      	adds	r5, r2, r1
 8005c74:	42a5      	cmp	r5, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x78>
 8005c78:	6824      	ldr	r4, [r4, #0]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1dd      	bne.n	8005c40 <_free_r+0x28>
 8005c84:	681c      	ldr	r4, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	e7d7      	b.n	8005c40 <_free_r+0x28>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x80>
 8005c92:	230c      	movs	r3, #12
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	e7d3      	b.n	8005c40 <_free_r+0x28>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1949      	addeq	r1, r1, r5
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7c7      	b.n	8005c40 <_free_r+0x28>
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	2000de08 	.word	0x2000de08

08005cb8 <_malloc_r>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	1ccd      	adds	r5, r1, #3
 8005cbc:	f025 0503 	bic.w	r5, r5, #3
 8005cc0:	3508      	adds	r5, #8
 8005cc2:	2d0c      	cmp	r5, #12
 8005cc4:	bf38      	it	cc
 8005cc6:	250c      	movcc	r5, #12
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	4606      	mov	r6, r0
 8005ccc:	db01      	blt.n	8005cd2 <_malloc_r+0x1a>
 8005cce:	42a9      	cmp	r1, r5
 8005cd0:	d903      	bls.n	8005cda <_malloc_r+0x22>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cda:	f000 f87d 	bl	8005dd8 <__malloc_lock>
 8005cde:	4921      	ldr	r1, [pc, #132]	; (8005d64 <_malloc_r+0xac>)
 8005ce0:	680a      	ldr	r2, [r1, #0]
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	b99c      	cbnz	r4, 8005d0e <_malloc_r+0x56>
 8005ce6:	4f20      	ldr	r7, [pc, #128]	; (8005d68 <_malloc_r+0xb0>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	b923      	cbnz	r3, 8005cf6 <_malloc_r+0x3e>
 8005cec:	4621      	mov	r1, r4
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f000 f862 	bl	8005db8 <_sbrk_r>
 8005cf4:	6038      	str	r0, [r7, #0]
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f85d 	bl	8005db8 <_sbrk_r>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d123      	bne.n	8005d4a <_malloc_r+0x92>
 8005d02:	230c      	movs	r3, #12
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	4630      	mov	r0, r6
 8005d08:	f000 f86c 	bl	8005de4 <__malloc_unlock>
 8005d0c:	e7e3      	b.n	8005cd6 <_malloc_r+0x1e>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	1b5b      	subs	r3, r3, r5
 8005d12:	d417      	bmi.n	8005d44 <_malloc_r+0x8c>
 8005d14:	2b0b      	cmp	r3, #11
 8005d16:	d903      	bls.n	8005d20 <_malloc_r+0x68>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	441c      	add	r4, r3
 8005d1c:	6025      	str	r5, [r4, #0]
 8005d1e:	e004      	b.n	8005d2a <_malloc_r+0x72>
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	42a2      	cmp	r2, r4
 8005d24:	bf0c      	ite	eq
 8005d26:	600b      	streq	r3, [r1, #0]
 8005d28:	6053      	strne	r3, [r2, #4]
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f000 f85a 	bl	8005de4 <__malloc_unlock>
 8005d30:	f104 000b 	add.w	r0, r4, #11
 8005d34:	1d23      	adds	r3, r4, #4
 8005d36:	f020 0007 	bic.w	r0, r0, #7
 8005d3a:	1ac2      	subs	r2, r0, r3
 8005d3c:	d0cc      	beq.n	8005cd8 <_malloc_r+0x20>
 8005d3e:	1a1b      	subs	r3, r3, r0
 8005d40:	50a3      	str	r3, [r4, r2]
 8005d42:	e7c9      	b.n	8005cd8 <_malloc_r+0x20>
 8005d44:	4622      	mov	r2, r4
 8005d46:	6864      	ldr	r4, [r4, #4]
 8005d48:	e7cc      	b.n	8005ce4 <_malloc_r+0x2c>
 8005d4a:	1cc4      	adds	r4, r0, #3
 8005d4c:	f024 0403 	bic.w	r4, r4, #3
 8005d50:	42a0      	cmp	r0, r4
 8005d52:	d0e3      	beq.n	8005d1c <_malloc_r+0x64>
 8005d54:	1a21      	subs	r1, r4, r0
 8005d56:	4630      	mov	r0, r6
 8005d58:	f000 f82e 	bl	8005db8 <_sbrk_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1dd      	bne.n	8005d1c <_malloc_r+0x64>
 8005d60:	e7cf      	b.n	8005d02 <_malloc_r+0x4a>
 8005d62:	bf00      	nop
 8005d64:	2000de08 	.word	0x2000de08
 8005d68:	2000de0c 	.word	0x2000de0c

08005d6c <_realloc_r>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	4607      	mov	r7, r0
 8005d70:	4614      	mov	r4, r2
 8005d72:	460e      	mov	r6, r1
 8005d74:	b921      	cbnz	r1, 8005d80 <_realloc_r+0x14>
 8005d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	f7ff bf9c 	b.w	8005cb8 <_malloc_r>
 8005d80:	b922      	cbnz	r2, 8005d8c <_realloc_r+0x20>
 8005d82:	f7ff ff49 	bl	8005c18 <_free_r>
 8005d86:	4625      	mov	r5, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	f000 f830 	bl	8005df0 <_malloc_usable_size_r>
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d20f      	bcs.n	8005db4 <_realloc_r+0x48>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4638      	mov	r0, r7
 8005d98:	f7ff ff8e 	bl	8005cb8 <_malloc_r>
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d0f2      	beq.n	8005d88 <_realloc_r+0x1c>
 8005da2:	4631      	mov	r1, r6
 8005da4:	4622      	mov	r2, r4
 8005da6:	f7ff fbef 	bl	8005588 <memcpy>
 8005daa:	4631      	mov	r1, r6
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff ff33 	bl	8005c18 <_free_r>
 8005db2:	e7e9      	b.n	8005d88 <_realloc_r+0x1c>
 8005db4:	4635      	mov	r5, r6
 8005db6:	e7e7      	b.n	8005d88 <_realloc_r+0x1c>

08005db8 <_sbrk_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_sbrk_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb f974 	bl	80010b0 <_sbrk>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_sbrk_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_sbrk_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	2000deac 	.word	0x2000deac

08005dd8 <__malloc_lock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__malloc_lock+0x8>)
 8005dda:	f000 b811 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	2000deb4 	.word	0x2000deb4

08005de4 <__malloc_unlock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__malloc_unlock+0x8>)
 8005de6:	f000 b80c 	b.w	8005e02 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	2000deb4 	.word	0x2000deb4

08005df0 <_malloc_usable_size_r>:
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f18      	subs	r0, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfbc      	itt	lt
 8005dfa:	580b      	ldrlt	r3, [r1, r0]
 8005dfc:	18c0      	addlt	r0, r0, r3
 8005dfe:	4770      	bx	lr

08005e00 <__retarget_lock_acquire_recursive>:
 8005e00:	4770      	bx	lr

08005e02 <__retarget_lock_release_recursive>:
 8005e02:	4770      	bx	lr

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
