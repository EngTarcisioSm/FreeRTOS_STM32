
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de20  20000074  08005344  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000de94  08005344  0002de94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014051  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  000340f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00036b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00037af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000355c  00000000  00000000  00038960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c4  00000000  00000000  0003bebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000950ac  00000000  00000000  0004d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e242c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  000e2480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ec4 	.word	0x08004ec4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004ec4 	.word	0x08004ec4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fcc7 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f89b 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f92d 	bl	80007f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f901 	bl	80007a0 <MX_USART1_UART_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */
	xHandle_Event_Group = xEventGroupCreate();
 800059e:	f002 f9ef 	bl	8002980 <xEventGroupCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a34      	ldr	r2, [pc, #208]	; (8000678 <main+0xf0>)
 80005a6:	6013      	str	r3, [r2, #0]
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask1, "task_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 80005a8:	2300      	movs	r3, #0
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	2301      	movs	r3, #1
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	4931      	ldr	r1, [pc, #196]	; (800067c <main+0xf4>)
 80005b6:	4832      	ldr	r0, [pc, #200]	; (8000680 <main+0xf8>)
 80005b8:	f002 fc29 	bl	8002e0e <xTaskCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d003      	beq.n	80005ca <main+0x42>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_1 no escalonador\n");
 80005c2:	4830      	ldr	r0, [pc, #192]	; (8000684 <main+0xfc>)
 80005c4:	f000 f9e0 	bl	8000988 <vPrintString>
 80005c8:	e002      	b.n	80005d0 <main+0x48>
	} else {
		vPrintString("Tarefa Task_1 criada com sucesso!\n");
 80005ca:	482f      	ldr	r0, [pc, #188]	; (8000688 <main+0x100>)
 80005cc:	f000 f9dc 	bl	8000988 <vPrintString>
	}

	if ((xTaskCreate(vTask2, "task_2", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 80005d0:	2300      	movs	r3, #0
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	492b      	ldr	r1, [pc, #172]	; (800068c <main+0x104>)
 80005de:	482c      	ldr	r0, [pc, #176]	; (8000690 <main+0x108>)
 80005e0:	f002 fc15 	bl	8002e0e <xTaskCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d003      	beq.n	80005f2 <main+0x6a>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 80005ea:	482a      	ldr	r0, [pc, #168]	; (8000694 <main+0x10c>)
 80005ec:	f000 f9cc 	bl	8000988 <vPrintString>
 80005f0:	e002      	b.n	80005f8 <main+0x70>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80005f2:	4829      	ldr	r0, [pc, #164]	; (8000698 <main+0x110>)
 80005f4:	f000 f9c8 	bl	8000988 <vPrintString>
	}

	if ((xTaskCreate(vTask3, "task_3", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 80005f8:	2300      	movs	r3, #0
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	4925      	ldr	r1, [pc, #148]	; (800069c <main+0x114>)
 8000606:	4826      	ldr	r0, [pc, #152]	; (80006a0 <main+0x118>)
 8000608:	f002 fc01 	bl	8002e0e <xTaskCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d003      	beq.n	800061a <main+0x92>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_3 no escalonador\n");
 8000612:	4824      	ldr	r0, [pc, #144]	; (80006a4 <main+0x11c>)
 8000614:	f000 f9b8 	bl	8000988 <vPrintString>
 8000618:	e002      	b.n	8000620 <main+0x98>
	} else {
		vPrintString("Tarefa Task_3 criada com sucesso!\n");
 800061a:	4823      	ldr	r0, [pc, #140]	; (80006a8 <main+0x120>)
 800061c:	f000 f9b4 	bl	8000988 <vPrintString>
	}

	if ((xTaskCreate(vTask_check_event, "check_event", configMINIMAL_STACK_SIZE, NULL, 1, NULL)) != pdTRUE) {
 8000620:	2300      	movs	r3, #0
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2301      	movs	r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	491f      	ldr	r1, [pc, #124]	; (80006ac <main+0x124>)
 800062e:	4820      	ldr	r0, [pc, #128]	; (80006b0 <main+0x128>)
 8000630:	f002 fbed 	bl	8002e0e <xTaskCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d003      	beq.n	8000642 <main+0xba>
		vPrintString("Não foi possivel alocar tarefa vTask_Print_count no escalonador.");
 800063a:	481e      	ldr	r0, [pc, #120]	; (80006b4 <main+0x12c>)
 800063c:	f000 f9a4 	bl	8000988 <vPrintString>
 8000640:	e002      	b.n	8000648 <main+0xc0>
	} else {
		vPrintString("Tarefa check_event criada com sucesso!\n");
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <main+0x130>)
 8000644:	f000 f9a0 	bl	8000988 <vPrintString>
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE * 2, NULL,
 8000648:	2300      	movs	r3, #0
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2301      	movs	r3, #1
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	4919      	ldr	r1, [pc, #100]	; (80006bc <main+0x134>)
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <main+0x138>)
 800065a:	f002 fbd8 	bl	8002e0e <xTaskCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d003      	beq.n	800066c <main+0xe4>
			1, NULL)) != pdTRUE) {
		vPrintString(
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <main+0x13c>)
 8000666:	f000 f98f 	bl	8000988 <vPrintString>
 800066a:	e002      	b.n	8000672 <main+0xea>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 800066c:	4816      	ldr	r0, [pc, #88]	; (80006c8 <main+0x140>)
 800066e:	f000 f98b 	bl	8000988 <vPrintString>
	}


	vTaskStartScheduler();
 8000672:	f002 fda5 	bl	80031c0 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000676:	e7fe      	b.n	8000676 <main+0xee>
 8000678:	20000090 	.word	0x20000090
 800067c:	08004edc 	.word	0x08004edc
 8000680:	08000ad9 	.word	0x08000ad9
 8000684:	08004ee4 	.word	0x08004ee4
 8000688:	08004f1c 	.word	0x08004f1c
 800068c:	08004f40 	.word	0x08004f40
 8000690:	08000b11 	.word	0x08000b11
 8000694:	08004f48 	.word	0x08004f48
 8000698:	08004f80 	.word	0x08004f80
 800069c:	08004fa4 	.word	0x08004fa4
 80006a0:	08000b49 	.word	0x08000b49
 80006a4:	08004fac 	.word	0x08004fac
 80006a8:	08004fe4 	.word	0x08004fe4
 80006ac:	08005008 	.word	0x08005008
 80006b0:	08000a5d 	.word	0x08000a5d
 80006b4:	08005014 	.word	0x08005014
 80006b8:	08005058 	.word	0x08005058
 80006bc:	08005080 	.word	0x08005080
 80006c0:	08000b81 	.word	0x08000b81
 80006c4:	0800508c 	.word	0x0800508c
 80006c8:	080050d0 	.word	0x080050d0

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 ffc2 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <SystemClock_Config+0xcc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <SystemClock_Config+0xd0>)
 800071a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000744:	2354      	movs	r3, #84	; 0x54
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fed7 	bl	8001508 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 fa6c 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f939 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800078c:	f000 fa56 	bl	8000c3c <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART1_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d8:	f001 fdbc 	bl	8002354 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 fa2b 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000ddf4 	.word	0x2000ddf4
 80007f0:	40011000 	.word	0x40011000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b59      	ldr	r3, [pc, #356]	; (8000974 <MX_GPIO_Init+0x180>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a58      	ldr	r2, [pc, #352]	; (8000974 <MX_GPIO_Init+0x180>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b56      	ldr	r3, [pc, #344]	; (8000974 <MX_GPIO_Init+0x180>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b52      	ldr	r3, [pc, #328]	; (8000974 <MX_GPIO_Init+0x180>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a51      	ldr	r2, [pc, #324]	; (8000974 <MX_GPIO_Init+0x180>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b4f      	ldr	r3, [pc, #316]	; (8000974 <MX_GPIO_Init+0x180>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <MX_GPIO_Init+0x180>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a4a      	ldr	r2, [pc, #296]	; (8000974 <MX_GPIO_Init+0x180>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b48      	ldr	r3, [pc, #288]	; (8000974 <MX_GPIO_Init+0x180>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_GPIO_Init+0x180>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a43      	ldr	r2, [pc, #268]	; (8000974 <MX_GPIO_Init+0x180>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_GPIO_Init+0x180>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_GPIO_Init+0x180>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a3c      	ldr	r2, [pc, #240]	; (8000974 <MX_GPIO_Init+0x180>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_GPIO_Init+0x180>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin|SEL_1_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2109      	movs	r1, #9
 800089a:	4837      	ldr	r0, [pc, #220]	; (8000978 <MX_GPIO_Init+0x184>)
 800089c:	f000 fde8 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a6:	4835      	ldr	r0, [pc, #212]	; (800097c <MX_GPIO_Init+0x188>)
 80008a8:	f000 fde2 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	4833      	ldr	r0, [pc, #204]	; (8000980 <MX_GPIO_Init+0x18c>)
 80008b2:	f000 fddd 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOUT_LED1_Pin */
  GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	482a      	ldr	r0, [pc, #168]	; (8000978 <MX_GPIO_Init+0x184>)
 80008ce:	f000 fc4b 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_0_Pin */
  GPIO_InitStruct.Pin = SEL_0_Pin;
 80008d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4824      	ldr	r0, [pc, #144]	; (800097c <MX_GPIO_Init+0x188>)
 80008ec:	f000 fc3c 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_CFIG_Pin */
  GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 80008f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	481f      	ldr	r0, [pc, #124]	; (8000984 <MX_GPIO_Init+0x190>)
 8000908:	f000 fc2e 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_RX_485_Pin */
  GPIO_InitStruct.Pin = EN_RX_485_Pin;
 800090c:	2304      	movs	r3, #4
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <MX_GPIO_Init+0x18c>)
 8000924:	f000 fc20 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_Pin */
  GPIO_InitStruct.Pin = SEL_1_Pin;
 8000928:	2308      	movs	r3, #8
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_GPIO_Init+0x184>)
 8000940:	f000 fc12 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_TARA_Pin */
  GPIO_InitStruct.Pin = DIN_TARA_Pin;
 8000944:	2310      	movs	r3, #16
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_GPIO_Init+0x184>)
 8000958:	f000 fc06 	bl	8001168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2105      	movs	r1, #5
 8000960:	2028      	movs	r0, #40	; 0x28
 8000962:	f000 fbd7 	bl	8001114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000966:	2028      	movs	r0, #40	; 0x28
 8000968:	f000 fbf0 	bl	800114c <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400
 800097c:	40020000 	.word	0x40020000
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020800 	.word	0x40020800

08000988 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <vPrintString+0x60>)
 8000998:	f000 fd6a 	bl	8001470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <vPrintString+0x64>)
 80009a2:	f000 fd65 	bl	8001470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <vPrintString+0x68>)
 80009ac:	f000 fd60 	bl	8001470 <HAL_GPIO_WritePin>
	taskENTER_CRITICAL();	//removido
 80009b0:	f003 fb48 	bl	8004044 <vPortEnterCritical>
	//xSemaphoreTake(xMutex, portMAX_DELAY);
	{
		vUsartLib_Puts(pc_uartSend_f);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f82d 	bl	8000a14 <vUsartLib_Puts>
	}
	taskEXIT_CRITICAL();		//removido
 80009ba:	f003 fb73 	bl	80040a4 <vPortExitCritical>
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	//xSemaphoreGive(xMutex);
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <vPrintString+0x60>)
 80009c6:	f000 fd53 	bl	8001470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <vPrintString+0x64>)
 80009d0:	f000 fd4e 	bl	8001470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2104      	movs	r1, #4
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <vPrintString+0x68>)
 80009da:	f000 fd49 	bl	8001470 <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 8000a00:	1cf9      	adds	r1, r7, #3
 8000a02:	230a      	movs	r3, #10
 8000a04:	2201      	movs	r2, #1
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f001 fcf1 	bl	80023ee <HAL_UART_Transmit>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000a1c:	e007      	b.n	8000a2e <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <vUsartLib_Puts+0x2c>)
 8000a2a:	f7ff ffe3 	bl	80009f4 <vUsartLib_Putc>
	while (*c_data) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f3      	bne.n	8000a1e <vUsartLib_Puts+0xa>
	}
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000ddf4 	.word	0x2000ddf4

08000a44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]

}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <vTask_check_event>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_check_event(void *pvParameters) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_check_event iniciada! \r\n");
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <vTask_check_event+0x68>)
 8000a66:	f7ff ff8f 	bl	8000988 <vPrintString>
	for(;;){
		vPrintString("Setando evento do BIT_0!\r\n");
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <vTask_check_event+0x6c>)
 8000a6c:	f7ff ff8c 	bl	8000988 <vPrintString>
		xEventGroupSetBits(xHandle_Event_Group, BIT_0);
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <vTask_check_event+0x70>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f868 	bl	8002b4c <xEventGroupSetBits>
		vTaskDelay( 1000 / portTICK_PERIOD_MS);
 8000a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a80:	f002 fb04 	bl	800308c <vTaskDelay>

		vPrintString("Setando evento do BIT_1!\r\n");
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <vTask_check_event+0x74>)
 8000a86:	f7ff ff7f 	bl	8000988 <vPrintString>
		xEventGroupSetBits(xHandle_Event_Group, BIT_0);
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <vTask_check_event+0x70>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f85b 	bl	8002b4c <xEventGroupSetBits>
		vTaskDelay( 1000 / portTICK_PERIOD_MS);
 8000a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9a:	f002 faf7 	bl	800308c <vTaskDelay>

		vPrintString("Setando evento do BIT_2!\r\n");
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <vTask_check_event+0x78>)
 8000aa0:	f7ff ff72 	bl	8000988 <vPrintString>
		xEventGroupSetBits(xHandle_Event_Group, BIT_0);
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <vTask_check_event+0x70>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f84e 	bl	8002b4c <xEventGroupSetBits>
		vTaskDelay( 1000 / portTICK_PERIOD_MS);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab4:	f002 faea 	bl	800308c <vTaskDelay>

		vTaskDelay( 3000 / portTICK_PERIOD_MS);
 8000ab8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000abc:	f002 fae6 	bl	800308c <vTaskDelay>
		vPrintString("Setando evento do BIT_0!\r\n");
 8000ac0:	e7d3      	b.n	8000a6a <vTask_check_event+0xe>
 8000ac2:	bf00      	nop
 8000ac4:	080050f8 	.word	0x080050f8
 8000ac8:	08005118 	.word	0x08005118
 8000acc:	20000090 	.word	0x20000090
 8000ad0:	08005134 	.word	0x08005134
 8000ad4:	08005150 	.word	0x08005150

08000ad8 <vTask1>:

	}
	vTaskDelete(NULL);
}

void vTask1(void *pvParameters) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_1 iniciada! \r\n");
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <vTask1+0x2c>)
 8000ae2:	f7ff ff51 	bl	8000988 <vPrintString>
		/* A função xEventGroupWaitBits faz com que a tarefa entre em estado
		 * de bloqueado por tempo definido ou indeterminado ate que um evento
		 * de sinalização de um BIT do grupo de evento seja gerado de forma
		 * externa por uma task ou ISR
		 */
		xEventGroupWaitBits(
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <vTask1+0x30>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2300      	movs	r3, #0
 8000af2:	2201      	movs	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	f001 ff5b 	bl	80029b0 <xEventGroupWaitBits>
		/*
		 * Nota-se que diferente do exemplo anteriormente usado, não precisamos
		 * checar quais bits foram jogados para nível alto pois trabalhamos
		 * com apenas um bit neste momento
		 */
		vPrintString("BIT_0 Setado! \r\n\n");
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <vTask1+0x34>)
 8000afc:	f7ff ff44 	bl	8000988 <vPrintString>
		xEventGroupWaitBits(
 8000b00:	e7f1      	b.n	8000ae6 <vTask1+0xe>
 8000b02:	bf00      	nop
 8000b04:	0800516c 	.word	0x0800516c
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	08005184 	.word	0x08005184

08000b10 <vTask2>:
	}
	vTaskDelete(NULL);
}

void vTask2(void *pvParameters) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_2 inicada!\r\n");
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <vTask2+0x2c>)
 8000b1a:	f7ff ff35 	bl	8000988 <vPrintString>
		/* A função xEventGroupWaitBits faz com que a tarefa entre em estado
		 * de bloqueado por tempo definido ou indeterminado ate que um evento
		 * de sinalização de um BIT do grupo de evento seja gerado de forma
		 * externa por uma task ou ISR
		 */
		xEventGroupWaitBits(
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <vTask2+0x30>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	f001 ff3f 	bl	80029b0 <xEventGroupWaitBits>
		/*
		 * Nota-se que diferente do exemplo anteriormente usado, não precisamos
		 * checar quais bits foram jogados para nível alto pois trabalhamos
		 * com apenas um bit neste momento
		 */
		vPrintString("BIT_1 Setado! \r\n\n");
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <vTask2+0x34>)
 8000b34:	f7ff ff28 	bl	8000988 <vPrintString>
		xEventGroupWaitBits(
 8000b38:	e7f1      	b.n	8000b1e <vTask2+0xe>
 8000b3a:	bf00      	nop
 8000b3c:	08005198 	.word	0x08005198
 8000b40:	20000090 	.word	0x20000090
 8000b44:	080051ac 	.word	0x080051ac

08000b48 <vTask3>:
	}
	vTaskDelete(NULL);
}

void vTask3(void *pvParameters) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_3 inicada!\r\n");
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <vTask3+0x2c>)
 8000b52:	f7ff ff19 	bl	8000988 <vPrintString>
		/* A função xEventGroupWaitBits faz com que a tarefa entre em estado
		 * de bloqueado por tempo definido ou indeterminado ate que um evento
		 * de sinalização de um BIT do grupo de evento seja gerado de forma
		 * externa por uma task ou ISR
		 */
		xEventGroupWaitBits(
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <vTask3+0x30>)
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	2201      	movs	r2, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	f001 ff23 	bl	80029b0 <xEventGroupWaitBits>
		/*
		 * Nota-se que diferente do exemplo anteriormente usado, não precisamos
		 * checar quais bits foram jogados para nível alto pois trabalhamos
		 * com apenas um bit neste momento
		 */
		vPrintString("BIT_2 Setado! \r\n\n");
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <vTask3+0x34>)
 8000b6c:	f7ff ff0c 	bl	8000988 <vPrintString>
		xEventGroupWaitBits(
 8000b70:	e7f1      	b.n	8000b56 <vTask3+0xe>
 8000b72:	bf00      	nop
 8000b74:	080051c0 	.word	0x080051c0
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	080051d4 	.word	0x080051d4

08000b80 <vTask_blink>:
	}
	vTaskDelete(NULL);
}


void vTask_blink(void *pvParameters) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0b4      	sub	sp, #208	; 0xd0
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

	char  c_buff[200];

	vPrintString("Entrando da Task de debug");
 8000b88:	481d      	ldr	r0, [pc, #116]	; (8000c00 <vTask_blink+0x80>)
 8000b8a:	f7ff fefd 	bl	8000988 <vPrintString>

	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	481c      	ldr	r0, [pc, #112]	; (8000c04 <vTask_blink+0x84>)
 8000b92:	f000 fc86 	bl	80014a2 <HAL_GPIO_TogglePin>

		vTaskList(c_buff);
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 f810 	bl	8003bc0 <vTaskList>

		vPrintString("\n\r\nTask-------------State-----Prio------Stack---Num\r\n");
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <vTask_blink+0x88>)
 8000ba2:	f7ff fef1 	bl	8000988 <vPrintString>
		vPrintString(c_buff);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff feec 	bl	8000988 <vPrintString>
		vPrintString("\n");
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <vTask_blink+0x8c>)
 8000bb2:	f7ff fee9 	bl	8000988 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	22c8      	movs	r2, #200	; 0xc8
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fd50 	bl	8004664 <memset>

		sprintf(c_buff, "Free Heap: %d bytes \n\n", xPortGetMinimumEverFreeHeapSize());
 8000bc4:	f003 fc4e 	bl	8004464 <xPortGetMinimumEverFreeHeapSize>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4910      	ldr	r1, [pc, #64]	; (8000c10 <vTask_blink+0x90>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 fd4f 	bl	8004674 <siprintf>
		vPrintString(c_buff);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fed4 	bl	8000988 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	22c8      	movs	r2, #200	; 0xc8
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fd3b 	bl	8004664 <memset>

		vPrintString("\n\n\n");
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <vTask_blink+0x94>)
 8000bf0:	f7ff feca 	bl	8000988 <vPrintString>
		vTaskDelay(5000 / portTICK_PERIOD_MS);
 8000bf4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bf8:	f002 fa48 	bl	800308c <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000bfc:	e7c7      	b.n	8000b8e <vTask_blink+0xe>
 8000bfe:	bf00      	nop
 8000c00:	080051e8 	.word	0x080051e8
 8000c04:	40020400 	.word	0x40020400
 8000c08:	08005204 	.word	0x08005204
 8000c0c:	0800523c 	.word	0x0800523c
 8000c10:	08005240 	.word	0x08005240
 8000c14:	08005258 	.word	0x08005258

08000c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2a:	f000 f99b 	bl	8000f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40000800 	.word	0x40000800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_MspInit+0x54>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <HAL_MspInit+0x54>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x54>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_MspInit+0x54>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_MspInit+0x54>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_MspInit+0x54>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	210f      	movs	r1, #15
 8000c8a:	f06f 0001 	mvn.w	r0, #1
 8000c8e:	f000 fa41 	bl	8001114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	23c0      	movs	r3, #192	; 0xc0
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_UART_MspInit+0x8c>)
 8000d16:	f000 fa27 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	201e      	movs	r0, #30
 8000d46:	f000 f9e5 	bl	8001114 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d4a:	201e      	movs	r0, #30
 8000d4c:	f000 f9fe 	bl	800114c <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f83a 	bl	8001df0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d7c:	f001 f810 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8000d80:	4603      	mov	r3, r0
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_InitTick+0xa8>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3b01      	subs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_InitTick+0xac>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_InitTick+0xb0>)
 8000d98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_InitTick+0xac>)
 8000d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_InitTick+0xac>)
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_InitTick+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_InitTick+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <HAL_InitTick+0xac>)
 8000db6:	f001 f84d 	bl	8001e54 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <HAL_InitTick+0xac>)
 8000dc2:	f001 f8a1 	bl	8001f08 <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	2000de38 	.word	0x2000de38
 8000de0:	40000800 	.word	0x40000800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM4_IRQHandler+0x10>)
 8000e16:	f001 f8d9 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000de38 	.word	0x2000de38

08000e24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e2c:	f000 fb54 	bl	80014d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f003 fbc6 	bl	80045f4 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20010000 	.word	0x20010000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	20000094 	.word	0x20000094
 8000e9c:	2000de98 	.word	0x2000de98

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <SystemInit+0x28>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <SystemInit+0x28>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SystemInit+0x28>)
 8000eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eba:	609a      	str	r2, [r3, #8]
#endif
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ed2:	e003      	b.n	8000edc <LoopCopyDataInit>

08000ed4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eda:	3104      	adds	r1, #4

08000edc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ee2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee4:	d3f6      	bcc.n	8000ed4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee8:	e002      	b.n	8000ef0 <LoopFillZerobss>

08000eea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eec:	f842 3b04 	str.w	r3, [r2], #4

08000ef0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef4:	d3f9      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef6:	f7ff ffd3 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 fb81 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fb43 	bl	8000588 <main>
  bx  lr    
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000f08:	080052d0 	.word	0x080052d0
  ldr  r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f10:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000f14:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000f18:	2000de94 	.word	0x2000de94

08000f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_Init+0x40>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_Init+0x40>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x40>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f8d8 	bl	80010fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff feee 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fe78 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023c00 	.word	0x40023c00

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	2000de80 	.word	0x2000de80

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2000de80 	.word	0x2000de80

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff4c 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001126:	f7ff ff61 	bl	8000fec <__NVIC_GetPriorityGrouping>
 800112a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f7ff ffb1 	bl	8001098 <NVIC_EncodePriority>
 8001136:	4602      	mov	r2, r0
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff80 	bl	8001044 <__NVIC_SetPriority>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff54 	bl	8001008 <__NVIC_EnableIRQ>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e159      	b.n	8001438 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8148 	bne.w	8001432 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80a2 	beq.w	8001432 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a56      	ldr	r2, [pc, #344]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <HAL_GPIO_Init+0x2e8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_GPIO_Init+0x2ec>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a49      	ldr	r2, [pc, #292]	; (8001458 <HAL_GPIO_Init+0x2f0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x202>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a48      	ldr	r2, [pc, #288]	; (800145c <HAL_GPIO_Init+0x2f4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x1fe>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a47      	ldr	r2, [pc, #284]	; (8001460 <HAL_GPIO_Init+0x2f8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a46      	ldr	r2, [pc, #280]	; (8001464 <HAL_GPIO_Init+0x2fc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x1f6>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a45      	ldr	r2, [pc, #276]	; (8001468 <HAL_GPIO_Init+0x300>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x1f2>
 8001356:	2304      	movs	r3, #4
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x204>
 800135a:	2307      	movs	r3, #7
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x204>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x204>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x204>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x204>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x2ec>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_GPIO_Init+0x304>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_GPIO_Init+0x304>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_GPIO_Init+0x304>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_GPIO_Init+0x304>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_GPIO_Init+0x304>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_GPIO_Init+0x304>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_GPIO_Init+0x304>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_GPIO_Init+0x304>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f aea2 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43d9      	mvns	r1, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff faa4 	bl	8000a44 <HAL_GPIO_EXTI_Callback>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e264      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001526:	4ba3      	ldr	r3, [pc, #652]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	2b08      	cmp	r3, #8
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b9d      	ldr	r3, [pc, #628]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e23f      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x74>
 800156e:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a90      	ldr	r2, [pc, #576]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a8a      	ldr	r2, [pc, #552]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a87      	ldr	r2, [pc, #540]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a83      	ldr	r2, [pc, #524]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fce4 	bl	8000f8c <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fce0 	bl	8000f8c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e204      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fcd0 	bl	8000f8c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fccc 	bl	8000f8c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1f0      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161e:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1c4      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4952      	ldr	r1, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_RCC_OscConfig+0x2b0>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fc85 	bl	8000f8c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fc81 	bl	8000f8c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1a5      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4940      	ldr	r1, [pc, #256]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x2b0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc64 	bl	8000f8c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc60 	bl	8000f8c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e184      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d030      	beq.n	8001754 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d016      	beq.n	8001728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_RCC_OscConfig+0x2b4>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fc44 	bl	8000f8c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc40 	bl	8000f8c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e164      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x200>
 8001726:	e015      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x2b4>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fc2d 	bl	8000f8c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fc29 	bl	8000f8c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e14d      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a0 	beq.w	80018a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10f      	bne.n	8001792 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x2b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d121      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_RCC_OscConfig+0x2b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_RCC_OscConfig+0x2b8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fbef 	bl	8000f8c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e011      	b.n	80017d6 <HAL_RCC_OscConfig+0x2ce>
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470000 	.word	0x42470000
 80017bc:	42470e80 	.word	0x42470e80
 80017c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff fbe2 	bl	8000f8c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e106      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b85      	ldr	r3, [pc, #532]	; (80019ec <HAL_RCC_OscConfig+0x4e4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
 80017ea:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a80      	ldr	r2, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	e01c      	b.n	8001832 <HAL_RCC_OscConfig+0x32a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 8001800:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6713      	str	r3, [r2, #112]	; 0x70
 800180c:	4b78      	ldr	r3, [pc, #480]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a77      	ldr	r2, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	e00b      	b.n	8001832 <HAL_RCC_OscConfig+0x32a>
 800181a:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a74      	ldr	r2, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a71      	ldr	r2, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d015      	beq.n	8001866 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff fba7 	bl	8000f8c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fba3 	bl	8000f8c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0c5      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ee      	beq.n	8001842 <HAL_RCC_OscConfig+0x33a>
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb91 	bl	8000f8c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fb8d 	bl	8000f8c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0af      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d105      	bne.n	80018a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 809b 	beq.w	80019e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d05c      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d141      	bne.n	8001944 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x4ec>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb61 	bl	8000f8c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff fb5d 	bl	8000f8c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e081      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	019b      	lsls	r3, r3, #6
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	061b      	lsls	r3, r3, #24
 8001910:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_RCC_OscConfig+0x4ec>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb36 	bl	8000f8c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fb32 	bl	8000f8c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e056      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x41c>
 8001942:	e04e      	b.n	80019e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x4ec>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb1f 	bl	8000f8c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fb1b 	bl	8000f8c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e03f      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x44a>
 8001970:	e037      	b.n	80019e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e032      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_RCC_OscConfig+0x4e8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d028      	beq.n	80019de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d121      	bne.n	80019de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d11a      	bne.n	80019de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d111      	bne.n	80019de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40007000 	.word	0x40007000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470060 	.word	0x42470060

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90c      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d044      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e067      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa50 	bl	8000f8c <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa4c 	bl	8000f8c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20c      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8c6 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08005274 	.word	0x08005274
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bdc:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d00d      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x40>
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	f200 80bd 	bhi.w	8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bf6:	e0b7      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bfa:	60bb      	str	r3, [r7, #8]
       break;
 8001bfc:	e0b7      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c00:	60bb      	str	r3, [r7, #8]
      break;
 8001c02:	e0b4      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d04d      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	461a      	mov	r2, r3
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	ea02 0800 	and.w	r8, r2, r0
 8001c32:	ea03 0901 	and.w	r9, r3, r1
 8001c36:	4640      	mov	r0, r8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	014b      	lsls	r3, r1, #5
 8001c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c48:	0142      	lsls	r2, r0, #5
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	ebb0 0008 	subs.w	r0, r0, r8
 8001c52:	eb61 0109 	sbc.w	r1, r1, r9
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	018b      	lsls	r3, r1, #6
 8001c60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c64:	0182      	lsls	r2, r0, #6
 8001c66:	1a12      	subs	r2, r2, r0
 8001c68:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6c:	f04f 0000 	mov.w	r0, #0
 8001c70:	f04f 0100 	mov.w	r1, #0
 8001c74:	00d9      	lsls	r1, r3, #3
 8001c76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c7a:	00d0      	lsls	r0, r2, #3
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	eb12 0208 	adds.w	r2, r2, r8
 8001c84:	eb43 0309 	adc.w	r3, r3, r9
 8001c88:	f04f 0000 	mov.w	r0, #0
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	0259      	lsls	r1, r3, #9
 8001c92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c96:	0250      	lsls	r0, r2, #9
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	f7fe faf2 	bl	8000290 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e04a      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	ea02 0400 	and.w	r4, r2, r0
 8001cce:	ea03 0501 	and.w	r5, r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	014b      	lsls	r3, r1, #5
 8001ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ce4:	0142      	lsls	r2, r0, #5
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	1b00      	subs	r0, r0, r4
 8001cec:	eb61 0105 	sbc.w	r1, r1, r5
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	018b      	lsls	r3, r1, #6
 8001cfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cfe:	0182      	lsls	r2, r0, #6
 8001d00:	1a12      	subs	r2, r2, r0
 8001d02:	eb63 0301 	sbc.w	r3, r3, r1
 8001d06:	f04f 0000 	mov.w	r0, #0
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	00d9      	lsls	r1, r3, #3
 8001d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d14:	00d0      	lsls	r0, r2, #3
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	1912      	adds	r2, r2, r4
 8001d1c:	eb45 0303 	adc.w	r3, r5, r3
 8001d20:	f04f 0000 	mov.w	r0, #0
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	0299      	lsls	r1, r3, #10
 8001d2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d2e:	0290      	lsls	r0, r2, #10
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	f7fe faa6 	bl	8000290 <__aeabi_uldivmod>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	3301      	adds	r3, #1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	60bb      	str	r3, [r7, #8]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d6a:	60bb      	str	r3, [r7, #8]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08005284 	.word	0x08005284

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffdc 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0b5b      	lsrs	r3, r3, #13
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	08005284 	.word	0x08005284

08001df0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_GetClockConfig+0x5c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_GetClockConfig+0x5c>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_RCC_GetClockConfig+0x60>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0207 	and.w	r2, r3, #7
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	601a      	str	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40023c00 	.word	0x40023c00

08001e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e041      	b.n	8001eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f839 	bl	8001ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f000 f9ca 	bl	800222c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e044      	b.n	8001faa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d018      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x6c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d013      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x6c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_TIM_Base_Start_IT+0xb4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x6c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x6c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x6c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d010      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	e007      	b.n	8001fa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40014000 	.word	0x40014000

08001fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0202 	mvn.w	r2, #2
 8001ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8ee 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8e0 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8f1 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0204 	mvn.w	r2, #4
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8c4 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8b6 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8c7 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0208 	mvn.w	r2, #8
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f89a 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f88c 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f89d 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0210 	mvn.w	r2, #16
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2208      	movs	r2, #8
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f870 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f862 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f873 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0201 	mvn.w	r2, #1
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fd64 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8e2 	bl	8002340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f838 	bl	8002218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0220 	mvn.w	r2, #32
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8ac 	bl	800232c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a34      	ldr	r2, [pc, #208]	; (8002310 <TIM_Base_SetConfig+0xe4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00f      	beq.n	8002264 <TIM_Base_SetConfig+0x38>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224a:	d00b      	beq.n	8002264 <TIM_Base_SetConfig+0x38>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a31      	ldr	r2, [pc, #196]	; (8002314 <TIM_Base_SetConfig+0xe8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <TIM_Base_SetConfig+0x38>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a30      	ldr	r2, [pc, #192]	; (8002318 <TIM_Base_SetConfig+0xec>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_Base_SetConfig+0x38>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a2f      	ldr	r2, [pc, #188]	; (800231c <TIM_Base_SetConfig+0xf0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d108      	bne.n	8002276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <TIM_Base_SetConfig+0xe4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01b      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002284:	d017      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <TIM_Base_SetConfig+0xe8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <TIM_Base_SetConfig+0xec>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00f      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a20      	ldr	r2, [pc, #128]	; (800231c <TIM_Base_SetConfig+0xf0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00b      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <TIM_Base_SetConfig+0xf4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <TIM_Base_SetConfig+0xf8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0x8a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <TIM_Base_SetConfig+0xfc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <TIM_Base_SetConfig+0xe4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	615a      	str	r2, [r3, #20]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40010000 	.word	0x40010000
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	40000c00 	.word	0x40000c00
 8002320:	40014000 	.word	0x40014000
 8002324:	40014400 	.word	0x40014400
 8002328:	40014800 	.word	0x40014800

0800232c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03f      	b.n	80023e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fc90 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f929 	bl	80025f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d17c      	bne.n	8002508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Transmit+0x2c>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e075      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_UART_Transmit+0x3e>
 8002428:	2302      	movs	r3, #2
 800242a:	e06e      	b.n	800250a <HAL_UART_Transmit+0x11c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002442:	f7fe fda3 	bl	8000f8c <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x82>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002480:	e02a      	b.n	80024d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f840 	bl	8002512 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e036      	b.n	800250a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3302      	adds	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e007      	b.n	80024ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1cf      	bne.n	8002482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f810 	bl	8002512 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b090      	sub	sp, #64	; 0x40
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002522:	e050      	b.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d04c      	beq.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800252c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0x30>
 8002532:	f7fe fd2b 	bl	8000f8c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800253e:	429a      	cmp	r2, r3
 8002540:	d241      	bcs.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002562:	637a      	str	r2, [r7, #52]	; 0x34
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e5      	bne.n	8002542 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3314      	adds	r3, #20
 800257c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	e853 3f00 	ldrex	r3, [r3]
 8002584:	613b      	str	r3, [r7, #16]
   return(result);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3314      	adds	r3, #20
 8002594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002596:	623a      	str	r2, [r7, #32]
 8002598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259a:	69f9      	ldr	r1, [r7, #28]
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e5      	bne.n	8002576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e00f      	b.n	80025e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d09f      	beq.n	8002524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3740      	adds	r7, #64	; 0x40
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f4:	b09f      	sub	sp, #124	; 0x7c
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	ea40 0301 	orr.w	r3, r0, r1
 8002610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	431a      	orrs	r2, r3
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	431a      	orrs	r2, r3
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4313      	orrs	r3, r2
 8002628:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800262a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002634:	f021 010c 	bic.w	r1, r1, #12
 8002638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	6999      	ldr	r1, [r3, #24]
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	ea40 0301 	orr.w	r3, r0, r1
 8002658:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4bc5      	ldr	r3, [pc, #788]	; (8002974 <UART_SetConfig+0x384>)
 8002660:	429a      	cmp	r2, r3
 8002662:	d004      	beq.n	800266e <UART_SetConfig+0x7e>
 8002664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4bc3      	ldr	r3, [pc, #780]	; (8002978 <UART_SetConfig+0x388>)
 800266a:	429a      	cmp	r2, r3
 800266c:	d103      	bne.n	8002676 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800266e:	f7ff fbab 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002672:	6778      	str	r0, [r7, #116]	; 0x74
 8002674:	e002      	b.n	800267c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002676:	f7ff fb93 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 800267a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002684:	f040 80b6 	bne.w	80027f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268a:	461c      	mov	r4, r3
 800268c:	f04f 0500 	mov.w	r5, #0
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	1891      	adds	r1, r2, r2
 8002696:	6439      	str	r1, [r7, #64]	; 0x40
 8002698:	415b      	adcs	r3, r3
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
 800269c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026a0:	1912      	adds	r2, r2, r4
 80026a2:	eb45 0303 	adc.w	r3, r5, r3
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	00d9      	lsls	r1, r3, #3
 80026b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b4:	00d0      	lsls	r0, r2, #3
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	1911      	adds	r1, r2, r4
 80026bc:	6639      	str	r1, [r7, #96]	; 0x60
 80026be:	416b      	adcs	r3, r5
 80026c0:	667b      	str	r3, [r7, #100]	; 0x64
 80026c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	1891      	adds	r1, r2, r2
 80026ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80026d0:	415b      	adcs	r3, r3
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80026dc:	f7fd fdd8 	bl	8000290 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4ba5      	ldr	r3, [pc, #660]	; (800297c <UART_SetConfig+0x38c>)
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	011e      	lsls	r6, r3, #4
 80026ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f0:	461c      	mov	r4, r3
 80026f2:	f04f 0500 	mov.w	r5, #0
 80026f6:	4622      	mov	r2, r4
 80026f8:	462b      	mov	r3, r5
 80026fa:	1891      	adds	r1, r2, r2
 80026fc:	6339      	str	r1, [r7, #48]	; 0x30
 80026fe:	415b      	adcs	r3, r3
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
 8002702:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002706:	1912      	adds	r2, r2, r4
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	f04f 0000 	mov.w	r0, #0
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	00d9      	lsls	r1, r3, #3
 8002716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800271a:	00d0      	lsls	r0, r2, #3
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	1911      	adds	r1, r2, r4
 8002722:	65b9      	str	r1, [r7, #88]	; 0x58
 8002724:	416b      	adcs	r3, r5
 8002726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	461a      	mov	r2, r3
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	1891      	adds	r1, r2, r2
 8002734:	62b9      	str	r1, [r7, #40]	; 0x28
 8002736:	415b      	adcs	r3, r3
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002742:	f7fd fda5 	bl	8000290 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4b8c      	ldr	r3, [pc, #560]	; (800297c <UART_SetConfig+0x38c>)
 800274c:	fba3 1302 	umull	r1, r3, r3, r2
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	2164      	movs	r1, #100	; 0x64
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3332      	adds	r3, #50	; 0x32
 800275e:	4a87      	ldr	r2, [pc, #540]	; (800297c <UART_SetConfig+0x38c>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800276c:	441e      	add	r6, r3
 800276e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002770:	4618      	mov	r0, r3
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	1894      	adds	r4, r2, r2
 800277c:	623c      	str	r4, [r7, #32]
 800277e:	415b      	adcs	r3, r3
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002786:	1812      	adds	r2, r2, r0
 8002788:	eb41 0303 	adc.w	r3, r1, r3
 800278c:	f04f 0400 	mov.w	r4, #0
 8002790:	f04f 0500 	mov.w	r5, #0
 8002794:	00dd      	lsls	r5, r3, #3
 8002796:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800279a:	00d4      	lsls	r4, r2, #3
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	1814      	adds	r4, r2, r0
 80027a2:	653c      	str	r4, [r7, #80]	; 0x50
 80027a4:	414b      	adcs	r3, r1
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	1891      	adds	r1, r2, r2
 80027b4:	61b9      	str	r1, [r7, #24]
 80027b6:	415b      	adcs	r3, r3
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027c2:	f7fd fd65 	bl	8000290 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4b6c      	ldr	r3, [pc, #432]	; (800297c <UART_SetConfig+0x38c>)
 80027cc:	fba3 1302 	umull	r1, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	2164      	movs	r1, #100	; 0x64
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	3332      	adds	r3, #50	; 0x32
 80027de:	4a67      	ldr	r2, [pc, #412]	; (800297c <UART_SetConfig+0x38c>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	f003 0207 	and.w	r2, r3, #7
 80027ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4432      	add	r2, r6
 80027f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027f2:	e0b9      	b.n	8002968 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f6:	461c      	mov	r4, r3
 80027f8:	f04f 0500 	mov.w	r5, #0
 80027fc:	4622      	mov	r2, r4
 80027fe:	462b      	mov	r3, r5
 8002800:	1891      	adds	r1, r2, r2
 8002802:	6139      	str	r1, [r7, #16]
 8002804:	415b      	adcs	r3, r3
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800280c:	1912      	adds	r2, r2, r4
 800280e:	eb45 0303 	adc.w	r3, r5, r3
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	00d9      	lsls	r1, r3, #3
 800281c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002820:	00d0      	lsls	r0, r2, #3
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	eb12 0804 	adds.w	r8, r2, r4
 800282a:	eb43 0905 	adc.w	r9, r3, r5
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4618      	mov	r0, r3
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	008b      	lsls	r3, r1, #2
 8002842:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002846:	0082      	lsls	r2, r0, #2
 8002848:	4640      	mov	r0, r8
 800284a:	4649      	mov	r1, r9
 800284c:	f7fd fd20 	bl	8000290 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4b49      	ldr	r3, [pc, #292]	; (800297c <UART_SetConfig+0x38c>)
 8002856:	fba3 2302 	umull	r2, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	011e      	lsls	r6, r3, #4
 800285e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002860:	4618      	mov	r0, r3
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	1894      	adds	r4, r2, r2
 800286c:	60bc      	str	r4, [r7, #8]
 800286e:	415b      	adcs	r3, r3
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002876:	1812      	adds	r2, r2, r0
 8002878:	eb41 0303 	adc.w	r3, r1, r3
 800287c:	f04f 0400 	mov.w	r4, #0
 8002880:	f04f 0500 	mov.w	r5, #0
 8002884:	00dd      	lsls	r5, r3, #3
 8002886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800288a:	00d4      	lsls	r4, r2, #3
 800288c:	4622      	mov	r2, r4
 800288e:	462b      	mov	r3, r5
 8002890:	1814      	adds	r4, r2, r0
 8002892:	64bc      	str	r4, [r7, #72]	; 0x48
 8002894:	414b      	adcs	r3, r1
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	008b      	lsls	r3, r1, #2
 80028ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028b0:	0082      	lsls	r2, r0, #2
 80028b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028b6:	f7fd fceb 	bl	8000290 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <UART_SetConfig+0x38c>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a2a      	ldr	r2, [pc, #168]	; (800297c <UART_SetConfig+0x38c>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028de:	441e      	add	r6, r3
 80028e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e2:	4618      	mov	r0, r3
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	1894      	adds	r4, r2, r2
 80028ee:	603c      	str	r4, [r7, #0]
 80028f0:	415b      	adcs	r3, r3
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f8:	1812      	adds	r2, r2, r0
 80028fa:	eb41 0303 	adc.w	r3, r1, r3
 80028fe:	f04f 0400 	mov.w	r4, #0
 8002902:	f04f 0500 	mov.w	r5, #0
 8002906:	00dd      	lsls	r5, r3, #3
 8002908:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800290c:	00d4      	lsls	r4, r2, #3
 800290e:	4622      	mov	r2, r4
 8002910:	462b      	mov	r3, r5
 8002912:	eb12 0a00 	adds.w	sl, r2, r0
 8002916:	eb43 0b01 	adc.w	fp, r3, r1
 800291a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	008b      	lsls	r3, r1, #2
 800292e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002932:	0082      	lsls	r2, r0, #2
 8002934:	4650      	mov	r0, sl
 8002936:	4659      	mov	r1, fp
 8002938:	f7fd fcaa 	bl	8000290 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <UART_SetConfig+0x38c>)
 8002942:	fba3 1302 	umull	r1, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2164      	movs	r1, #100	; 0x64
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a09      	ldr	r2, [pc, #36]	; (800297c <UART_SetConfig+0x38c>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4432      	add	r2, r6
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	377c      	adds	r7, #124	; 0x7c
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002972:	bf00      	nop
 8002974:	40011000 	.word	0x40011000
 8002978:	40011400 	.word	0x40011400
 800297c:	51eb851f 	.word	0x51eb851f

08002980 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002986:	201c      	movs	r0, #28
 8002988:	f001 fc3e 	bl	8004208 <pvPortMalloc>
 800298c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f981 	bl	8002ca6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80029a4:	687b      	ldr	r3, [r7, #4]
	}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b090      	sub	sp, #64	; 0x40
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <xEventGroupWaitBits+0x56>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61fb      	str	r3, [r7, #28]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xEventGroupWaitBits+0x72>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61bb      	str	r3, [r7, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a22:	f001 f889 	bl	8003b38 <xTaskGetSchedulerState>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <xEventGroupWaitBits+0x82>
 8002a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xEventGroupWaitBits+0x86>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xEventGroupWaitBits+0x88>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	617b      	str	r3, [r7, #20]
}
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8002a52:	f000 fbfd 	bl	8003250 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a62:	f000 f8fe 	bl	8002c62 <prvTestWaitCondition>
 8002a66:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00e      	beq.n	8002a8c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d028      	beq.n	8002ace <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e020      	b.n	8002ace <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9a:	e018      	b.n	8002ace <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	1d18      	adds	r0, r3, #4
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f000 fe0f 	bl	80036e8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002ace:	f000 fbcd 	bl	800326c <xTaskResumeAll>
 8002ad2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d031      	beq.n	8002b3e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <xEventGroupWaitBits+0x198>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002af0:	f001 f8fc 	bl	8003cec <uxTaskResetEventItemValue>
 8002af4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11a      	bne.n	8002b36 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8002b00:	f001 faa0 	bl	8004044 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b10:	f000 f8a7 	bl	8002c62 <prvTestWaitCondition>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	401a      	ands	r2, r3
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002b32:	f001 fab7 	bl	80040a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3740      	adds	r7, #64	; 0x40
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002b56:	2300      	movs	r3, #0
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xEventGroupSetBits+0x32>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	613b      	str	r3, [r7, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <xEventGroupSetBits+0x52>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	60fb      	str	r3, [r7, #12]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002baa:	f000 fb51 	bl	8003250 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002bc0:	e03c      	b.n	8002c3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002be0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d108      	bne.n	8002bfe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00b      	beq.n	8002c10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfc:	e008      	b.n	8002c10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d101      	bne.n	8002c10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c30:	4619      	mov	r1, r3
 8002c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c34:	f000 fd94 	bl	8003760 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1be      	bne.n	8002bc2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002c52:	f000 fb0b 	bl	800326c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	681b      	ldr	r3, [r3, #0]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3738      	adds	r7, #56	; 0x38
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e007      	b.n	8002c98 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d101      	bne.n	8002c98 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002c98:	697b      	ldr	r3, [r7, #20]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f103 0208 	add.w	r2, r3, #8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f103 0208 	add.w	r2, r3, #8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f103 0208 	add.w	r2, r3, #8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d103      	bne.n	8002d68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e00c      	b.n	8002d82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e002      	b.n	8002d76 <vListInsert+0x2e>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d2f6      	bcs.n	8002d70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6892      	ldr	r2, [r2, #8]
 8002dd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6852      	ldr	r2, [r2, #4]
 8002dda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d103      	bne.n	8002dee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b08c      	sub	sp, #48	; 0x30
 8002e12:	af04      	add	r7, sp, #16
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 f9f0 	bl	8004208 <pvPortMalloc>
 8002e28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e30:	205c      	movs	r0, #92	; 0x5c
 8002e32:	f001 f9e9 	bl	8004208 <pvPortMalloc>
 8002e36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
 8002e44:	e005      	b.n	8002e52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f001 faaa 	bl	80043a0 <vPortFree>
 8002e4c:	e001      	b.n	8002e52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9303      	str	r3, [sp, #12]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	9302      	str	r3, [sp, #8]
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f80e 	bl	8002e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e74:	69f8      	ldr	r0, [r7, #28]
 8002e76:	f000 f89b 	bl	8002fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e002      	b.n	8002e86 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e86:	69bb      	ldr	r3, [r7, #24]
	}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	21a5      	movs	r1, #165	; 0xa5
 8002eaa:	f001 fbdb 	bl	8004664 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f023 0307 	bic.w	r3, r3, #7
 8002ec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	617b      	str	r3, [r7, #20]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01f      	beq.n	8002f2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e012      	b.n	8002f1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	7819      	ldrb	r1, [r3, #0]
 8002efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	3334      	adds	r3, #52	; 0x34
 8002f04:	460a      	mov	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3301      	adds	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d9e9      	bls.n	8002ef4 <prvInitialiseNewTask+0x64>
 8002f20:	e000      	b.n	8002f24 <prvInitialiseNewTask+0x94>
			{
				break;
 8002f22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f2c:	e003      	b.n	8002f36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d901      	bls.n	8002f40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f3c:	2306      	movs	r3, #6
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	2200      	movs	r2, #0
 8002f50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	3304      	adds	r3, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fec5 	bl	8002ce6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	3318      	adds	r3, #24
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fec0 	bl	8002ce6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	f1c3 0207 	rsb	r2, r3, #7
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	69b8      	ldr	r0, [r7, #24]
 8002f90:	f000 ff2a 	bl	8003de8 <pxPortInitialiseStack>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fa6:	bf00      	nop
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fb8:	f001 f844 	bl	8004044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <prvAddNewTaskToReadyList+0xc0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <prvAddNewTaskToReadyList+0xc0>)
 8002fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <prvAddNewTaskToReadyList+0xc4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fce:	4a29      	ldr	r2, [pc, #164]	; (8003074 <prvAddNewTaskToReadyList+0xc4>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <prvAddNewTaskToReadyList+0xc0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d110      	bne.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fdc:	f000 fc3a 	bl	8003854 <prvInitialiseTaskLists>
 8002fe0:	e00d      	b.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fe2:	4b25      	ldr	r3, [pc, #148]	; (8003078 <prvAddNewTaskToReadyList+0xc8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <prvAddNewTaskToReadyList+0xc4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d802      	bhi.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <prvAddNewTaskToReadyList+0xc4>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <prvAddNewTaskToReadyList+0xcc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <prvAddNewTaskToReadyList+0xcc>)
 8003006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003008:	4b1c      	ldr	r3, [pc, #112]	; (800307c <prvAddNewTaskToReadyList+0xcc>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <prvAddNewTaskToReadyList+0xd0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	4a18      	ldr	r2, [pc, #96]	; (8003080 <prvAddNewTaskToReadyList+0xd0>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <prvAddNewTaskToReadyList+0xd4>)
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f7ff fe61 	bl	8002d00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800303e:	f001 f831 	bl	80040a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <prvAddNewTaskToReadyList+0xc8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00e      	beq.n	8003068 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <prvAddNewTaskToReadyList+0xc4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <prvAddNewTaskToReadyList+0xd8>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000198 	.word	0x20000198
 8003074:	20000098 	.word	0x20000098
 8003078:	200001a4 	.word	0x200001a4
 800307c:	200001b4 	.word	0x200001b4
 8003080:	200001a0 	.word	0x200001a0
 8003084:	2000009c 	.word	0x2000009c
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d017      	beq.n	80030ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <vTaskDelay+0x60>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <vTaskDelay+0x30>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60bb      	str	r3, [r7, #8]
}
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030bc:	f000 f8c8 	bl	8003250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030c0:	2100      	movs	r1, #0
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fe2a 	bl	8003d1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030c8:	f000 f8d0 	bl	800326c <xTaskResumeAll>
 80030cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <vTaskDelay+0x64>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200001c0 	.word	0x200001c0
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <eTaskGetState+0x28>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	60bb      	str	r3, [r7, #8]
}
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800311c:	4b23      	ldr	r3, [pc, #140]	; (80031ac <eTaskGetState+0xb8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	429a      	cmp	r2, r3
 8003124:	d102      	bne.n	800312c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003126:	2300      	movs	r3, #0
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e03a      	b.n	80031a2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800312c:	f000 ff8a 	bl	8004044 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <eTaskGetState+0xbc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <eTaskGetState+0xc0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003142:	f000 ffaf 	bl	80040a4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	429a      	cmp	r2, r3
 800314c:	d003      	beq.n	8003156 <eTaskGetState+0x62>
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	429a      	cmp	r2, r3
 8003154:	d102      	bne.n	800315c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003156:	2302      	movs	r3, #2
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e022      	b.n	80031a2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <eTaskGetState+0xc4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d112      	bne.n	800318a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8003178:	2302      	movs	r3, #2
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e011      	b.n	80031a2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800317e:	2303      	movs	r3, #3
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e00e      	b.n	80031a2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003184:	2302      	movs	r3, #2
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e00b      	b.n	80031a2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <eTaskGetState+0xc8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d002      	beq.n	8003198 <eTaskGetState+0xa4>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003198:	2304      	movs	r3, #4
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e001      	b.n	80031a2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800319e:	2301      	movs	r3, #1
 80031a0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000098 	.word	0x20000098
 80031b0:	20000150 	.word	0x20000150
 80031b4:	20000154 	.word	0x20000154
 80031b8:	20000184 	.word	0x20000184
 80031bc:	2000016c 	.word	0x2000016c

080031c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <vTaskStartScheduler+0x78>)
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2300      	movs	r3, #0
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	491a      	ldr	r1, [pc, #104]	; (800323c <vTaskStartScheduler+0x7c>)
 80031d4:	481a      	ldr	r0, [pc, #104]	; (8003240 <vTaskStartScheduler+0x80>)
 80031d6:	f7ff fe1a 	bl	8002e0e <xTaskCreate>
 80031da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d116      	bne.n	8003210 <vTaskStartScheduler+0x50>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	60bb      	str	r3, [r7, #8]
}
 80031f4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <vTaskStartScheduler+0x84>)
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <vTaskStartScheduler+0x88>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <vTaskStartScheduler+0x8c>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800320a:	f000 fe79 	bl	8003f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800320e:	e00e      	b.n	800322e <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d10a      	bne.n	800322e <vTaskStartScheduler+0x6e>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	607b      	str	r3, [r7, #4]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <vTaskStartScheduler+0x6c>
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200001bc 	.word	0x200001bc
 800323c:	0800525c 	.word	0x0800525c
 8003240:	08003825 	.word	0x08003825
 8003244:	200001b8 	.word	0x200001b8
 8003248:	200001a4 	.word	0x200001a4
 800324c:	2000019c 	.word	0x2000019c

08003250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <vTaskSuspendAll+0x18>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	4a03      	ldr	r2, [pc, #12]	; (8003268 <vTaskSuspendAll+0x18>)
 800325c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	200001c0 	.word	0x200001c0

0800326c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <xTaskResumeAll+0x114>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <xTaskResumeAll+0x2c>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	603b      	str	r3, [r7, #0]
}
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003298:	f000 fed4 	bl	8004044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800329c:	4b38      	ldr	r3, [pc, #224]	; (8003380 <xTaskResumeAll+0x114>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	4a37      	ldr	r2, [pc, #220]	; (8003380 <xTaskResumeAll+0x114>)
 80032a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <xTaskResumeAll+0x114>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d161      	bne.n	8003372 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ae:	4b35      	ldr	r3, [pc, #212]	; (8003384 <xTaskResumeAll+0x118>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d05d      	beq.n	8003372 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032b6:	e02e      	b.n	8003316 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b8:	4b33      	ldr	r3, [pc, #204]	; (8003388 <xTaskResumeAll+0x11c>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3318      	adds	r3, #24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd78 	bl	8002dba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3304      	adds	r3, #4
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fd73 	bl	8002dba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	4b2b      	ldr	r3, [pc, #172]	; (800338c <xTaskResumeAll+0x120>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	4a2a      	ldr	r2, [pc, #168]	; (800338c <xTaskResumeAll+0x120>)
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4a27      	ldr	r2, [pc, #156]	; (8003390 <xTaskResumeAll+0x124>)
 80032f4:	441a      	add	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f7ff fcff 	bl	8002d00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <xTaskResumeAll+0x128>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <xTaskResumeAll+0x12c>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <xTaskResumeAll+0x11c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1cc      	bne.n	80032b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003324:	f000 fbe8 	bl	8003af8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <xTaskResumeAll+0x130>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003334:	f000 f8c4 	bl	80034c0 <xTaskIncrementTick>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <xTaskResumeAll+0x12c>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f1      	bne.n	8003334 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <xTaskResumeAll+0x130>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <xTaskResumeAll+0x12c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003362:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <xTaskResumeAll+0x134>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003372:	f000 fe97 	bl	80040a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003376:	68bb      	ldr	r3, [r7, #8]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200001c0 	.word	0x200001c0
 8003384:	20000198 	.word	0x20000198
 8003388:	20000158 	.word	0x20000158
 800338c:	200001a0 	.word	0x200001a0
 8003390:	2000009c 	.word	0x2000009c
 8003394:	20000098 	.word	0x20000098
 8003398:	200001ac 	.word	0x200001ac
 800339c:	200001a8 	.word	0x200001a8
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	2307      	movs	r3, #7
 80033b6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80033b8:	f7ff ff4a 	bl	8003250 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80033bc:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <uxTaskGetSystemState+0x104>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d368      	bcc.n	8003498 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1898      	adds	r0, r3, r2
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4a31      	ldr	r2, [pc, #196]	; (80034ac <uxTaskGetSystemState+0x108>)
 80033e8:	4413      	add	r3, r2
 80033ea:	2201      	movs	r2, #1
 80033ec:	4619      	mov	r1, r3
 80033ee:	f000 fb05 	bl	80039fc <prvListTasksWithinSingleList>
 80033f2:	4602      	mov	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e2      	bne.n	80033c6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <uxTaskGetSystemState+0x10c>)
 8003412:	6811      	ldr	r1, [r2, #0]
 8003414:	2202      	movs	r2, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 faf0 	bl	80039fc <prvListTasksWithinSingleList>
 800341c:	4602      	mov	r2, r0
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4413      	add	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <uxTaskGetSystemState+0x110>)
 8003436:	6811      	ldr	r1, [r2, #0]
 8003438:	2202      	movs	r2, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fade 	bl	80039fc <prvListTasksWithinSingleList>
 8003440:	4602      	mov	r2, r0
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	4413      	add	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	2204      	movs	r2, #4
 800345a:	4917      	ldr	r1, [pc, #92]	; (80034b8 <uxTaskGetSystemState+0x114>)
 800345c:	4618      	mov	r0, r3
 800345e:	f000 facd 	bl	80039fc <prvListTasksWithinSingleList>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4413      	add	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	2203      	movs	r2, #3
 800347c:	490f      	ldr	r1, [pc, #60]	; (80034bc <uxTaskGetSystemState+0x118>)
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fabc 	bl	80039fc <prvListTasksWithinSingleList>
 8003484:	4602      	mov	r2, r0
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4413      	add	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003498:	f7ff fee8 	bl	800326c <xTaskResumeAll>

		return uxTask;
 800349c:	697b      	ldr	r3, [r7, #20]
	}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000198 	.word	0x20000198
 80034ac:	2000009c 	.word	0x2000009c
 80034b0:	20000150 	.word	0x20000150
 80034b4:	20000154 	.word	0x20000154
 80034b8:	2000016c 	.word	0x2000016c
 80034bc:	20000184 	.word	0x20000184

080034c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <xTaskIncrementTick+0x144>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 808e 	bne.w	80035f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034d4:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <xTaskIncrementTick+0x148>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034dc:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <xTaskIncrementTick+0x148>)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d120      	bne.n	800352a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <xTaskIncrementTick+0x14c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <xTaskIncrementTick+0x48>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	603b      	str	r3, [r7, #0]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <xTaskIncrementTick+0x46>
 8003508:	4b40      	ldr	r3, [pc, #256]	; (800360c <xTaskIncrementTick+0x14c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b40      	ldr	r3, [pc, #256]	; (8003610 <xTaskIncrementTick+0x150>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a3e      	ldr	r2, [pc, #248]	; (800360c <xTaskIncrementTick+0x14c>)
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4a3e      	ldr	r2, [pc, #248]	; (8003610 <xTaskIncrementTick+0x150>)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <xTaskIncrementTick+0x154>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <xTaskIncrementTick+0x154>)
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	f000 fae7 	bl	8003af8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <xTaskIncrementTick+0x158>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	429a      	cmp	r2, r3
 8003532:	d348      	bcc.n	80035c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <xTaskIncrementTick+0x14c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <xTaskIncrementTick+0x158>)
 8003540:	f04f 32ff 	mov.w	r2, #4294967295
 8003544:	601a      	str	r2, [r3, #0]
					break;
 8003546:	e03e      	b.n	80035c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <xTaskIncrementTick+0x14c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d203      	bcs.n	8003568 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003560:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <xTaskIncrementTick+0x158>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003566:	e02e      	b.n	80035c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	3304      	adds	r3, #4
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fc24 	bl	8002dba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3318      	adds	r3, #24
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fc1b 	bl	8002dba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <xTaskIncrementTick+0x15c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <xTaskIncrementTick+0x15c>)
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <xTaskIncrementTick+0x160>)
 80035a4:	441a      	add	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7ff fba7 	bl	8002d00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <xTaskIncrementTick+0x164>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3b9      	bcc.n	8003534 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c4:	e7b6      	b.n	8003534 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <xTaskIncrementTick+0x164>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	4914      	ldr	r1, [pc, #80]	; (8003620 <xTaskIncrementTick+0x160>)
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d901      	bls.n	80035e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80035de:	2301      	movs	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <xTaskIncrementTick+0x168>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80035ea:	2301      	movs	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e004      	b.n	80035fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <xTaskIncrementTick+0x16c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a0d      	ldr	r2, [pc, #52]	; (800362c <xTaskIncrementTick+0x16c>)
 80035f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80035fa:	697b      	ldr	r3, [r7, #20]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200001c0 	.word	0x200001c0
 8003608:	2000019c 	.word	0x2000019c
 800360c:	20000150 	.word	0x20000150
 8003610:	20000154 	.word	0x20000154
 8003614:	200001b0 	.word	0x200001b0
 8003618:	200001b8 	.word	0x200001b8
 800361c:	200001a0 	.word	0x200001a0
 8003620:	2000009c 	.word	0x2000009c
 8003624:	20000098 	.word	0x20000098
 8003628:	200001ac 	.word	0x200001ac
 800362c:	200001a8 	.word	0x200001a8

08003630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003636:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <vTaskSwitchContext+0xa4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <vTaskSwitchContext+0xa8>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003644:	e03f      	b.n	80036c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <vTaskSwitchContext+0xa8>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <vTaskSwitchContext+0xac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f1c3 031f 	rsb	r3, r3, #31
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	491f      	ldr	r1, [pc, #124]	; (80036e0 <vTaskSwitchContext+0xb0>)
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	607b      	str	r3, [r7, #4]
}
 8003688:	bf00      	nop
 800368a:	e7fe      	b.n	800368a <vTaskSwitchContext+0x5a>
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <vTaskSwitchContext+0xb0>)
 8003698:	4413      	add	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3308      	adds	r3, #8
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d104      	bne.n	80036bc <vTaskSwitchContext+0x8c>
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <vTaskSwitchContext+0xb4>)
 80036c4:	6013      	str	r3, [r2, #0]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	200001c0 	.word	0x200001c0
 80036d8:	200001ac 	.word	0x200001ac
 80036dc:	200001a0 	.word	0x200001a0
 80036e0:	2000009c 	.word	0x2000009c
 80036e4:	20000098 	.word	0x20000098

080036e8 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	617b      	str	r3, [r7, #20]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	613b      	str	r3, [r7, #16]
}
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003738:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <vTaskPlaceOnUnorderedEventList+0x74>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3318      	adds	r3, #24
 8003740:	4619      	mov	r1, r3
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fadc 	bl	8002d00 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003748:	2101      	movs	r1, #1
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fae6 	bl	8003d1c <prvAddCurrentTaskToDelayedList>
}
 8003750:	bf00      	nop
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200001c0 	.word	0x200001c0
 800375c:	20000098 	.word	0x20000098

08003760 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800376a:	4b29      	ldr	r3, [pc, #164]	; (8003810 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	613b      	str	r3, [r7, #16]
}
 8003784:	bf00      	nop
 8003786:	e7fe      	b.n	8003786 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	60fb      	str	r3, [r7, #12]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fb00 	bl	8002dba <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3304      	adds	r3, #4
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fafb 	bl	8002dba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2201      	movs	r2, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80037e4:	441a      	add	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7ff fa87 	bl	8002d00 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d902      	bls.n	8003806 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
	}
}
 8003806:	bf00      	nop
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200001c0 	.word	0x200001c0
 8003814:	200001a0 	.word	0x200001a0
 8003818:	2000009c 	.word	0x2000009c
 800381c:	20000098 	.word	0x20000098
 8003820:	200001ac 	.word	0x200001ac

08003824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800382c:	f000 f852 	bl	80038d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <prvIdleTask+0x28>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d9f9      	bls.n	800382c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <prvIdleTask+0x2c>)
 800383a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003848:	e7f0      	b.n	800382c <prvIdleTask+0x8>
 800384a:	bf00      	nop
 800384c:	2000009c 	.word	0x2000009c
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	e00c      	b.n	800387a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <prvInitialiseTaskLists+0x60>)
 800386c:	4413      	add	r3, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fa19 	bl	8002ca6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d9ef      	bls.n	8003860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <prvInitialiseTaskLists+0x64>)
 8003882:	f7ff fa10 	bl	8002ca6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003886:	480d      	ldr	r0, [pc, #52]	; (80038bc <prvInitialiseTaskLists+0x68>)
 8003888:	f7ff fa0d 	bl	8002ca6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <prvInitialiseTaskLists+0x6c>)
 800388e:	f7ff fa0a 	bl	8002ca6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003892:	480c      	ldr	r0, [pc, #48]	; (80038c4 <prvInitialiseTaskLists+0x70>)
 8003894:	f7ff fa07 	bl	8002ca6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003898:	480b      	ldr	r0, [pc, #44]	; (80038c8 <prvInitialiseTaskLists+0x74>)
 800389a:	f7ff fa04 	bl	8002ca6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <prvInitialiseTaskLists+0x78>)
 80038a0:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <prvInitialiseTaskLists+0x64>)
 80038a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <prvInitialiseTaskLists+0x7c>)
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <prvInitialiseTaskLists+0x68>)
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000009c 	.word	0x2000009c
 80038b8:	20000128 	.word	0x20000128
 80038bc:	2000013c 	.word	0x2000013c
 80038c0:	20000158 	.word	0x20000158
 80038c4:	2000016c 	.word	0x2000016c
 80038c8:	20000184 	.word	0x20000184
 80038cc:	20000150 	.word	0x20000150
 80038d0:	20000154 	.word	0x20000154

080038d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038da:	e019      	b.n	8003910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038dc:	f000 fbb2 	bl	8004044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <prvCheckTasksWaitingTermination+0x50>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fa64 	bl	8002dba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <prvCheckTasksWaitingTermination+0x54>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <prvCheckTasksWaitingTermination+0x54>)
 80038fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <prvCheckTasksWaitingTermination+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <prvCheckTasksWaitingTermination+0x58>)
 8003904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003906:	f000 fbcd 	bl	80040a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8e4 	bl	8003ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <prvCheckTasksWaitingTermination+0x58>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e1      	bne.n	80038dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	2000016c 	.word	0x2000016c
 8003928:	20000198 	.word	0x20000198
 800392c:	20000180 	.word	0x20000180

08003930 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <vTaskGetInfo+0x1a>
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <vTaskGetInfo+0xc8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	e000      	b.n	800394c <vTaskGetInfo+0x1c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d01a      	beq.n	80039c0 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <vTaskGetInfo+0xc8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d103      	bne.n	800399c <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	731a      	strb	r2, [r3, #12]
 800399a:	e018      	b.n	80039ce <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d112      	bne.n	80039ce <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 80039a8:	f7ff fc52 	bl	8003250 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2202      	movs	r2, #2
 80039b8:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80039ba:	f7ff fc57 	bl	800326c <xTaskResumeAll>
 80039be:	e006      	b.n	80039ce <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7ff fb97 	bl	80030f4 <eTaskGetState>
 80039c6:	4603      	mov	r3, r0
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f861 	bl	8003aa0 <prvTaskCheckFreeStackSpace>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80039e6:	e002      	b.n	80039ee <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	841a      	strh	r2, [r3, #32]
	}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000098 	.word	0x20000098

080039fc <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03f      	beq.n	8003a96 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d104      	bne.n	8003a3a <prvListTasksWithinSingleList+0x3e>
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	3308      	adds	r3, #8
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d104      	bne.n	8003a66 <prvListTasksWithinSingleList+0x6a>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1899      	adds	r1, r3, r2
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	2201      	movs	r2, #1
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	f7ff ff54 	bl	8003930 <vTaskGetInfo>
				uxTask++;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d1d5      	bne.n	8003a42 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003aac:	e005      	b.n	8003aba <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2ba5      	cmp	r3, #165	; 0xa5
 8003ac0:	d0f5      	beq.n	8003aae <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	b29b      	uxth	r3, r3
	}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fc5b 	bl	80043a0 <vPortFree>
			vPortFree( pxTCB );
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fc58 	bl	80043a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <prvResetNextTaskUnblockTime+0x38>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvResetNextTaskUnblockTime+0x3c>)
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b10:	e008      	b.n	8003b24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <prvResetNextTaskUnblockTime+0x38>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <prvResetNextTaskUnblockTime+0x3c>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000150 	.word	0x20000150
 8003b34:	200001b8 	.word	0x200001b8

08003b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <xTaskGetSchedulerState+0x34>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b46:	2301      	movs	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e008      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <xTaskGetSchedulerState+0x38>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b54:	2302      	movs	r3, #2
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	e001      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b5e:	687b      	ldr	r3, [r7, #4]
	}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	200001a4 	.word	0x200001a4
 8003b70:	200001c0 	.word	0x200001c0

08003b74 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8003b7e:	6839      	ldr	r1, [r7, #0]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fd97 	bl	80046b4 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fb2a 	bl	80001e0 <strlen>
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	e007      	b.n	8003ba0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	2220      	movs	r2, #32
 8003b98:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b0e      	cmp	r3, #14
 8003ba4:	d9f4      	bls.n	8003b90 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
	}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8003bce:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <vTaskList+0x124>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <vTaskList+0x124>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fb11 	bl	8004208 <pvPortMalloc>
 8003be6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d076      	beq.n	8003cdc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8003bee:	2200      	movs	r2, #0
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	68b8      	ldr	r0, [r7, #8]
 8003bf4:	f7ff fbd6 	bl	80033a4 <uxTaskGetSystemState>
 8003bf8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e066      	b.n	8003cce <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4413      	add	r3, r2
 8003c10:	7b1b      	ldrb	r3, [r3, #12]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d81b      	bhi.n	8003c4e <vTaskList+0x8e>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <vTaskList+0x5c>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c31 	.word	0x08003c31
 8003c20:	08003c37 	.word	0x08003c37
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c43 	.word	0x08003c43
 8003c2c:	08003c49 	.word	0x08003c49
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8003c30:	2358      	movs	r3, #88	; 0x58
 8003c32:	74fb      	strb	r3, [r7, #19]
										break;
 8003c34:	e00e      	b.n	8003c54 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8003c36:	2352      	movs	r3, #82	; 0x52
 8003c38:	74fb      	strb	r3, [r7, #19]
										break;
 8003c3a:	e00b      	b.n	8003c54 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8003c3c:	2342      	movs	r3, #66	; 0x42
 8003c3e:	74fb      	strb	r3, [r7, #19]
										break;
 8003c40:	e008      	b.n	8003c54 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8003c42:	2353      	movs	r3, #83	; 0x53
 8003c44:	74fb      	strb	r3, [r7, #19]
										break;
 8003c46:	e005      	b.n	8003c54 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8003c48:	2344      	movs	r3, #68	; 0x44
 8003c4a:	74fb      	strb	r3, [r7, #19]
										break;
 8003c4c:	e002      	b.n	8003c54 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	74fb      	strb	r3, [r7, #19]
										break;
 8003c52:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4413      	add	r3, r2
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff83 	bl	8003b74 <prvWriteNameToBuffer>
 8003c6e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8003c70:	7cf9      	ldrb	r1, [r7, #19]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	6918      	ldr	r0, [r3, #16]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4413      	add	r3, r2
 8003c94:	8c1b      	ldrh	r3, [r3, #32]
 8003c96:	461c      	mov	r4, r3
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	9400      	str	r4, [sp, #0]
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <vTaskList+0x128>)
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fcdd 	bl	8004674 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc fa90 	bl	80001e0 <strlen>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d394      	bcc.n	8003c00 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8003cd6:	68b8      	ldr	r0, [r7, #8]
 8003cd8:	f000 fb62 	bl	80043a0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}
 8003ce4:	20000198 	.word	0x20000198
 8003ce8:	08005264 	.word	0x08005264

08003cec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <uxTaskResetEventItemValue+0x2c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <uxTaskResetEventItemValue+0x2c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <uxTaskResetEventItemValue+0x2c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1c2 0207 	rsb	r2, r2, #7
 8003d08:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8003d0a:	687b      	ldr	r3, [r7, #4]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	20000098 	.word	0x20000098

08003d1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d26:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f841 	bl	8002dba <uxListRemove>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	2201      	movs	r2, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4013      	ands	r3, r2
 8003d52:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d10a      	bne.n	8003d74 <prvAddCurrentTaskToDelayedList+0x58>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	481a      	ldr	r0, [pc, #104]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d6e:	f7fe ffc7 	bl	8002d00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d72:	e026      	b.n	8003dc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d209      	bcs.n	8003da0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7fe ffd5 	bl	8002d48 <vListInsert>
}
 8003d9e:	e010      	b.n	8003dc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7fe ffcb 	bl	8002d48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d202      	bcs.n	8003dc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6013      	str	r3, [r2, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000019c 	.word	0x2000019c
 8003dd0:	20000098 	.word	0x20000098
 8003dd4:	200001a0 	.word	0x200001a0
 8003dd8:	20000184 	.word	0x20000184
 8003ddc:	20000154 	.word	0x20000154
 8003de0:	20000150 	.word	0x20000150
 8003de4:	200001b8 	.word	0x200001b8

08003de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3b04      	subs	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b04      	subs	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b04      	subs	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e18:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <pxPortInitialiseStack+0x64>)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3b14      	subs	r3, #20
 8003e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3b04      	subs	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f06f 0202 	mvn.w	r2, #2
 8003e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3b20      	subs	r3, #32
 8003e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	08003e51 	.word	0x08003e51

08003e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <prvTaskExitError+0x54>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d00a      	beq.n	8003e7a <prvTaskExitError+0x2a>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60fb      	str	r3, [r7, #12]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <prvTaskExitError+0x28>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	60bb      	str	r3, [r7, #8]
}
 8003e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e8e:	bf00      	nop
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0fc      	beq.n	8003e90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	2000000c 	.word	0x2000000c
	...

08003eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <pxCurrentTCBConst2>)
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	6808      	ldr	r0, [r1, #0]
 8003eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	f380 8809 	msr	PSP, r0
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f380 8811 	msr	BASEPRI, r0
 8003eca:	4770      	bx	lr
 8003ecc:	f3af 8000 	nop.w

08003ed0 <pxCurrentTCBConst2>:
 8003ed0:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop

08003ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ed8:	4808      	ldr	r0, [pc, #32]	; (8003efc <prvPortStartFirstTask+0x24>)
 8003eda:	6800      	ldr	r0, [r0, #0]
 8003edc:	6800      	ldr	r0, [r0, #0]
 8003ede:	f380 8808 	msr	MSP, r0
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8814 	msr	CONTROL, r0
 8003eea:	b662      	cpsie	i
 8003eec:	b661      	cpsie	f
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	df00      	svc	0
 8003ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003efa:	bf00      	nop
 8003efc:	e000ed08 	.word	0xe000ed08

08003f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f06:	4b46      	ldr	r3, [pc, #280]	; (8004020 <xPortStartScheduler+0x120>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a46      	ldr	r2, [pc, #280]	; (8004024 <xPortStartScheduler+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d10a      	bne.n	8003f26 <xPortStartScheduler+0x26>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	613b      	str	r3, [r7, #16]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f26:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <xPortStartScheduler+0x120>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3f      	ldr	r2, [pc, #252]	; (8004028 <xPortStartScheduler+0x128>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10a      	bne.n	8003f46 <xPortStartScheduler+0x46>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60fb      	str	r3, [r7, #12]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <xPortStartScheduler+0x12c>)
 8003f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	22ff      	movs	r2, #255	; 0xff
 8003f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b31      	ldr	r3, [pc, #196]	; (8004030 <xPortStartScheduler+0x130>)
 8003f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <xPortStartScheduler+0x134>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f74:	e009      	b.n	8003f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f76:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <xPortStartScheduler+0x134>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	4a2d      	ldr	r2, [pc, #180]	; (8004034 <xPortStartScheduler+0x134>)
 8003f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d0ef      	beq.n	8003f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <xPortStartScheduler+0x134>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00a      	beq.n	8003fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60bb      	str	r3, [r7, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <xPortStartScheduler+0x134>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <xPortStartScheduler+0x134>)
 8003fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fc2:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <xPortStartScheduler+0x134>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <xPortStartScheduler+0x134>)
 8003fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fd6:	4b18      	ldr	r3, [pc, #96]	; (8004038 <xPortStartScheduler+0x138>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a17      	ldr	r2, [pc, #92]	; (8004038 <xPortStartScheduler+0x138>)
 8003fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <xPortStartScheduler+0x138>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a14      	ldr	r2, [pc, #80]	; (8004038 <xPortStartScheduler+0x138>)
 8003fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fee:	f000 f8dd 	bl	80041ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <xPortStartScheduler+0x13c>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ff8:	f000 f8fc 	bl	80041f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <xPortStartScheduler+0x140>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <xPortStartScheduler+0x140>)
 8004002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004008:	f7ff ff66 	bl	8003ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800400c:	f7ff fb10 	bl	8003630 <vTaskSwitchContext>
	prvTaskExitError();
 8004010:	f7ff ff1e 	bl	8003e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000ed00 	.word	0xe000ed00
 8004024:	410fc271 	.word	0x410fc271
 8004028:	410fc270 	.word	0x410fc270
 800402c:	e000e400 	.word	0xe000e400
 8004030:	200001c4 	.word	0x200001c4
 8004034:	200001c8 	.word	0x200001c8
 8004038:	e000ed20 	.word	0xe000ed20
 800403c:	2000000c 	.word	0x2000000c
 8004040:	e000ef34 	.word	0xe000ef34

08004044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	607b      	str	r3, [r7, #4]
}
 800405c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <vPortEnterCritical+0x58>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <vPortEnterCritical+0x58>)
 8004066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <vPortEnterCritical+0x58>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10f      	bne.n	8004090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <vPortEnterCritical+0x5c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <vPortEnterCritical+0x4c>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	603b      	str	r3, [r7, #0]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vPortEnterCritical+0x4a>
	}
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	2000000c 	.word	0x2000000c
 80040a0:	e000ed04 	.word	0xe000ed04

080040a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <vPortExitCritical+0x50>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <vPortExitCritical+0x24>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	607b      	str	r3, [r7, #4]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <vPortExitCritical+0x50>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <vPortExitCritical+0x50>)
 80040d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040d2:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <vPortExitCritical+0x50>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <vPortExitCritical+0x42>
 80040da:	2300      	movs	r3, #0
 80040dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000000c 	.word	0x2000000c
	...

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f01e 0f10 	tst.w	lr, #16
 8004110:	bf08      	it	eq
 8004112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004124:	f380 8811 	msr	BASEPRI, r0
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f7ff fa7e 	bl	8003630 <vTaskSwitchContext>
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f380 8811 	msr	BASEPRI, r0
 800413c:	bc09      	pop	{r0, r3}
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004146:	f01e 0f10 	tst.w	lr, #16
 800414a:	bf08      	it	eq
 800414c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004150:	f380 8809 	msr	PSP, r0
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst>:
 8004160:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
}
 8004180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004182:	f7ff f99d 	bl	80034c0 <xTaskIncrementTick>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <SysTick_Handler+0x40>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f383 8811 	msr	BASEPRI, r3
}
 800419e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <vPortSetupTimerInterrupt+0x34>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <vPortSetupTimerInterrupt+0x38>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <vPortSetupTimerInterrupt+0x3c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <vPortSetupTimerInterrupt+0x40>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <vPortSetupTimerInterrupt+0x44>)
 80041ca:	3b01      	subs	r3, #1
 80041cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <vPortSetupTimerInterrupt+0x34>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010
 80041e4:	e000e018 	.word	0xe000e018
 80041e8:	20000000 	.word	0x20000000
 80041ec:	10624dd3 	.word	0x10624dd3
 80041f0:	e000e014 	.word	0xe000e014

080041f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004204 <vPortEnableVFP+0x10>
 80041f8:	6801      	ldr	r1, [r0, #0]
 80041fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041fe:	6001      	str	r1, [r0, #0]
 8004200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004202:	bf00      	nop
 8004204:	e000ed88 	.word	0xe000ed88

08004208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004214:	f7ff f81c 	bl	8003250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004218:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <pvPortMalloc+0x180>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004220:	f000 f92c 	bl	800447c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004224:	4b59      	ldr	r3, [pc, #356]	; (800438c <pvPortMalloc+0x184>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 8093 	bne.w	8004358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01d      	beq.n	8004274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004238:	2208      	movs	r2, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f023 0307 	bic.w	r3, r3, #7
 8004250:	3308      	adds	r3, #8
 8004252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <pvPortMalloc+0x6c>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	617b      	str	r3, [r7, #20]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d06e      	beq.n	8004358 <pvPortMalloc+0x150>
 800427a:	4b45      	ldr	r3, [pc, #276]	; (8004390 <pvPortMalloc+0x188>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d869      	bhi.n	8004358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <pvPortMalloc+0x18c>)
 8004286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004288:	4b42      	ldr	r3, [pc, #264]	; (8004394 <pvPortMalloc+0x18c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800428e:	e004      	b.n	800429a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d903      	bls.n	80042ac <pvPortMalloc+0xa4>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f1      	bne.n	8004290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042ac:	4b36      	ldr	r3, [pc, #216]	; (8004388 <pvPortMalloc+0x180>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d050      	beq.n	8004358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2208      	movs	r2, #8
 80042bc:	4413      	add	r3, r2
 80042be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	2308      	movs	r3, #8
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d91f      	bls.n	8004318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <pvPortMalloc+0xf8>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	613b      	str	r3, [r7, #16]
}
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004312:	69b8      	ldr	r0, [r7, #24]
 8004314:	f000 f914 	bl	8004540 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <pvPortMalloc+0x188>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <pvPortMalloc+0x188>)
 8004324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <pvPortMalloc+0x188>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <pvPortMalloc+0x190>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d203      	bcs.n	800433a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <pvPortMalloc+0x188>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a18      	ldr	r2, [pc, #96]	; (8004398 <pvPortMalloc+0x190>)
 8004338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <pvPortMalloc+0x184>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	431a      	orrs	r2, r3
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <pvPortMalloc+0x194>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a11      	ldr	r2, [pc, #68]	; (800439c <pvPortMalloc+0x194>)
 8004356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004358:	f7fe ff88 	bl	800326c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <pvPortMalloc+0x174>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60fb      	str	r3, [r7, #12]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <pvPortMalloc+0x172>
	return pvReturn;
 800437c:	69fb      	ldr	r3, [r7, #28]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3728      	adds	r7, #40	; 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	2000ddd4 	.word	0x2000ddd4
 800438c:	2000dde8 	.word	0x2000dde8
 8004390:	2000ddd8 	.word	0x2000ddd8
 8004394:	2000ddcc 	.word	0x2000ddcc
 8004398:	2000dddc 	.word	0x2000dddc
 800439c:	2000dde0 	.word	0x2000dde0

080043a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d04d      	beq.n	800444e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043b2:	2308      	movs	r3, #8
 80043b4:	425b      	negs	r3, r3
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4413      	add	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <vPortFree+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <vPortFree+0x44>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	60fb      	str	r3, [r7, #12]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <vPortFree+0x62>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60bb      	str	r3, [r7, #8]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <vPortFree+0xb8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01e      	beq.n	800444e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11a      	bne.n	800444e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <vPortFree+0xb8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004428:	f7fe ff12 	bl	8003250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <vPortFree+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4413      	add	r3, r2
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <vPortFree+0xbc>)
 8004438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800443a:	6938      	ldr	r0, [r7, #16]
 800443c:	f000 f880 	bl	8004540 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <vPortFree+0xc0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	4a06      	ldr	r2, [pc, #24]	; (8004460 <vPortFree+0xc0>)
 8004448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800444a:	f7fe ff0f 	bl	800326c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800444e:	bf00      	nop
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	2000dde8 	.word	0x2000dde8
 800445c:	2000ddd8 	.word	0x2000ddd8
 8004460:	2000dde4 	.word	0x2000dde4

08004464 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	2000dddc 	.word	0x2000dddc

0800447c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004482:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8004486:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <prvHeapInit+0xac>)
 800448a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3307      	adds	r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <prvHeapInit+0xac>)
 80044ac:	4413      	add	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <prvHeapInit+0xb0>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <prvHeapInit+0xb0>)
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044c8:	2208      	movs	r2, #8
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a15      	ldr	r2, [pc, #84]	; (8004530 <prvHeapInit+0xb4>)
 80044dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <prvHeapInit+0xb4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <prvHeapInit+0xb4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <prvHeapInit+0xb4>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <prvHeapInit+0xb8>)
 800450a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <prvHeapInit+0xbc>)
 8004512:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <prvHeapInit+0xc0>)
 8004516:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	200001cc 	.word	0x200001cc
 800452c:	2000ddcc 	.word	0x2000ddcc
 8004530:	2000ddd4 	.word	0x2000ddd4
 8004534:	2000dddc 	.word	0x2000dddc
 8004538:	2000ddd8 	.word	0x2000ddd8
 800453c:	2000dde8 	.word	0x2000dde8

08004540 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <prvInsertBlockIntoFreeList+0xac>)
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e002      	b.n	8004554 <prvInsertBlockIntoFreeList+0x14>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d8f7      	bhi.n	800454e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d108      	bne.n	8004582 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d118      	bne.n	80045c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <prvInsertBlockIntoFreeList+0xb0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d00d      	beq.n	80045be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e008      	b.n	80045d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvInsertBlockIntoFreeList+0xb0>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e003      	b.n	80045d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d002      	beq.n	80045de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	2000ddcc 	.word	0x2000ddcc
 80045f0:	2000ddd4 	.word	0x2000ddd4

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000010 	.word	0x20000010

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 fc56 	bl	8004ec4 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	080052c8 	.word	0x080052c8
 800463c:	080052c8 	.word	0x080052c8
 8004640:	080052c8 	.word	0x080052c8
 8004644:	080052cc 	.word	0x080052cc

08004648 <memcpy>:
 8004648:	440a      	add	r2, r1
 800464a:	4291      	cmp	r1, r2
 800464c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004650:	d100      	bne.n	8004654 <memcpy+0xc>
 8004652:	4770      	bx	lr
 8004654:	b510      	push	{r4, lr}
 8004656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800465a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465e:	4291      	cmp	r1, r2
 8004660:	d1f9      	bne.n	8004656 <memcpy+0xe>
 8004662:	bd10      	pop	{r4, pc}

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <siprintf>:
 8004674:	b40e      	push	{r1, r2, r3}
 8004676:	b500      	push	{lr}
 8004678:	b09c      	sub	sp, #112	; 0x70
 800467a:	ab1d      	add	r3, sp, #116	; 0x74
 800467c:	9002      	str	r0, [sp, #8]
 800467e:	9006      	str	r0, [sp, #24]
 8004680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004684:	4809      	ldr	r0, [pc, #36]	; (80046ac <siprintf+0x38>)
 8004686:	9107      	str	r1, [sp, #28]
 8004688:	9104      	str	r1, [sp, #16]
 800468a:	4909      	ldr	r1, [pc, #36]	; (80046b0 <siprintf+0x3c>)
 800468c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004690:	9105      	str	r1, [sp, #20]
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	a902      	add	r1, sp, #8
 8004698:	f000 f870 	bl	800477c <_svfiprintf_r>
 800469c:	9b02      	ldr	r3, [sp, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	b01c      	add	sp, #112	; 0x70
 80046a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046a8:	b003      	add	sp, #12
 80046aa:	4770      	bx	lr
 80046ac:	20000010 	.word	0x20000010
 80046b0:	ffff0208 	.word	0xffff0208

080046b4 <strcpy>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ba:	f803 2b01 	strb.w	r2, [r3], #1
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d1f9      	bne.n	80046b6 <strcpy+0x2>
 80046c2:	4770      	bx	lr

080046c4 <__ssputs_r>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	688e      	ldr	r6, [r1, #8]
 80046ca:	429e      	cmp	r6, r3
 80046cc:	4682      	mov	sl, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	4690      	mov	r8, r2
 80046d2:	461f      	mov	r7, r3
 80046d4:	d838      	bhi.n	8004748 <__ssputs_r+0x84>
 80046d6:	898a      	ldrh	r2, [r1, #12]
 80046d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046dc:	d032      	beq.n	8004744 <__ssputs_r+0x80>
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	6909      	ldr	r1, [r1, #16]
 80046e2:	eba5 0901 	sub.w	r9, r5, r1
 80046e6:	6965      	ldr	r5, [r4, #20]
 80046e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046f0:	3301      	adds	r3, #1
 80046f2:	444b      	add	r3, r9
 80046f4:	106d      	asrs	r5, r5, #1
 80046f6:	429d      	cmp	r5, r3
 80046f8:	bf38      	it	cc
 80046fa:	461d      	movcc	r5, r3
 80046fc:	0553      	lsls	r3, r2, #21
 80046fe:	d531      	bpl.n	8004764 <__ssputs_r+0xa0>
 8004700:	4629      	mov	r1, r5
 8004702:	f000 fb39 	bl	8004d78 <_malloc_r>
 8004706:	4606      	mov	r6, r0
 8004708:	b950      	cbnz	r0, 8004720 <__ssputs_r+0x5c>
 800470a:	230c      	movs	r3, #12
 800470c:	f8ca 3000 	str.w	r3, [sl]
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004716:	81a3      	strh	r3, [r4, #12]
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	6921      	ldr	r1, [r4, #16]
 8004722:	464a      	mov	r2, r9
 8004724:	f7ff ff90 	bl	8004648 <memcpy>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	6126      	str	r6, [r4, #16]
 8004736:	6165      	str	r5, [r4, #20]
 8004738:	444e      	add	r6, r9
 800473a:	eba5 0509 	sub.w	r5, r5, r9
 800473e:	6026      	str	r6, [r4, #0]
 8004740:	60a5      	str	r5, [r4, #8]
 8004742:	463e      	mov	r6, r7
 8004744:	42be      	cmp	r6, r7
 8004746:	d900      	bls.n	800474a <__ssputs_r+0x86>
 8004748:	463e      	mov	r6, r7
 800474a:	4632      	mov	r2, r6
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	4641      	mov	r1, r8
 8004750:	f000 faa8 	bl	8004ca4 <memmove>
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	1b9b      	subs	r3, r3, r6
 800475a:	4432      	add	r2, r6
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	6022      	str	r2, [r4, #0]
 8004760:	2000      	movs	r0, #0
 8004762:	e7db      	b.n	800471c <__ssputs_r+0x58>
 8004764:	462a      	mov	r2, r5
 8004766:	f000 fb61 	bl	8004e2c <_realloc_r>
 800476a:	4606      	mov	r6, r0
 800476c:	2800      	cmp	r0, #0
 800476e:	d1e1      	bne.n	8004734 <__ssputs_r+0x70>
 8004770:	6921      	ldr	r1, [r4, #16]
 8004772:	4650      	mov	r0, sl
 8004774:	f000 fab0 	bl	8004cd8 <_free_r>
 8004778:	e7c7      	b.n	800470a <__ssputs_r+0x46>
	...

0800477c <_svfiprintf_r>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	4698      	mov	r8, r3
 8004782:	898b      	ldrh	r3, [r1, #12]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	b09d      	sub	sp, #116	; 0x74
 8004788:	4607      	mov	r7, r0
 800478a:	460d      	mov	r5, r1
 800478c:	4614      	mov	r4, r2
 800478e:	d50e      	bpl.n	80047ae <_svfiprintf_r+0x32>
 8004790:	690b      	ldr	r3, [r1, #16]
 8004792:	b963      	cbnz	r3, 80047ae <_svfiprintf_r+0x32>
 8004794:	2140      	movs	r1, #64	; 0x40
 8004796:	f000 faef 	bl	8004d78 <_malloc_r>
 800479a:	6028      	str	r0, [r5, #0]
 800479c:	6128      	str	r0, [r5, #16]
 800479e:	b920      	cbnz	r0, 80047aa <_svfiprintf_r+0x2e>
 80047a0:	230c      	movs	r3, #12
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	e0d1      	b.n	800494e <_svfiprintf_r+0x1d2>
 80047aa:	2340      	movs	r3, #64	; 0x40
 80047ac:	616b      	str	r3, [r5, #20]
 80047ae:	2300      	movs	r3, #0
 80047b0:	9309      	str	r3, [sp, #36]	; 0x24
 80047b2:	2320      	movs	r3, #32
 80047b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80047bc:	2330      	movs	r3, #48	; 0x30
 80047be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004968 <_svfiprintf_r+0x1ec>
 80047c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047c6:	f04f 0901 	mov.w	r9, #1
 80047ca:	4623      	mov	r3, r4
 80047cc:	469a      	mov	sl, r3
 80047ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047d2:	b10a      	cbz	r2, 80047d8 <_svfiprintf_r+0x5c>
 80047d4:	2a25      	cmp	r2, #37	; 0x25
 80047d6:	d1f9      	bne.n	80047cc <_svfiprintf_r+0x50>
 80047d8:	ebba 0b04 	subs.w	fp, sl, r4
 80047dc:	d00b      	beq.n	80047f6 <_svfiprintf_r+0x7a>
 80047de:	465b      	mov	r3, fp
 80047e0:	4622      	mov	r2, r4
 80047e2:	4629      	mov	r1, r5
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff ff6d 	bl	80046c4 <__ssputs_r>
 80047ea:	3001      	adds	r0, #1
 80047ec:	f000 80aa 	beq.w	8004944 <_svfiprintf_r+0x1c8>
 80047f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047f2:	445a      	add	r2, fp
 80047f4:	9209      	str	r2, [sp, #36]	; 0x24
 80047f6:	f89a 3000 	ldrb.w	r3, [sl]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80a2 	beq.w	8004944 <_svfiprintf_r+0x1c8>
 8004800:	2300      	movs	r3, #0
 8004802:	f04f 32ff 	mov.w	r2, #4294967295
 8004806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800480a:	f10a 0a01 	add.w	sl, sl, #1
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	9307      	str	r3, [sp, #28]
 8004812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004816:	931a      	str	r3, [sp, #104]	; 0x68
 8004818:	4654      	mov	r4, sl
 800481a:	2205      	movs	r2, #5
 800481c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004820:	4851      	ldr	r0, [pc, #324]	; (8004968 <_svfiprintf_r+0x1ec>)
 8004822:	f7fb fce5 	bl	80001f0 <memchr>
 8004826:	9a04      	ldr	r2, [sp, #16]
 8004828:	b9d8      	cbnz	r0, 8004862 <_svfiprintf_r+0xe6>
 800482a:	06d0      	lsls	r0, r2, #27
 800482c:	bf44      	itt	mi
 800482e:	2320      	movmi	r3, #32
 8004830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004834:	0711      	lsls	r1, r2, #28
 8004836:	bf44      	itt	mi
 8004838:	232b      	movmi	r3, #43	; 0x2b
 800483a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483e:	f89a 3000 	ldrb.w	r3, [sl]
 8004842:	2b2a      	cmp	r3, #42	; 0x2a
 8004844:	d015      	beq.n	8004872 <_svfiprintf_r+0xf6>
 8004846:	9a07      	ldr	r2, [sp, #28]
 8004848:	4654      	mov	r4, sl
 800484a:	2000      	movs	r0, #0
 800484c:	f04f 0c0a 	mov.w	ip, #10
 8004850:	4621      	mov	r1, r4
 8004852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004856:	3b30      	subs	r3, #48	; 0x30
 8004858:	2b09      	cmp	r3, #9
 800485a:	d94e      	bls.n	80048fa <_svfiprintf_r+0x17e>
 800485c:	b1b0      	cbz	r0, 800488c <_svfiprintf_r+0x110>
 800485e:	9207      	str	r2, [sp, #28]
 8004860:	e014      	b.n	800488c <_svfiprintf_r+0x110>
 8004862:	eba0 0308 	sub.w	r3, r0, r8
 8004866:	fa09 f303 	lsl.w	r3, r9, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	9304      	str	r3, [sp, #16]
 800486e:	46a2      	mov	sl, r4
 8004870:	e7d2      	b.n	8004818 <_svfiprintf_r+0x9c>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	1d19      	adds	r1, r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	9103      	str	r1, [sp, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	bfbb      	ittet	lt
 800487e:	425b      	neglt	r3, r3
 8004880:	f042 0202 	orrlt.w	r2, r2, #2
 8004884:	9307      	strge	r3, [sp, #28]
 8004886:	9307      	strlt	r3, [sp, #28]
 8004888:	bfb8      	it	lt
 800488a:	9204      	strlt	r2, [sp, #16]
 800488c:	7823      	ldrb	r3, [r4, #0]
 800488e:	2b2e      	cmp	r3, #46	; 0x2e
 8004890:	d10c      	bne.n	80048ac <_svfiprintf_r+0x130>
 8004892:	7863      	ldrb	r3, [r4, #1]
 8004894:	2b2a      	cmp	r3, #42	; 0x2a
 8004896:	d135      	bne.n	8004904 <_svfiprintf_r+0x188>
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	1d1a      	adds	r2, r3, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	9203      	str	r2, [sp, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bfb8      	it	lt
 80048a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048a8:	3402      	adds	r4, #2
 80048aa:	9305      	str	r3, [sp, #20]
 80048ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004978 <_svfiprintf_r+0x1fc>
 80048b0:	7821      	ldrb	r1, [r4, #0]
 80048b2:	2203      	movs	r2, #3
 80048b4:	4650      	mov	r0, sl
 80048b6:	f7fb fc9b 	bl	80001f0 <memchr>
 80048ba:	b140      	cbz	r0, 80048ce <_svfiprintf_r+0x152>
 80048bc:	2340      	movs	r3, #64	; 0x40
 80048be:	eba0 000a 	sub.w	r0, r0, sl
 80048c2:	fa03 f000 	lsl.w	r0, r3, r0
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	4303      	orrs	r3, r0
 80048ca:	3401      	adds	r4, #1
 80048cc:	9304      	str	r3, [sp, #16]
 80048ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d2:	4826      	ldr	r0, [pc, #152]	; (800496c <_svfiprintf_r+0x1f0>)
 80048d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048d8:	2206      	movs	r2, #6
 80048da:	f7fb fc89 	bl	80001f0 <memchr>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d038      	beq.n	8004954 <_svfiprintf_r+0x1d8>
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <_svfiprintf_r+0x1f4>)
 80048e4:	bb1b      	cbnz	r3, 800492e <_svfiprintf_r+0x1b2>
 80048e6:	9b03      	ldr	r3, [sp, #12]
 80048e8:	3307      	adds	r3, #7
 80048ea:	f023 0307 	bic.w	r3, r3, #7
 80048ee:	3308      	adds	r3, #8
 80048f0:	9303      	str	r3, [sp, #12]
 80048f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f4:	4433      	add	r3, r6
 80048f6:	9309      	str	r3, [sp, #36]	; 0x24
 80048f8:	e767      	b.n	80047ca <_svfiprintf_r+0x4e>
 80048fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80048fe:	460c      	mov	r4, r1
 8004900:	2001      	movs	r0, #1
 8004902:	e7a5      	b.n	8004850 <_svfiprintf_r+0xd4>
 8004904:	2300      	movs	r3, #0
 8004906:	3401      	adds	r4, #1
 8004908:	9305      	str	r3, [sp, #20]
 800490a:	4619      	mov	r1, r3
 800490c:	f04f 0c0a 	mov.w	ip, #10
 8004910:	4620      	mov	r0, r4
 8004912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004916:	3a30      	subs	r2, #48	; 0x30
 8004918:	2a09      	cmp	r2, #9
 800491a:	d903      	bls.n	8004924 <_svfiprintf_r+0x1a8>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0c5      	beq.n	80048ac <_svfiprintf_r+0x130>
 8004920:	9105      	str	r1, [sp, #20]
 8004922:	e7c3      	b.n	80048ac <_svfiprintf_r+0x130>
 8004924:	fb0c 2101 	mla	r1, ip, r1, r2
 8004928:	4604      	mov	r4, r0
 800492a:	2301      	movs	r3, #1
 800492c:	e7f0      	b.n	8004910 <_svfiprintf_r+0x194>
 800492e:	ab03      	add	r3, sp, #12
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	462a      	mov	r2, r5
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <_svfiprintf_r+0x1f8>)
 8004936:	a904      	add	r1, sp, #16
 8004938:	4638      	mov	r0, r7
 800493a:	f3af 8000 	nop.w
 800493e:	1c42      	adds	r2, r0, #1
 8004940:	4606      	mov	r6, r0
 8004942:	d1d6      	bne.n	80048f2 <_svfiprintf_r+0x176>
 8004944:	89ab      	ldrh	r3, [r5, #12]
 8004946:	065b      	lsls	r3, r3, #25
 8004948:	f53f af2c 	bmi.w	80047a4 <_svfiprintf_r+0x28>
 800494c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494e:	b01d      	add	sp, #116	; 0x74
 8004950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	462a      	mov	r2, r5
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <_svfiprintf_r+0x1f8>)
 800495c:	a904      	add	r1, sp, #16
 800495e:	4638      	mov	r0, r7
 8004960:	f000 f87a 	bl	8004a58 <_printf_i>
 8004964:	e7eb      	b.n	800493e <_svfiprintf_r+0x1c2>
 8004966:	bf00      	nop
 8004968:	0800528c 	.word	0x0800528c
 800496c:	08005296 	.word	0x08005296
 8004970:	00000000 	.word	0x00000000
 8004974:	080046c5 	.word	0x080046c5
 8004978:	08005292 	.word	0x08005292

0800497c <_printf_common>:
 800497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	4616      	mov	r6, r2
 8004982:	4699      	mov	r9, r3
 8004984:	688a      	ldr	r2, [r1, #8]
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800498c:	4293      	cmp	r3, r2
 800498e:	bfb8      	it	lt
 8004990:	4613      	movlt	r3, r2
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004998:	4607      	mov	r7, r0
 800499a:	460c      	mov	r4, r1
 800499c:	b10a      	cbz	r2, 80049a2 <_printf_common+0x26>
 800499e:	3301      	adds	r3, #1
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	0699      	lsls	r1, r3, #26
 80049a6:	bf42      	ittt	mi
 80049a8:	6833      	ldrmi	r3, [r6, #0]
 80049aa:	3302      	addmi	r3, #2
 80049ac:	6033      	strmi	r3, [r6, #0]
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	f015 0506 	ands.w	r5, r5, #6
 80049b4:	d106      	bne.n	80049c4 <_printf_common+0x48>
 80049b6:	f104 0a19 	add.w	sl, r4, #25
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	6832      	ldr	r2, [r6, #0]
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	dc26      	bgt.n	8004a12 <_printf_common+0x96>
 80049c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c8:	1e13      	subs	r3, r2, #0
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	bf18      	it	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	0692      	lsls	r2, r2, #26
 80049d2:	d42b      	bmi.n	8004a2c <_printf_common+0xb0>
 80049d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d8:	4649      	mov	r1, r9
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d01e      	beq.n	8004a20 <_printf_common+0xa4>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	68e5      	ldr	r5, [r4, #12]
 80049e6:	6832      	ldr	r2, [r6, #0]
 80049e8:	f003 0306 	and.w	r3, r3, #6
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	bf08      	it	eq
 80049f0:	1aad      	subeq	r5, r5, r2
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	bf0c      	ite	eq
 80049f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049fc:	2500      	movne	r5, #0
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bfc4      	itt	gt
 8004a02:	1a9b      	subgt	r3, r3, r2
 8004a04:	18ed      	addgt	r5, r5, r3
 8004a06:	2600      	movs	r6, #0
 8004a08:	341a      	adds	r4, #26
 8004a0a:	42b5      	cmp	r5, r6
 8004a0c:	d11a      	bne.n	8004a44 <_printf_common+0xc8>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e008      	b.n	8004a24 <_printf_common+0xa8>
 8004a12:	2301      	movs	r3, #1
 8004a14:	4652      	mov	r2, sl
 8004a16:	4649      	mov	r1, r9
 8004a18:	4638      	mov	r0, r7
 8004a1a:	47c0      	blx	r8
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d103      	bne.n	8004a28 <_printf_common+0xac>
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	3501      	adds	r5, #1
 8004a2a:	e7c6      	b.n	80049ba <_printf_common+0x3e>
 8004a2c:	18e1      	adds	r1, r4, r3
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	2030      	movs	r0, #48	; 0x30
 8004a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a36:	4422      	add	r2, r4
 8004a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a40:	3302      	adds	r3, #2
 8004a42:	e7c7      	b.n	80049d4 <_printf_common+0x58>
 8004a44:	2301      	movs	r3, #1
 8004a46:	4622      	mov	r2, r4
 8004a48:	4649      	mov	r1, r9
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	47c0      	blx	r8
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d0e6      	beq.n	8004a20 <_printf_common+0xa4>
 8004a52:	3601      	adds	r6, #1
 8004a54:	e7d9      	b.n	8004a0a <_printf_common+0x8e>
	...

08004a58 <_printf_i>:
 8004a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	4691      	mov	r9, r2
 8004a60:	7e27      	ldrb	r7, [r4, #24]
 8004a62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a64:	2f78      	cmp	r7, #120	; 0x78
 8004a66:	4680      	mov	r8, r0
 8004a68:	469a      	mov	sl, r3
 8004a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a6e:	d807      	bhi.n	8004a80 <_printf_i+0x28>
 8004a70:	2f62      	cmp	r7, #98	; 0x62
 8004a72:	d80a      	bhi.n	8004a8a <_printf_i+0x32>
 8004a74:	2f00      	cmp	r7, #0
 8004a76:	f000 80d8 	beq.w	8004c2a <_printf_i+0x1d2>
 8004a7a:	2f58      	cmp	r7, #88	; 0x58
 8004a7c:	f000 80a3 	beq.w	8004bc6 <_printf_i+0x16e>
 8004a80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a88:	e03a      	b.n	8004b00 <_printf_i+0xa8>
 8004a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a8e:	2b15      	cmp	r3, #21
 8004a90:	d8f6      	bhi.n	8004a80 <_printf_i+0x28>
 8004a92:	a001      	add	r0, pc, #4	; (adr r0, 8004a98 <_printf_i+0x40>)
 8004a94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a98:	08004af1 	.word	0x08004af1
 8004a9c:	08004b05 	.word	0x08004b05
 8004aa0:	08004a81 	.word	0x08004a81
 8004aa4:	08004a81 	.word	0x08004a81
 8004aa8:	08004a81 	.word	0x08004a81
 8004aac:	08004a81 	.word	0x08004a81
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004a81 	.word	0x08004a81
 8004ab8:	08004a81 	.word	0x08004a81
 8004abc:	08004a81 	.word	0x08004a81
 8004ac0:	08004a81 	.word	0x08004a81
 8004ac4:	08004c11 	.word	0x08004c11
 8004ac8:	08004b35 	.word	0x08004b35
 8004acc:	08004bf3 	.word	0x08004bf3
 8004ad0:	08004a81 	.word	0x08004a81
 8004ad4:	08004a81 	.word	0x08004a81
 8004ad8:	08004c33 	.word	0x08004c33
 8004adc:	08004a81 	.word	0x08004a81
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004a81 	.word	0x08004a81
 8004ae8:	08004a81 	.word	0x08004a81
 8004aec:	08004bfb 	.word	0x08004bfb
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	1d1a      	adds	r2, r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	600a      	str	r2, [r1, #0]
 8004af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0a3      	b.n	8004c4c <_printf_i+0x1f4>
 8004b04:	6825      	ldr	r5, [r4, #0]
 8004b06:	6808      	ldr	r0, [r1, #0]
 8004b08:	062e      	lsls	r6, r5, #24
 8004b0a:	f100 0304 	add.w	r3, r0, #4
 8004b0e:	d50a      	bpl.n	8004b26 <_printf_i+0xce>
 8004b10:	6805      	ldr	r5, [r0, #0]
 8004b12:	600b      	str	r3, [r1, #0]
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	da03      	bge.n	8004b20 <_printf_i+0xc8>
 8004b18:	232d      	movs	r3, #45	; 0x2d
 8004b1a:	426d      	negs	r5, r5
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b20:	485e      	ldr	r0, [pc, #376]	; (8004c9c <_printf_i+0x244>)
 8004b22:	230a      	movs	r3, #10
 8004b24:	e019      	b.n	8004b5a <_printf_i+0x102>
 8004b26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b2a:	6805      	ldr	r5, [r0, #0]
 8004b2c:	600b      	str	r3, [r1, #0]
 8004b2e:	bf18      	it	ne
 8004b30:	b22d      	sxthne	r5, r5
 8004b32:	e7ef      	b.n	8004b14 <_printf_i+0xbc>
 8004b34:	680b      	ldr	r3, [r1, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	1d18      	adds	r0, r3, #4
 8004b3a:	6008      	str	r0, [r1, #0]
 8004b3c:	0628      	lsls	r0, r5, #24
 8004b3e:	d501      	bpl.n	8004b44 <_printf_i+0xec>
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <_printf_i+0xf2>
 8004b44:	0669      	lsls	r1, r5, #25
 8004b46:	d5fb      	bpl.n	8004b40 <_printf_i+0xe8>
 8004b48:	881d      	ldrh	r5, [r3, #0]
 8004b4a:	4854      	ldr	r0, [pc, #336]	; (8004c9c <_printf_i+0x244>)
 8004b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b4e:	bf0c      	ite	eq
 8004b50:	2308      	moveq	r3, #8
 8004b52:	230a      	movne	r3, #10
 8004b54:	2100      	movs	r1, #0
 8004b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b5a:	6866      	ldr	r6, [r4, #4]
 8004b5c:	60a6      	str	r6, [r4, #8]
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	bfa2      	ittt	ge
 8004b62:	6821      	ldrge	r1, [r4, #0]
 8004b64:	f021 0104 	bicge.w	r1, r1, #4
 8004b68:	6021      	strge	r1, [r4, #0]
 8004b6a:	b90d      	cbnz	r5, 8004b70 <_printf_i+0x118>
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	d04d      	beq.n	8004c0c <_printf_i+0x1b4>
 8004b70:	4616      	mov	r6, r2
 8004b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b76:	fb03 5711 	mls	r7, r3, r1, r5
 8004b7a:	5dc7      	ldrb	r7, [r0, r7]
 8004b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b80:	462f      	mov	r7, r5
 8004b82:	42bb      	cmp	r3, r7
 8004b84:	460d      	mov	r5, r1
 8004b86:	d9f4      	bls.n	8004b72 <_printf_i+0x11a>
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d10b      	bne.n	8004ba4 <_printf_i+0x14c>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	07df      	lsls	r7, r3, #31
 8004b90:	d508      	bpl.n	8004ba4 <_printf_i+0x14c>
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	6861      	ldr	r1, [r4, #4]
 8004b96:	4299      	cmp	r1, r3
 8004b98:	bfde      	ittt	le
 8004b9a:	2330      	movle	r3, #48	; 0x30
 8004b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ba4:	1b92      	subs	r2, r2, r6
 8004ba6:	6122      	str	r2, [r4, #16]
 8004ba8:	f8cd a000 	str.w	sl, [sp]
 8004bac:	464b      	mov	r3, r9
 8004bae:	aa03      	add	r2, sp, #12
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f7ff fee2 	bl	800497c <_printf_common>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d14c      	bne.n	8004c56 <_printf_i+0x1fe>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	b004      	add	sp, #16
 8004bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc6:	4835      	ldr	r0, [pc, #212]	; (8004c9c <_printf_i+0x244>)
 8004bc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	680e      	ldr	r6, [r1, #0]
 8004bd0:	061f      	lsls	r7, r3, #24
 8004bd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bd6:	600e      	str	r6, [r1, #0]
 8004bd8:	d514      	bpl.n	8004c04 <_printf_i+0x1ac>
 8004bda:	07d9      	lsls	r1, r3, #31
 8004bdc:	bf44      	itt	mi
 8004bde:	f043 0320 	orrmi.w	r3, r3, #32
 8004be2:	6023      	strmi	r3, [r4, #0]
 8004be4:	b91d      	cbnz	r5, 8004bee <_printf_i+0x196>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	f023 0320 	bic.w	r3, r3, #32
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	2310      	movs	r3, #16
 8004bf0:	e7b0      	b.n	8004b54 <_printf_i+0xfc>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f043 0320 	orr.w	r3, r3, #32
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	2378      	movs	r3, #120	; 0x78
 8004bfc:	4828      	ldr	r0, [pc, #160]	; (8004ca0 <_printf_i+0x248>)
 8004bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c02:	e7e3      	b.n	8004bcc <_printf_i+0x174>
 8004c04:	065e      	lsls	r6, r3, #25
 8004c06:	bf48      	it	mi
 8004c08:	b2ad      	uxthmi	r5, r5
 8004c0a:	e7e6      	b.n	8004bda <_printf_i+0x182>
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	e7bb      	b.n	8004b88 <_printf_i+0x130>
 8004c10:	680b      	ldr	r3, [r1, #0]
 8004c12:	6826      	ldr	r6, [r4, #0]
 8004c14:	6960      	ldr	r0, [r4, #20]
 8004c16:	1d1d      	adds	r5, r3, #4
 8004c18:	600d      	str	r5, [r1, #0]
 8004c1a:	0635      	lsls	r5, r6, #24
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	d501      	bpl.n	8004c24 <_printf_i+0x1cc>
 8004c20:	6018      	str	r0, [r3, #0]
 8004c22:	e002      	b.n	8004c2a <_printf_i+0x1d2>
 8004c24:	0671      	lsls	r1, r6, #25
 8004c26:	d5fb      	bpl.n	8004c20 <_printf_i+0x1c8>
 8004c28:	8018      	strh	r0, [r3, #0]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	4616      	mov	r6, r2
 8004c30:	e7ba      	b.n	8004ba8 <_printf_i+0x150>
 8004c32:	680b      	ldr	r3, [r1, #0]
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	600a      	str	r2, [r1, #0]
 8004c38:	681e      	ldr	r6, [r3, #0]
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7fb fad6 	bl	80001f0 <memchr>
 8004c44:	b108      	cbz	r0, 8004c4a <_printf_i+0x1f2>
 8004c46:	1b80      	subs	r0, r0, r6
 8004c48:	6060      	str	r0, [r4, #4]
 8004c4a:	6863      	ldr	r3, [r4, #4]
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c54:	e7a8      	b.n	8004ba8 <_printf_i+0x150>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	47d0      	blx	sl
 8004c60:	3001      	adds	r0, #1
 8004c62:	d0ab      	beq.n	8004bbc <_printf_i+0x164>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	079b      	lsls	r3, r3, #30
 8004c68:	d413      	bmi.n	8004c92 <_printf_i+0x23a>
 8004c6a:	68e0      	ldr	r0, [r4, #12]
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	4298      	cmp	r0, r3
 8004c70:	bfb8      	it	lt
 8004c72:	4618      	movlt	r0, r3
 8004c74:	e7a4      	b.n	8004bc0 <_printf_i+0x168>
 8004c76:	2301      	movs	r3, #1
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	47d0      	blx	sl
 8004c80:	3001      	adds	r0, #1
 8004c82:	d09b      	beq.n	8004bbc <_printf_i+0x164>
 8004c84:	3501      	adds	r5, #1
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	9903      	ldr	r1, [sp, #12]
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	42ab      	cmp	r3, r5
 8004c8e:	dcf2      	bgt.n	8004c76 <_printf_i+0x21e>
 8004c90:	e7eb      	b.n	8004c6a <_printf_i+0x212>
 8004c92:	2500      	movs	r5, #0
 8004c94:	f104 0619 	add.w	r6, r4, #25
 8004c98:	e7f5      	b.n	8004c86 <_printf_i+0x22e>
 8004c9a:	bf00      	nop
 8004c9c:	0800529d 	.word	0x0800529d
 8004ca0:	080052ae 	.word	0x080052ae

08004ca4 <memmove>:
 8004ca4:	4288      	cmp	r0, r1
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	eb01 0402 	add.w	r4, r1, r2
 8004cac:	d902      	bls.n	8004cb4 <memmove+0x10>
 8004cae:	4284      	cmp	r4, r0
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	d807      	bhi.n	8004cc4 <memmove+0x20>
 8004cb4:	1e43      	subs	r3, r0, #1
 8004cb6:	42a1      	cmp	r1, r4
 8004cb8:	d008      	beq.n	8004ccc <memmove+0x28>
 8004cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cc2:	e7f8      	b.n	8004cb6 <memmove+0x12>
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	d100      	bne.n	8004cce <memmove+0x2a>
 8004ccc:	bd10      	pop	{r4, pc}
 8004cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cd6:	e7f7      	b.n	8004cc8 <memmove+0x24>

08004cd8 <_free_r>:
 8004cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d048      	beq.n	8004d70 <_free_r+0x98>
 8004cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce2:	9001      	str	r0, [sp, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cea:	bfb8      	it	lt
 8004cec:	18e4      	addlt	r4, r4, r3
 8004cee:	f000 f8d3 	bl	8004e98 <__malloc_lock>
 8004cf2:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <_free_r+0x9c>)
 8004cf4:	9801      	ldr	r0, [sp, #4]
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	4615      	mov	r5, r2
 8004cfa:	b933      	cbnz	r3, 8004d0a <_free_r+0x32>
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	6014      	str	r4, [r2, #0]
 8004d00:	b003      	add	sp, #12
 8004d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d06:	f000 b8cd 	b.w	8004ea4 <__malloc_unlock>
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	d90b      	bls.n	8004d26 <_free_r+0x4e>
 8004d0e:	6821      	ldr	r1, [r4, #0]
 8004d10:	1862      	adds	r2, r4, r1
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf04      	itt	eq
 8004d16:	681a      	ldreq	r2, [r3, #0]
 8004d18:	685b      	ldreq	r3, [r3, #4]
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	bf04      	itt	eq
 8004d1e:	1852      	addeq	r2, r2, r1
 8004d20:	6022      	streq	r2, [r4, #0]
 8004d22:	602c      	str	r4, [r5, #0]
 8004d24:	e7ec      	b.n	8004d00 <_free_r+0x28>
 8004d26:	461a      	mov	r2, r3
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b10b      	cbz	r3, 8004d30 <_free_r+0x58>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d9fa      	bls.n	8004d26 <_free_r+0x4e>
 8004d30:	6811      	ldr	r1, [r2, #0]
 8004d32:	1855      	adds	r5, r2, r1
 8004d34:	42a5      	cmp	r5, r4
 8004d36:	d10b      	bne.n	8004d50 <_free_r+0x78>
 8004d38:	6824      	ldr	r4, [r4, #0]
 8004d3a:	4421      	add	r1, r4
 8004d3c:	1854      	adds	r4, r2, r1
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	d1dd      	bne.n	8004d00 <_free_r+0x28>
 8004d44:	681c      	ldr	r4, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	4421      	add	r1, r4
 8004d4c:	6011      	str	r1, [r2, #0]
 8004d4e:	e7d7      	b.n	8004d00 <_free_r+0x28>
 8004d50:	d902      	bls.n	8004d58 <_free_r+0x80>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6003      	str	r3, [r0, #0]
 8004d56:	e7d3      	b.n	8004d00 <_free_r+0x28>
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1961      	adds	r1, r4, r5
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf04      	itt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	bf04      	itt	eq
 8004d68:	1949      	addeq	r1, r1, r5
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	6054      	str	r4, [r2, #4]
 8004d6e:	e7c7      	b.n	8004d00 <_free_r+0x28>
 8004d70:	b003      	add	sp, #12
 8004d72:	bd30      	pop	{r4, r5, pc}
 8004d74:	2000ddec 	.word	0x2000ddec

08004d78 <_malloc_r>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	1ccd      	adds	r5, r1, #3
 8004d7c:	f025 0503 	bic.w	r5, r5, #3
 8004d80:	3508      	adds	r5, #8
 8004d82:	2d0c      	cmp	r5, #12
 8004d84:	bf38      	it	cc
 8004d86:	250c      	movcc	r5, #12
 8004d88:	2d00      	cmp	r5, #0
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	db01      	blt.n	8004d92 <_malloc_r+0x1a>
 8004d8e:	42a9      	cmp	r1, r5
 8004d90:	d903      	bls.n	8004d9a <_malloc_r+0x22>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	2000      	movs	r0, #0
 8004d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9a:	f000 f87d 	bl	8004e98 <__malloc_lock>
 8004d9e:	4921      	ldr	r1, [pc, #132]	; (8004e24 <_malloc_r+0xac>)
 8004da0:	680a      	ldr	r2, [r1, #0]
 8004da2:	4614      	mov	r4, r2
 8004da4:	b99c      	cbnz	r4, 8004dce <_malloc_r+0x56>
 8004da6:	4f20      	ldr	r7, [pc, #128]	; (8004e28 <_malloc_r+0xb0>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	b923      	cbnz	r3, 8004db6 <_malloc_r+0x3e>
 8004dac:	4621      	mov	r1, r4
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f862 	bl	8004e78 <_sbrk_r>
 8004db4:	6038      	str	r0, [r7, #0]
 8004db6:	4629      	mov	r1, r5
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f85d 	bl	8004e78 <_sbrk_r>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	d123      	bne.n	8004e0a <_malloc_r+0x92>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 f86c 	bl	8004ea4 <__malloc_unlock>
 8004dcc:	e7e3      	b.n	8004d96 <_malloc_r+0x1e>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	1b5b      	subs	r3, r3, r5
 8004dd2:	d417      	bmi.n	8004e04 <_malloc_r+0x8c>
 8004dd4:	2b0b      	cmp	r3, #11
 8004dd6:	d903      	bls.n	8004de0 <_malloc_r+0x68>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	441c      	add	r4, r3
 8004ddc:	6025      	str	r5, [r4, #0]
 8004dde:	e004      	b.n	8004dea <_malloc_r+0x72>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	42a2      	cmp	r2, r4
 8004de4:	bf0c      	ite	eq
 8004de6:	600b      	streq	r3, [r1, #0]
 8004de8:	6053      	strne	r3, [r2, #4]
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 f85a 	bl	8004ea4 <__malloc_unlock>
 8004df0:	f104 000b 	add.w	r0, r4, #11
 8004df4:	1d23      	adds	r3, r4, #4
 8004df6:	f020 0007 	bic.w	r0, r0, #7
 8004dfa:	1ac2      	subs	r2, r0, r3
 8004dfc:	d0cc      	beq.n	8004d98 <_malloc_r+0x20>
 8004dfe:	1a1b      	subs	r3, r3, r0
 8004e00:	50a3      	str	r3, [r4, r2]
 8004e02:	e7c9      	b.n	8004d98 <_malloc_r+0x20>
 8004e04:	4622      	mov	r2, r4
 8004e06:	6864      	ldr	r4, [r4, #4]
 8004e08:	e7cc      	b.n	8004da4 <_malloc_r+0x2c>
 8004e0a:	1cc4      	adds	r4, r0, #3
 8004e0c:	f024 0403 	bic.w	r4, r4, #3
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d0e3      	beq.n	8004ddc <_malloc_r+0x64>
 8004e14:	1a21      	subs	r1, r4, r0
 8004e16:	4630      	mov	r0, r6
 8004e18:	f000 f82e 	bl	8004e78 <_sbrk_r>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d1dd      	bne.n	8004ddc <_malloc_r+0x64>
 8004e20:	e7cf      	b.n	8004dc2 <_malloc_r+0x4a>
 8004e22:	bf00      	nop
 8004e24:	2000ddec 	.word	0x2000ddec
 8004e28:	2000ddf0 	.word	0x2000ddf0

08004e2c <_realloc_r>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	4607      	mov	r7, r0
 8004e30:	4614      	mov	r4, r2
 8004e32:	460e      	mov	r6, r1
 8004e34:	b921      	cbnz	r1, 8004e40 <_realloc_r+0x14>
 8004e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	f7ff bf9c 	b.w	8004d78 <_malloc_r>
 8004e40:	b922      	cbnz	r2, 8004e4c <_realloc_r+0x20>
 8004e42:	f7ff ff49 	bl	8004cd8 <_free_r>
 8004e46:	4625      	mov	r5, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	f000 f830 	bl	8004eb0 <_malloc_usable_size_r>
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d20f      	bcs.n	8004e74 <_realloc_r+0x48>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ff8e 	bl	8004d78 <_malloc_r>
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0f2      	beq.n	8004e48 <_realloc_r+0x1c>
 8004e62:	4631      	mov	r1, r6
 8004e64:	4622      	mov	r2, r4
 8004e66:	f7ff fbef 	bl	8004648 <memcpy>
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff ff33 	bl	8004cd8 <_free_r>
 8004e72:	e7e9      	b.n	8004e48 <_realloc_r+0x1c>
 8004e74:	4635      	mov	r5, r6
 8004e76:	e7e7      	b.n	8004e48 <_realloc_r+0x1c>

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb ffd6 	bl	8000e34 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	2000de84 	.word	0x2000de84

08004e98 <__malloc_lock>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__malloc_lock+0x8>)
 8004e9a:	f000 b811 	b.w	8004ec0 <__retarget_lock_acquire_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	2000de8c 	.word	0x2000de8c

08004ea4 <__malloc_unlock>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <__malloc_unlock+0x8>)
 8004ea6:	f000 b80c 	b.w	8004ec2 <__retarget_lock_release_recursive>
 8004eaa:	bf00      	nop
 8004eac:	2000de8c 	.word	0x2000de8c

08004eb0 <_malloc_usable_size_r>:
 8004eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb4:	1f18      	subs	r0, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfbc      	itt	lt
 8004eba:	580b      	ldrlt	r3, [r1, r0]
 8004ebc:	18c0      	addlt	r0, r0, r3
 8004ebe:	4770      	bx	lr

08004ec0 <__retarget_lock_acquire_recursive>:
 8004ec0:	4770      	bx	lr

08004ec2 <__retarget_lock_release_recursive>:
 8004ec2:	4770      	bx	lr

08004ec4 <_init>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr

08004ed0 <_fini>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr
