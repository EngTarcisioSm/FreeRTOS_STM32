
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de2c  20000074  080060dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dea0  080060dc  0002dea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168ad  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e83  00000000  00000000  00036951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000397d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003765  00000000  00000000  0003ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001307d  00000000  00000000  0003f1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000960ae  00000000  00000000  00052252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e74  00000000  00000000  000e8354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b44 	.word	0x08005b44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005b44 	.word	0x08005b44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd9f 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f8e5 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f977 	bl	8000888 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f94b 	bl	8000834 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	xMutex = xSemaphoreCreateMutex();
 800059e:	2001      	movs	r0, #1
 80005a0:	f002 fc5b 	bl	8002e5a <xQueueCreateMutex>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a53      	ldr	r2, [pc, #332]	; (80006f4 <main+0x16c>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	//criação da queue
	//Criado uma fila com 5 espaços e cada espaço possui um tamanho de uint32_t. Função que Cria uma fila
	if ((xQueue = xQueueCreate(5, sizeof(struct AMessage*))) == NULL) {
 80005aa:	2200      	movs	r2, #0
 80005ac:	2104      	movs	r1, #4
 80005ae:	2005      	movs	r0, #5
 80005b0:	f002 fbe0 	bl	8002d74 <xQueueGenericCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a50      	ldr	r2, [pc, #320]	; (80006f8 <main+0x170>)
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <main+0x170>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <main+0x42>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005c2:	484e      	ldr	r0, [pc, #312]	; (80006fc <main+0x174>)
 80005c4:	f000 fa22 	bl	8000a0c <vPrintString>
 80005c8:	e002      	b.n	80005d0 <main+0x48>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005ca:	484d      	ldr	r0, [pc, #308]	; (8000700 <main+0x178>)
 80005cc:	f000 fa1e 	bl	8000a0c <vPrintString>
	}

	//Nova fila criada para a struct do tipo xData_t
	if ((xQueue_count = xQueueCreate(5, sizeof(xData_t))) == NULL) {
 80005d0:	2200      	movs	r2, #0
 80005d2:	210c      	movs	r1, #12
 80005d4:	2005      	movs	r0, #5
 80005d6:	f002 fbcd 	bl	8002d74 <xQueueGenericCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a49      	ldr	r2, [pc, #292]	; (8000704 <main+0x17c>)
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b48      	ldr	r3, [pc, #288]	; (8000704 <main+0x17c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <main+0x68>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005e8:	4844      	ldr	r0, [pc, #272]	; (80006fc <main+0x174>)
 80005ea:	f000 fa0f 	bl	8000a0c <vPrintString>
 80005ee:	e002      	b.n	80005f6 <main+0x6e>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005f0:	4843      	ldr	r0, [pc, #268]	; (8000700 <main+0x178>)
 80005f2:	f000 fa0b 	bl	8000a0c <vPrintString>
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);		//removido

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask_print_q, "Task Print Q",
 80005f6:	2300      	movs	r3, #0
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000604:	4940      	ldr	r1, [pc, #256]	; (8000708 <main+0x180>)
 8000606:	4841      	ldr	r0, [pc, #260]	; (800070c <main+0x184>)
 8000608:	f003 f852 	bl	80036b0 <xTaskCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d003      	beq.n	800061a <main+0x92>
	configMINIMAL_STACK_SIZE * 3, NULL, 2, NULL)) != pdTRUE) {
		vPrintString(
 8000612:	483f      	ldr	r0, [pc, #252]	; (8000710 <main+0x188>)
 8000614:	f000 f9fa 	bl	8000a0c <vPrintString>
 8000618:	e002      	b.n	8000620 <main+0x98>
				"Não foi possivel alocar tarefa Task Print Q no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print Q criada com sucesso!\n");
 800061a:	483e      	ldr	r0, [pc, #248]	; (8000714 <main+0x18c>)
 800061c:	f000 f9f6 	bl	8000a0c <vPrintString>
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE * 2, NULL,
 8000620:	2300      	movs	r3, #0
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2301      	movs	r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800062e:	493a      	ldr	r1, [pc, #232]	; (8000718 <main+0x190>)
 8000630:	483a      	ldr	r0, [pc, #232]	; (800071c <main+0x194>)
 8000632:	f003 f83d 	bl	80036b0 <xTaskCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d003      	beq.n	8000644 <main+0xbc>
			1, NULL)) != pdTRUE) {
		vPrintString(
 800063c:	4838      	ldr	r0, [pc, #224]	; (8000720 <main+0x198>)
 800063e:	f000 f9e5 	bl	8000a0c <vPrintString>
 8000642:	e002      	b.n	800064a <main+0xc2>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 8000644:	4837      	ldr	r0, [pc, #220]	; (8000724 <main+0x19c>)
 8000646:	f000 f9e1 	bl	8000a0c <vPrintString>
	}

	if ((xTaskCreate(vTask_print, "Task Print", configMINIMAL_STACK_SIZE * 3,
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000658:	4933      	ldr	r1, [pc, #204]	; (8000728 <main+0x1a0>)
 800065a:	4834      	ldr	r0, [pc, #208]	; (800072c <main+0x1a4>)
 800065c:	f003 f828 	bl	80036b0 <xTaskCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d003      	beq.n	800066e <main+0xe6>
	NULL, 1, NULL)) != pdTRUE) {
		vPrintString(
 8000666:	4832      	ldr	r0, [pc, #200]	; (8000730 <main+0x1a8>)
 8000668:	f000 f9d0 	bl	8000a0c <vPrintString>
 800066c:	e002      	b.n	8000674 <main+0xec>
				"Não foi possivel alocar tarefa Task Print no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print criada com sucesso!\n");
 800066e:	4831      	ldr	r0, [pc, #196]	; (8000734 <main+0x1ac>)
 8000670:	f000 f9cc 	bl	8000a0c <vPrintString>
	}

	if ((xTaskCreate(vTask1, "task_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 8000674:	2300      	movs	r3, #0
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2301      	movs	r3, #1
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	492d      	ldr	r1, [pc, #180]	; (8000738 <main+0x1b0>)
 8000682:	482e      	ldr	r0, [pc, #184]	; (800073c <main+0x1b4>)
 8000684:	f003 f814 	bl	80036b0 <xTaskCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d003      	beq.n	8000696 <main+0x10e>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_1 no escalonador\n");
 800068e:	482c      	ldr	r0, [pc, #176]	; (8000740 <main+0x1b8>)
 8000690:	f000 f9bc 	bl	8000a0c <vPrintString>
 8000694:	e002      	b.n	800069c <main+0x114>
	} else {
		vPrintString("Tarefa Task_1 criada com sucesso!\n");
 8000696:	482b      	ldr	r0, [pc, #172]	; (8000744 <main+0x1bc>)
 8000698:	f000 f9b8 	bl	8000a0c <vPrintString>
	}

	if ((xTaskCreate(vTask2, "task_2", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 800069c:	2300      	movs	r3, #0
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	2301      	movs	r3, #1
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	4927      	ldr	r1, [pc, #156]	; (8000748 <main+0x1c0>)
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <main+0x1c4>)
 80006ac:	f003 f800 	bl	80036b0 <xTaskCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d003      	beq.n	80006be <main+0x136>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <main+0x1c8>)
 80006b8:	f000 f9a8 	bl	8000a0c <vPrintString>
 80006bc:	e002      	b.n	80006c4 <main+0x13c>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80006be:	4825      	ldr	r0, [pc, #148]	; (8000754 <main+0x1cc>)
 80006c0:	f000 f9a4 	bl	8000a0c <vPrintString>
	}

	if ((xTaskCreate(vTask_print_count, "vTask_print_count",
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006d2:	4921      	ldr	r1, [pc, #132]	; (8000758 <main+0x1d0>)
 80006d4:	4821      	ldr	r0, [pc, #132]	; (800075c <main+0x1d4>)
 80006d6:	f002 ffeb 	bl	80036b0 <xTaskCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d003      	beq.n	80006e8 <main+0x160>
			configMINIMAL_STACK_SIZE * 3, NULL, 1, NULL)) != pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 80006e0:	481b      	ldr	r0, [pc, #108]	; (8000750 <main+0x1c8>)
 80006e2:	f000 f993 	bl	8000a0c <vPrintString>
 80006e6:	e002      	b.n	80006ee <main+0x166>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80006e8:	481a      	ldr	r0, [pc, #104]	; (8000754 <main+0x1cc>)
 80006ea:	f000 f98f 	bl	8000a0c <vPrintString>
	}

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ee:	f002 fa1d 	bl	8002b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006f2:	e7fe      	b.n	80006f2 <main+0x16a>
 80006f4:	2000ddf4 	.word	0x2000ddf4
 80006f8:	2000de40 	.word	0x2000de40
 80006fc:	08005b6c 	.word	0x08005b6c
 8000700:	08005b90 	.word	0x08005b90
 8000704:	2000ddf8 	.word	0x2000ddf8
 8000708:	08005bac 	.word	0x08005bac
 800070c:	08000ae1 	.word	0x08000ae1
 8000710:	08005bbc 	.word	0x08005bbc
 8000714:	08005bfc 	.word	0x08005bfc
 8000718:	08005c28 	.word	0x08005c28
 800071c:	08000c29 	.word	0x08000c29
 8000720:	08005c34 	.word	0x08005c34
 8000724:	08005c78 	.word	0x08005c78
 8000728:	08005ca0 	.word	0x08005ca0
 800072c:	08000bb5 	.word	0x08000bb5
 8000730:	08005cac 	.word	0x08005cac
 8000734:	08005ce8 	.word	0x08005ce8
 8000738:	08005b5c 	.word	0x08005b5c
 800073c:	08000d21 	.word	0x08000d21
 8000740:	08005d10 	.word	0x08005d10
 8000744:	08005d48 	.word	0x08005d48
 8000748:	08005b64 	.word	0x08005b64
 800074c:	08000d7d 	.word	0x08000d7d
 8000750:	08005d6c 	.word	0x08005d6c
 8000754:	08005da4 	.word	0x08005da4
 8000758:	08005dc8 	.word	0x08005dc8
 800075c:	08000cc1 	.word	0x08000cc1

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fdb8 	bl	80052e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <SystemClock_Config+0xd0>)
 80007ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d4:	2308      	movs	r3, #8
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007d8:	2354      	movs	r3, #84	; 0x54
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff65 	bl	80016b8 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f4:	f000 fb02 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f9c7 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000820:	f000 faec 	bl	8000dfc <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART1_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800086c:	f001 fe48 	bl	8002500 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 fac1 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000ddfc 	.word	0x2000ddfc
 8000884:	40011000 	.word	0x40011000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a54      	ldr	r2, [pc, #336]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a4d      	ldr	r2, [pc, #308]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a46      	ldr	r2, [pc, #280]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a3f      	ldr	r2, [pc, #252]	; (80009f8 <MX_GPIO_Init+0x170>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x170>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <MX_GPIO_Init+0x170>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a38      	ldr	r2, [pc, #224]	; (80009f8 <MX_GPIO_Init+0x170>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x170>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin|SEL_1_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2109      	movs	r1, #9
 800092e:	4833      	ldr	r0, [pc, #204]	; (80009fc <MX_GPIO_Init+0x174>)
 8000930:	f000 fe8e 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	4831      	ldr	r0, [pc, #196]	; (8000a00 <MX_GPIO_Init+0x178>)
 800093c:	f000 fe88 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2104      	movs	r1, #4
 8000944:	482f      	ldr	r0, [pc, #188]	; (8000a04 <MX_GPIO_Init+0x17c>)
 8000946:	f000 fe83 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOUT_LED1_Pin */
  GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4826      	ldr	r0, [pc, #152]	; (80009fc <MX_GPIO_Init+0x174>)
 8000962:	f000 fcd9 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_0_Pin */
  GPIO_InitStruct.Pin = SEL_0_Pin;
 8000966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4820      	ldr	r0, [pc, #128]	; (8000a00 <MX_GPIO_Init+0x178>)
 8000980:	f000 fcca 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_CFIG_Pin */
  GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x180>)
 800099a:	f000 fcbd 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_RX_485_Pin */
  GPIO_InitStruct.Pin = EN_RX_485_Pin;
 800099e:	2304      	movs	r3, #4
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_GPIO_Init+0x17c>)
 80009b6:	f000 fcaf 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_Pin */
  GPIO_InitStruct.Pin = SEL_1_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <MX_GPIO_Init+0x174>)
 80009d2:	f000 fca1 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_TARA_Pin */
  GPIO_InitStruct.Pin = DIN_TARA_Pin;
 80009d6:	2310      	movs	r3, #16
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x174>)
 80009ea:	f000 fc95 	bl	8001318 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020800 	.word	0x40020800

08000a0c <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <vPrintString+0x74>)
 8000a1c:	f000 fe18 	bl	8001650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2108      	movs	r1, #8
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <vPrintString+0x78>)
 8000a26:	f000 fe13 	bl	8001650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <vPrintString+0x7c>)
 8000a30:	f000 fe0e 	bl	8001650 <HAL_GPIO_WritePin>
	//taskENTER_CRITICAL();	//removido
	xSemaphoreTake(xMutex, portMAX_DELAY);
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <vPrintString+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fc03 	bl	8003248 <xQueueSemaphoreTake>
	{
		vUsartLib_Puts(pc_uartSend_f);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f834 	bl	8000ab0 <vUsartLib_Puts>
	}
	//taskEXIT_CRITICAL();		//removido
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	xSemaphoreGive(xMutex);
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <vPrintString+0x80>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	f002 fa1b 	bl	8002e8c <xQueueGenericSend>
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <vPrintString+0x74>)
 8000a5e:	f000 fdf7 	bl	8001650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2108      	movs	r1, #8
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <vPrintString+0x78>)
 8000a68:	f000 fdf2 	bl	8001650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <vPrintString+0x7c>)
 8000a72:	f000 fded 	bl	8001650 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	2000ddf4 	.word	0x2000ddf4

08000a90 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 8000a9c:	1cf9      	adds	r1, r7, #3
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f001 fd79 	bl	800259a <HAL_UART_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000ab8:	e007      	b.n	8000aca <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <vUsartLib_Puts+0x2c>)
 8000ac6:	f7ff ffe3 	bl	8000a90 <vUsartLib_Putc>
	while (*c_data) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f3      	bne.n	8000aba <vUsartLib_Puts+0xa>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000ddfc 	.word	0x2000ddfc

08000ae0 <vTask_print_q>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_print_q(void *pvParameters) {
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint32_t u32_status = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24

	struct AMessage xMessage =
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <vTask_print_q+0xbc>)
 8000aee:	f107 040c 	add.w	r4, r7, #12
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000afc:	6020      	str	r0, [r4, #0]
 8000afe:	3404      	adds	r4, #4
 8000b00:	7021      	strb	r1, [r4, #0]
			{ .c_messageID = 2, .c_data = "Curso RTOS STM32" };
	struct AMessage *px_message = &xMessage;
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	60bb      	str	r3, [r7, #8]

	vPrintString("Entrei na task Queue\n");
 8000b08:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <vTask_print_q+0xc0>)
 8000b0a:	f7ff ff7f 	bl	8000a0c <vPrintString>

	for (;;) {

		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <vTask_print_q+0xc4>)
 8000b12:	f000 fd85 	bl	8001620 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d11f      	bne.n	8000b5c <vTask_print_q+0x7c>
				&& !u32_status) {
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d11c      	bne.n	8000b5c <vTask_print_q+0x7c>
			//Aguarda um periodo para evitar o efeito bounce bottão pressionado
			vTaskDelay(50 / portTICK_PERIOD_MS);
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f002 ff02 	bl	800392c <vTaskDelay>

			if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b28:	2110      	movs	r1, #16
 8000b2a:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <vTask_print_q+0xc4>)
 8000b2c:	f000 fd78 	bl	8001620 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d110      	bne.n	8000b58 <vTask_print_q+0x78>
					&& !u32_status) {
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10d      	bne.n	8000b58 <vTask_print_q+0x78>
				//           xQueueSend(1:nome fila   2:endereço da variavel  3: timeout)
				if ( xQueueSend(xQueue, (void* )&px_message,
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <vTask_print_q+0xc8>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	f107 0108 	add.w	r1, r7, #8
 8000b44:	2300      	movs	r3, #0
 8000b46:	2232      	movs	r2, #50	; 0x32
 8000b48:	f002 f9a0 	bl	8002e8c <xQueueGenericSend>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <vTask_print_q+0x78>
						( 50 / portTICK_PERIOD_MS)) == pdPASS) {

					vPrintString(
 8000b52:	4816      	ldr	r0, [pc, #88]	; (8000bac <vTask_print_q+0xcc>)
 8000b54:	f7ff ff5a 	bl	8000a0c <vPrintString>
							"Valor da constante button enviado na queue! \n\n");
				}
			}

			u32_status = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24

		}

		//checa se o botão foi levantado
		if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && u32_status) {
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <vTask_print_q+0xc4>)
 8000b60:	f000 fd5e 	bl	8001620 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d014      	beq.n	8000b94 <vTask_print_q+0xb4>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d011      	beq.n	8000b94 <vTask_print_q+0xb4>

			vTaskDelay(50 / portTICK_PERIOD_MS);	//delay para debounce
 8000b70:	2032      	movs	r0, #50	; 0x32
 8000b72:	f002 fedb 	bl	800392c <vTaskDelay>

			if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b76:	2110      	movs	r1, #16
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <vTask_print_q+0xc4>)
 8000b7a:	f000 fd51 	bl	8001620 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <vTask_print_q+0xb4>
					&& u32_status) {
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <vTask_print_q+0xb4>

				vPrintString("Botão foi solto! \n\n");
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <vTask_print_q+0xd0>)
 8000b8c:	f7ff ff3e 	bl	8000a0c <vPrintString>
				u32_status = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}

		vTaskDelay(50 / portTICK_PERIOD_MS);
 8000b94:	2032      	movs	r0, #50	; 0x32
 8000b96:	f002 fec9 	bl	800392c <vTaskDelay>
		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b9a:	e7b8      	b.n	8000b0e <vTask_print_q+0x2e>
 8000b9c:	08005e3c 	.word	0x08005e3c
 8000ba0:	08005ddc 	.word	0x08005ddc
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	2000de40 	.word	0x2000de40
 8000bac:	08005df4 	.word	0x08005df4
 8000bb0:	08005e24 	.word	0x08005e24

08000bb4 <vTask_print>:
	}

	vTaskDelete( NULL); //caso ocorra algo que faça o for sair
}

void vTask_print(void *pvParameters) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	uint32_t u32_status;
	// char *ps_receve_string;
	struct AMessage *msg;

	vPrintString("Entrei na task Print\n");
 8000bbc:	4816      	ldr	r0, [pc, #88]	; (8000c18 <vTask_print+0x64>)
 8000bbe:	f7ff ff25 	bl	8000a0c <vPrintString>

	for (;;) {
		//xQueueReceive(1:nome da fila 2:endereço variavel de recebimento, 3:timeout)
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <vTask_print+0x68>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f107 010c 	add.w	r1, r7, #12
 8000bca:	f04f 32ff 	mov.w	r2, #4294967295
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fa5a 	bl	8003088 <xQueueReceive>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	617b      	str	r3, [r7, #20]
		if (u32_status == pdPASS) {
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d117      	bne.n	8000c0e <vTask_print+0x5a>
			//Para entender a necessidade de alocação dinamica de memoria
			//deixo o link abaixo, onde explica porque precisamos fazer um malloc
			//para alocar um buffer ao nosso ponteiro para uso na função sprintf
			//lembrando que iremos usar o pvPortMalloc que é safe thread para o FreeRTOS
			//https://stackoverflow.com/questions/19772667/c-sprintf-array-char-pointers
			char *pc_uartSend = pvPortMalloc(sizeof(msg) + 1);
 8000bde:	2005      	movs	r0, #5
 8000be0:	f004 f952 	bl	8004e88 <pvPortMalloc>
 8000be4:	6138      	str	r0, [r7, #16]

			sprintf(pc_uartSend,
					"Estrutura recebida : ID = %d , MSG = \" %s \" \n",
					msg->c_messageID, msg->c_data);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	781b      	ldrb	r3, [r3, #0]
			sprintf(pc_uartSend,
 8000bea:	461a      	mov	r2, r3
					msg->c_messageID, msg->c_data);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3301      	adds	r3, #1
			sprintf(pc_uartSend,
 8000bf0:	490b      	ldr	r1, [pc, #44]	; (8000c20 <vTask_print+0x6c>)
 8000bf2:	6938      	ldr	r0, [r7, #16]
 8000bf4:	f004 fb7e 	bl	80052f4 <siprintf>
			vPrintString(pc_uartSend);
 8000bf8:	6938      	ldr	r0, [r7, #16]
 8000bfa:	f7ff ff07 	bl	8000a0c <vPrintString>
			vPortFree(pc_uartSend);
 8000bfe:	6938      	ldr	r0, [r7, #16]
 8000c00:	f004 fa0e 	bl	8005020 <vPortFree>

			msg->c_messageID++;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	3201      	adds	r2, #1
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	701a      	strb	r2, [r3, #0]
		}
		vPrintString("Task print \r\n\n");
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <vTask_print+0x70>)
 8000c10:	f7ff fefc 	bl	8000a0c <vPrintString>
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000c14:	e7d5      	b.n	8000bc2 <vTask_print+0xe>
 8000c16:	bf00      	nop
 8000c18:	08005e54 	.word	0x08005e54
 8000c1c:	2000de40 	.word	0x2000de40
 8000c20:	08005e6c 	.word	0x08005e6c
 8000c24:	08005e9c 	.word	0x08005e9c

08000c28 <vTask_blink>:
		//vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
	vTaskDelete( NULL);
}

void vTask_blink(void *pvParameters) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0c2      	sub	sp, #264	; 0x108
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	6018      	str	r0, [r3, #0]

	char  c_buff[250];

	vPrintString("Entrando da Task de debug");
 8000c32:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <vTask_blink+0x80>)
 8000c34:	f7ff feea 	bl	8000a0c <vPrintString>

	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000c38:	2101      	movs	r1, #1
 8000c3a:	481c      	ldr	r0, [pc, #112]	; (8000cac <vTask_blink+0x84>)
 8000c3c:	f000 fd21 	bl	8001682 <HAL_GPIO_TogglePin>

		vTaskList(c_buff);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fe01 	bl	800484c <vTaskList>

		vPrintString("\n\r\nTask-------------State-----Prio------Stack---Num\r\n");
 8000c4a:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <vTask_blink+0x88>)
 8000c4c:	f7ff fede 	bl	8000a0c <vPrintString>
		vPrintString(c_buff);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fed9 	bl	8000a0c <vPrintString>
		vPrintString("\n");
 8000c5a:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <vTask_blink+0x8c>)
 8000c5c:	f7ff fed6 	bl	8000a0c <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	22fa      	movs	r2, #250	; 0xfa
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fb3b 	bl	80052e4 <memset>

		sprintf(c_buff, "Free Heap: %d bytes \n\n", xPortGetMinimumEverFreeHeapSize());
 8000c6e:	f004 fa39 	bl	80050e4 <xPortGetMinimumEverFreeHeapSize>
 8000c72:	4602      	mov	r2, r0
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	490f      	ldr	r1, [pc, #60]	; (8000cb8 <vTask_blink+0x90>)
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 fb3a 	bl	80052f4 <siprintf>
		vPrintString(c_buff);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fec1 	bl	8000a0c <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	22fa      	movs	r2, #250	; 0xfa
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fb26 	bl	80052e4 <memset>

		vPrintString("\n\n\n");
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <vTask_blink+0x94>)
 8000c9a:	f7ff feb7 	bl	8000a0c <vPrintString>
		vTaskDelay(5000 / portTICK_PERIOD_MS);
 8000c9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ca2:	f002 fe43 	bl	800392c <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000ca6:	e7c7      	b.n	8000c38 <vTask_blink+0x10>
 8000ca8:	08005eac 	.word	0x08005eac
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	08005ec8 	.word	0x08005ec8
 8000cb4:	08005f00 	.word	0x08005f00
 8000cb8:	08005f04 	.word	0x08005f04
 8000cbc:	08005f1c 	.word	0x08005f1c

08000cc0 <vTask_print_count>:
	}
	vTaskDelete( NULL);
}

void vTask_print_count(void *pvParameters) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
	xData_t x_count;

	vPrintString("vTask_Print_Count iniciada!");
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <vTask_print_count+0x54>)
 8000cca:	f7ff fe9f 	bl	8000a0c <vPrintString>

		/*
		 * Realiza a leitura da fila. Caso tenha algum valor a ser lido
		 * este será armazenado em count;
		 */
		xQueueReceive(xQueue_count, &x_count, portMAX_DELAY);
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <vTask_print_count+0x58>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f107 0108 	add.w	r1, r7, #8
 8000cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 f9d4 	bl	8003088 <xQueueReceive>

		char *pc_uartSend = pvPortMalloc(sizeof(x_count) + 1);
 8000ce0:	200d      	movs	r0, #13
 8000ce2:	f004 f8d1 	bl	8004e88 <pvPortMalloc>
 8000ce6:	6178      	str	r0, [r7, #20]

		sprintf(pc_uartSend,
				"Estrutura recebida : task_id = %d, task_name = \" %s \", value = %ld \n\n",
				x_count.c_task_id, x_count.task_name, x_count.u32_value);
 8000ce8:	7b3b      	ldrb	r3, [r7, #12]
		sprintf(pc_uartSend,
 8000cea:	4619      	mov	r1, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	4909      	ldr	r1, [pc, #36]	; (8000d1c <vTask_print_count+0x5c>)
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f004 fafb 	bl	80052f4 <siprintf>

		vPrintString(pc_uartSend);
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff fe84 	bl	8000a0c <vPrintString>

		vPortFree(pc_uartSend);
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f004 f98b 	bl	8005020 <vPortFree>

		vTaskDelay( 10 / portTICK_PERIOD_MS );
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f002 fe0e 	bl	800392c <vTaskDelay>
	for (;;) {
 8000d10:	e7dd      	b.n	8000cce <vTask_print_count+0xe>
 8000d12:	bf00      	nop
 8000d14:	08005f20 	.word	0x08005f20
 8000d18:	2000ddf8 	.word	0x2000ddf8
 8000d1c:	08005f3c 	.word	0x08005f3c

08000d20 <vTask1>:
	}
}

void vTask1(void *pvParameters) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	xData_t x_count_1 = {
 8000d28:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <vTask1+0x4c>)
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.task_name = "task_1"
	};

	char c_value_char[30];

	vPrintString("vTask_1 iniciada!");
 8000d34:	480e      	ldr	r0, [pc, #56]	; (8000d70 <vTask1+0x50>)
 8000d36:	f7ff fe69 	bl	8000a0c <vPrintString>
		 * Caso a fila esteja cheia, esta task será bloqueada
		 *
		 * Não é checada se foi enviado pois caso não consiga existe o portMAX_DELAY, a tarefa
		 * se manterá bloqueada até que seja enviada
		 */
		xQueueSend( xQueue_count, &x_count_1, portMAX_DELAY);
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <vTask1+0x54>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d42:	2300      	movs	r3, #0
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	f002 f8a0 	bl	8002e8c <xQueueGenericSend>

		sprintf(c_value_char, "vTask_1 envia: %ld \r\n", x_count_1.u32_value);
 8000d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4909      	ldr	r1, [pc, #36]	; (8000d78 <vTask1+0x58>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 facd 	bl	80052f4 <siprintf>

		x_count_1.u32_value++;
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		vTaskDelay( 1000 / portTICK_PERIOD_MS );
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f002 fde2 	bl	800392c <vTaskDelay>
		xQueueSend( xQueue_count, &x_count_1, portMAX_DELAY);
 8000d68:	e7e7      	b.n	8000d3a <vTask1+0x1a>
 8000d6a:	bf00      	nop
 8000d6c:	08005fb0 	.word	0x08005fb0
 8000d70:	08005f84 	.word	0x08005f84
 8000d74:	2000ddf8 	.word	0x2000ddf8
 8000d78:	08005f98 	.word	0x08005f98

08000d7c <vTask2>:
	}
}

void vTask2(void *pvParameters) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	xData_t x_count_2 = {
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <vTask2+0x4c>)
 8000d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.task_name = "task_2"
	};

	char c_value_char[30];

	vPrintString("vTask_2 iniciada!");
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <vTask2+0x50>)
 8000d92:	f7ff fe3b 	bl	8000a0c <vPrintString>
		 * Envia uma cópia do valor de count_1 na fila.
		 * Caso a fila esteja cheia, esta task será bloqueada
		 * Não é checada se foi enviado pois caso não consiga existe o portMAX_DELAY, a tarefa
		 * se manterá bloqueada até que seja enviada
		 */
		xQueueSend( xQueue_count, &x_count_2, portMAX_DELAY);
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <vTask2+0x54>)
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	f002 f872 	bl	8002e8c <xQueueGenericSend>

		sprintf(c_value_char, "vTask_2 envia: %ld \r\n", x_count_2.u32_value);
 8000da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4909      	ldr	r1, [pc, #36]	; (8000dd4 <vTask2+0x58>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fa9f 	bl	80052f4 <siprintf>

		x_count_2.u32_value++;
 8000db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db8:	3301      	adds	r3, #1
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c

		vTaskDelay( 1000 / portTICK_PERIOD_MS );
 8000dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc0:	f002 fdb4 	bl	800392c <vTaskDelay>
		xQueueSend( xQueue_count, &x_count_2, portMAX_DELAY);
 8000dc4:	e7e7      	b.n	8000d96 <vTask2+0x1a>
 8000dc6:	bf00      	nop
 8000dc8:	08005fe8 	.word	0x08005fe8
 8000dcc:	08005fbc 	.word	0x08005fbc
 8000dd0:	2000ddf8 	.word	0x2000ddf8
 8000dd4:	08005fd0 	.word	0x08005fd0

08000dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dea:	f000 f993 	bl	8001114 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40000800 	.word	0x40000800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_MspInit+0x54>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_MspInit+0x54>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x54>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_MspInit+0x54>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_MspInit+0x54>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_MspInit+0x54>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	210f      	movs	r1, #15
 8000e4a:	f06f 0001 	mvn.w	r0, #1
 8000e4e:	f000 fa39 	bl	80012c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12b      	bne.n	8000eda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eba:	23c0      	movs	r3, #192	; 0xc0
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_UART_MspInit+0x8c>)
 8000ed6:	f000 fa1f 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	201e      	movs	r0, #30
 8000f06:	f000 f9dd 	bl	80012c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f0a:	201e      	movs	r0, #30
 8000f0c:	f000 f9f6 	bl	80012fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_InitTick+0xa4>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_InitTick+0xa4>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_InitTick+0xa4>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f2c:	f107 0210 	add.w	r2, r7, #16
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f830 	bl	8001f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f3c:	f001 f806 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 8000f40:	4603      	mov	r3, r0
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_InitTick+0xa8>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9b      	lsrs	r3, r3, #18
 8000f50:	3b01      	subs	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_InitTick+0xac>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <HAL_InitTick+0xb0>)
 8000f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_InitTick+0xac>)
 8000f5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f60:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_InitTick+0xac>)
 8000f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f66:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_InitTick+0xac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_InitTick+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <HAL_InitTick+0xac>)
 8000f76:	f001 f843 	bl	8002000 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d104      	bne.n	8000f8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HAL_InitTick+0xac>)
 8000f82:	f001 f897 	bl	80020b4 <HAL_TIM_Base_Start_IT>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	2000de44 	.word	0x2000de44
 8000fa0:	40000800 	.word	0x40000800

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM4_IRQHandler+0x10>)
 8000fd6:	f001 f8cf 	bl	8002178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000de44 	.word	0x2000de44

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f004 f92e 	bl	8005274 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20010000 	.word	0x20010000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000090 	.word	0x20000090
 800104c:	2000dea0 	.word	0x2000dea0

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SystemInit+0x28>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <SystemInit+0x28>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SystemInit+0x28>)
 8001066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106a:	609a      	str	r2, [r3, #8]
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001082:	e003      	b.n	800108c <LoopCopyDataInit>

08001084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108a:	3104      	adds	r1, #4

0800108c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001094:	d3f6      	bcc.n	8001084 <CopyDataInit>
  ldr  r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001098:	e002      	b.n	80010a0 <LoopFillZerobss>

0800109a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800109c:	f842 3b04 	str.w	r3, [r2], #4

080010a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a4:	d3f9      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd3 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 f8e9 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa6b 	bl	8000588 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80010b8:	08006068 	.word	0x08006068
  ldr  r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80010c4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80010c8:	2000dea0 	.word	0x2000dea0

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f8d8 	bl	80012ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fef6 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fe80 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	2000de8c 	.word	0x2000de8c

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000de8c 	.word	0x2000de8c

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff4c 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d6:	f7ff ff61 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff ffb1 	bl	8001248 <NVIC_EncodePriority>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff80 	bl	80011f4 <__NVIC_SetPriority>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff54 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	e159      	b.n	80015e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8148 	bne.w	80015e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d005      	beq.n	800136a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	2b02      	cmp	r3, #2
 8001368:	d130      	bne.n	80013cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 0201 	and.w	r2, r3, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d017      	beq.n	8001408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	69b9      	ldr	r1, [r7, #24]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a2 	beq.w	80015e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <HAL_GPIO_Init+0x2e8>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a56      	ldr	r2, [pc, #344]	; (8001600 <HAL_GPIO_Init+0x2e8>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <HAL_GPIO_Init+0x2e8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ba:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_GPIO_Init+0x2ec>)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x202>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a48      	ldr	r2, [pc, #288]	; (800160c <HAL_GPIO_Init+0x2f4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x1fe>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a47      	ldr	r2, [pc, #284]	; (8001610 <HAL_GPIO_Init+0x2f8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x1fa>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a46      	ldr	r2, [pc, #280]	; (8001614 <HAL_GPIO_Init+0x2fc>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x1f6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a45      	ldr	r2, [pc, #276]	; (8001618 <HAL_GPIO_Init+0x300>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x1f2>
 8001506:	2304      	movs	r3, #4
 8001508:	e008      	b.n	800151c <HAL_GPIO_Init+0x204>
 800150a:	2307      	movs	r3, #7
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x204>
 800150e:	2303      	movs	r3, #3
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x204>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x204>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x204>
 800151a:	2300      	movs	r3, #0
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f002 0203 	and.w	r2, r2, #3
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4093      	lsls	r3, r2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <HAL_GPIO_Init+0x2ec>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_GPIO_Init+0x304>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <HAL_GPIO_Init+0x304>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_GPIO_Init+0x304>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001588:	4a24      	ldr	r2, [pc, #144]	; (800161c <HAL_GPIO_Init+0x304>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_GPIO_Init+0x304>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b2:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_GPIO_Init+0x304>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_GPIO_Init+0x304>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <HAL_GPIO_Init+0x304>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	f67f aea2 	bls.w	8001334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001694:	887a      	ldrh	r2, [r7, #2]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43d9      	mvns	r1, r3
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	400b      	ands	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e264      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d075      	beq.n	80017c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d6:	4ba3      	ldr	r3, [pc, #652]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d00c      	beq.n	80016fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e2:	4ba0      	ldr	r3, [pc, #640]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d112      	bne.n	8001714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016fa:	d10b      	bne.n	8001714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4b99      	ldr	r3, [pc, #612]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d05b      	beq.n	80017c0 <HAL_RCC_OscConfig+0x108>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d157      	bne.n	80017c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e23f      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x74>
 800171e:	4b91      	ldr	r3, [pc, #580]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a90      	ldr	r2, [pc, #576]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e01d      	b.n	8001768 <HAL_RCC_OscConfig+0xb0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a87      	ldr	r2, [pc, #540]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xb0>
 8001750:	4b84      	ldr	r3, [pc, #528]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a83      	ldr	r2, [pc, #524]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b81      	ldr	r3, [pc, #516]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a80      	ldr	r2, [pc, #512]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fce4 	bl	800113c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fce0 	bl	800113c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e204      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xc0>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fcd0 	bl	800113c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fccc 	bl	800113c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1f0      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	4b6c      	ldr	r3, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0xe8>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d063      	beq.n	8001896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017da:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d11c      	bne.n	8001820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x152>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1c4      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b56      	ldr	r3, [pc, #344]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4952      	ldr	r1, [pc, #328]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e03a      	b.n	8001896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <HAL_RCC_OscConfig+0x2b0>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff fc85 	bl	800113c <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fc81 	bl	800113c <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1a5      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4940      	ldr	r1, [pc, #256]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x2b0>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fc64 	bl	800113c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fc60 	bl	800113c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e184      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d030      	beq.n	8001904 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d016      	beq.n	80018d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_RCC_OscConfig+0x2b4>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fc44 	bl	800113c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fc40 	bl	800113c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e164      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x200>
 80018d6:	e015      	b.n	8001904 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_RCC_OscConfig+0x2b4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fc2d 	bl	800113c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc29 	bl	800113c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e14d      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a0 	beq.w	8001a52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x2b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d121      	bne.n	8001992 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x2b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_RCC_OscConfig+0x2b8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fbef 	bl	800113c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e011      	b.n	8001986 <HAL_RCC_OscConfig+0x2ce>
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000
 800196c:	42470e80 	.word	0x42470e80
 8001970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001974:	f7ff fbe2 	bl	800113c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e106      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x4e4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
 800199a:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a80      	ldr	r2, [pc, #512]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x32a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x312>
 80019b0:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a7a      	ldr	r2, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
 80019bc:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x32a>
 80019ca:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a74      	ldr	r2, [pc, #464]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a71      	ldr	r2, [pc, #452]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff fba7 	bl	800113c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fba3 	bl	800113c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0c5      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x33a>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb91 	bl	800113c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fb8d 	bl	800113c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0af      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a55      	ldr	r2, [pc, #340]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 809b 	beq.w	8001b92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d05c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d141      	bne.n	8001af4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x4ec>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb61 	bl	800113c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fb5d 	bl	800113c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e081      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	019b      	lsls	r3, r3, #6
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	061b      	lsls	r3, r3, #24
 8001ac0:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0x4ec>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fb36 	bl	800113c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff fb32 	bl	800113c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e056      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
 8001af2:	e04e      	b.n	8001b92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x4ec>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fb1f 	bl	800113c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff fb1b 	bl	800113c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e03f      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x44a>
 8001b20:	e037      	b.n	8001b92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e032      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d028      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d121      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d11a      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d111      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	42470060 	.word	0x42470060

08001ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0cc      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d90c      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b8      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	494d      	ldr	r1, [pc, #308]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d044      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d119      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e06f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e067      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4934      	ldr	r1, [pc, #208]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7ff fa50 	bl	800113c <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff fa4c 	bl	800113c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20c      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e032      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2e:	f000 f821 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	490a      	ldr	r1, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	5ccb      	ldrb	r3, [r1, r3]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f8ce 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	0800600c 	.word	0x0800600c
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8c:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d00d      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x40>
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	f200 80bd 	bhi.w	8001f18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x34>
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0x3a>
 8001da6:	e0b7      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001daa:	60bb      	str	r3, [r7, #8]
       break;
 8001dac:	e0b7      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001db0:	60bb      	str	r3, [r7, #8]
      break;
 8001db2:	e0b4      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db4:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d04d      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	ea02 0800 	and.w	r8, r2, r0
 8001de2:	ea03 0901 	and.w	r9, r3, r1
 8001de6:	4640      	mov	r0, r8
 8001de8:	4649      	mov	r1, r9
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	014b      	lsls	r3, r1, #5
 8001df4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df8:	0142      	lsls	r2, r0, #5
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	ebb0 0008 	subs.w	r0, r0, r8
 8001e02:	eb61 0109 	sbc.w	r1, r1, r9
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	018b      	lsls	r3, r1, #6
 8001e10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e14:	0182      	lsls	r2, r0, #6
 8001e16:	1a12      	subs	r2, r2, r0
 8001e18:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	00d9      	lsls	r1, r3, #3
 8001e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e2a:	00d0      	lsls	r0, r2, #3
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	eb12 0208 	adds.w	r2, r2, r8
 8001e34:	eb43 0309 	adc.w	r3, r3, r9
 8001e38:	f04f 0000 	mov.w	r0, #0
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	0299      	lsls	r1, r3, #10
 8001e42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e46:	0290      	lsls	r0, r2, #10
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f7fe fa1a 	bl	8000290 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e04a      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e76:	f04f 0100 	mov.w	r1, #0
 8001e7a:	ea02 0400 	and.w	r4, r2, r0
 8001e7e:	ea03 0501 	and.w	r5, r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	014b      	lsls	r3, r1, #5
 8001e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e94:	0142      	lsls	r2, r0, #5
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	1b00      	subs	r0, r0, r4
 8001e9c:	eb61 0105 	sbc.w	r1, r1, r5
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	018b      	lsls	r3, r1, #6
 8001eaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eae:	0182      	lsls	r2, r0, #6
 8001eb0:	1a12      	subs	r2, r2, r0
 8001eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb6:	f04f 0000 	mov.w	r0, #0
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	00d9      	lsls	r1, r3, #3
 8001ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ec4:	00d0      	lsls	r0, r2, #3
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	1912      	adds	r2, r2, r4
 8001ecc:	eb45 0303 	adc.w	r3, r5, r3
 8001ed0:	f04f 0000 	mov.w	r0, #0
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	0299      	lsls	r1, r3, #10
 8001eda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ede:	0290      	lsls	r0, r2, #10
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	f7fe f9ce 	bl	8000290 <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	60bb      	str	r3, [r7, #8]
      break;
 8001f16:	e002      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f1a:	60bb      	str	r3, [r7, #8]
      break;
 8001f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	00f42400 	.word	0x00f42400

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	0800601c 	.word	0x0800601c

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffdc 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	0800601c 	.word	0x0800601c

08001f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	220f      	movs	r2, #15
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_RCC_GetClockConfig+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e041      	b.n	8002096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f839 	bl	800209e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f000 f9ca 	bl	80023d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d001      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e044      	b.n	8002156 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_TIM_Base_Start_IT+0xb0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x6c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d013      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x6c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_TIM_Base_Start_IT+0xb4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x6c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_TIM_Base_Start_IT+0xb8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x6c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_TIM_Base_Start_IT+0xbc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x6c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_TIM_Base_Start_IT+0xc0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d010      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002142:	e007      	b.n	8002154 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40014000 	.word	0x40014000

08002178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b02      	cmp	r3, #2
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0202 	mvn.w	r2, #2
 80021a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8ee 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8e0 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f8f1 	bl	80023b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0204 	mvn.w	r2, #4
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8c4 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8b6 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8c7 	bl	80023b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b08      	cmp	r3, #8
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0208 	mvn.w	r2, #8
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f89a 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f88c 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f89d 	bl	80023b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b10      	cmp	r3, #16
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0210 	mvn.w	r2, #16
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2208      	movs	r2, #8
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f870 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f862 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f873 	bl	80023b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0201 	mvn.w	r2, #1
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fd6e 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b80      	cmp	r3, #128	; 0x80
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8e2 	bl	80024ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d10e      	bne.n	8002354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d107      	bne.n	8002354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800234c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f838 	bl	80023c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b20      	cmp	r3, #32
 800236e:	d107      	bne.n	8002380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0220 	mvn.w	r2, #32
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8ac 	bl	80024d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <TIM_Base_SetConfig+0xe4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00f      	beq.n	8002410 <TIM_Base_SetConfig+0x38>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d00b      	beq.n	8002410 <TIM_Base_SetConfig+0x38>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <TIM_Base_SetConfig+0xe8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <TIM_Base_SetConfig+0x38>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <TIM_Base_SetConfig+0xec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0x38>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <TIM_Base_SetConfig+0xf0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d108      	bne.n	8002422 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a25      	ldr	r2, [pc, #148]	; (80024bc <TIM_Base_SetConfig+0xe4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01b      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d017      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <TIM_Base_SetConfig+0xe8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <TIM_Base_SetConfig+0xec>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00f      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <TIM_Base_SetConfig+0xf0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00b      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <TIM_Base_SetConfig+0xf4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <TIM_Base_SetConfig+0xf8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0x8a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <TIM_Base_SetConfig+0xfc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d108      	bne.n	8002474 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <TIM_Base_SetConfig+0xe4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d103      	bne.n	80024a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	615a      	str	r2, [r3, #20]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800
 80024c8:	40000c00 	.word	0x40000c00
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40014400 	.word	0x40014400
 80024d4:	40014800 	.word	0x40014800

080024d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e03f      	b.n	8002592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fc9a 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f929 	bl	800279c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d17c      	bne.n	80026b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_UART_Transmit+0x2c>
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e075      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit+0x3e>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e06e      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2221      	movs	r2, #33	; 0x21
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ee:	f7fe fda5 	bl	800113c <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d108      	bne.n	800261c <HAL_UART_Transmit+0x82>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e003      	b.n	8002624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800262c:	e02a      	b.n	8002684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f840 	bl	80026be <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e036      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3302      	adds	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e007      	b.n	8002676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1cf      	bne.n	800262e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f810 	bl	80026be <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e006      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b090      	sub	sp, #64	; 0x40
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ce:	e050      	b.n	8002772 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d04c      	beq.n	8002772 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <UART_WaitOnFlagUntilTimeout+0x30>
 80026de:	f7fe fd2d 	bl	800113c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d241      	bcs.n	8002772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270e:	637a      	str	r2, [r7, #52]	; 0x34
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e5      	bne.n	80026ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	613b      	str	r3, [r7, #16]
   return(result);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002742:	623a      	str	r2, [r7, #32]
 8002744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	69f9      	ldr	r1, [r7, #28]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e5      	bne.n	8002722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e00f      	b.n	8002792 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	429a      	cmp	r2, r3
 800278e:	d09f      	beq.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3740      	adds	r7, #64	; 0x40
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a0:	b09f      	sub	sp, #124	; 0x7c
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	ea40 0301 	orr.w	r3, r0, r1
 80027bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027e0:	f021 010c 	bic.w	r1, r1, #12
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	6999      	ldr	r1, [r3, #24]
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	ea40 0301 	orr.w	r3, r0, r1
 8002804:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4bc5      	ldr	r3, [pc, #788]	; (8002b20 <UART_SetConfig+0x384>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d004      	beq.n	800281a <UART_SetConfig+0x7e>
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4bc3      	ldr	r3, [pc, #780]	; (8002b24 <UART_SetConfig+0x388>)
 8002816:	429a      	cmp	r2, r3
 8002818:	d103      	bne.n	8002822 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800281a:	f7ff fbab 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 800281e:	6778      	str	r0, [r7, #116]	; 0x74
 8002820:	e002      	b.n	8002828 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002822:	f7ff fb93 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 8002826:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002830:	f040 80b6 	bne.w	80029a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002836:	461c      	mov	r4, r3
 8002838:	f04f 0500 	mov.w	r5, #0
 800283c:	4622      	mov	r2, r4
 800283e:	462b      	mov	r3, r5
 8002840:	1891      	adds	r1, r2, r2
 8002842:	6439      	str	r1, [r7, #64]	; 0x40
 8002844:	415b      	adcs	r3, r3
 8002846:	647b      	str	r3, [r7, #68]	; 0x44
 8002848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800284c:	1912      	adds	r2, r2, r4
 800284e:	eb45 0303 	adc.w	r3, r5, r3
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	00d9      	lsls	r1, r3, #3
 800285c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002860:	00d0      	lsls	r0, r2, #3
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	1911      	adds	r1, r2, r4
 8002868:	6639      	str	r1, [r7, #96]	; 0x60
 800286a:	416b      	adcs	r3, r5
 800286c:	667b      	str	r3, [r7, #100]	; 0x64
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	1891      	adds	r1, r2, r2
 800287a:	63b9      	str	r1, [r7, #56]	; 0x38
 800287c:	415b      	adcs	r3, r3
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002884:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002888:	f7fd fd02 	bl	8000290 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <UART_SetConfig+0x38c>)
 8002892:	fba3 2302 	umull	r2, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	011e      	lsls	r6, r3, #4
 800289a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289c:	461c      	mov	r4, r3
 800289e:	f04f 0500 	mov.w	r5, #0
 80028a2:	4622      	mov	r2, r4
 80028a4:	462b      	mov	r3, r5
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	6339      	str	r1, [r7, #48]	; 0x30
 80028aa:	415b      	adcs	r3, r3
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028b2:	1912      	adds	r2, r2, r4
 80028b4:	eb45 0303 	adc.w	r3, r5, r3
 80028b8:	f04f 0000 	mov.w	r0, #0
 80028bc:	f04f 0100 	mov.w	r1, #0
 80028c0:	00d9      	lsls	r1, r3, #3
 80028c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c6:	00d0      	lsls	r0, r2, #3
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	1911      	adds	r1, r2, r4
 80028ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80028d0:	416b      	adcs	r3, r5
 80028d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	461a      	mov	r2, r3
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	1891      	adds	r1, r2, r2
 80028e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80028e2:	415b      	adcs	r3, r3
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028ee:	f7fd fccf 	bl	8000290 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <UART_SetConfig+0x38c>)
 80028f8:	fba3 1302 	umull	r1, r3, r3, r2
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	2164      	movs	r1, #100	; 0x64
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	3332      	adds	r3, #50	; 0x32
 800290a:	4a87      	ldr	r2, [pc, #540]	; (8002b28 <UART_SetConfig+0x38c>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002918:	441e      	add	r6, r3
 800291a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291c:	4618      	mov	r0, r3
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	1894      	adds	r4, r2, r2
 8002928:	623c      	str	r4, [r7, #32]
 800292a:	415b      	adcs	r3, r3
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002932:	1812      	adds	r2, r2, r0
 8002934:	eb41 0303 	adc.w	r3, r1, r3
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	f04f 0500 	mov.w	r5, #0
 8002940:	00dd      	lsls	r5, r3, #3
 8002942:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002946:	00d4      	lsls	r4, r2, #3
 8002948:	4622      	mov	r2, r4
 800294a:	462b      	mov	r3, r5
 800294c:	1814      	adds	r4, r2, r0
 800294e:	653c      	str	r4, [r7, #80]	; 0x50
 8002950:	414b      	adcs	r3, r1
 8002952:	657b      	str	r3, [r7, #84]	; 0x54
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	461a      	mov	r2, r3
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	1891      	adds	r1, r2, r2
 8002960:	61b9      	str	r1, [r7, #24]
 8002962:	415b      	adcs	r3, r3
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800296a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800296e:	f7fd fc8f 	bl	8000290 <__aeabi_uldivmod>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <UART_SetConfig+0x38c>)
 8002978:	fba3 1302 	umull	r1, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	2164      	movs	r1, #100	; 0x64
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	3332      	adds	r3, #50	; 0x32
 800298a:	4a67      	ldr	r2, [pc, #412]	; (8002b28 <UART_SetConfig+0x38c>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	f003 0207 	and.w	r2, r3, #7
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4432      	add	r2, r6
 800299c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800299e:	e0b9      	b.n	8002b14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a2:	461c      	mov	r4, r3
 80029a4:	f04f 0500 	mov.w	r5, #0
 80029a8:	4622      	mov	r2, r4
 80029aa:	462b      	mov	r3, r5
 80029ac:	1891      	adds	r1, r2, r2
 80029ae:	6139      	str	r1, [r7, #16]
 80029b0:	415b      	adcs	r3, r3
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029b8:	1912      	adds	r2, r2, r4
 80029ba:	eb45 0303 	adc.w	r3, r5, r3
 80029be:	f04f 0000 	mov.w	r0, #0
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	00d9      	lsls	r1, r3, #3
 80029c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029cc:	00d0      	lsls	r0, r2, #3
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	eb12 0804 	adds.w	r8, r2, r4
 80029d6:	eb43 0905 	adc.w	r9, r3, r5
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	008b      	lsls	r3, r1, #2
 80029ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029f2:	0082      	lsls	r2, r0, #2
 80029f4:	4640      	mov	r0, r8
 80029f6:	4649      	mov	r1, r9
 80029f8:	f7fd fc4a 	bl	8000290 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <UART_SetConfig+0x38c>)
 8002a02:	fba3 2302 	umull	r2, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	011e      	lsls	r6, r3, #4
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	1894      	adds	r4, r2, r2
 8002a18:	60bc      	str	r4, [r7, #8]
 8002a1a:	415b      	adcs	r3, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a22:	1812      	adds	r2, r2, r0
 8002a24:	eb41 0303 	adc.w	r3, r1, r3
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	f04f 0500 	mov.w	r5, #0
 8002a30:	00dd      	lsls	r5, r3, #3
 8002a32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a36:	00d4      	lsls	r4, r2, #3
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	1814      	adds	r4, r2, r0
 8002a3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a40:	414b      	adcs	r3, r1
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	008b      	lsls	r3, r1, #2
 8002a58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a5c:	0082      	lsls	r2, r0, #2
 8002a5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a62:	f7fd fc15 	bl	8000290 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <UART_SetConfig+0x38c>)
 8002a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2164      	movs	r1, #100	; 0x64
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	; 0x32
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <UART_SetConfig+0x38c>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	441e      	add	r6, r3
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	1894      	adds	r4, r2, r2
 8002a9a:	603c      	str	r4, [r7, #0]
 8002a9c:	415b      	adcs	r3, r3
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa4:	1812      	adds	r2, r2, r0
 8002aa6:	eb41 0303 	adc.w	r3, r1, r3
 8002aaa:	f04f 0400 	mov.w	r4, #0
 8002aae:	f04f 0500 	mov.w	r5, #0
 8002ab2:	00dd      	lsls	r5, r3, #3
 8002ab4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ab8:	00d4      	lsls	r4, r2, #3
 8002aba:	4622      	mov	r2, r4
 8002abc:	462b      	mov	r3, r5
 8002abe:	eb12 0a00 	adds.w	sl, r2, r0
 8002ac2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	008b      	lsls	r3, r1, #2
 8002ada:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ade:	0082      	lsls	r2, r0, #2
 8002ae0:	4650      	mov	r0, sl
 8002ae2:	4659      	mov	r1, fp
 8002ae4:	f7fd fbd4 	bl	8000290 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <UART_SetConfig+0x38c>)
 8002aee:	fba3 1302 	umull	r1, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2164      	movs	r1, #100	; 0x64
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	; 0x32
 8002b00:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <UART_SetConfig+0x38c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4432      	add	r2, r6
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	377c      	adds	r7, #124	; 0x7c
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1e:	bf00      	nop
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40011400 	.word	0x40011400
 8002b28:	51eb851f 	.word	0x51eb851f

08002b2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b30:	f000 ff96 	bl	8003a60 <vTaskStartScheduler>
  
  return osOK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f103 0208 	add.w	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0208 	add.w	r2, r3, #8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0208 	add.w	r2, r3, #8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d103      	bne.n	8002bfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e00c      	b.n	8002c16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e002      	b.n	8002c0a <vListInsert+0x2e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d2f6      	bcs.n	8002c04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6852      	ldr	r2, [r2, #4]
 8002c6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d103      	bne.n	8002c82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cce:	f001 fff9 	bl	8004cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	441a      	add	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	441a      	add	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	22ff      	movs	r2, #255	; 0xff
 8002d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d114      	bne.n	8002d4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01a      	beq.n	8002d62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3310      	adds	r3, #16
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f94d 	bl	8003fd0 <xTaskRemoveFromEventList>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <xQueueGenericReset+0xcc>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	e009      	b.n	8002d62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3310      	adds	r3, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fef1 	bl	8002b3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3324      	adds	r3, #36	; 0x24
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff feec 	bl	8002b3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d62:	f001 ffdf 	bl	8004d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	613b      	str	r3, [r7, #16]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3350      	adds	r3, #80	; 0x50
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 f86b 	bl	8004e88 <pvPortMalloc>
 8002db2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3350      	adds	r3, #80	; 0x50
 8002dc2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f805 	bl	8002de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e002      	b.n	8002e02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e0e:	2101      	movs	r1, #1
 8002e10:	69b8      	ldr	r0, [r7, #24]
 8002e12:	f7ff ff47 	bl	8002ca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002e46:	2300      	movs	r3, #0
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f81d 	bl	8002e8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e64:	2301      	movs	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6939      	ldr	r1, [r7, #16]
 8002e72:	6978      	ldr	r0, [r7, #20]
 8002e74:	f7ff ff7e 	bl	8002d74 <xQueueGenericCreate>
 8002e78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ffd3 	bl	8002e26 <prvInitialiseMutex>

		return xNewQueue;
 8002e80:	68fb      	ldr	r3, [r7, #12]
	}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08e      	sub	sp, #56	; 0x38
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueGenericSend+0x32>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <xQueueGenericSend+0x40>
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <xQueueGenericSend+0x44>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <xQueueGenericSend+0x46>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <xQueueGenericSend+0x60>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d103      	bne.n	8002efa <xQueueGenericSend+0x6e>
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <xQueueGenericSend+0x72>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <xQueueGenericSend+0x74>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericSend+0x8e>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	623b      	str	r3, [r7, #32]
}
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f1a:	f001 fac9 	bl	80044b0 <xTaskGetSchedulerState>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <xQueueGenericSend+0x9e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <xQueueGenericSend+0xa2>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <xQueueGenericSend+0xa4>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericSend+0xbe>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	61fb      	str	r3, [r7, #28]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f4a:	f001 febb 	bl	8004cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <xQueueGenericSend+0xd4>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d129      	bne.n	8002fb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f66:	f000 fa93 	bl	8003490 <prvCopyDataToQueue>
 8002f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 f829 	bl	8003fd0 <xTaskRemoveFromEventList>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <xQueueGenericSend+0x1f8>)
 8002f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	e00a      	b.n	8002fac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <xQueueGenericSend+0x1f8>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fac:	f001 feba 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e063      	b.n	800307c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fba:	f001 feb3 	bl	8004d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e05c      	b.n	800307c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f861 	bl	8004094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fd6:	f001 fea5 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fda:	f000 fd89 	bl	8003af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fde:	f001 fe71 	bl	8004cc4 <vPortEnterCritical>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d103      	bne.n	8002ff8 <xQueueGenericSend+0x16c>
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d103      	bne.n	800300e <xQueueGenericSend+0x182>
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800300e:	f001 fe89 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003012:	1d3a      	adds	r2, r7, #4
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f001 f850 	bl	80040c0 <xTaskCheckForTimeOut>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d124      	bne.n	8003070 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003028:	f000 fb2a 	bl	8003680 <prvIsQueueFull>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d018      	beq.n	8003064 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	3310      	adds	r3, #16
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f000 ffa4 	bl	8003f88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003042:	f000 fab5 	bl	80035b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003046:	f000 fd61 	bl	8003b0c <xTaskResumeAll>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f af7c 	bne.w	8002f4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <xQueueGenericSend+0x1f8>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	e772      	b.n	8002f4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003066:	f000 faa3 	bl	80035b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800306a:	f000 fd4f 	bl	8003b0c <xTaskResumeAll>
 800306e:	e76c      	b.n	8002f4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003072:	f000 fa9d 	bl	80035b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003076:	f000 fd49 	bl	8003b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800307a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800307c:	4618      	mov	r0, r3
 800307e:	3738      	adds	r7, #56	; 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	; 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003094:	2300      	movs	r3, #0
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <xQueueReceive+0x30>
	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	623b      	str	r3, [r7, #32]
}
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d103      	bne.n	80030c6 <xQueueReceive+0x3e>
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <xQueueReceive+0x42>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <xQueueReceive+0x44>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <xQueueReceive+0x5e>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	61fb      	str	r3, [r7, #28]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030e6:	f001 f9e3 	bl	80044b0 <xTaskGetSchedulerState>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <xQueueReceive+0x6e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <xQueueReceive+0x72>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <xQueueReceive+0x74>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueReceive+0x8e>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	61bb      	str	r3, [r7, #24]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003116:	f001 fdd5 	bl	8004cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01f      	beq.n	8003166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312a:	f000 fa1b 	bl	8003564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00f      	beq.n	800315e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	3310      	adds	r3, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f000 ff44 	bl	8003fd0 <xTaskRemoveFromEventList>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <xQueueReceive+0x1bc>)
 8003150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800315e:	f001 fde1 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 8003162:	2301      	movs	r3, #1
 8003164:	e069      	b.n	800323a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800316c:	f001 fdda 	bl	8004d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003170:	2300      	movs	r3, #0
 8003172:	e062      	b.n	800323a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800317a:	f107 0310 	add.w	r3, r7, #16
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff88 	bl	8004094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003184:	2301      	movs	r3, #1
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003188:	f001 fdcc 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800318c:	f000 fcb0 	bl	8003af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003190:	f001 fd98 	bl	8004cc4 <vPortEnterCritical>
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d103      	bne.n	80031aa <xQueueReceive+0x122>
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d103      	bne.n	80031c0 <xQueueReceive+0x138>
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c0:	f001 fdb0 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c4:	1d3a      	adds	r2, r7, #4
 80031c6:	f107 0310 	add.w	r3, r7, #16
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 ff77 	bl	80040c0 <xTaskCheckForTimeOut>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d123      	bne.n	8003220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 fa3b 	bl	8003654 <prvIsQueueEmpty>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fecb 	bl	8003f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f4:	f000 f9dc 	bl	80035b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031f8:	f000 fc88 	bl	8003b0c <xTaskResumeAll>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d189      	bne.n	8003116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <xQueueReceive+0x1bc>)
 8003204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	e780      	b.n	8003116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003216:	f000 f9cb 	bl	80035b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800321a:	f000 fc77 	bl	8003b0c <xTaskResumeAll>
 800321e:	e77a      	b.n	8003116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003222:	f000 f9c5 	bl	80035b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003226:	f000 fc71 	bl	8003b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800322a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322c:	f000 fa12 	bl	8003654 <prvIsQueueEmpty>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	f43f af6f 	beq.w	8003116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800323a:	4618      	mov	r0, r3
 800323c:	3730      	adds	r7, #48	; 0x30
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	623b      	str	r3, [r7, #32]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	61fb      	str	r3, [r7, #28]
}
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003298:	f001 f90a 	bl	80044b0 <xTaskGetSchedulerState>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <xQueueSemaphoreTake+0x60>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <xQueueSemaphoreTake+0x64>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <xQueueSemaphoreTake+0x66>
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	61bb      	str	r3, [r7, #24]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032c8:	f001 fcfc 	bl	8004cc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d024      	beq.n	8003322 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032e8:	f001 fb46 	bl	8004978 <pvTaskIncrementMutexHeldCount>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00f      	beq.n	800331a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	3310      	adds	r3, #16
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fe66 	bl	8003fd0 <xTaskRemoveFromEventList>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800330a:	4b54      	ldr	r3, [pc, #336]	; (800345c <xQueueSemaphoreTake+0x214>)
 800330c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800331a:	f001 fd03 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 800331e:	2301      	movs	r3, #1
 8003320:	e097      	b.n	8003452 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d111      	bne.n	800334c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	617b      	str	r3, [r7, #20]
}
 8003340:	bf00      	nop
 8003342:	e7fe      	b.n	8003342 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003344:	f001 fcee 	bl	8004d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003348:	2300      	movs	r3, #0
 800334a:	e082      	b.n	8003452 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fe9c 	bl	8004094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003360:	f001 fce0 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003364:	f000 fbc4 	bl	8003af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003368:	f001 fcac 	bl	8004cc4 <vPortEnterCritical>
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003372:	b25b      	sxtb	r3, r3
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d103      	bne.n	8003382 <xQueueSemaphoreTake+0x13a>
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003388:	b25b      	sxtb	r3, r3
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d103      	bne.n	8003398 <xQueueSemaphoreTake+0x150>
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003398:	f001 fcc4 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800339c:	463a      	mov	r2, r7
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fe8b 	bl	80040c0 <xTaskCheckForTimeOut>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d132      	bne.n	8003416 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033b2:	f000 f94f 	bl	8003654 <prvIsQueueEmpty>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d026      	beq.n	800340a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80033c4:	f001 fc7e 	bl	8004cc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 f88d 	bl	80044ec <xTaskPriorityInherit>
 80033d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80033d4:	f001 fca6 	bl	8004d24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	3324      	adds	r3, #36	; 0x24
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fdd1 	bl	8003f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e8:	f000 f8e2 	bl	80035b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033ec:	f000 fb8e 	bl	8003b0c <xTaskResumeAll>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f47f af68 	bne.w	80032c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <xQueueSemaphoreTake+0x214>)
 80033fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	e75e      	b.n	80032c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800340a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800340c:	f000 f8d0 	bl	80035b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003410:	f000 fb7c 	bl	8003b0c <xTaskResumeAll>
 8003414:	e758      	b.n	80032c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003418:	f000 f8ca 	bl	80035b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800341c:	f000 fb76 	bl	8003b0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003422:	f000 f917 	bl	8003654 <prvIsQueueEmpty>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	f43f af4d 	beq.w	80032c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003434:	f001 fc46 	bl	8004cc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800343a:	f000 f811 	bl	8003460 <prvGetDisinheritPriorityAfterTimeout>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003446:	4618      	mov	r0, r3
 8003448:	f001 f94c 	bl	80046e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800344c:	f001 fc6a 	bl	8004d24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003452:	4618      	mov	r0, r3
 8003454:	3738      	adds	r7, #56	; 0x38
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e001      	b.n	8003482 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003482:	68fb      	ldr	r3, [r7, #12]
	}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d14d      	bne.n	8003552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f88c 	bl	80045d8 <xTaskPriorityDisinherit>
 80034c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e043      	b.n	8003552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d119      	bne.n	8003504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6858      	ldr	r0, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	461a      	mov	r2, r3
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	f001 fef4 	bl	80052c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d32b      	bcc.n	8003552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	e026      	b.n	8003552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68d8      	ldr	r0, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	461a      	mov	r2, r3
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	f001 feda 	bl	80052c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	425b      	negs	r3, r3
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d207      	bcs.n	8003540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	425b      	negs	r3, r3
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d105      	bne.n	8003552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3b01      	subs	r3, #1
 8003550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800355a:	697b      	ldr	r3, [r7, #20]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	441a      	add	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	d303      	bcc.n	8003598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	461a      	mov	r2, r3
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	f001 fe90 	bl	80052c8 <memcpy>
	}
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035b8:	f001 fb84 	bl	8004cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c4:	e011      	b.n	80035ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d012      	beq.n	80035f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3324      	adds	r3, #36	; 0x24
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fcfc 	bl	8003fd0 <xTaskRemoveFromEventList>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035de:	f000 fdd1 	bl	8004184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	dce9      	bgt.n	80035c6 <prvUnlockQueue+0x16>
 80035f2:	e000      	b.n	80035f6 <prvUnlockQueue+0x46>
					break;
 80035f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035fe:	f001 fb91 	bl	8004d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003602:	f001 fb5f 	bl	8004cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800360c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800360e:	e011      	b.n	8003634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d012      	beq.n	800363e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3310      	adds	r3, #16
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fcd7 	bl	8003fd0 <xTaskRemoveFromEventList>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003628:	f000 fdac 	bl	8004184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800362c:	7bbb      	ldrb	r3, [r7, #14]
 800362e:	3b01      	subs	r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003638:	2b00      	cmp	r3, #0
 800363a:	dce9      	bgt.n	8003610 <prvUnlockQueue+0x60>
 800363c:	e000      	b.n	8003640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800363e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003648:	f001 fb6c 	bl	8004d24 <vPortExitCritical>
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800365c:	f001 fb32 	bl	8004cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e001      	b.n	8003672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003672:	f001 fb57 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003688:	f001 fb1c 	bl	8004cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	429a      	cmp	r2, r3
 8003696:	d102      	bne.n	800369e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e001      	b.n	80036a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036a2:	f001 fb3f 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 80036a6:	68fb      	ldr	r3, [r7, #12]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fbdf 	bl	8004e88 <pvPortMalloc>
 80036ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036d2:	205c      	movs	r0, #92	; 0x5c
 80036d4:	f001 fbd8 	bl	8004e88 <pvPortMalloc>
 80036d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
 80036e6:	e005      	b.n	80036f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f001 fc99 	bl	8005020 <vPortFree>
 80036ee:	e001      	b.n	80036f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	2300      	movs	r3, #0
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	9302      	str	r3, [sp, #8]
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f80e 	bl	8003732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003716:	69f8      	ldr	r0, [r7, #28]
 8003718:	f000 f89a 	bl	8003850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800371c:	2301      	movs	r3, #1
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e002      	b.n	8003728 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003728:	69bb      	ldr	r3, [r7, #24]
	}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	21a5      	movs	r1, #165	; 0xa5
 800374c:	f001 fdca 	bl	80052e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800375a:	3b01      	subs	r3, #1
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f023 0307 	bic.w	r3, r3, #7
 8003768:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	617b      	str	r3, [r7, #20]
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01f      	beq.n	80037d0 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e012      	b.n	80037bc <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	7819      	ldrb	r1, [r3, #0]
 800379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	3334      	adds	r3, #52	; 0x34
 80037a6:	460a      	mov	r2, r1
 80037a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d9e9      	bls.n	8003796 <prvInitialiseNewTask+0x64>
 80037c2:	e000      	b.n	80037c6 <prvInitialiseNewTask+0x94>
			{
				break;
 80037c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ce:	e003      	b.n	80037d8 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d901      	bls.n	80037e2 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037de:	2306      	movs	r3, #6
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2200      	movs	r2, #0
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	3304      	adds	r3, #4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f9be 	bl	8002b7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	3318      	adds	r3, #24
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f9b9 	bl	8002b7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	f1c3 0207 	rsb	r2, r3, #7
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	69b8      	ldr	r0, [r7, #24]
 8003832:	f001 f91b 	bl	8004a6c <pxPortInitialiseStack>
 8003836:	4602      	mov	r2, r0
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003848:	bf00      	nop
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003858:	f001 fa34 	bl	8004cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <prvAddNewTaskToReadyList+0xc0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <prvAddNewTaskToReadyList+0xc0>)
 8003864:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386e:	4a29      	ldr	r2, [pc, #164]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <prvAddNewTaskToReadyList+0xc0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d110      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800387c:	f000 fca6 	bl	80041cc <prvInitialiseTaskLists>
 8003880:	e00d      	b.n	800389e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d802      	bhi.n	800389e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003898:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389e:	4b1f      	ldr	r3, [pc, #124]	; (800391c <prvAddNewTaskToReadyList+0xcc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <prvAddNewTaskToReadyList+0xcc>)
 80038a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038a8:	4b1c      	ldr	r3, [pc, #112]	; (800391c <prvAddNewTaskToReadyList+0xcc>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <prvAddNewTaskToReadyList+0xd0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <prvAddNewTaskToReadyList+0xd0>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <prvAddNewTaskToReadyList+0xd4>)
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7ff f95b 	bl	8002b94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038de:	f001 fa21 	bl	8004d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d207      	bcs.n	8003908 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <prvAddNewTaskToReadyList+0xd8>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000194 	.word	0x20000194
 8003914:	20000094 	.word	0x20000094
 8003918:	200001a0 	.word	0x200001a0
 800391c:	200001b0 	.word	0x200001b0
 8003920:	2000019c 	.word	0x2000019c
 8003924:	20000098 	.word	0x20000098
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <vTaskDelay+0x60>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <vTaskDelay+0x30>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	60bb      	str	r3, [r7, #8]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800395c:	f000 f8c8 	bl	8003af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f001 f81c 	bl	80049a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003968:	f000 f8d0 	bl	8003b0c <xTaskResumeAll>
 800396c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <vTaskDelay+0x64>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200001bc 	.word	0x200001bc
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <eTaskGetState+0x28>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60bb      	str	r3, [r7, #8]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <eTaskGetState+0xb8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d102      	bne.n	80039cc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80039c6:	2300      	movs	r3, #0
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e03a      	b.n	8003a42 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80039cc:	f001 f97a 	bl	8004cc4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <eTaskGetState+0xbc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <eTaskGetState+0xc0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80039e2:	f001 f99f 	bl	8004d24 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d003      	beq.n	80039f6 <eTaskGetState+0x62>
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d102      	bne.n	80039fc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e022      	b.n	8003a42 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <eTaskGetState+0xc4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d112      	bne.n	8003a2a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e011      	b.n	8003a42 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e00e      	b.n	8003a42 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003a24:	2302      	movs	r3, #2
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e00b      	b.n	8003a42 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <eTaskGetState+0xc8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d002      	beq.n	8003a38 <eTaskGetState+0xa4>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003a38:	2304      	movs	r3, #4
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e001      	b.n	8003a42 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003a42:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000094 	.word	0x20000094
 8003a50:	2000014c 	.word	0x2000014c
 8003a54:	20000150 	.word	0x20000150
 8003a58:	20000180 	.word	0x20000180
 8003a5c:	20000168 	.word	0x20000168

08003a60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003a66:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <vTaskStartScheduler+0x78>)
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	491a      	ldr	r1, [pc, #104]	; (8003adc <vTaskStartScheduler+0x7c>)
 8003a74:	481a      	ldr	r0, [pc, #104]	; (8003ae0 <vTaskStartScheduler+0x80>)
 8003a76:	f7ff fe1b 	bl	80036b0 <xTaskCreate>
 8003a7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d116      	bne.n	8003ab0 <vTaskStartScheduler+0x50>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	60bb      	str	r3, [r7, #8]
}
 8003a94:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a96:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <vTaskStartScheduler+0x84>)
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <vTaskStartScheduler+0x88>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <vTaskStartScheduler+0x8c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aaa:	f001 f869 	bl	8004b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003aae:	e00e      	b.n	8003ace <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d10a      	bne.n	8003ace <vTaskStartScheduler+0x6e>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	607b      	str	r3, [r7, #4]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <vTaskStartScheduler+0x6c>
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200001b8 	.word	0x200001b8
 8003adc:	08005ff4 	.word	0x08005ff4
 8003ae0:	0800419d 	.word	0x0800419d
 8003ae4:	200001b4 	.word	0x200001b4
 8003ae8:	200001a0 	.word	0x200001a0
 8003aec:	20000198 	.word	0x20000198

08003af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <vTaskSuspendAll+0x18>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <vTaskSuspendAll+0x18>)
 8003afc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	200001bc 	.word	0x200001bc

08003b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <xTaskResumeAll+0x114>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	603b      	str	r3, [r7, #0]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b38:	f001 f8c4 	bl	8004cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b3c:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <xTaskResumeAll+0x114>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a37      	ldr	r2, [pc, #220]	; (8003c20 <xTaskResumeAll+0x114>)
 8003b44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <xTaskResumeAll+0x114>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d161      	bne.n	8003c12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b4e:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <xTaskResumeAll+0x118>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d05d      	beq.n	8003c12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b56:	e02e      	b.n	8003bb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <xTaskResumeAll+0x11c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3318      	adds	r3, #24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f872 	bl	8002c4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f86d 	bl	8002c4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <xTaskResumeAll+0x120>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <xTaskResumeAll+0x120>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <xTaskResumeAll+0x124>)
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe fff9 	bl	8002b94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <xTaskResumeAll+0x128>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <xTaskResumeAll+0x12c>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <xTaskResumeAll+0x11c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1cc      	bne.n	8003b58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bc4:	f000 fc54 	bl	8004470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <xTaskResumeAll+0x130>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d010      	beq.n	8003bf6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bd4:	f000 f8c4 	bl	8003d60 <xTaskIncrementTick>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <xTaskResumeAll+0x12c>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f1      	bne.n	8003bd4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <xTaskResumeAll+0x130>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <xTaskResumeAll+0x12c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <xTaskResumeAll+0x134>)
 8003c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c12:	f001 f887 	bl	8004d24 <vPortExitCritical>

	return xAlreadyYielded;
 8003c16:	68bb      	ldr	r3, [r7, #8]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	200001bc 	.word	0x200001bc
 8003c24:	20000194 	.word	0x20000194
 8003c28:	20000154 	.word	0x20000154
 8003c2c:	2000019c 	.word	0x2000019c
 8003c30:	20000098 	.word	0x20000098
 8003c34:	20000094 	.word	0x20000094
 8003c38:	200001a8 	.word	0x200001a8
 8003c3c:	200001a4 	.word	0x200001a4
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	2307      	movs	r3, #7
 8003c56:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8003c58:	f7ff ff4a 	bl	8003af0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003c5c:	4b3a      	ldr	r3, [pc, #232]	; (8003d48 <uxTaskGetSystemState+0x104>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d368      	bcc.n	8003d38 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1898      	adds	r0, r3, r2
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <uxTaskGetSystemState+0x108>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f000 fb71 	bl	8004374 <prvListTasksWithinSingleList>
 8003c92:	4602      	mov	r2, r0
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e2      	bne.n	8003c66 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <uxTaskGetSystemState+0x10c>)
 8003cb2:	6811      	ldr	r1, [r2, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fb5c 	bl	8004374 <prvListTasksWithinSingleList>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	; (8003d54 <uxTaskGetSystemState+0x110>)
 8003cd6:	6811      	ldr	r1, [r2, #0]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fb4a 	bl	8004374 <prvListTasksWithinSingleList>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	4917      	ldr	r1, [pc, #92]	; (8003d58 <uxTaskGetSystemState+0x114>)
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fb39 	bl	8004374 <prvListTasksWithinSingleList>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4413      	add	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	461a      	mov	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	490f      	ldr	r1, [pc, #60]	; (8003d5c <uxTaskGetSystemState+0x118>)
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fb28 	bl	8004374 <prvListTasksWithinSingleList>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4413      	add	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003d38:	f7ff fee8 	bl	8003b0c <xTaskResumeAll>

		return uxTask;
 8003d3c:	697b      	ldr	r3, [r7, #20]
	}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000194 	.word	0x20000194
 8003d4c:	20000098 	.word	0x20000098
 8003d50:	2000014c 	.word	0x2000014c
 8003d54:	20000150 	.word	0x20000150
 8003d58:	20000168 	.word	0x20000168
 8003d5c:	20000180 	.word	0x20000180

08003d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <xTaskIncrementTick+0x144>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 808e 	bne.w	8003e90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d74:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <xTaskIncrementTick+0x148>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <xTaskIncrementTick+0x148>)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d120      	bne.n	8003dca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <xTaskIncrementTick+0x14c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	603b      	str	r3, [r7, #0]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskIncrementTick+0x46>
 8003da8:	4b40      	ldr	r3, [pc, #256]	; (8003eac <xTaskIncrementTick+0x14c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <xTaskIncrementTick+0x150>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a3e      	ldr	r2, [pc, #248]	; (8003eac <xTaskIncrementTick+0x14c>)
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4a3e      	ldr	r2, [pc, #248]	; (8003eb0 <xTaskIncrementTick+0x150>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <xTaskIncrementTick+0x154>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a3c      	ldr	r2, [pc, #240]	; (8003eb4 <xTaskIncrementTick+0x154>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	f000 fb53 	bl	8004470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d348      	bcc.n	8003e66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <xTaskIncrementTick+0x14c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	601a      	str	r2, [r3, #0]
					break;
 8003de6:	e03e      	b.n	8003e66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de8:	4b30      	ldr	r3, [pc, #192]	; (8003eac <xTaskIncrementTick+0x14c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d203      	bcs.n	8003e08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e00:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e06:	e02e      	b.n	8003e66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe ff1e 	bl	8002c4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3318      	adds	r3, #24
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe ff15 	bl	8002c4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	2201      	movs	r2, #1
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <xTaskIncrementTick+0x15c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <xTaskIncrementTick+0x15c>)
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <xTaskIncrementTick+0x160>)
 8003e44:	441a      	add	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe fea1 	bl	8002b94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <xTaskIncrementTick+0x164>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3b9      	bcc.n	8003dd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e64:	e7b6      	b.n	8003dd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <xTaskIncrementTick+0x164>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4914      	ldr	r1, [pc, #80]	; (8003ec0 <xTaskIncrementTick+0x160>)
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d901      	bls.n	8003e82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <xTaskIncrementTick+0x168>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e004      	b.n	8003e9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <xTaskIncrementTick+0x16c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <xTaskIncrementTick+0x16c>)
 8003e98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e9a:	697b      	ldr	r3, [r7, #20]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200001bc 	.word	0x200001bc
 8003ea8:	20000198 	.word	0x20000198
 8003eac:	2000014c 	.word	0x2000014c
 8003eb0:	20000150 	.word	0x20000150
 8003eb4:	200001ac 	.word	0x200001ac
 8003eb8:	200001b4 	.word	0x200001b4
 8003ebc:	2000019c 	.word	0x2000019c
 8003ec0:	20000098 	.word	0x20000098
 8003ec4:	20000094 	.word	0x20000094
 8003ec8:	200001a8 	.word	0x200001a8
 8003ecc:	200001a4 	.word	0x200001a4

08003ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <vTaskSwitchContext+0xa4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <vTaskSwitchContext+0xa8>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ee4:	e03f      	b.n	8003f66 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <vTaskSwitchContext+0xa8>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <vTaskSwitchContext+0xac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003efa:	7afb      	ldrb	r3, [r7, #11]
 8003efc:	f1c3 031f 	rsb	r3, r3, #31
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	491f      	ldr	r1, [pc, #124]	; (8003f80 <vTaskSwitchContext+0xb0>)
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	607b      	str	r3, [r7, #4]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <vTaskSwitchContext+0x5a>
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <vTaskSwitchContext+0xb0>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d104      	bne.n	8003f5c <vTaskSwitchContext+0x8c>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <vTaskSwitchContext+0xb4>)
 8003f64:	6013      	str	r3, [r2, #0]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	200001bc 	.word	0x200001bc
 8003f78:	200001a8 	.word	0x200001a8
 8003f7c:	2000019c 	.word	0x2000019c
 8003f80:	20000098 	.word	0x20000098
 8003f84:	20000094 	.word	0x20000094

08003f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <vTaskPlaceOnEventList+0x44>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe fe10 	bl	8002bdc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	6838      	ldr	r0, [r7, #0]
 8003fc0:	f000 fcee 	bl	80049a0 <prvAddCurrentTaskToDelayedList>
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000094 	.word	0x20000094

08003fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	60fb      	str	r3, [r7, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3318      	adds	r3, #24
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fe24 	bl	8002c4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <xTaskRemoveFromEventList+0xac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11c      	bne.n	8004048 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	3304      	adds	r3, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fe1b 	bl	8002c4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	2201      	movs	r2, #1
 800401e:	409a      	lsls	r2, r3
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <xTaskRemoveFromEventList+0xb0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	4a16      	ldr	r2, [pc, #88]	; (8004080 <xTaskRemoveFromEventList+0xb0>)
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <xTaskRemoveFromEventList+0xb4>)
 8004038:	441a      	add	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe fda7 	bl	8002b94 <vListInsertEnd>
 8004046:	e005      	b.n	8004054 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3318      	adds	r3, #24
 800404c:	4619      	mov	r1, r3
 800404e:	480e      	ldr	r0, [pc, #56]	; (8004088 <xTaskRemoveFromEventList+0xb8>)
 8004050:	f7fe fda0 	bl	8002b94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <xTaskRemoveFromEventList+0xbc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	429a      	cmp	r2, r3
 8004060:	d905      	bls.n	800406e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <xTaskRemoveFromEventList+0xc0>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e001      	b.n	8004072 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200001bc 	.word	0x200001bc
 8004080:	2000019c 	.word	0x2000019c
 8004084:	20000098 	.word	0x20000098
 8004088:	20000154 	.word	0x20000154
 800408c:	20000094 	.word	0x20000094
 8004090:	200001a8 	.word	0x200001a8

08004094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <vTaskInternalSetTimeOutState+0x24>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <vTaskInternalSetTimeOutState+0x28>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	200001ac 	.word	0x200001ac
 80040bc:	20000198 	.word	0x20000198

080040c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	613b      	str	r3, [r7, #16]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004102:	f000 fddf 	bl	8004cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <xTaskCheckForTimeOut+0xbc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d102      	bne.n	8004126 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e023      	b.n	800416e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <xTaskCheckForTimeOut+0xc0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d007      	beq.n	8004142 <xTaskCheckForTimeOut+0x82>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e015      	b.n	800416e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	429a      	cmp	r2, r3
 800414a:	d20b      	bcs.n	8004164 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff9b 	bl	8004094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e004      	b.n	800416e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800416e:	f000 fdd9 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 8004172:	69fb      	ldr	r3, [r7, #28]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000198 	.word	0x20000198
 8004180:	200001ac 	.word	0x200001ac

08004184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <vTaskMissedYield+0x14>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	200001a8 	.word	0x200001a8

0800419c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041a4:	f000 f852 	bl	800424c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <prvIdleTask+0x28>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d9f9      	bls.n	80041a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <prvIdleTask+0x2c>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041c0:	e7f0      	b.n	80041a4 <prvIdleTask+0x8>
 80041c2:	bf00      	nop
 80041c4:	20000098 	.word	0x20000098
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e00c      	b.n	80041f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <prvInitialiseTaskLists+0x60>)
 80041e4:	4413      	add	r3, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fca7 	bl	8002b3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3301      	adds	r3, #1
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d9ef      	bls.n	80041d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041f8:	480d      	ldr	r0, [pc, #52]	; (8004230 <prvInitialiseTaskLists+0x64>)
 80041fa:	f7fe fc9e 	bl	8002b3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041fe:	480d      	ldr	r0, [pc, #52]	; (8004234 <prvInitialiseTaskLists+0x68>)
 8004200:	f7fe fc9b 	bl	8002b3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004204:	480c      	ldr	r0, [pc, #48]	; (8004238 <prvInitialiseTaskLists+0x6c>)
 8004206:	f7fe fc98 	bl	8002b3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800420a:	480c      	ldr	r0, [pc, #48]	; (800423c <prvInitialiseTaskLists+0x70>)
 800420c:	f7fe fc95 	bl	8002b3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004210:	480b      	ldr	r0, [pc, #44]	; (8004240 <prvInitialiseTaskLists+0x74>)
 8004212:	f7fe fc92 	bl	8002b3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <prvInitialiseTaskLists+0x78>)
 8004218:	4a05      	ldr	r2, [pc, #20]	; (8004230 <prvInitialiseTaskLists+0x64>)
 800421a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <prvInitialiseTaskLists+0x7c>)
 800421e:	4a05      	ldr	r2, [pc, #20]	; (8004234 <prvInitialiseTaskLists+0x68>)
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000098 	.word	0x20000098
 8004230:	20000124 	.word	0x20000124
 8004234:	20000138 	.word	0x20000138
 8004238:	20000154 	.word	0x20000154
 800423c:	20000168 	.word	0x20000168
 8004240:	20000180 	.word	0x20000180
 8004244:	2000014c 	.word	0x2000014c
 8004248:	20000150 	.word	0x20000150

0800424c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004252:	e019      	b.n	8004288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004254:	f000 fd36 	bl	8004cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004258:	4b10      	ldr	r3, [pc, #64]	; (800429c <prvCheckTasksWaitingTermination+0x50>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fcf2 	bl	8002c4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <prvCheckTasksWaitingTermination+0x54>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3b01      	subs	r3, #1
 8004270:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <prvCheckTasksWaitingTermination+0x54>)
 8004272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <prvCheckTasksWaitingTermination+0x58>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3b01      	subs	r3, #1
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <prvCheckTasksWaitingTermination+0x58>)
 800427c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800427e:	f000 fd51 	bl	8004d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8e4 	bl	8004450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <prvCheckTasksWaitingTermination+0x58>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e1      	bne.n	8004254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000168 	.word	0x20000168
 80042a0:	20000194 	.word	0x20000194
 80042a4:	2000017c 	.word	0x2000017c

080042a8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <vTaskGetInfo+0x1a>
 80042bc:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <vTaskGetInfo+0xc8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	e000      	b.n	80042c4 <vTaskGetInfo+0x1c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d01a      	beq.n	8004338 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8004302:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <vTaskGetInfo+0xc8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	429a      	cmp	r2, r3
 800430a:	d103      	bne.n	8004314 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	731a      	strb	r2, [r3, #12]
 8004312:	e018      	b.n	8004346 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d112      	bne.n	8004346 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8004320:	f7ff fbe6 	bl	8003af0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2202      	movs	r2, #2
 8004330:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8004332:	f7ff fbeb 	bl	8003b0c <xTaskResumeAll>
 8004336:	e006      	b.n	8004346 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004338:	6978      	ldr	r0, [r7, #20]
 800433a:	f7ff fb2b 	bl	8003994 <eTaskGetState>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f861 	bl	8004418 <prvTaskCheckFreeStackSpace>
 8004356:	4603      	mov	r3, r0
 8004358:	461a      	mov	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800435e:	e002      	b.n	8004366 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	841a      	strh	r2, [r3, #32]
	}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000094 	.word	0x20000094

08004374 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03f      	beq.n	800440e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	3308      	adds	r3, #8
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d104      	bne.n	80043b2 <prvListTasksWithinSingleList+0x3e>
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	3308      	adds	r3, #8
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d104      	bne.n	80043de <prvListTasksWithinSingleList+0x6a>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	461a      	mov	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1899      	adds	r1, r3, r2
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2201      	movs	r2, #1
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff54 	bl	80042a8 <vTaskGetInfo>
				uxTask++;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	3301      	adds	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	429a      	cmp	r2, r3
 800440c:	d1d5      	bne.n	80043ba <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004410:	4618      	mov	r0, r3
 8004412:	3728      	adds	r7, #40	; 0x28
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004424:	e005      	b.n	8004432 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3301      	adds	r3, #1
 800442a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2ba5      	cmp	r3, #165	; 0xa5
 8004438:	d0f5      	beq.n	8004426 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	b29b      	uxth	r3, r3
	}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fddf 	bl	8005020 <vPortFree>
			vPortFree( pxTCB );
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fddc 	bl	8005020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <prvResetNextTaskUnblockTime+0x38>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <prvResetNextTaskUnblockTime+0x3c>)
 8004482:	f04f 32ff 	mov.w	r2, #4294967295
 8004486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004488:	e008      	b.n	800449c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <prvResetNextTaskUnblockTime+0x38>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <prvResetNextTaskUnblockTime+0x3c>)
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	2000014c 	.word	0x2000014c
 80044ac:	200001b4 	.word	0x200001b4

080044b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <xTaskGetSchedulerState+0x34>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044be:	2301      	movs	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e008      	b.n	80044d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <xTaskGetSchedulerState+0x38>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044cc:	2302      	movs	r3, #2
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	e001      	b.n	80044d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044d6:	687b      	ldr	r3, [r7, #4]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	200001a0 	.word	0x200001a0
 80044e8:	200001bc 	.word	0x200001bc

080044ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d05e      	beq.n	80045c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	4b31      	ldr	r3, [pc, #196]	; (80045cc <xTaskPriorityInherit+0xe0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d24e      	bcs.n	80045ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db06      	blt.n	8004526 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004518:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <xTaskPriorityInherit+0xe0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	f1c3 0207 	rsb	r2, r3, #7
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6959      	ldr	r1, [r3, #20]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <xTaskPriorityInherit+0xe4>)
 8004538:	4413      	add	r3, r2
 800453a:	4299      	cmp	r1, r3
 800453c:	d12f      	bne.n	800459e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fb83 	bl	8002c4e <uxListRemove>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	2201      	movs	r2, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43da      	mvns	r2, r3
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <xTaskPriorityInherit+0xe8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4013      	ands	r3, r2
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <xTaskPriorityInherit+0xe8>)
 8004562:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <xTaskPriorityInherit+0xe0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	2201      	movs	r2, #1
 8004574:	409a      	lsls	r2, r3
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <xTaskPriorityInherit+0xe8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <xTaskPriorityInherit+0xe8>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <xTaskPriorityInherit+0xe4>)
 800458e:	441a      	add	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fafc 	bl	8002b94 <vListInsertEnd>
 800459c:	e004      	b.n	80045a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <xTaskPriorityInherit+0xe0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e008      	b.n	80045c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <xTaskPriorityInherit+0xe0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d201      	bcs.n	80045c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045c0:	68fb      	ldr	r3, [r7, #12]
	}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000094 	.word	0x20000094
 80045d0:	20000098 	.word	0x20000098
 80045d4:	2000019c 	.word	0x2000019c

080045d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d06e      	beq.n	80046cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ee:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <xTaskPriorityDisinherit+0x100>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d00a      	beq.n	800460e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60bb      	str	r3, [r7, #8]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	429a      	cmp	r2, r3
 8004640:	d044      	beq.n	80046cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	d140      	bne.n	80046cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3304      	adds	r3, #4
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe fafd 	bl	8002c4e <uxListRemove>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d115      	bne.n	8004686 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	491f      	ldr	r1, [pc, #124]	; (80046dc <xTaskPriorityDisinherit+0x104>)
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xTaskPriorityDisinherit+0xae>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	2201      	movs	r2, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43da      	mvns	r2, r3
 800467c:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <xTaskPriorityDisinherit+0x108>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4013      	ands	r3, r2
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <xTaskPriorityDisinherit+0x108>)
 8004684:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	f1c3 0207 	rsb	r2, r3, #7
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	2201      	movs	r2, #1
 80046a0:	409a      	lsls	r2, r3
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <xTaskPriorityDisinherit+0x108>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <xTaskPriorityDisinherit+0x108>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a08      	ldr	r2, [pc, #32]	; (80046dc <xTaskPriorityDisinherit+0x104>)
 80046ba:	441a      	add	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7fe fa66 	bl	8002b94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046cc:	697b      	ldr	r3, [r7, #20]
	}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000094 	.word	0x20000094
 80046dc:	20000098 	.word	0x20000098
 80046e0:	2000019c 	.word	0x2000019c

080046e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046f2:	2301      	movs	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d077      	beq.n	80047ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d902      	bls.n	800472a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e002      	b.n	8004730 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	429a      	cmp	r2, r3
 8004738:	d058      	beq.n	80047ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d153      	bne.n	80047ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	429a      	cmp	r2, r3
 800474c:	d10a      	bne.n	8004764 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	60bb      	str	r3, [r7, #8]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	db04      	blt.n	8004782 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f1c3 0207 	rsb	r2, r3, #7
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	6959      	ldr	r1, [r3, #20]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004792:	4413      	add	r3, r2
 8004794:	4299      	cmp	r1, r3
 8004796:	d129      	bne.n	80047ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fa56 	bl	8002c4e <uxListRemove>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4013      	ands	r3, r2
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	4a0b      	ldr	r2, [pc, #44]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a06      	ldr	r2, [pc, #24]	; (80047f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80047de:	441a      	add	r2, r3
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe f9d4 	bl	8002b94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047ec:	bf00      	nop
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000094 	.word	0x20000094
 80047f8:	20000098 	.word	0x20000098
 80047fc:	2000019c 	.word	0x2000019c

08004800 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fd91 	bl	8005334 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fb fce4 	bl	80001e0 <strlen>
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	e007      	b.n	800482c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	2220      	movs	r2, #32
 8004824:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b0e      	cmp	r3, #14
 8004830:	d9f4      	bls.n	800481c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
	}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800485a:	4b45      	ldr	r3, [pc, #276]	; (8004970 <vTaskList+0x124>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004860:	4b43      	ldr	r3, [pc, #268]	; (8004970 <vTaskList+0x124>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fb0b 	bl	8004e88 <pvPortMalloc>
 8004872:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d076      	beq.n	8004968 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800487a:	2200      	movs	r2, #0
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	68b8      	ldr	r0, [r7, #8]
 8004880:	f7ff f9e0 	bl	8003c44 <uxTaskGetSystemState>
 8004884:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e066      	b.n	800495a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4413      	add	r3, r2
 800489c:	7b1b      	ldrb	r3, [r3, #12]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d81b      	bhi.n	80048da <vTaskList+0x8e>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <vTaskList+0x5c>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048bd 	.word	0x080048bd
 80048ac:	080048c3 	.word	0x080048c3
 80048b0:	080048c9 	.word	0x080048c9
 80048b4:	080048cf 	.word	0x080048cf
 80048b8:	080048d5 	.word	0x080048d5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80048bc:	2358      	movs	r3, #88	; 0x58
 80048be:	74fb      	strb	r3, [r7, #19]
										break;
 80048c0:	e00e      	b.n	80048e0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 80048c2:	2352      	movs	r3, #82	; 0x52
 80048c4:	74fb      	strb	r3, [r7, #19]
										break;
 80048c6:	e00b      	b.n	80048e0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80048c8:	2342      	movs	r3, #66	; 0x42
 80048ca:	74fb      	strb	r3, [r7, #19]
										break;
 80048cc:	e008      	b.n	80048e0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80048ce:	2353      	movs	r3, #83	; 0x53
 80048d0:	74fb      	strb	r3, [r7, #19]
										break;
 80048d2:	e005      	b.n	80048e0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80048d4:	2344      	movs	r3, #68	; 0x44
 80048d6:	74fb      	strb	r3, [r7, #19]
										break;
 80048d8:	e002      	b.n	80048e0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80048da:	2300      	movs	r3, #0
 80048dc:	74fb      	strb	r3, [r7, #19]
										break;
 80048de:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4413      	add	r3, r2
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff83 	bl	8004800 <prvWriteNameToBuffer>
 80048fa:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80048fc:	7cf9      	ldrb	r1, [r7, #19]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	6918      	ldr	r0, [r3, #16]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4413      	add	r3, r2
 8004920:	8c1b      	ldrh	r3, [r3, #32]
 8004922:	461c      	mov	r4, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4413      	add	r3, r2
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	9400      	str	r4, [sp, #0]
 800493a:	4603      	mov	r3, r0
 800493c:	460a      	mov	r2, r1
 800493e:	490d      	ldr	r1, [pc, #52]	; (8004974 <vTaskList+0x128>)
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fcd7 	bl	80052f4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fb fc4a 	bl	80001e0 <strlen>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3301      	adds	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	429a      	cmp	r2, r3
 8004960:	d394      	bcc.n	800488c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8004962:	68b8      	ldr	r0, [r7, #8]
 8004964:	f000 fb5c 	bl	8005020 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}
 8004970:	20000194 	.word	0x20000194
 8004974:	08005ffc 	.word	0x08005ffc

08004978 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <pvTaskIncrementMutexHeldCount+0x24>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <pvTaskIncrementMutexHeldCount+0x24>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800498a:	3201      	adds	r2, #1
 800498c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800498e:	4b03      	ldr	r3, [pc, #12]	; (800499c <pvTaskIncrementMutexHeldCount+0x24>)
 8004990:	681b      	ldr	r3, [r3, #0]
	}
 8004992:	4618      	mov	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000094 	.word	0x20000094

080049a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049aa:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049b0:	4b28      	ldr	r3, [pc, #160]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe f949 	bl	8002c4e <uxListRemove>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	2201      	movs	r2, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43da      	mvns	r2, r3
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4013      	ands	r3, r2
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d10a      	bne.n	80049f8 <prvAddCurrentTaskToDelayedList+0x58>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e8:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	481a      	ldr	r0, [pc, #104]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xbc>)
 80049f2:	f7fe f8cf 	bl	8002b94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049f6:	e026      	b.n	8004a46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a00:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d209      	bcs.n	8004a24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a10:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fe f8dd 	bl	8002bdc <vListInsert>
}
 8004a22:	e010      	b.n	8004a46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a24:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7fe f8d3 	bl	8002bdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d202      	bcs.n	8004a46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6013      	str	r3, [r2, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000198 	.word	0x20000198
 8004a54:	20000094 	.word	0x20000094
 8004a58:	2000019c 	.word	0x2000019c
 8004a5c:	20000180 	.word	0x20000180
 8004a60:	20000150 	.word	0x20000150
 8004a64:	2000014c 	.word	0x2000014c
 8004a68:	200001b4 	.word	0x200001b4

08004a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f023 0201 	bic.w	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3b04      	subs	r3, #4
 8004a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a9c:	4a0c      	ldr	r2, [pc, #48]	; (8004ad0 <pxPortInitialiseStack+0x64>)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b14      	subs	r3, #20
 8004aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3b04      	subs	r3, #4
 8004ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f06f 0202 	mvn.w	r2, #2
 8004aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3b20      	subs	r3, #32
 8004ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	08004ad5 	.word	0x08004ad5

08004ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <prvTaskExitError+0x54>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d00a      	beq.n	8004afe <prvTaskExitError+0x2a>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60fb      	str	r3, [r7, #12]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <prvTaskExitError+0x28>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	60bb      	str	r3, [r7, #8]
}
 8004b10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b12:	bf00      	nop
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0fc      	beq.n	8004b14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	2000000c 	.word	0x2000000c
 8004b2c:	00000000 	.word	0x00000000

08004b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <pxCurrentTCBConst2>)
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	6808      	ldr	r0, [r1, #0]
 8004b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	f380 8809 	msr	PSP, r0
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst2>:
 8004b50:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b58:	4808      	ldr	r0, [pc, #32]	; (8004b7c <prvPortStartFirstTask+0x24>)
 8004b5a:	6800      	ldr	r0, [r0, #0]
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f380 8808 	msr	MSP, r0
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f380 8814 	msr	CONTROL, r0
 8004b6a:	b662      	cpsie	i
 8004b6c:	b661      	cpsie	f
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	df00      	svc	0
 8004b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b7a:	bf00      	nop
 8004b7c:	e000ed08 	.word	0xe000ed08

08004b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b86:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <xPortStartScheduler+0x120>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a46      	ldr	r2, [pc, #280]	; (8004ca4 <xPortStartScheduler+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10a      	bne.n	8004ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	613b      	str	r3, [r7, #16]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <xPortStartScheduler+0x120>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3f      	ldr	r2, [pc, #252]	; (8004ca8 <xPortStartScheduler+0x128>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10a      	bne.n	8004bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <xPortStartScheduler+0x12c>)
 8004bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <xPortStartScheduler+0x130>)
 8004bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bf4:	e009      	b.n	8004c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d0ef      	beq.n	8004bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1c3 0307 	rsb	r3, r3, #7
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00a      	beq.n	8004c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c6e:	f000 f8dd 	bl	8004e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <xPortStartScheduler+0x13c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c78:	f000 f8fc 	bl	8004e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c88:	f7ff ff66 	bl	8004b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c8c:	f7ff f920 	bl	8003ed0 <vTaskSwitchContext>
	prvTaskExitError();
 8004c90:	f7ff ff20 	bl	8004ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000ed00 	.word	0xe000ed00
 8004ca4:	410fc271 	.word	0x410fc271
 8004ca8:	410fc270 	.word	0x410fc270
 8004cac:	e000e400 	.word	0xe000e400
 8004cb0:	200001c0 	.word	0x200001c0
 8004cb4:	200001c4 	.word	0x200001c4
 8004cb8:	e000ed20 	.word	0xe000ed20
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	e000ef34 	.word	0xe000ef34

08004cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	607b      	str	r3, [r7, #4]
}
 8004cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <vPortEnterCritical+0x58>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <vPortEnterCritical+0x58>)
 8004ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <vPortEnterCritical+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10f      	bne.n	8004d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortEnterCritical+0x5c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	603b      	str	r3, [r7, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <vPortEnterCritical+0x4a>
	}
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <vPortExitCritical+0x50>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <vPortExitCritical+0x24>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	607b      	str	r3, [r7, #4]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <vPortExitCritical+0x50>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <vPortExitCritical+0x50>)
 8004d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <vPortExitCritical+0x50>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <vPortExitCritical+0x42>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
	...

08004d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d80:	f3ef 8009 	mrs	r0, PSP
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <pxCurrentTCBConst>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f01e 0f10 	tst.w	lr, #16
 8004d90:	bf08      	it	eq
 8004d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	6010      	str	r0, [r2, #0]
 8004d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004da4:	f380 8811 	msr	BASEPRI, r0
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f7ff f88e 	bl	8003ed0 <vTaskSwitchContext>
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	f380 8811 	msr	BASEPRI, r0
 8004dbc:	bc09      	pop	{r0, r3}
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	6808      	ldr	r0, [r1, #0]
 8004dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc6:	f01e 0f10 	tst.w	lr, #16
 8004dca:	bf08      	it	eq
 8004dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dd0:	f380 8809 	msr	PSP, r0
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w

08004de0 <pxCurrentTCBConst>:
 8004de0:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e02:	f7fe ffad 	bl	8003d60 <xTaskIncrementTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <SysTick_Handler+0x40>)
 8004e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
}
 8004e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <vPortSetupTimerInterrupt+0x38>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vPortSetupTimerInterrupt+0x3c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <vPortSetupTimerInterrupt+0x40>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <vPortSetupTimerInterrupt+0x44>)
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e010 	.word	0xe000e010
 8004e64:	e000e018 	.word	0xe000e018
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	10624dd3 	.word	0x10624dd3
 8004e70:	e000e014 	.word	0xe000e014

08004e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e84 <vPortEnableVFP+0x10>
 8004e78:	6801      	ldr	r1, [r0, #0]
 8004e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e7e:	6001      	str	r1, [r0, #0]
 8004e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e82:	bf00      	nop
 8004e84:	e000ed88 	.word	0xe000ed88

08004e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e94:	f7fe fe2c 	bl	8003af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e98:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <pvPortMalloc+0x180>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ea0:	f000 f92c 	bl	80050fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ea4:	4b59      	ldr	r3, [pc, #356]	; (800500c <pvPortMalloc+0x184>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 8093 	bne.w	8004fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01d      	beq.n	8004ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004eb8:	2208      	movs	r2, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d06e      	beq.n	8004fd8 <pvPortMalloc+0x150>
 8004efa:	4b45      	ldr	r3, [pc, #276]	; (8005010 <pvPortMalloc+0x188>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d869      	bhi.n	8004fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f04:	4b43      	ldr	r3, [pc, #268]	; (8005014 <pvPortMalloc+0x18c>)
 8004f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <pvPortMalloc+0x18c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f0e:	e004      	b.n	8004f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d903      	bls.n	8004f2c <pvPortMalloc+0xa4>
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f1      	bne.n	8004f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <pvPortMalloc+0x180>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d050      	beq.n	8004fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	2308      	movs	r3, #8
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d91f      	bls.n	8004f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <pvPortMalloc+0xf8>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	613b      	str	r3, [r7, #16]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f92:	69b8      	ldr	r0, [r7, #24]
 8004f94:	f000 f914 	bl	80051c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <pvPortMalloc+0x188>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <pvPortMalloc+0x188>)
 8004fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <pvPortMalloc+0x188>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <pvPortMalloc+0x190>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d203      	bcs.n	8004fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <pvPortMalloc+0x188>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <pvPortMalloc+0x190>)
 8004fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <pvPortMalloc+0x184>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x194>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <pvPortMalloc+0x194>)
 8004fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fd8:	f7fe fd98 	bl	8003b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <pvPortMalloc+0x174>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60fb      	str	r3, [r7, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <pvPortMalloc+0x172>
	return pvReturn;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3728      	adds	r7, #40	; 0x28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2000ddd0 	.word	0x2000ddd0
 800500c:	2000dde4 	.word	0x2000dde4
 8005010:	2000ddd4 	.word	0x2000ddd4
 8005014:	2000ddc8 	.word	0x2000ddc8
 8005018:	2000ddd8 	.word	0x2000ddd8
 800501c:	2000dddc 	.word	0x2000dddc

08005020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d04d      	beq.n	80050ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005032:	2308      	movs	r3, #8
 8005034:	425b      	negs	r3, r3
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <vPortFree+0xb8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <vPortFree+0x44>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60fb      	str	r3, [r7, #12]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <vPortFree+0x62>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <vPortFree+0xb8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11a      	bne.n	80050ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <vPortFree+0xb8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050a8:	f7fe fd22 	bl	8003af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <vPortFree+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <vPortFree+0xbc>)
 80050b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f000 f880 	bl	80051c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <vPortFree+0xc0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a06      	ldr	r2, [pc, #24]	; (80050e0 <vPortFree+0xc0>)
 80050c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050ca:	f7fe fd1f 	bl	8003b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ce:	bf00      	nop
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	2000dde4 	.word	0x2000dde4
 80050dc:	2000ddd4 	.word	0x2000ddd4
 80050e0:	2000dde0 	.word	0x2000dde0

080050e4 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	2000ddd8 	.word	0x2000ddd8

080050fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005102:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8005106:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <prvHeapInit+0xac>)
 800510a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3307      	adds	r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0307 	bic.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <prvHeapInit+0xac>)
 800512c:	4413      	add	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <prvHeapInit+0xb0>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <prvHeapInit+0xb0>)
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005148:	2208      	movs	r2, #8
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <prvHeapInit+0xb4>)
 800515c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <prvHeapInit+0xb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <prvHeapInit+0xb4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <prvHeapInit+0xb4>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <prvHeapInit+0xb8>)
 800518a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <prvHeapInit+0xbc>)
 8005192:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <prvHeapInit+0xc0>)
 8005196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800519a:	601a      	str	r2, [r3, #0]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	200001c8 	.word	0x200001c8
 80051ac:	2000ddc8 	.word	0x2000ddc8
 80051b0:	2000ddd0 	.word	0x2000ddd0
 80051b4:	2000ddd8 	.word	0x2000ddd8
 80051b8:	2000ddd4 	.word	0x2000ddd4
 80051bc:	2000dde4 	.word	0x2000dde4

080051c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <prvInsertBlockIntoFreeList+0xac>)
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e002      	b.n	80051d4 <prvInsertBlockIntoFreeList+0x14>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d8f7      	bhi.n	80051ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d108      	bne.n	8005202 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	441a      	add	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	441a      	add	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d118      	bne.n	8005248 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <prvInsertBlockIntoFreeList+0xb0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d00d      	beq.n	800523e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e008      	b.n	8005250 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <prvInsertBlockIntoFreeList+0xb0>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e003      	b.n	8005250 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d002      	beq.n	800525e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000ddc8 	.word	0x2000ddc8
 8005270:	2000ddd0 	.word	0x2000ddd0

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000010 	.word	0x20000010

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	4d0d      	ldr	r5, [pc, #52]	; (80052b8 <__libc_init_array+0x38>)
 8005284:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	2600      	movs	r6, #0
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	4d0b      	ldr	r5, [pc, #44]	; (80052c0 <__libc_init_array+0x40>)
 8005292:	4c0c      	ldr	r4, [pc, #48]	; (80052c4 <__libc_init_array+0x44>)
 8005294:	f000 fc56 	bl	8005b44 <_init>
 8005298:	1b64      	subs	r4, r4, r5
 800529a:	10a4      	asrs	r4, r4, #2
 800529c:	2600      	movs	r6, #0
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08006060 	.word	0x08006060
 80052bc:	08006060 	.word	0x08006060
 80052c0:	08006060 	.word	0x08006060
 80052c4:	08006064 	.word	0x08006064

080052c8 <memcpy>:
 80052c8:	440a      	add	r2, r1
 80052ca:	4291      	cmp	r1, r2
 80052cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d0:	d100      	bne.n	80052d4 <memcpy+0xc>
 80052d2:	4770      	bx	lr
 80052d4:	b510      	push	{r4, lr}
 80052d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052de:	4291      	cmp	r1, r2
 80052e0:	d1f9      	bne.n	80052d6 <memcpy+0xe>
 80052e2:	bd10      	pop	{r4, pc}

080052e4 <memset>:
 80052e4:	4402      	add	r2, r0
 80052e6:	4603      	mov	r3, r0
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d100      	bne.n	80052ee <memset+0xa>
 80052ec:	4770      	bx	lr
 80052ee:	f803 1b01 	strb.w	r1, [r3], #1
 80052f2:	e7f9      	b.n	80052e8 <memset+0x4>

080052f4 <siprintf>:
 80052f4:	b40e      	push	{r1, r2, r3}
 80052f6:	b500      	push	{lr}
 80052f8:	b09c      	sub	sp, #112	; 0x70
 80052fa:	ab1d      	add	r3, sp, #116	; 0x74
 80052fc:	9002      	str	r0, [sp, #8]
 80052fe:	9006      	str	r0, [sp, #24]
 8005300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005304:	4809      	ldr	r0, [pc, #36]	; (800532c <siprintf+0x38>)
 8005306:	9107      	str	r1, [sp, #28]
 8005308:	9104      	str	r1, [sp, #16]
 800530a:	4909      	ldr	r1, [pc, #36]	; (8005330 <siprintf+0x3c>)
 800530c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005310:	9105      	str	r1, [sp, #20]
 8005312:	6800      	ldr	r0, [r0, #0]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	a902      	add	r1, sp, #8
 8005318:	f000 f870 	bl	80053fc <_svfiprintf_r>
 800531c:	9b02      	ldr	r3, [sp, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	b01c      	add	sp, #112	; 0x70
 8005324:	f85d eb04 	ldr.w	lr, [sp], #4
 8005328:	b003      	add	sp, #12
 800532a:	4770      	bx	lr
 800532c:	20000010 	.word	0x20000010
 8005330:	ffff0208 	.word	0xffff0208

08005334 <strcpy>:
 8005334:	4603      	mov	r3, r0
 8005336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800533a:	f803 2b01 	strb.w	r2, [r3], #1
 800533e:	2a00      	cmp	r2, #0
 8005340:	d1f9      	bne.n	8005336 <strcpy+0x2>
 8005342:	4770      	bx	lr

08005344 <__ssputs_r>:
 8005344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005348:	688e      	ldr	r6, [r1, #8]
 800534a:	429e      	cmp	r6, r3
 800534c:	4682      	mov	sl, r0
 800534e:	460c      	mov	r4, r1
 8005350:	4690      	mov	r8, r2
 8005352:	461f      	mov	r7, r3
 8005354:	d838      	bhi.n	80053c8 <__ssputs_r+0x84>
 8005356:	898a      	ldrh	r2, [r1, #12]
 8005358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800535c:	d032      	beq.n	80053c4 <__ssputs_r+0x80>
 800535e:	6825      	ldr	r5, [r4, #0]
 8005360:	6909      	ldr	r1, [r1, #16]
 8005362:	eba5 0901 	sub.w	r9, r5, r1
 8005366:	6965      	ldr	r5, [r4, #20]
 8005368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800536c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005370:	3301      	adds	r3, #1
 8005372:	444b      	add	r3, r9
 8005374:	106d      	asrs	r5, r5, #1
 8005376:	429d      	cmp	r5, r3
 8005378:	bf38      	it	cc
 800537a:	461d      	movcc	r5, r3
 800537c:	0553      	lsls	r3, r2, #21
 800537e:	d531      	bpl.n	80053e4 <__ssputs_r+0xa0>
 8005380:	4629      	mov	r1, r5
 8005382:	f000 fb39 	bl	80059f8 <_malloc_r>
 8005386:	4606      	mov	r6, r0
 8005388:	b950      	cbnz	r0, 80053a0 <__ssputs_r+0x5c>
 800538a:	230c      	movs	r3, #12
 800538c:	f8ca 3000 	str.w	r3, [sl]
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	6921      	ldr	r1, [r4, #16]
 80053a2:	464a      	mov	r2, r9
 80053a4:	f7ff ff90 	bl	80052c8 <memcpy>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	6126      	str	r6, [r4, #16]
 80053b6:	6165      	str	r5, [r4, #20]
 80053b8:	444e      	add	r6, r9
 80053ba:	eba5 0509 	sub.w	r5, r5, r9
 80053be:	6026      	str	r6, [r4, #0]
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	463e      	mov	r6, r7
 80053c4:	42be      	cmp	r6, r7
 80053c6:	d900      	bls.n	80053ca <__ssputs_r+0x86>
 80053c8:	463e      	mov	r6, r7
 80053ca:	4632      	mov	r2, r6
 80053cc:	6820      	ldr	r0, [r4, #0]
 80053ce:	4641      	mov	r1, r8
 80053d0:	f000 faa8 	bl	8005924 <memmove>
 80053d4:	68a3      	ldr	r3, [r4, #8]
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	1b9b      	subs	r3, r3, r6
 80053da:	4432      	add	r2, r6
 80053dc:	60a3      	str	r3, [r4, #8]
 80053de:	6022      	str	r2, [r4, #0]
 80053e0:	2000      	movs	r0, #0
 80053e2:	e7db      	b.n	800539c <__ssputs_r+0x58>
 80053e4:	462a      	mov	r2, r5
 80053e6:	f000 fb61 	bl	8005aac <_realloc_r>
 80053ea:	4606      	mov	r6, r0
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1e1      	bne.n	80053b4 <__ssputs_r+0x70>
 80053f0:	6921      	ldr	r1, [r4, #16]
 80053f2:	4650      	mov	r0, sl
 80053f4:	f000 fab0 	bl	8005958 <_free_r>
 80053f8:	e7c7      	b.n	800538a <__ssputs_r+0x46>
	...

080053fc <_svfiprintf_r>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	4698      	mov	r8, r3
 8005402:	898b      	ldrh	r3, [r1, #12]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	b09d      	sub	sp, #116	; 0x74
 8005408:	4607      	mov	r7, r0
 800540a:	460d      	mov	r5, r1
 800540c:	4614      	mov	r4, r2
 800540e:	d50e      	bpl.n	800542e <_svfiprintf_r+0x32>
 8005410:	690b      	ldr	r3, [r1, #16]
 8005412:	b963      	cbnz	r3, 800542e <_svfiprintf_r+0x32>
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	f000 faef 	bl	80059f8 <_malloc_r>
 800541a:	6028      	str	r0, [r5, #0]
 800541c:	6128      	str	r0, [r5, #16]
 800541e:	b920      	cbnz	r0, 800542a <_svfiprintf_r+0x2e>
 8005420:	230c      	movs	r3, #12
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e0d1      	b.n	80055ce <_svfiprintf_r+0x1d2>
 800542a:	2340      	movs	r3, #64	; 0x40
 800542c:	616b      	str	r3, [r5, #20]
 800542e:	2300      	movs	r3, #0
 8005430:	9309      	str	r3, [sp, #36]	; 0x24
 8005432:	2320      	movs	r3, #32
 8005434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005438:	f8cd 800c 	str.w	r8, [sp, #12]
 800543c:	2330      	movs	r3, #48	; 0x30
 800543e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055e8 <_svfiprintf_r+0x1ec>
 8005442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005446:	f04f 0901 	mov.w	r9, #1
 800544a:	4623      	mov	r3, r4
 800544c:	469a      	mov	sl, r3
 800544e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005452:	b10a      	cbz	r2, 8005458 <_svfiprintf_r+0x5c>
 8005454:	2a25      	cmp	r2, #37	; 0x25
 8005456:	d1f9      	bne.n	800544c <_svfiprintf_r+0x50>
 8005458:	ebba 0b04 	subs.w	fp, sl, r4
 800545c:	d00b      	beq.n	8005476 <_svfiprintf_r+0x7a>
 800545e:	465b      	mov	r3, fp
 8005460:	4622      	mov	r2, r4
 8005462:	4629      	mov	r1, r5
 8005464:	4638      	mov	r0, r7
 8005466:	f7ff ff6d 	bl	8005344 <__ssputs_r>
 800546a:	3001      	adds	r0, #1
 800546c:	f000 80aa 	beq.w	80055c4 <_svfiprintf_r+0x1c8>
 8005470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005472:	445a      	add	r2, fp
 8005474:	9209      	str	r2, [sp, #36]	; 0x24
 8005476:	f89a 3000 	ldrb.w	r3, [sl]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80a2 	beq.w	80055c4 <_svfiprintf_r+0x1c8>
 8005480:	2300      	movs	r3, #0
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800548a:	f10a 0a01 	add.w	sl, sl, #1
 800548e:	9304      	str	r3, [sp, #16]
 8005490:	9307      	str	r3, [sp, #28]
 8005492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005496:	931a      	str	r3, [sp, #104]	; 0x68
 8005498:	4654      	mov	r4, sl
 800549a:	2205      	movs	r2, #5
 800549c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a0:	4851      	ldr	r0, [pc, #324]	; (80055e8 <_svfiprintf_r+0x1ec>)
 80054a2:	f7fa fea5 	bl	80001f0 <memchr>
 80054a6:	9a04      	ldr	r2, [sp, #16]
 80054a8:	b9d8      	cbnz	r0, 80054e2 <_svfiprintf_r+0xe6>
 80054aa:	06d0      	lsls	r0, r2, #27
 80054ac:	bf44      	itt	mi
 80054ae:	2320      	movmi	r3, #32
 80054b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054b4:	0711      	lsls	r1, r2, #28
 80054b6:	bf44      	itt	mi
 80054b8:	232b      	movmi	r3, #43	; 0x2b
 80054ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054be:	f89a 3000 	ldrb.w	r3, [sl]
 80054c2:	2b2a      	cmp	r3, #42	; 0x2a
 80054c4:	d015      	beq.n	80054f2 <_svfiprintf_r+0xf6>
 80054c6:	9a07      	ldr	r2, [sp, #28]
 80054c8:	4654      	mov	r4, sl
 80054ca:	2000      	movs	r0, #0
 80054cc:	f04f 0c0a 	mov.w	ip, #10
 80054d0:	4621      	mov	r1, r4
 80054d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054d6:	3b30      	subs	r3, #48	; 0x30
 80054d8:	2b09      	cmp	r3, #9
 80054da:	d94e      	bls.n	800557a <_svfiprintf_r+0x17e>
 80054dc:	b1b0      	cbz	r0, 800550c <_svfiprintf_r+0x110>
 80054de:	9207      	str	r2, [sp, #28]
 80054e0:	e014      	b.n	800550c <_svfiprintf_r+0x110>
 80054e2:	eba0 0308 	sub.w	r3, r0, r8
 80054e6:	fa09 f303 	lsl.w	r3, r9, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	46a2      	mov	sl, r4
 80054f0:	e7d2      	b.n	8005498 <_svfiprintf_r+0x9c>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	1d19      	adds	r1, r3, #4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	9103      	str	r1, [sp, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bfbb      	ittet	lt
 80054fe:	425b      	neglt	r3, r3
 8005500:	f042 0202 	orrlt.w	r2, r2, #2
 8005504:	9307      	strge	r3, [sp, #28]
 8005506:	9307      	strlt	r3, [sp, #28]
 8005508:	bfb8      	it	lt
 800550a:	9204      	strlt	r2, [sp, #16]
 800550c:	7823      	ldrb	r3, [r4, #0]
 800550e:	2b2e      	cmp	r3, #46	; 0x2e
 8005510:	d10c      	bne.n	800552c <_svfiprintf_r+0x130>
 8005512:	7863      	ldrb	r3, [r4, #1]
 8005514:	2b2a      	cmp	r3, #42	; 0x2a
 8005516:	d135      	bne.n	8005584 <_svfiprintf_r+0x188>
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	9203      	str	r2, [sp, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfb8      	it	lt
 8005524:	f04f 33ff 	movlt.w	r3, #4294967295
 8005528:	3402      	adds	r4, #2
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055f8 <_svfiprintf_r+0x1fc>
 8005530:	7821      	ldrb	r1, [r4, #0]
 8005532:	2203      	movs	r2, #3
 8005534:	4650      	mov	r0, sl
 8005536:	f7fa fe5b 	bl	80001f0 <memchr>
 800553a:	b140      	cbz	r0, 800554e <_svfiprintf_r+0x152>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	eba0 000a 	sub.w	r0, r0, sl
 8005542:	fa03 f000 	lsl.w	r0, r3, r0
 8005546:	9b04      	ldr	r3, [sp, #16]
 8005548:	4303      	orrs	r3, r0
 800554a:	3401      	adds	r4, #1
 800554c:	9304      	str	r3, [sp, #16]
 800554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005552:	4826      	ldr	r0, [pc, #152]	; (80055ec <_svfiprintf_r+0x1f0>)
 8005554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005558:	2206      	movs	r2, #6
 800555a:	f7fa fe49 	bl	80001f0 <memchr>
 800555e:	2800      	cmp	r0, #0
 8005560:	d038      	beq.n	80055d4 <_svfiprintf_r+0x1d8>
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <_svfiprintf_r+0x1f4>)
 8005564:	bb1b      	cbnz	r3, 80055ae <_svfiprintf_r+0x1b2>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	3307      	adds	r3, #7
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	3308      	adds	r3, #8
 8005570:	9303      	str	r3, [sp, #12]
 8005572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005574:	4433      	add	r3, r6
 8005576:	9309      	str	r3, [sp, #36]	; 0x24
 8005578:	e767      	b.n	800544a <_svfiprintf_r+0x4e>
 800557a:	fb0c 3202 	mla	r2, ip, r2, r3
 800557e:	460c      	mov	r4, r1
 8005580:	2001      	movs	r0, #1
 8005582:	e7a5      	b.n	80054d0 <_svfiprintf_r+0xd4>
 8005584:	2300      	movs	r3, #0
 8005586:	3401      	adds	r4, #1
 8005588:	9305      	str	r3, [sp, #20]
 800558a:	4619      	mov	r1, r3
 800558c:	f04f 0c0a 	mov.w	ip, #10
 8005590:	4620      	mov	r0, r4
 8005592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005596:	3a30      	subs	r2, #48	; 0x30
 8005598:	2a09      	cmp	r2, #9
 800559a:	d903      	bls.n	80055a4 <_svfiprintf_r+0x1a8>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0c5      	beq.n	800552c <_svfiprintf_r+0x130>
 80055a0:	9105      	str	r1, [sp, #20]
 80055a2:	e7c3      	b.n	800552c <_svfiprintf_r+0x130>
 80055a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055a8:	4604      	mov	r4, r0
 80055aa:	2301      	movs	r3, #1
 80055ac:	e7f0      	b.n	8005590 <_svfiprintf_r+0x194>
 80055ae:	ab03      	add	r3, sp, #12
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	462a      	mov	r2, r5
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <_svfiprintf_r+0x1f8>)
 80055b6:	a904      	add	r1, sp, #16
 80055b8:	4638      	mov	r0, r7
 80055ba:	f3af 8000 	nop.w
 80055be:	1c42      	adds	r2, r0, #1
 80055c0:	4606      	mov	r6, r0
 80055c2:	d1d6      	bne.n	8005572 <_svfiprintf_r+0x176>
 80055c4:	89ab      	ldrh	r3, [r5, #12]
 80055c6:	065b      	lsls	r3, r3, #25
 80055c8:	f53f af2c 	bmi.w	8005424 <_svfiprintf_r+0x28>
 80055cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ce:	b01d      	add	sp, #116	; 0x74
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d4:	ab03      	add	r3, sp, #12
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	462a      	mov	r2, r5
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <_svfiprintf_r+0x1f8>)
 80055dc:	a904      	add	r1, sp, #16
 80055de:	4638      	mov	r0, r7
 80055e0:	f000 f87a 	bl	80056d8 <_printf_i>
 80055e4:	e7eb      	b.n	80055be <_svfiprintf_r+0x1c2>
 80055e6:	bf00      	nop
 80055e8:	08006024 	.word	0x08006024
 80055ec:	0800602e 	.word	0x0800602e
 80055f0:	00000000 	.word	0x00000000
 80055f4:	08005345 	.word	0x08005345
 80055f8:	0800602a 	.word	0x0800602a

080055fc <_printf_common>:
 80055fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005600:	4616      	mov	r6, r2
 8005602:	4699      	mov	r9, r3
 8005604:	688a      	ldr	r2, [r1, #8]
 8005606:	690b      	ldr	r3, [r1, #16]
 8005608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800560c:	4293      	cmp	r3, r2
 800560e:	bfb8      	it	lt
 8005610:	4613      	movlt	r3, r2
 8005612:	6033      	str	r3, [r6, #0]
 8005614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005618:	4607      	mov	r7, r0
 800561a:	460c      	mov	r4, r1
 800561c:	b10a      	cbz	r2, 8005622 <_printf_common+0x26>
 800561e:	3301      	adds	r3, #1
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	0699      	lsls	r1, r3, #26
 8005626:	bf42      	ittt	mi
 8005628:	6833      	ldrmi	r3, [r6, #0]
 800562a:	3302      	addmi	r3, #2
 800562c:	6033      	strmi	r3, [r6, #0]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	f015 0506 	ands.w	r5, r5, #6
 8005634:	d106      	bne.n	8005644 <_printf_common+0x48>
 8005636:	f104 0a19 	add.w	sl, r4, #25
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	6832      	ldr	r2, [r6, #0]
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	42ab      	cmp	r3, r5
 8005642:	dc26      	bgt.n	8005692 <_printf_common+0x96>
 8005644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005648:	1e13      	subs	r3, r2, #0
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	bf18      	it	ne
 800564e:	2301      	movne	r3, #1
 8005650:	0692      	lsls	r2, r2, #26
 8005652:	d42b      	bmi.n	80056ac <_printf_common+0xb0>
 8005654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005658:	4649      	mov	r1, r9
 800565a:	4638      	mov	r0, r7
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d01e      	beq.n	80056a0 <_printf_common+0xa4>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	68e5      	ldr	r5, [r4, #12]
 8005666:	6832      	ldr	r2, [r6, #0]
 8005668:	f003 0306 	and.w	r3, r3, #6
 800566c:	2b04      	cmp	r3, #4
 800566e:	bf08      	it	eq
 8005670:	1aad      	subeq	r5, r5, r2
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	6922      	ldr	r2, [r4, #16]
 8005676:	bf0c      	ite	eq
 8005678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800567c:	2500      	movne	r5, #0
 800567e:	4293      	cmp	r3, r2
 8005680:	bfc4      	itt	gt
 8005682:	1a9b      	subgt	r3, r3, r2
 8005684:	18ed      	addgt	r5, r5, r3
 8005686:	2600      	movs	r6, #0
 8005688:	341a      	adds	r4, #26
 800568a:	42b5      	cmp	r5, r6
 800568c:	d11a      	bne.n	80056c4 <_printf_common+0xc8>
 800568e:	2000      	movs	r0, #0
 8005690:	e008      	b.n	80056a4 <_printf_common+0xa8>
 8005692:	2301      	movs	r3, #1
 8005694:	4652      	mov	r2, sl
 8005696:	4649      	mov	r1, r9
 8005698:	4638      	mov	r0, r7
 800569a:	47c0      	blx	r8
 800569c:	3001      	adds	r0, #1
 800569e:	d103      	bne.n	80056a8 <_printf_common+0xac>
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a8:	3501      	adds	r5, #1
 80056aa:	e7c6      	b.n	800563a <_printf_common+0x3e>
 80056ac:	18e1      	adds	r1, r4, r3
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	2030      	movs	r0, #48	; 0x30
 80056b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056b6:	4422      	add	r2, r4
 80056b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c0:	3302      	adds	r3, #2
 80056c2:	e7c7      	b.n	8005654 <_printf_common+0x58>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4622      	mov	r2, r4
 80056c8:	4649      	mov	r1, r9
 80056ca:	4638      	mov	r0, r7
 80056cc:	47c0      	blx	r8
 80056ce:	3001      	adds	r0, #1
 80056d0:	d0e6      	beq.n	80056a0 <_printf_common+0xa4>
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7d9      	b.n	800568a <_printf_common+0x8e>
	...

080056d8 <_printf_i>:
 80056d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	460c      	mov	r4, r1
 80056de:	4691      	mov	r9, r2
 80056e0:	7e27      	ldrb	r7, [r4, #24]
 80056e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056e4:	2f78      	cmp	r7, #120	; 0x78
 80056e6:	4680      	mov	r8, r0
 80056e8:	469a      	mov	sl, r3
 80056ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ee:	d807      	bhi.n	8005700 <_printf_i+0x28>
 80056f0:	2f62      	cmp	r7, #98	; 0x62
 80056f2:	d80a      	bhi.n	800570a <_printf_i+0x32>
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	f000 80d8 	beq.w	80058aa <_printf_i+0x1d2>
 80056fa:	2f58      	cmp	r7, #88	; 0x58
 80056fc:	f000 80a3 	beq.w	8005846 <_printf_i+0x16e>
 8005700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005708:	e03a      	b.n	8005780 <_printf_i+0xa8>
 800570a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800570e:	2b15      	cmp	r3, #21
 8005710:	d8f6      	bhi.n	8005700 <_printf_i+0x28>
 8005712:	a001      	add	r0, pc, #4	; (adr r0, 8005718 <_printf_i+0x40>)
 8005714:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005718:	08005771 	.word	0x08005771
 800571c:	08005785 	.word	0x08005785
 8005720:	08005701 	.word	0x08005701
 8005724:	08005701 	.word	0x08005701
 8005728:	08005701 	.word	0x08005701
 800572c:	08005701 	.word	0x08005701
 8005730:	08005785 	.word	0x08005785
 8005734:	08005701 	.word	0x08005701
 8005738:	08005701 	.word	0x08005701
 800573c:	08005701 	.word	0x08005701
 8005740:	08005701 	.word	0x08005701
 8005744:	08005891 	.word	0x08005891
 8005748:	080057b5 	.word	0x080057b5
 800574c:	08005873 	.word	0x08005873
 8005750:	08005701 	.word	0x08005701
 8005754:	08005701 	.word	0x08005701
 8005758:	080058b3 	.word	0x080058b3
 800575c:	08005701 	.word	0x08005701
 8005760:	080057b5 	.word	0x080057b5
 8005764:	08005701 	.word	0x08005701
 8005768:	08005701 	.word	0x08005701
 800576c:	0800587b 	.word	0x0800587b
 8005770:	680b      	ldr	r3, [r1, #0]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	600a      	str	r2, [r1, #0]
 8005778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800577c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005780:	2301      	movs	r3, #1
 8005782:	e0a3      	b.n	80058cc <_printf_i+0x1f4>
 8005784:	6825      	ldr	r5, [r4, #0]
 8005786:	6808      	ldr	r0, [r1, #0]
 8005788:	062e      	lsls	r6, r5, #24
 800578a:	f100 0304 	add.w	r3, r0, #4
 800578e:	d50a      	bpl.n	80057a6 <_printf_i+0xce>
 8005790:	6805      	ldr	r5, [r0, #0]
 8005792:	600b      	str	r3, [r1, #0]
 8005794:	2d00      	cmp	r5, #0
 8005796:	da03      	bge.n	80057a0 <_printf_i+0xc8>
 8005798:	232d      	movs	r3, #45	; 0x2d
 800579a:	426d      	negs	r5, r5
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a0:	485e      	ldr	r0, [pc, #376]	; (800591c <_printf_i+0x244>)
 80057a2:	230a      	movs	r3, #10
 80057a4:	e019      	b.n	80057da <_printf_i+0x102>
 80057a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057aa:	6805      	ldr	r5, [r0, #0]
 80057ac:	600b      	str	r3, [r1, #0]
 80057ae:	bf18      	it	ne
 80057b0:	b22d      	sxthne	r5, r5
 80057b2:	e7ef      	b.n	8005794 <_printf_i+0xbc>
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	1d18      	adds	r0, r3, #4
 80057ba:	6008      	str	r0, [r1, #0]
 80057bc:	0628      	lsls	r0, r5, #24
 80057be:	d501      	bpl.n	80057c4 <_printf_i+0xec>
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	e002      	b.n	80057ca <_printf_i+0xf2>
 80057c4:	0669      	lsls	r1, r5, #25
 80057c6:	d5fb      	bpl.n	80057c0 <_printf_i+0xe8>
 80057c8:	881d      	ldrh	r5, [r3, #0]
 80057ca:	4854      	ldr	r0, [pc, #336]	; (800591c <_printf_i+0x244>)
 80057cc:	2f6f      	cmp	r7, #111	; 0x6f
 80057ce:	bf0c      	ite	eq
 80057d0:	2308      	moveq	r3, #8
 80057d2:	230a      	movne	r3, #10
 80057d4:	2100      	movs	r1, #0
 80057d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057da:	6866      	ldr	r6, [r4, #4]
 80057dc:	60a6      	str	r6, [r4, #8]
 80057de:	2e00      	cmp	r6, #0
 80057e0:	bfa2      	ittt	ge
 80057e2:	6821      	ldrge	r1, [r4, #0]
 80057e4:	f021 0104 	bicge.w	r1, r1, #4
 80057e8:	6021      	strge	r1, [r4, #0]
 80057ea:	b90d      	cbnz	r5, 80057f0 <_printf_i+0x118>
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	d04d      	beq.n	800588c <_printf_i+0x1b4>
 80057f0:	4616      	mov	r6, r2
 80057f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80057f6:	fb03 5711 	mls	r7, r3, r1, r5
 80057fa:	5dc7      	ldrb	r7, [r0, r7]
 80057fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005800:	462f      	mov	r7, r5
 8005802:	42bb      	cmp	r3, r7
 8005804:	460d      	mov	r5, r1
 8005806:	d9f4      	bls.n	80057f2 <_printf_i+0x11a>
 8005808:	2b08      	cmp	r3, #8
 800580a:	d10b      	bne.n	8005824 <_printf_i+0x14c>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07df      	lsls	r7, r3, #31
 8005810:	d508      	bpl.n	8005824 <_printf_i+0x14c>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	6861      	ldr	r1, [r4, #4]
 8005816:	4299      	cmp	r1, r3
 8005818:	bfde      	ittt	le
 800581a:	2330      	movle	r3, #48	; 0x30
 800581c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005824:	1b92      	subs	r2, r2, r6
 8005826:	6122      	str	r2, [r4, #16]
 8005828:	f8cd a000 	str.w	sl, [sp]
 800582c:	464b      	mov	r3, r9
 800582e:	aa03      	add	r2, sp, #12
 8005830:	4621      	mov	r1, r4
 8005832:	4640      	mov	r0, r8
 8005834:	f7ff fee2 	bl	80055fc <_printf_common>
 8005838:	3001      	adds	r0, #1
 800583a:	d14c      	bne.n	80058d6 <_printf_i+0x1fe>
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	b004      	add	sp, #16
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005846:	4835      	ldr	r0, [pc, #212]	; (800591c <_printf_i+0x244>)
 8005848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	680e      	ldr	r6, [r1, #0]
 8005850:	061f      	lsls	r7, r3, #24
 8005852:	f856 5b04 	ldr.w	r5, [r6], #4
 8005856:	600e      	str	r6, [r1, #0]
 8005858:	d514      	bpl.n	8005884 <_printf_i+0x1ac>
 800585a:	07d9      	lsls	r1, r3, #31
 800585c:	bf44      	itt	mi
 800585e:	f043 0320 	orrmi.w	r3, r3, #32
 8005862:	6023      	strmi	r3, [r4, #0]
 8005864:	b91d      	cbnz	r5, 800586e <_printf_i+0x196>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f023 0320 	bic.w	r3, r3, #32
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	2310      	movs	r3, #16
 8005870:	e7b0      	b.n	80057d4 <_printf_i+0xfc>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f043 0320 	orr.w	r3, r3, #32
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	2378      	movs	r3, #120	; 0x78
 800587c:	4828      	ldr	r0, [pc, #160]	; (8005920 <_printf_i+0x248>)
 800587e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005882:	e7e3      	b.n	800584c <_printf_i+0x174>
 8005884:	065e      	lsls	r6, r3, #25
 8005886:	bf48      	it	mi
 8005888:	b2ad      	uxthmi	r5, r5
 800588a:	e7e6      	b.n	800585a <_printf_i+0x182>
 800588c:	4616      	mov	r6, r2
 800588e:	e7bb      	b.n	8005808 <_printf_i+0x130>
 8005890:	680b      	ldr	r3, [r1, #0]
 8005892:	6826      	ldr	r6, [r4, #0]
 8005894:	6960      	ldr	r0, [r4, #20]
 8005896:	1d1d      	adds	r5, r3, #4
 8005898:	600d      	str	r5, [r1, #0]
 800589a:	0635      	lsls	r5, r6, #24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	d501      	bpl.n	80058a4 <_printf_i+0x1cc>
 80058a0:	6018      	str	r0, [r3, #0]
 80058a2:	e002      	b.n	80058aa <_printf_i+0x1d2>
 80058a4:	0671      	lsls	r1, r6, #25
 80058a6:	d5fb      	bpl.n	80058a0 <_printf_i+0x1c8>
 80058a8:	8018      	strh	r0, [r3, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	4616      	mov	r6, r2
 80058b0:	e7ba      	b.n	8005828 <_printf_i+0x150>
 80058b2:	680b      	ldr	r3, [r1, #0]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	600a      	str	r2, [r1, #0]
 80058b8:	681e      	ldr	r6, [r3, #0]
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	2100      	movs	r1, #0
 80058be:	4630      	mov	r0, r6
 80058c0:	f7fa fc96 	bl	80001f0 <memchr>
 80058c4:	b108      	cbz	r0, 80058ca <_printf_i+0x1f2>
 80058c6:	1b80      	subs	r0, r0, r6
 80058c8:	6060      	str	r0, [r4, #4]
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	2300      	movs	r3, #0
 80058d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d4:	e7a8      	b.n	8005828 <_printf_i+0x150>
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	4632      	mov	r2, r6
 80058da:	4649      	mov	r1, r9
 80058dc:	4640      	mov	r0, r8
 80058de:	47d0      	blx	sl
 80058e0:	3001      	adds	r0, #1
 80058e2:	d0ab      	beq.n	800583c <_printf_i+0x164>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	079b      	lsls	r3, r3, #30
 80058e8:	d413      	bmi.n	8005912 <_printf_i+0x23a>
 80058ea:	68e0      	ldr	r0, [r4, #12]
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	4298      	cmp	r0, r3
 80058f0:	bfb8      	it	lt
 80058f2:	4618      	movlt	r0, r3
 80058f4:	e7a4      	b.n	8005840 <_printf_i+0x168>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4632      	mov	r2, r6
 80058fa:	4649      	mov	r1, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	47d0      	blx	sl
 8005900:	3001      	adds	r0, #1
 8005902:	d09b      	beq.n	800583c <_printf_i+0x164>
 8005904:	3501      	adds	r5, #1
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	9903      	ldr	r1, [sp, #12]
 800590a:	1a5b      	subs	r3, r3, r1
 800590c:	42ab      	cmp	r3, r5
 800590e:	dcf2      	bgt.n	80058f6 <_printf_i+0x21e>
 8005910:	e7eb      	b.n	80058ea <_printf_i+0x212>
 8005912:	2500      	movs	r5, #0
 8005914:	f104 0619 	add.w	r6, r4, #25
 8005918:	e7f5      	b.n	8005906 <_printf_i+0x22e>
 800591a:	bf00      	nop
 800591c:	08006035 	.word	0x08006035
 8005920:	08006046 	.word	0x08006046

08005924 <memmove>:
 8005924:	4288      	cmp	r0, r1
 8005926:	b510      	push	{r4, lr}
 8005928:	eb01 0402 	add.w	r4, r1, r2
 800592c:	d902      	bls.n	8005934 <memmove+0x10>
 800592e:	4284      	cmp	r4, r0
 8005930:	4623      	mov	r3, r4
 8005932:	d807      	bhi.n	8005944 <memmove+0x20>
 8005934:	1e43      	subs	r3, r0, #1
 8005936:	42a1      	cmp	r1, r4
 8005938:	d008      	beq.n	800594c <memmove+0x28>
 800593a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800593e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005942:	e7f8      	b.n	8005936 <memmove+0x12>
 8005944:	4402      	add	r2, r0
 8005946:	4601      	mov	r1, r0
 8005948:	428a      	cmp	r2, r1
 800594a:	d100      	bne.n	800594e <memmove+0x2a>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005956:	e7f7      	b.n	8005948 <memmove+0x24>

08005958 <_free_r>:
 8005958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800595a:	2900      	cmp	r1, #0
 800595c:	d048      	beq.n	80059f0 <_free_r+0x98>
 800595e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005962:	9001      	str	r0, [sp, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f1a1 0404 	sub.w	r4, r1, #4
 800596a:	bfb8      	it	lt
 800596c:	18e4      	addlt	r4, r4, r3
 800596e:	f000 f8d3 	bl	8005b18 <__malloc_lock>
 8005972:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <_free_r+0x9c>)
 8005974:	9801      	ldr	r0, [sp, #4]
 8005976:	6813      	ldr	r3, [r2, #0]
 8005978:	4615      	mov	r5, r2
 800597a:	b933      	cbnz	r3, 800598a <_free_r+0x32>
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	6014      	str	r4, [r2, #0]
 8005980:	b003      	add	sp, #12
 8005982:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005986:	f000 b8cd 	b.w	8005b24 <__malloc_unlock>
 800598a:	42a3      	cmp	r3, r4
 800598c:	d90b      	bls.n	80059a6 <_free_r+0x4e>
 800598e:	6821      	ldr	r1, [r4, #0]
 8005990:	1862      	adds	r2, r4, r1
 8005992:	4293      	cmp	r3, r2
 8005994:	bf04      	itt	eq
 8005996:	681a      	ldreq	r2, [r3, #0]
 8005998:	685b      	ldreq	r3, [r3, #4]
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	bf04      	itt	eq
 800599e:	1852      	addeq	r2, r2, r1
 80059a0:	6022      	streq	r2, [r4, #0]
 80059a2:	602c      	str	r4, [r5, #0]
 80059a4:	e7ec      	b.n	8005980 <_free_r+0x28>
 80059a6:	461a      	mov	r2, r3
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	b10b      	cbz	r3, 80059b0 <_free_r+0x58>
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	d9fa      	bls.n	80059a6 <_free_r+0x4e>
 80059b0:	6811      	ldr	r1, [r2, #0]
 80059b2:	1855      	adds	r5, r2, r1
 80059b4:	42a5      	cmp	r5, r4
 80059b6:	d10b      	bne.n	80059d0 <_free_r+0x78>
 80059b8:	6824      	ldr	r4, [r4, #0]
 80059ba:	4421      	add	r1, r4
 80059bc:	1854      	adds	r4, r2, r1
 80059be:	42a3      	cmp	r3, r4
 80059c0:	6011      	str	r1, [r2, #0]
 80059c2:	d1dd      	bne.n	8005980 <_free_r+0x28>
 80059c4:	681c      	ldr	r4, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	6053      	str	r3, [r2, #4]
 80059ca:	4421      	add	r1, r4
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	e7d7      	b.n	8005980 <_free_r+0x28>
 80059d0:	d902      	bls.n	80059d8 <_free_r+0x80>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6003      	str	r3, [r0, #0]
 80059d6:	e7d3      	b.n	8005980 <_free_r+0x28>
 80059d8:	6825      	ldr	r5, [r4, #0]
 80059da:	1961      	adds	r1, r4, r5
 80059dc:	428b      	cmp	r3, r1
 80059de:	bf04      	itt	eq
 80059e0:	6819      	ldreq	r1, [r3, #0]
 80059e2:	685b      	ldreq	r3, [r3, #4]
 80059e4:	6063      	str	r3, [r4, #4]
 80059e6:	bf04      	itt	eq
 80059e8:	1949      	addeq	r1, r1, r5
 80059ea:	6021      	streq	r1, [r4, #0]
 80059ec:	6054      	str	r4, [r2, #4]
 80059ee:	e7c7      	b.n	8005980 <_free_r+0x28>
 80059f0:	b003      	add	sp, #12
 80059f2:	bd30      	pop	{r4, r5, pc}
 80059f4:	2000dde8 	.word	0x2000dde8

080059f8 <_malloc_r>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	1ccd      	adds	r5, r1, #3
 80059fc:	f025 0503 	bic.w	r5, r5, #3
 8005a00:	3508      	adds	r5, #8
 8005a02:	2d0c      	cmp	r5, #12
 8005a04:	bf38      	it	cc
 8005a06:	250c      	movcc	r5, #12
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	db01      	blt.n	8005a12 <_malloc_r+0x1a>
 8005a0e:	42a9      	cmp	r1, r5
 8005a10:	d903      	bls.n	8005a1a <_malloc_r+0x22>
 8005a12:	230c      	movs	r3, #12
 8005a14:	6033      	str	r3, [r6, #0]
 8005a16:	2000      	movs	r0, #0
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1a:	f000 f87d 	bl	8005b18 <__malloc_lock>
 8005a1e:	4921      	ldr	r1, [pc, #132]	; (8005aa4 <_malloc_r+0xac>)
 8005a20:	680a      	ldr	r2, [r1, #0]
 8005a22:	4614      	mov	r4, r2
 8005a24:	b99c      	cbnz	r4, 8005a4e <_malloc_r+0x56>
 8005a26:	4f20      	ldr	r7, [pc, #128]	; (8005aa8 <_malloc_r+0xb0>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	b923      	cbnz	r3, 8005a36 <_malloc_r+0x3e>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 f862 	bl	8005af8 <_sbrk_r>
 8005a34:	6038      	str	r0, [r7, #0]
 8005a36:	4629      	mov	r1, r5
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f000 f85d 	bl	8005af8 <_sbrk_r>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d123      	bne.n	8005a8a <_malloc_r+0x92>
 8005a42:	230c      	movs	r3, #12
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 f86c 	bl	8005b24 <__malloc_unlock>
 8005a4c:	e7e3      	b.n	8005a16 <_malloc_r+0x1e>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	1b5b      	subs	r3, r3, r5
 8005a52:	d417      	bmi.n	8005a84 <_malloc_r+0x8c>
 8005a54:	2b0b      	cmp	r3, #11
 8005a56:	d903      	bls.n	8005a60 <_malloc_r+0x68>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	441c      	add	r4, r3
 8005a5c:	6025      	str	r5, [r4, #0]
 8005a5e:	e004      	b.n	8005a6a <_malloc_r+0x72>
 8005a60:	6863      	ldr	r3, [r4, #4]
 8005a62:	42a2      	cmp	r2, r4
 8005a64:	bf0c      	ite	eq
 8005a66:	600b      	streq	r3, [r1, #0]
 8005a68:	6053      	strne	r3, [r2, #4]
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 f85a 	bl	8005b24 <__malloc_unlock>
 8005a70:	f104 000b 	add.w	r0, r4, #11
 8005a74:	1d23      	adds	r3, r4, #4
 8005a76:	f020 0007 	bic.w	r0, r0, #7
 8005a7a:	1ac2      	subs	r2, r0, r3
 8005a7c:	d0cc      	beq.n	8005a18 <_malloc_r+0x20>
 8005a7e:	1a1b      	subs	r3, r3, r0
 8005a80:	50a3      	str	r3, [r4, r2]
 8005a82:	e7c9      	b.n	8005a18 <_malloc_r+0x20>
 8005a84:	4622      	mov	r2, r4
 8005a86:	6864      	ldr	r4, [r4, #4]
 8005a88:	e7cc      	b.n	8005a24 <_malloc_r+0x2c>
 8005a8a:	1cc4      	adds	r4, r0, #3
 8005a8c:	f024 0403 	bic.w	r4, r4, #3
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d0e3      	beq.n	8005a5c <_malloc_r+0x64>
 8005a94:	1a21      	subs	r1, r4, r0
 8005a96:	4630      	mov	r0, r6
 8005a98:	f000 f82e 	bl	8005af8 <_sbrk_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1dd      	bne.n	8005a5c <_malloc_r+0x64>
 8005aa0:	e7cf      	b.n	8005a42 <_malloc_r+0x4a>
 8005aa2:	bf00      	nop
 8005aa4:	2000dde8 	.word	0x2000dde8
 8005aa8:	2000ddec 	.word	0x2000ddec

08005aac <_realloc_r>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	4607      	mov	r7, r0
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	460e      	mov	r6, r1
 8005ab4:	b921      	cbnz	r1, 8005ac0 <_realloc_r+0x14>
 8005ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005aba:	4611      	mov	r1, r2
 8005abc:	f7ff bf9c 	b.w	80059f8 <_malloc_r>
 8005ac0:	b922      	cbnz	r2, 8005acc <_realloc_r+0x20>
 8005ac2:	f7ff ff49 	bl	8005958 <_free_r>
 8005ac6:	4625      	mov	r5, r4
 8005ac8:	4628      	mov	r0, r5
 8005aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005acc:	f000 f830 	bl	8005b30 <_malloc_usable_size_r>
 8005ad0:	42a0      	cmp	r0, r4
 8005ad2:	d20f      	bcs.n	8005af4 <_realloc_r+0x48>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f7ff ff8e 	bl	80059f8 <_malloc_r>
 8005adc:	4605      	mov	r5, r0
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d0f2      	beq.n	8005ac8 <_realloc_r+0x1c>
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	f7ff fbef 	bl	80052c8 <memcpy>
 8005aea:	4631      	mov	r1, r6
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff ff33 	bl	8005958 <_free_r>
 8005af2:	e7e9      	b.n	8005ac8 <_realloc_r+0x1c>
 8005af4:	4635      	mov	r5, r6
 8005af6:	e7e7      	b.n	8005ac8 <_realloc_r+0x1c>

08005af8 <_sbrk_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d06      	ldr	r5, [pc, #24]	; (8005b14 <_sbrk_r+0x1c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4604      	mov	r4, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	f7fb fa6e 	bl	8000fe4 <_sbrk>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_sbrk_r+0x1a>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_sbrk_r+0x1a>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	2000de90 	.word	0x2000de90

08005b18 <__malloc_lock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__malloc_lock+0x8>)
 8005b1a:	f000 b811 	b.w	8005b40 <__retarget_lock_acquire_recursive>
 8005b1e:	bf00      	nop
 8005b20:	2000de98 	.word	0x2000de98

08005b24 <__malloc_unlock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__malloc_unlock+0x8>)
 8005b26:	f000 b80c 	b.w	8005b42 <__retarget_lock_release_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	2000de98 	.word	0x2000de98

08005b30 <_malloc_usable_size_r>:
 8005b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b34:	1f18      	subs	r0, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfbc      	itt	lt
 8005b3a:	580b      	ldrlt	r3, [r1, r0]
 8005b3c:	18c0      	addlt	r0, r0, r3
 8005b3e:	4770      	bx	lr

08005b40 <__retarget_lock_acquire_recursive>:
 8005b40:	4770      	bx	lr

08005b42 <__retarget_lock_release_recursive>:
 8005b42:	4770      	bx	lr

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
