
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dea8  20000074  08006078  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000df1c  08006078  0002df1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016514  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd0  00000000  00000000  000365b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  0003a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003600  00000000  00000000  0003b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c31  00000000  00000000  0003ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c4a  00000000  00000000  000516c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e730b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  000e7360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e44 	.word	0x08005e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005e44 	.word	0x08005e44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b085      	sub	sp, #20
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc0f 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f847 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8d9 	bl	800074c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8ad 	bl	80006f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  BaseType_t xTimer2Started;

  /* Cria um software timer com a configuração de reinicialização automática */
  xAutoReloadTimer = xTimerCreate(
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <main+0x80>)
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0x84>)
 80005ac:	f004 f864 	bl	8004678 <xTimerCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <main+0x88>)
 80005b4:	6013      	str	r3, [r2, #0]
		   	   	   	   	   	   	   	   	 */
		  0,							/*Não utilizado ID de timer neste exemplo*/
		  prvTimerCallback          	/*Função de callback deve ser passado nesse parametro para seja processado a ISR*/
		  );

  if (xAutoReloadTimer != NULL) {
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <main+0x88>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00c      	beq.n	80005d8 <main+0x50>
	  /*
	   * Inicie os temporizadores do software, nesse caso usamos um tempo de bloqueio de 0 (sem tempo de bloqueio)
	   * O escalonador ainda não foi inicado com a função vTaskStartScheduler, logo qualquer horário de bloqueio
	   * especificado aqui seria ignorado
	   */
	  xTimer2Started = xTimerStart( xAutoReloadTimer, 0);
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <main+0x88>)
 80005c0:	681c      	ldr	r4, [r3, #0]
 80005c2:	f003 f9ef 	bl	80039a4 <xTaskGetTickCount>
 80005c6:	4602      	mov	r2, r0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	4620      	mov	r0, r4
 80005d2:	f004 f8ad 	bl	8004730 <xTimerGenericCommand>
 80005d6:	6078      	str	r0, [r7, #4]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE * 2, NULL,
 80005d8:	2300      	movs	r3, #0
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2301      	movs	r3, #1
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e6:	490b      	ldr	r1, [pc, #44]	; (8000614 <main+0x8c>)
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <main+0x90>)
 80005ea:	f002 ff0a 	bl	8003402 <xTaskCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d003      	beq.n	80005fc <main+0x74>
			1, NULL)) != pdTRUE) {
		vPrintString(
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <main+0x94>)
 80005f6:	f000 f973 	bl	80008e0 <vPrintString>
 80005fa:	e002      	b.n	8000602 <main+0x7a>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <main+0x98>)
 80005fe:	f000 f96f 	bl	80008e0 <vPrintString>
	}


	vTaskStartScheduler();
 8000602:	f003 f8d7 	bl	80037b4 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000606:	e7fe      	b.n	8000606 <main+0x7e>
 8000608:	080009b5 	.word	0x080009b5
 800060c:	08005e5c 	.word	0x08005e5c
 8000610:	2000de34 	.word	0x2000de34
 8000614:	08005e68 	.word	0x08005e68
 8000618:	08000a1d 	.word	0x08000a1d
 800061c:	08005e74 	.word	0x08005e74
 8000620:	08005eb8 	.word	0x08005eb8

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 ffd6 	bl	80055e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xd0>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800069c:	2354      	movs	r3, #84	; 0x54
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe73 	bl	8001398 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 fa08 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f8d5 	bl	8001888 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e4:	f000 f9f2 	bl	8000acc <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART1_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000730:	f001 fd58 	bl	80021e4 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f9c7 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000de38 	.word	0x2000de38
 8000748:	40011000 	.word	0x40011000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <MX_GPIO_Init+0x180>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a58      	ldr	r2, [pc, #352]	; (80008cc <MX_GPIO_Init+0x180>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <MX_GPIO_Init+0x180>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b52      	ldr	r3, [pc, #328]	; (80008cc <MX_GPIO_Init+0x180>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a51      	ldr	r2, [pc, #324]	; (80008cc <MX_GPIO_Init+0x180>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <MX_GPIO_Init+0x180>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_GPIO_Init+0x180>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a4a      	ldr	r2, [pc, #296]	; (80008cc <MX_GPIO_Init+0x180>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <MX_GPIO_Init+0x180>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <MX_GPIO_Init+0x180>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a43      	ldr	r2, [pc, #268]	; (80008cc <MX_GPIO_Init+0x180>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <MX_GPIO_Init+0x180>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <MX_GPIO_Init+0x180>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <MX_GPIO_Init+0x180>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <MX_GPIO_Init+0x180>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin|SEL_1_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2109      	movs	r1, #9
 80007f2:	4837      	ldr	r0, [pc, #220]	; (80008d0 <MX_GPIO_Init+0x184>)
 80007f4:	f000 fd84 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	4835      	ldr	r0, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x188>)
 8000800:	f000 fd7e 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <MX_GPIO_Init+0x18c>)
 800080a:	f000 fd79 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOUT_LED1_Pin */
  GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	482a      	ldr	r0, [pc, #168]	; (80008d0 <MX_GPIO_Init+0x184>)
 8000826:	f000 fbe7 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_0_Pin */
  GPIO_InitStruct.Pin = SEL_0_Pin;
 800082a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4824      	ldr	r0, [pc, #144]	; (80008d4 <MX_GPIO_Init+0x188>)
 8000844:	f000 fbd8 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_CFIG_Pin */
  GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	481f      	ldr	r0, [pc, #124]	; (80008dc <MX_GPIO_Init+0x190>)
 8000860:	f000 fbca 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_RX_485_Pin */
  GPIO_InitStruct.Pin = EN_RX_485_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4817      	ldr	r0, [pc, #92]	; (80008d8 <MX_GPIO_Init+0x18c>)
 800087c:	f000 fbbc 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_Pin */
  GPIO_InitStruct.Pin = SEL_1_Pin;
 8000880:	2308      	movs	r3, #8
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_GPIO_Init+0x184>)
 8000898:	f000 fbae 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_TARA_Pin */
  GPIO_InitStruct.Pin = DIN_TARA_Pin;
 800089c:	2310      	movs	r3, #16
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <MX_GPIO_Init+0x184>)
 80008b0:	f000 fba2 	bl	8000ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	2028      	movs	r0, #40	; 0x28
 80008ba:	f000 fb73 	bl	8000fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008be:	2028      	movs	r0, #40	; 0x28
 80008c0:	f000 fb8c 	bl	8000fdc <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020800 	.word	0x40020800

080008e0 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <vPrintString+0x60>)
 80008f0:	f000 fd06 	bl	8001300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2108      	movs	r1, #8
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <vPrintString+0x64>)
 80008fa:	f000 fd01 	bl	8001300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2104      	movs	r1, #4
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <vPrintString+0x68>)
 8000904:	f000 fcfc 	bl	8001300 <HAL_GPIO_WritePin>
	taskENTER_CRITICAL();	//removido
 8000908:	f004 fb1c 	bl	8004f44 <vPortEnterCritical>
	//xSemaphoreTake(xMutex, portMAX_DELAY);
	{
		vUsartLib_Puts(pc_uartSend_f);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 f82d 	bl	800096c <vUsartLib_Puts>
	}
	taskEXIT_CRITICAL();		//removido
 8000912:	f004 fb47 	bl	8004fa4 <vPortExitCritical>
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	//xSemaphoreGive(xMutex);
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <vPrintString+0x60>)
 800091e:	f000 fcef 	bl	8001300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2108      	movs	r1, #8
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <vPrintString+0x64>)
 8000928:	f000 fcea 	bl	8001300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2104      	movs	r1, #4
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <vPrintString+0x68>)
 8000932:	f000 fce5 	bl	8001300 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020c00 	.word	0x40020c00

0800094c <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 8000958:	1cf9      	adds	r1, r7, #3
 800095a:	230a      	movs	r3, #10
 800095c:	2201      	movs	r2, #1
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f001 fc8d 	bl	800227e <HAL_UART_Transmit>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000974:	e007      	b.n	8000986 <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <vUsartLib_Puts+0x2c>)
 8000982:	f7ff ffe3 	bl	800094c <vUsartLib_Putc>
	while (*c_data) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f3      	bne.n	8000976 <vUsartLib_Puts+0xa>
	}
}
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000de38 	.word	0x2000de38

0800099c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]

}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <prvTimerCallback>:

	sprintf(ucCharBuff, "One-shot timer callback. xTimeNow = %ld\r\n", xTimeNow);
	vPrintString(ucCharBuff);
}

static void prvTimerCallback( TimerHandle_t xTimer ) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b092      	sub	sp, #72	; 0x48
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]

	static BaseType_t xErrorDetected = pdFALSE;

	static uint32_t ulCount = 0;

	if( xErrorDetected == pdFALSE ) {
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <prvTimerCallback+0x5c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d115      	bne.n	80009f0 <prvTimerCallback+0x3c>
		/*
		 * Uma ou mais tarefas relatam que esta tudo ok. Neste caso utilizamos o xHealthyTimerPeriod
		 * para mudar o tempo de interrupção para 3 segundos
		 */
		xTimerChangePeriod(xTimer, xHealthyTimerPeriod, 0);
 80009c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009c8:	2300      	movs	r3, #0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	2104      	movs	r1, #4
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f003 fead 	bl	8004730 <xTimerGenericCommand>

		ulCount++;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <prvTimerCallback+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <prvTimerCallback+0x60>)
 80009de:	6013      	str	r3, [r2, #0]

		if(ulCount == 5) {
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <prvTimerCallback+0x60>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	d10b      	bne.n	8000a00 <prvTimerCallback+0x4c>
			xErrorDetected =pdTRUE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <prvTimerCallback+0x5c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e007      	b.n	8000a00 <prvTimerCallback+0x4c>
	} else {
		/*
		 * Uma ou mais tarefas relatam que esta tudo ok. Neste caso utilizamos o xHealthyTimerPeriod para mudar o
		 * tempo de interrupção para 3 segundos
		 */
		xTimerChangePeriod(xTimer, xErrorTimerPeriod, 0);
 80009f0:	22c8      	movs	r2, #200	; 0xc8
 80009f2:	2300      	movs	r3, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2104      	movs	r1, #4
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f003 fe98 	bl	8004730 <xTimerGenericCommand>
	 * O valor do LED é modificado a cada ISR gerada de acordo com a temporização
	 * Identificado que esta tudo bem, atualizando o status do led a cada 3000ms junto da ISR
	 * Identificado que tem algo de errado com alguma task, atualizando o status de led a cada 200ms junto da ISR
	 *
	 */
	HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000a00:	2101      	movs	r1, #1
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <prvTimerCallback+0x64>)
 8000a04:	f000 fc95 	bl	8001332 <HAL_GPIO_TogglePin>

}
 8000a08:	bf00      	nop
 8000a0a:	3740      	adds	r7, #64	; 0x40
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000090 	.word	0x20000090
 8000a14:	20000094 	.word	0x20000094
 8000a18:	40020400 	.word	0x40020400

08000a1c <vTask_blink>:
//	}
//	vTaskDelete(NULL);
//}


void vTask_blink(void *pvParameters) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0b4      	sub	sp, #208	; 0xd0
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

	char  c_buff[200];

	vPrintString("Entrando da Task de debug");
 8000a24:	481b      	ldr	r0, [pc, #108]	; (8000a94 <vTask_blink+0x78>)
 8000a26:	f7ff ff5b 	bl	80008e0 <vPrintString>

	for (;;) {
		//Altera o estado do led
		//HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);

		vTaskList(c_buff);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fcf4 	bl	800441c <vTaskList>

		vPrintString("\n\r\nTask-------------State-----Prio------Stack---Num\r\n");
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <vTask_blink+0x7c>)
 8000a36:	f7ff ff53 	bl	80008e0 <vPrintString>
		vPrintString(c_buff);
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff4e 	bl	80008e0 <vPrintString>
		vPrintString("\n");
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <vTask_blink+0x80>)
 8000a46:	f7ff ff4b 	bl	80008e0 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	22c8      	movs	r2, #200	; 0xc8
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f004 fdc6 	bl	80055e4 <memset>

		sprintf(c_buff, "Free Heap: %d bytes \n\n", xPortGetMinimumEverFreeHeapSize());
 8000a58:	f004 fcc4 	bl	80053e4 <xPortGetMinimumEverFreeHeapSize>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	490f      	ldr	r1, [pc, #60]	; (8000aa0 <vTask_blink+0x84>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 fdc5 	bl	80055f4 <siprintf>
		vPrintString(c_buff);
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff36 	bl	80008e0 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	22c8      	movs	r2, #200	; 0xc8
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 fdb1 	bl	80055e4 <memset>

		vPrintString("\n\n\n");
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <vTask_blink+0x88>)
 8000a84:	f7ff ff2c 	bl	80008e0 <vPrintString>
		vTaskDelay(5000 / portTICK_PERIOD_MS);
 8000a88:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a8c:	f002 fdf8 	bl	8003680 <vTaskDelay>
		vTaskList(c_buff);
 8000a90:	e7cb      	b.n	8000a2a <vTask_blink+0xe>
 8000a92:	bf00      	nop
 8000a94:	08005f0c 	.word	0x08005f0c
 8000a98:	08005f28 	.word	0x08005f28
 8000a9c:	08005f60 	.word	0x08005f60
 8000aa0:	08005f64 	.word	0x08005f64
 8000aa4:	08005f7c 	.word	0x08005f7c

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f99b 	bl	8000df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40000800 	.word	0x40000800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_MspInit+0x54>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_MspInit+0x54>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x54>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_MspInit+0x54>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_MspInit+0x54>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x54>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f000 fa41 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_UART_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b8a:	23c0      	movs	r3, #192	; 0xc0
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_UART_MspInit+0x8c>)
 8000ba6:	f000 fa27 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	201e      	movs	r0, #30
 8000bd6:	f000 f9e5 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bda:	201e      	movs	r0, #30
 8000bdc:	f000 f9fe 	bl	8000fdc <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_InitTick+0xa4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_InitTick+0xa4>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xa4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 f83a 	bl	8001c80 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c0c:	f001 f810 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8000c10:	4603      	mov	r3, r0
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_InitTick+0xa8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3b01      	subs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_InitTick+0xac>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_InitTick+0xb0>)
 8000c28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_InitTick+0xac>)
 8000c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_InitTick+0xac>)
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_InitTick+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_InitTick+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_InitTick+0xac>)
 8000c46:	f001 f84d 	bl	8001ce4 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d104      	bne.n	8000c5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <HAL_InitTick+0xac>)
 8000c52:	f001 f8a1 	bl	8001d98 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3730      	adds	r7, #48	; 0x30
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	431bde83 	.word	0x431bde83
 8000c6c:	2000de80 	.word	0x2000de80
 8000c70:	40000800 	.word	0x40000800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <TIM4_IRQHandler+0x10>)
 8000ca6:	f001 f8d9 	bl	8001e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000de80 	.word	0x2000de80

08000cb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000cb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cbc:	f000 fb54 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f004 fc3e 	bl	8005574 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20010000 	.word	0x20010000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20000098 	.word	0x20000098
 8000d2c:	2000df20 	.word	0x2000df20

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <SystemInit+0x28>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <SystemInit+0x28>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SystemInit+0x28>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d62:	e003      	b.n	8000d6c <LoopCopyDataInit>

08000d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d6a:	3104      	adds	r1, #4

08000d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d74:	d3f6      	bcc.n	8000d64 <CopyDataInit>
  ldr  r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d78:	e002      	b.n	8000d80 <LoopFillZerobss>

08000d7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d7c:	f842 3b04 	str.w	r3, [r2], #4

08000d80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d84:	d3f9      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd3 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f004 fbf9 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fbfb 	bl	8000588 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000d98:	08006004 	.word	0x08006004
  ldr  r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000da0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000da4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000da8:	2000df1c 	.word	0x2000df1c

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f8d8 	bl	8000f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff feee 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fe78 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	2000dec8 	.word	0x2000dec8

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000dec8 	.word	0x2000dec8

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff4c 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb6:	f7ff ff61 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff ffb1 	bl	8000f28 <NVIC_EncodePriority>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff80 	bl	8000ed4 <__NVIC_SetPriority>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff54 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e159      	b.n	80012c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 8148 	bne.w	80012c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d005      	beq.n	800104a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	2b02      	cmp	r3, #2
 8001048:	d130      	bne.n	80010ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 0201 	and.w	r2, r3, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d017      	beq.n	80010e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d123      	bne.n	800113c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a2 	beq.w	80012c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <HAL_GPIO_Init+0x2e8>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_GPIO_Init+0x2e8>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x2e8>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x2ec>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x2f0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x202>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2f4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x1fe>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <HAL_GPIO_Init+0x2f8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x1fa>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <HAL_GPIO_Init+0x2fc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x1f6>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_GPIO_Init+0x300>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x1f2>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011fa:	2300      	movs	r3, #0
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800120c:	4935      	ldr	r1, [pc, #212]	; (80012e4 <HAL_GPIO_Init+0x2ec>)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_GPIO_Init+0x304>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001268:	4a24      	ldr	r2, [pc, #144]	; (80012fc <HAL_GPIO_Init+0x304>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001292:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_GPIO_Init+0x304>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_GPIO_Init+0x304>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	f67f aea2 	bls.w	8001014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001344:	887a      	ldrh	r2, [r7, #2]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	041a      	lsls	r2, r3, #16
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43d9      	mvns	r1, r3
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	400b      	ands	r3, r1
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fb08 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e264      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d075      	beq.n	80014a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b6:	4ba3      	ldr	r3, [pc, #652]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00c      	beq.n	80013dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4ba0      	ldr	r3, [pc, #640]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d112      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b9d      	ldr	r3, [pc, #628]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013da:	d10b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4b99      	ldr	r3, [pc, #612]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05b      	beq.n	80014a0 <HAL_RCC_OscConfig+0x108>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d157      	bne.n	80014a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e23f      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d106      	bne.n	800140c <HAL_RCC_OscConfig+0x74>
 80013fe:	4b91      	ldr	r3, [pc, #580]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a90      	ldr	r2, [pc, #576]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a87      	ldr	r2, [pc, #540]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 8001430:	4b84      	ldr	r3, [pc, #528]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a83      	ldr	r2, [pc, #524]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a80      	ldr	r2, [pc, #512]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fce4 	bl	8000e1c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fce0 	bl	8000e1c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e204      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xc0>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fcd0 	bl	8000e1c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fccc 	bl	8000e1c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1f0      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b6c      	ldr	r3, [pc, #432]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ae:	4b65      	ldr	r3, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c4      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4952      	ldr	r1, [pc, #328]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <HAL_RCC_OscConfig+0x2b0>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fc85 	bl	8000e1c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc81 	bl	8000e1c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a5      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4940      	ldr	r1, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x2b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc64 	bl	8000e1c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc60 	bl	8000e1c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e184      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d030      	beq.n	80015e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d016      	beq.n	80015b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_RCC_OscConfig+0x2b4>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fc44 	bl	8000e1c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fc40 	bl	8000e1c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e164      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x200>
 80015b6:	e015      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x2b4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fc2d 	bl	8000e1c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc29 	bl	8000e1c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e14d      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a0 	beq.w	8001732 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x2b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d121      	bne.n	8001672 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x2b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_RCC_OscConfig+0x2b8>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fbef 	bl	8000e1c <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e011      	b.n	8001666 <HAL_RCC_OscConfig+0x2ce>
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	42470e80 	.word	0x42470e80
 8001650:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff fbe2 	bl	8000e1c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e106      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b85      	ldr	r3, [pc, #532]	; (800187c <HAL_RCC_OscConfig+0x4e4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x2f0>
 800167a:	4b81      	ldr	r3, [pc, #516]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a80      	ldr	r2, [pc, #512]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	e01c      	b.n	80016c2 <HAL_RCC_OscConfig+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x312>
 8001690:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a7a      	ldr	r2, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
 800169c:	4b78      	ldr	r3, [pc, #480]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a77      	ldr	r2, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x32a>
 80016aa:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a74      	ldr	r2, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
 80016b6:	4b72      	ldr	r3, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a71      	ldr	r2, [pc, #452]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d015      	beq.n	80016f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fba7 	bl	8000e1c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fba3 	bl	8000e1c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0c5      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ee      	beq.n	80016d2 <HAL_RCC_OscConfig+0x33a>
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb91 	bl	8000e1c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fb8d 	bl	8000e1c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0af      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001726:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800172c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 809b 	beq.w	8001872 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d05c      	beq.n	8001802 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d141      	bne.n	80017d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fb61 	bl	8000e1c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fb5d 	bl	8000e1c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e081      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	019b      	lsls	r3, r3, #6
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
 80017a0:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb36 	bl	8000e1c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fb32 	bl	8000e1c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e056      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x41c>
 80017d2:	e04e      	b.n	8001872 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb1f 	bl	8000e1c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fb1b 	bl	8000e1c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e03f      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x44a>
 8001800:	e037      	b.n	8001872 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e032      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d028      	beq.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d121      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d11a      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001844:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001846:	4293      	cmp	r3, r2
 8001848:	d111      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d107      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40007000 	.word	0x40007000
 8001880:	40023800 	.word	0x40023800
 8001884:	42470060 	.word	0x42470060

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e067      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4934      	ldr	r1, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa50 	bl	8000e1c <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa4c 	bl	8000e1c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f8c6 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08005fa8 	.word	0x08005fa8
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80bd 	bhi.w	8001bf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e0b7      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a8a:	60bb      	str	r3, [r7, #8]
       break;
 8001a8c:	e0b7      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a90:	60bb      	str	r3, [r7, #8]
      break;
 8001a92:	e0b4      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d04d      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	ea02 0800 	and.w	r8, r2, r0
 8001ac2:	ea03 0901 	and.w	r9, r3, r1
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	4649      	mov	r1, r9
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	014b      	lsls	r3, r1, #5
 8001ad4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ad8:	0142      	lsls	r2, r0, #5
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	ebb0 0008 	subs.w	r0, r0, r8
 8001ae2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	018b      	lsls	r3, r1, #6
 8001af0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001af4:	0182      	lsls	r2, r0, #6
 8001af6:	1a12      	subs	r2, r2, r0
 8001af8:	eb63 0301 	sbc.w	r3, r3, r1
 8001afc:	f04f 0000 	mov.w	r0, #0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	00d9      	lsls	r1, r3, #3
 8001b06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b0a:	00d0      	lsls	r0, r2, #3
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	eb12 0208 	adds.w	r2, r2, r8
 8001b14:	eb43 0309 	adc.w	r3, r3, r9
 8001b18:	f04f 0000 	mov.w	r0, #0
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	0259      	lsls	r1, r3, #9
 8001b22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b26:	0250      	lsls	r0, r2, #9
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	f7fe fbaa 	bl	8000290 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e04a      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	ea02 0400 	and.w	r4, r2, r0
 8001b5e:	ea03 0501 	and.w	r5, r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	014b      	lsls	r3, r1, #5
 8001b70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b74:	0142      	lsls	r2, r0, #5
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	1b00      	subs	r0, r0, r4
 8001b7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	018b      	lsls	r3, r1, #6
 8001b8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b8e:	0182      	lsls	r2, r0, #6
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	eb63 0301 	sbc.w	r3, r3, r1
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	00d9      	lsls	r1, r3, #3
 8001ba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ba4:	00d0      	lsls	r0, r2, #3
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	1912      	adds	r2, r2, r4
 8001bac:	eb45 0303 	adc.w	r3, r5, r3
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	0299      	lsls	r1, r3, #10
 8001bba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bbe:	0290      	lsls	r0, r2, #10
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f7fe fb5e 	bl	8000290 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	60bb      	str	r3, [r7, #8]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bfa:	60bb      	str	r3, [r7, #8]
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	007a1200 	.word	0x007a1200

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08005fb8 	.word	0x08005fb8

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff ffdc 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0b5b      	lsrs	r3, r3, #13
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08005fb8 	.word	0x08005fb8

08001c80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetClockConfig+0x60>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0207 	and.w	r2, r3, #7
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e041      	b.n	8001d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f839 	bl	8001d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f000 f9ca 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d001      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e044      	b.n	8001e3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dda:	d013      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_TIM_Base_Start_IT+0xb4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_TIM_Base_Start_IT+0xb8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_TIM_Base_Start_IT+0xbc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d111      	bne.n	8001e28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d010      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e26:	e007      	b.n	8001e38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00
 8001e58:	40014000 	.word	0x40014000

08001e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0202 	mvn.w	r2, #2
 8001e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8ee 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8e0 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8f1 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0204 	mvn.w	r2, #4
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8c4 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8b6 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8c7 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0208 	mvn.w	r2, #8
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f89a 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f88c 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f89d 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0210 	mvn.w	r2, #16
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f870 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f862 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f873 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0201 	mvn.w	r2, #1
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fd64 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8e2 	bl	80021d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d10e      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d107      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f838 	bl	80020a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b20      	cmp	r3, #32
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b20      	cmp	r3, #32
 8002052:	d107      	bne.n	8002064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0220 	mvn.w	r2, #32
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8ac 	bl	80021bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <TIM_Base_SetConfig+0xe4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00f      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00b      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <TIM_Base_SetConfig+0xe8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <TIM_Base_SetConfig+0xec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <TIM_Base_SetConfig+0xf0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d108      	bne.n	8002106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <TIM_Base_SetConfig+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01b      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d017      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <TIM_Base_SetConfig+0xe8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <TIM_Base_SetConfig+0xec>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00f      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <TIM_Base_SetConfig+0xf0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00b      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <TIM_Base_SetConfig+0xf4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <TIM_Base_SetConfig+0xf8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d003      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <TIM_Base_SetConfig+0xfc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d108      	bne.n	8002158 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <TIM_Base_SetConfig+0xe4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	615a      	str	r2, [r3, #20]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40000c00 	.word	0x40000c00
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400
 80021b8:	40014800 	.word	0x40014800

080021bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e03f      	b.n	8002276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fc90 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f929 	bl	8002480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800223c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800224c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800225c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b08a      	sub	sp, #40	; 0x28
 8002282:	af02      	add	r7, sp, #8
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b20      	cmp	r3, #32
 800229c:	d17c      	bne.n	8002398 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_UART_Transmit+0x2c>
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e075      	b.n	800239a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_UART_Transmit+0x3e>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e06e      	b.n	800239a <HAL_UART_Transmit+0x11c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d2:	f7fe fda3 	bl	8000e1c <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ec:	d108      	bne.n	8002300 <HAL_UART_Transmit+0x82>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d104      	bne.n	8002300 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e003      	b.n	8002308 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002310:	e02a      	b.n	8002368 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f840 	bl	80023a2 <UART_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e036      	b.n	800239a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3302      	adds	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e007      	b.n	800235a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1cf      	bne.n	8002312 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f810 	bl	80023a2 <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b090      	sub	sp, #64	; 0x40
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b2:	e050      	b.n	8002456 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d04c      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80023c2:	f7fe fd2b 	bl	8000e1c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d241      	bcs.n	8002456 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	330c      	adds	r3, #12
 80023f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f2:	637a      	str	r2, [r7, #52]	; 0x34
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3314      	adds	r3, #20
 800240c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	613b      	str	r3, [r7, #16]
   return(result);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	63bb      	str	r3, [r7, #56]	; 0x38
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002426:	623a      	str	r2, [r7, #32]
 8002428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	61bb      	str	r3, [r7, #24]
   return(result);
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e5      	bne.n	8002406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e00f      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d09f      	beq.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3740      	adds	r7, #64	; 0x40
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002484:	b09f      	sub	sp, #124	; 0x7c
 8002486:	af00      	add	r7, sp, #0
 8002488:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002496:	68d9      	ldr	r1, [r3, #12]
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	ea40 0301 	orr.w	r3, r0, r1
 80024a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024c4:	f021 010c 	bic.w	r1, r1, #12
 80024c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ce:	430b      	orrs	r3, r1
 80024d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	6999      	ldr	r1, [r3, #24]
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	ea40 0301 	orr.w	r3, r0, r1
 80024e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4bc5      	ldr	r3, [pc, #788]	; (8002804 <UART_SetConfig+0x384>)
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d004      	beq.n	80024fe <UART_SetConfig+0x7e>
 80024f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4bc3      	ldr	r3, [pc, #780]	; (8002808 <UART_SetConfig+0x388>)
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d103      	bne.n	8002506 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024fe:	f7ff fbab 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8002502:	6778      	str	r0, [r7, #116]	; 0x74
 8002504:	e002      	b.n	800250c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002506:	f7ff fb93 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 800250a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002514:	f040 80b6 	bne.w	8002684 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251a:	461c      	mov	r4, r3
 800251c:	f04f 0500 	mov.w	r5, #0
 8002520:	4622      	mov	r2, r4
 8002522:	462b      	mov	r3, r5
 8002524:	1891      	adds	r1, r2, r2
 8002526:	6439      	str	r1, [r7, #64]	; 0x40
 8002528:	415b      	adcs	r3, r3
 800252a:	647b      	str	r3, [r7, #68]	; 0x44
 800252c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002530:	1912      	adds	r2, r2, r4
 8002532:	eb45 0303 	adc.w	r3, r5, r3
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	00d9      	lsls	r1, r3, #3
 8002540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002544:	00d0      	lsls	r0, r2, #3
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	1911      	adds	r1, r2, r4
 800254c:	6639      	str	r1, [r7, #96]	; 0x60
 800254e:	416b      	adcs	r3, r5
 8002550:	667b      	str	r3, [r7, #100]	; 0x64
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	1891      	adds	r1, r2, r2
 800255e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002560:	415b      	adcs	r3, r3
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002568:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800256c:	f7fd fe90 	bl	8000290 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4ba5      	ldr	r3, [pc, #660]	; (800280c <UART_SetConfig+0x38c>)
 8002576:	fba3 2302 	umull	r2, r3, r3, r2
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	011e      	lsls	r6, r3, #4
 800257e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002580:	461c      	mov	r4, r3
 8002582:	f04f 0500 	mov.w	r5, #0
 8002586:	4622      	mov	r2, r4
 8002588:	462b      	mov	r3, r5
 800258a:	1891      	adds	r1, r2, r2
 800258c:	6339      	str	r1, [r7, #48]	; 0x30
 800258e:	415b      	adcs	r3, r3
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002596:	1912      	adds	r2, r2, r4
 8002598:	eb45 0303 	adc.w	r3, r5, r3
 800259c:	f04f 0000 	mov.w	r0, #0
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	00d9      	lsls	r1, r3, #3
 80025a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025aa:	00d0      	lsls	r0, r2, #3
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	1911      	adds	r1, r2, r4
 80025b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b4:	416b      	adcs	r3, r5
 80025b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	461a      	mov	r2, r3
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	1891      	adds	r1, r2, r2
 80025c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80025c6:	415b      	adcs	r3, r3
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025d2:	f7fd fe5d 	bl	8000290 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4b8c      	ldr	r3, [pc, #560]	; (800280c <UART_SetConfig+0x38c>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	3332      	adds	r3, #50	; 0x32
 80025ee:	4a87      	ldr	r2, [pc, #540]	; (800280c <UART_SetConfig+0x38c>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025fc:	441e      	add	r6, r3
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	4618      	mov	r0, r3
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	1894      	adds	r4, r2, r2
 800260c:	623c      	str	r4, [r7, #32]
 800260e:	415b      	adcs	r3, r3
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002616:	1812      	adds	r2, r2, r0
 8002618:	eb41 0303 	adc.w	r3, r1, r3
 800261c:	f04f 0400 	mov.w	r4, #0
 8002620:	f04f 0500 	mov.w	r5, #0
 8002624:	00dd      	lsls	r5, r3, #3
 8002626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800262a:	00d4      	lsls	r4, r2, #3
 800262c:	4622      	mov	r2, r4
 800262e:	462b      	mov	r3, r5
 8002630:	1814      	adds	r4, r2, r0
 8002632:	653c      	str	r4, [r7, #80]	; 0x50
 8002634:	414b      	adcs	r3, r1
 8002636:	657b      	str	r3, [r7, #84]	; 0x54
 8002638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	461a      	mov	r2, r3
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	1891      	adds	r1, r2, r2
 8002644:	61b9      	str	r1, [r7, #24]
 8002646:	415b      	adcs	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002652:	f7fd fe1d 	bl	8000290 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4b6c      	ldr	r3, [pc, #432]	; (800280c <UART_SetConfig+0x38c>)
 800265c:	fba3 1302 	umull	r1, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2164      	movs	r1, #100	; 0x64
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	4a67      	ldr	r2, [pc, #412]	; (800280c <UART_SetConfig+0x38c>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4432      	add	r2, r6
 8002680:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002682:	e0b9      	b.n	80027f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002686:	461c      	mov	r4, r3
 8002688:	f04f 0500 	mov.w	r5, #0
 800268c:	4622      	mov	r2, r4
 800268e:	462b      	mov	r3, r5
 8002690:	1891      	adds	r1, r2, r2
 8002692:	6139      	str	r1, [r7, #16]
 8002694:	415b      	adcs	r3, r3
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800269c:	1912      	adds	r2, r2, r4
 800269e:	eb45 0303 	adc.w	r3, r5, r3
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	00d9      	lsls	r1, r3, #3
 80026ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b0:	00d0      	lsls	r0, r2, #3
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	eb12 0804 	adds.w	r8, r2, r4
 80026ba:	eb43 0905 	adc.w	r9, r3, r5
 80026be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	008b      	lsls	r3, r1, #2
 80026d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026d6:	0082      	lsls	r2, r0, #2
 80026d8:	4640      	mov	r0, r8
 80026da:	4649      	mov	r1, r9
 80026dc:	f7fd fdd8 	bl	8000290 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4b49      	ldr	r3, [pc, #292]	; (800280c <UART_SetConfig+0x38c>)
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	011e      	lsls	r6, r3, #4
 80026ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f0:	4618      	mov	r0, r3
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	1894      	adds	r4, r2, r2
 80026fc:	60bc      	str	r4, [r7, #8]
 80026fe:	415b      	adcs	r3, r3
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002706:	1812      	adds	r2, r2, r0
 8002708:	eb41 0303 	adc.w	r3, r1, r3
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	f04f 0500 	mov.w	r5, #0
 8002714:	00dd      	lsls	r5, r3, #3
 8002716:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800271a:	00d4      	lsls	r4, r2, #3
 800271c:	4622      	mov	r2, r4
 800271e:	462b      	mov	r3, r5
 8002720:	1814      	adds	r4, r2, r0
 8002722:	64bc      	str	r4, [r7, #72]	; 0x48
 8002724:	414b      	adcs	r3, r1
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002740:	0082      	lsls	r2, r0, #2
 8002742:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002746:	f7fd fda3 	bl	8000290 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4b2f      	ldr	r3, [pc, #188]	; (800280c <UART_SetConfig+0x38c>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	; 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	3332      	adds	r3, #50	; 0x32
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <UART_SetConfig+0x38c>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276e:	441e      	add	r6, r3
 8002770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002772:	4618      	mov	r0, r3
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	1894      	adds	r4, r2, r2
 800277e:	603c      	str	r4, [r7, #0]
 8002780:	415b      	adcs	r3, r3
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002788:	1812      	adds	r2, r2, r0
 800278a:	eb41 0303 	adc.w	r3, r1, r3
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	f04f 0500 	mov.w	r5, #0
 8002796:	00dd      	lsls	r5, r3, #3
 8002798:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800279c:	00d4      	lsls	r4, r2, #3
 800279e:	4622      	mov	r2, r4
 80027a0:	462b      	mov	r3, r5
 80027a2:	eb12 0a00 	adds.w	sl, r2, r0
 80027a6:	eb43 0b01 	adc.w	fp, r3, r1
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027c2:	0082      	lsls	r2, r0, #2
 80027c4:	4650      	mov	r0, sl
 80027c6:	4659      	mov	r1, fp
 80027c8:	f7fd fd62 	bl	8000290 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <UART_SetConfig+0x38c>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <UART_SetConfig+0x38c>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4432      	add	r2, r6
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	377c      	adds	r7, #124	; 0x7c
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002802:	bf00      	nop
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	51eb851f 	.word	0x51eb851f

08002810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0208 	add.w	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 0208 	add.w	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0208 	add.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d103      	bne.n	80028d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e00c      	b.n	80028ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3308      	adds	r3, #8
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e002      	b.n	80028e0 <vListInsert+0x2e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d2f6      	bcs.n	80028da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d103      	bne.n	8002958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1e5a      	subs	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029a2:	f002 facf 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	68f9      	ldr	r1, [r7, #12]
 80029b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	441a      	add	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	3b01      	subs	r3, #1
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	441a      	add	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d114      	bne.n	8002a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01a      	beq.n	8002a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3310      	adds	r3, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f9cf 	bl	8003da8 <xTaskRemoveFromEventList>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <xQueueGenericReset+0xcc>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	e009      	b.n	8002a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3310      	adds	r3, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fef2 	bl	8002810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3324      	adds	r3, #36	; 0x24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff feed 	bl	8002810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a36:	f002 fab5 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	613b      	str	r3, [r7, #16]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3354      	adds	r3, #84	; 0x54
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fb81 	bl	8005188 <pvPortMalloc>
 8002a86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3354      	adds	r3, #84	; 0x54
 8002a96:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a98:	79fa      	ldrb	r2, [r7, #7]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f805 	bl	8002ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e002      	b.n	8002ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	69b8      	ldr	r0, [r7, #24]
 8002ae6:	f7ff ff47 	bl	8002978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2200      	movs	r2, #0
 8002af6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericSend+0x32>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <xQueueGenericSend+0x40>
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <xQueueGenericSend+0x44>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <xQueueGenericSend+0x46>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <xQueueGenericSend+0x60>
	__asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	623b      	str	r3, [r7, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d103      	bne.n	8002b6e <xQueueGenericSend+0x6e>
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <xQueueGenericSend+0x72>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <xQueueGenericSend+0x74>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xQueueGenericSend+0x8e>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	61fb      	str	r3, [r7, #28]
}
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b8e:	f001 fb7b 	bl	8004288 <xTaskGetSchedulerState>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <xQueueGenericSend+0x9e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <xQueueGenericSend+0xa2>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericSend+0xa4>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <xQueueGenericSend+0xbe>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	61bb      	str	r3, [r7, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bbe:	f002 f9c1 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <xQueueGenericSend+0xd4>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d145      	bne.n	8002c60 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be0:	f000 fa3a 	bl	8003058 <prvCopyDataToQueue>
 8002be4:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d014      	beq.n	8002c18 <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d102      	bne.n	8002bfa <xQueueGenericSend+0xfa>
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d12e      	bne.n	8002c58 <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfc:	f000 fba8 	bl	8003350 <prvNotifyQueueSetContainer>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d028      	beq.n	8002c58 <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <xQueueGenericSend+0x230>)
 8002c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	e01f      	b.n	8002c58 <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f8bf 	bl	8003da8 <xTaskRemoveFromEventList>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002c30:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <xQueueGenericSend+0x230>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	e00a      	b.n	8002c58 <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c48:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <xQueueGenericSend+0x230>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c58:	f002 f9a4 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e063      	b.n	8002d28 <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c66:	f002 f99d 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e05c      	b.n	8002d28 <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 f8f7 	bl	8003e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c82:	f002 f98f 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c86:	f000 fde3 	bl	8003850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8a:	f002 f95b 	bl	8004f44 <vPortEnterCritical>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d103      	bne.n	8002ca4 <xQueueGenericSend+0x1a4>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSend+0x1ba>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cba:	f002 f973 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cbe:	1d3a      	adds	r2, r7, #4
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 f8e6 	bl	8003e98 <xTaskCheckForTimeOut>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d124      	bne.n	8002d1c <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd4:	f000 fac5 	bl	8003262 <prvIsQueueFull>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 f80e 	bl	8003d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cee:	f000 fa43 	bl	8003178 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cf2:	f000 fdbb 	bl	800386c <xTaskResumeAll>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af60 	bne.w	8002bbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <xQueueGenericSend+0x230>)
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	e756      	b.n	8002bbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d12:	f000 fa31 	bl	8003178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d16:	f000 fda9 	bl	800386c <xTaskResumeAll>
 8002d1a:	e750      	b.n	8002bbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d1e:	f000 fa2b 	bl	8003178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d22:	f000 fda3 	bl	800386c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3738      	adds	r7, #56	; 0x38
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b090      	sub	sp, #64	; 0x40
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <xQueueGenericSendFromISR+0x3c>
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <xQueueGenericSendFromISR+0x40>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <xQueueGenericSendFromISR+0x42>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <xQueueGenericSendFromISR+0x6a>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSendFromISR+0x6e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericSendFromISR+0x70>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	623b      	str	r3, [r7, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dbe:	f002 f9a3 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	61fa      	str	r2, [r7, #28]
 8002dd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xQueueGenericSendFromISR+0xbc>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d146      	bne.n	8002e7e <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e06:	f000 f927 	bl	8003058 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d129      	bne.n	8002e68 <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d102      	bne.n	8002e28 <xQueueGenericSendFromISR+0xf4>
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d127      	bne.n	8002e78 <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e2a:	f000 fa91 	bl	8003350 <prvNotifyQueueSetContainer>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d021      	beq.n	8002e78 <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01e      	beq.n	8002e78 <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e01a      	b.n	8002e78 <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	3324      	adds	r3, #36	; 0x24
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ffaa 	bl	8003da8 <xTaskRemoveFromEventList>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00e      	beq.n	8002e78 <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e007      	b.n	8002e78 <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	b25a      	sxtb	r2, r3
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e7c:	e001      	b.n	8002e82 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3740      	adds	r7, #64	; 0x40
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <xQueueReceive+0x30>
	__asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	623b      	str	r3, [r7, #32]
}
 8002ec4:	bf00      	nop
 8002ec6:	e7fe      	b.n	8002ec6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <xQueueReceive+0x3e>
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <xQueueReceive+0x42>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <xQueueReceive+0x44>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <xQueueReceive+0x5e>
	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	61fb      	str	r3, [r7, #28]
}
 8002ef2:	bf00      	nop
 8002ef4:	e7fe      	b.n	8002ef4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ef6:	f001 f9c7 	bl	8004288 <xTaskGetSchedulerState>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <xQueueReceive+0x6e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <xQueueReceive+0x72>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xQueueReceive+0x74>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueReceive+0x8e>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	61bb      	str	r3, [r7, #24]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f26:	f002 f80d 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01f      	beq.n	8002f76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3a:	f000 f8f7 	bl	800312c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00f      	beq.n	8002f6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	3310      	adds	r3, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 ff28 	bl	8003da8 <xTaskRemoveFromEventList>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <xQueueReceive+0x1bc>)
 8002f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f6e:	f002 f819 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e069      	b.n	800304a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f7c:	f002 f812 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e062      	b.n	800304a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 ff6c 	bl	8003e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f98:	f002 f804 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f9c:	f000 fc58 	bl	8003850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fa0:	f001 ffd0 	bl	8004f44 <vPortEnterCritical>
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d103      	bne.n	8002fba <xQueueReceive+0x122>
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d103      	bne.n	8002fd0 <xQueueReceive+0x138>
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd0:	f001 ffe8 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fd4:	1d3a      	adds	r2, r7, #4
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 ff5b 	bl	8003e98 <xTaskCheckForTimeOut>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d123      	bne.n	8003030 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fea:	f000 f924 	bl	8003236 <prvIsQueueEmpty>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	3324      	adds	r3, #36	; 0x24
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fe83 	bl	8003d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003004:	f000 f8b8 	bl	8003178 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003008:	f000 fc30 	bl	800386c <xTaskResumeAll>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d189      	bne.n	8002f26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <xQueueReceive+0x1bc>)
 8003014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	e780      	b.n	8002f26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003026:	f000 f8a7 	bl	8003178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800302a:	f000 fc1f 	bl	800386c <xTaskResumeAll>
 800302e:	e77a      	b.n	8002f26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003032:	f000 f8a1 	bl	8003178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003036:	f000 fc19 	bl	800386c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800303a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303c:	f000 f8fb 	bl	8003236 <prvIsQueueEmpty>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	f43f af6f 	beq.w	8002f26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800304a:	4618      	mov	r0, r3
 800304c:	3730      	adds	r7, #48	; 0x30
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d14d      	bne.n	800311a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f91e 	bl	80042c4 <xTaskPriorityDisinherit>
 8003088:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	e043      	b.n	800311a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d119      	bne.n	80030cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6858      	ldr	r0, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	461a      	mov	r2, r3
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	f002 fa90 	bl	80055c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	441a      	add	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d32b      	bcc.n	800311a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	e026      	b.n	800311a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68d8      	ldr	r0, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	461a      	mov	r2, r3
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	f002 fa76 	bl	80055c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	425b      	negs	r3, r3
 80030e6:	441a      	add	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	425b      	negs	r3, r3
 8003102:	441a      	add	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d105      	bne.n	800311a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	3b01      	subs	r3, #1
 8003118:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003122:	697b      	ldr	r3, [r7, #20]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d018      	beq.n	8003170 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	441a      	add	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	429a      	cmp	r2, r3
 8003156:	d303      	bcc.n	8003160 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68d9      	ldr	r1, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	461a      	mov	r2, r3
 800316a:	6838      	ldr	r0, [r7, #0]
 800316c:	f002 fa2c 	bl	80055c8 <memcpy>
	}
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003180:	f001 fee0 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800318c:	e01e      	b.n	80031cc <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8da 	bl	8003350 <prvNotifyQueueSetContainer>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80031a2:	f000 fedb 	bl	8003f5c <vTaskMissedYield>
 80031a6:	e00d      	b.n	80031c4 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3324      	adds	r3, #36	; 0x24
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fdf7 	bl	8003da8 <xTaskRemoveFromEventList>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80031c0:	f000 fecc 	bl	8003f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dcdc      	bgt.n	800318e <prvUnlockQueue+0x16>
 80031d4:	e000      	b.n	80031d8 <prvUnlockQueue+0x60>
						break;
 80031d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031e0:	f001 fee0 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031e4:	f001 feae 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031f0:	e011      	b.n	8003216 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3310      	adds	r3, #16
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fdd2 	bl	8003da8 <xTaskRemoveFromEventList>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 800320a:	f000 fea7 	bl	8003f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800320e:	7bbb      	ldrb	r3, [r7, #14]
 8003210:	3b01      	subs	r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800321a:	2b00      	cmp	r3, #0
 800321c:	dce9      	bgt.n	80031f2 <prvUnlockQueue+0x7a>
 800321e:	e000      	b.n	8003222 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8003220:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800322a:	f001 febb 	bl	8004fa4 <vPortExitCritical>
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800323e:	f001 fe81 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e001      	b.n	8003254 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003254:	f001 fea6 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003258:	68fb      	ldr	r3, [r7, #12]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800326a:	f001 fe6b 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	429a      	cmp	r2, r3
 8003278:	d102      	bne.n	8003280 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e001      	b.n	8003284 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003284:	f001 fe8e 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003288:	68fb      	ldr	r3, [r7, #12]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e014      	b.n	80032ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <vQueueAddToRegistry+0x50>)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032b0:	490c      	ldr	r1, [pc, #48]	; (80032e4 <vQueueAddToRegistry+0x50>)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <vQueueAddToRegistry+0x50>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032c6:	e006      	b.n	80032d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b07      	cmp	r3, #7
 80032d2:	d9e7      	bls.n	80032a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000decc 	.word	0x2000decc

080032e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032f8:	f001 fe24 	bl	8004f44 <vPortEnterCritical>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d103      	bne.n	8003312 <vQueueWaitForMessageRestricted+0x2a>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003318:	b25b      	sxtb	r3, r3
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d103      	bne.n	8003328 <vQueueWaitForMessageRestricted+0x40>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003328:	f001 fe3c 	bl	8004fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd07 	bl	8003d50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff18 	bl	8003178 <prvUnlockQueue>
	}
 8003348:	bf00      	nop
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	613b      	str	r3, [r7, #16]
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	429a      	cmp	r2, r3
 8003388:	d30a      	bcc.n	80033a0 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60fb      	str	r3, [r7, #12]
}
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d225      	bcs.n	80033f8 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b2:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2200      	movs	r2, #0
 80033b8:	4619      	mov	r1, r3
 80033ba:	69b8      	ldr	r0, [r7, #24]
 80033bc:	f7ff fe4c 	bl	8003058 <prvCopyDataToQueue>
 80033c0:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80033c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d10e      	bne.n	80033ea <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fce5 	bl	8003da8 <xTaskRemoveFromEventList>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e006      	b.n	80033f8 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	b25a      	sxtb	r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033f8:	69fb      	ldr	r3, [r7, #28]
	}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08c      	sub	sp, #48	; 0x30
 8003406:	af04      	add	r7, sp, #16
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f001 feb6 	bl	8005188 <pvPortMalloc>
 800341c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00e      	beq.n	8003442 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003424:	205c      	movs	r0, #92	; 0x5c
 8003426:	f001 feaf 	bl	8005188 <pvPortMalloc>
 800342a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
 8003438:	e005      	b.n	8003446 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f001 ff70 	bl	8005320 <vPortFree>
 8003440:	e001      	b.n	8003446 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	2300      	movs	r3, #0
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f80e 	bl	8003484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003468:	69f8      	ldr	r0, [r7, #28]
 800346a:	f000 f89b 	bl	80035a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e002      	b.n	800347a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800347a:	69bb      	ldr	r3, [r7, #24]
	}
 800347c:	4618      	mov	r0, r3
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	461a      	mov	r2, r3
 800349c:	21a5      	movs	r1, #165	; 0xa5
 800349e:	f002 f8a1 	bl	80055e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034ac:	3b01      	subs	r3, #1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	617b      	str	r3, [r7, #20]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01f      	beq.n	8003522 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	e012      	b.n	800350e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	7819      	ldrb	r1, [r3, #0]
 80034f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	3334      	adds	r3, #52	; 0x34
 80034f8:	460a      	mov	r2, r1
 80034fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3301      	adds	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2b0f      	cmp	r3, #15
 8003512:	d9e9      	bls.n	80034e8 <prvInitialiseNewTask+0x64>
 8003514:	e000      	b.n	8003518 <prvInitialiseNewTask+0x94>
			{
				break;
 8003516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003520:	e003      	b.n	800352a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	2b06      	cmp	r3, #6
 800352e:	d901      	bls.n	8003534 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003530:	2306      	movs	r3, #6
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	2200      	movs	r2, #0
 8003544:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f980 	bl	8002850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	3318      	adds	r3, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f97b 	bl	8002850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	f1c3 0207 	rsb	r2, r3, #7
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	69b8      	ldr	r0, [r7, #24]
 8003584:	f001 fbb4 	bl	8004cf0 <pxPortInitialiseStack>
 8003588:	4602      	mov	r2, r0
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800359a:	bf00      	nop
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035ac:	f001 fcca 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <prvAddNewTaskToReadyList+0xc0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <prvAddNewTaskToReadyList+0xc0>)
 80035b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <prvAddNewTaskToReadyList+0xc0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d110      	bne.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035d0:	f000 fce8 	bl	8003fa4 <prvInitialiseTaskLists>
 80035d4:	e00d      	b.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035d6:	4b25      	ldr	r3, [pc, #148]	; (800366c <prvAddNewTaskToReadyList+0xc8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d802      	bhi.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035ec:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035f2:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <prvAddNewTaskToReadyList+0xcc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <prvAddNewTaskToReadyList+0xcc>)
 80035fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <prvAddNewTaskToReadyList+0xcc>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2201      	movs	r2, #1
 800360a:	409a      	lsls	r2, r3
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <prvAddNewTaskToReadyList+0xd0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4313      	orrs	r3, r2
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <prvAddNewTaskToReadyList+0xd0>)
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <prvAddNewTaskToReadyList+0xd4>)
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f7ff f91c 	bl	800286a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fcb7 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <prvAddNewTaskToReadyList+0xc8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	429a      	cmp	r2, r3
 800364a:	d207      	bcs.n	800365c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <prvAddNewTaskToReadyList+0xd8>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000019c 	.word	0x2000019c
 8003668:	2000009c 	.word	0x2000009c
 800366c:	200001a8 	.word	0x200001a8
 8003670:	200001b8 	.word	0x200001b8
 8003674:	200001a4 	.word	0x200001a4
 8003678:	200000a0 	.word	0x200000a0
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <vTaskDelay+0x60>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <vTaskDelay+0x30>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	60bb      	str	r3, [r7, #8]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036b0:	f000 f8ce 	bl	8003850 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036b4:	2100      	movs	r1, #0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 ff46 	bl	8004548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036bc:	f000 f8d6 	bl	800386c <xTaskResumeAll>
 80036c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <vTaskDelay+0x64>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200001c4 	.word	0x200001c4
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <eTaskGetState+0x28>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60bb      	str	r3, [r7, #8]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <eTaskGetState+0xb8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	d102      	bne.n	8003720 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e03a      	b.n	8003796 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8003720:	f001 fc10 	bl	8004f44 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <eTaskGetState+0xbc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <eTaskGetState+0xc0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003736:	f001 fc35 	bl	8004fa4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d003      	beq.n	800374a <eTaskGetState+0x62>
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	d102      	bne.n	8003750 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e022      	b.n	8003796 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <eTaskGetState+0xc4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d112      	bne.n	800377e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800376c:	2302      	movs	r3, #2
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e011      	b.n	8003796 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8003772:	2303      	movs	r3, #3
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e00e      	b.n	8003796 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003778:	2302      	movs	r3, #2
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e00b      	b.n	8003796 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <eTaskGetState+0xc8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d002      	beq.n	800378c <eTaskGetState+0xa4>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e001      	b.n	8003796 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003792:	2301      	movs	r3, #1
 8003794:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003796:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000009c 	.word	0x2000009c
 80037a4:	20000154 	.word	0x20000154
 80037a8:	20000158 	.word	0x20000158
 80037ac:	20000188 	.word	0x20000188
 80037b0:	20000170 	.word	0x20000170

080037b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <vTaskStartScheduler+0x84>)
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	491d      	ldr	r1, [pc, #116]	; (800383c <vTaskStartScheduler+0x88>)
 80037c8:	481d      	ldr	r0, [pc, #116]	; (8003840 <vTaskStartScheduler+0x8c>)
 80037ca:	f7ff fe1a 	bl	8003402 <xTaskCreate>
 80037ce:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80037d6:	f000 ff1d 	bl	8004614 <xTimerCreateTimerTask>
 80037da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d116      	bne.n	8003810 <vTaskStartScheduler+0x5c>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	60bb      	str	r3, [r7, #8]
}
 80037f4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <vTaskStartScheduler+0x90>)
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <vTaskStartScheduler+0x94>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <vTaskStartScheduler+0x98>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800380a:	f001 faf9 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800380e:	e00e      	b.n	800382e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d10a      	bne.n	800382e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	607b      	str	r3, [r7, #4]
}
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <vTaskStartScheduler+0x78>
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200001c0 	.word	0x200001c0
 800383c:	08005f80 	.word	0x08005f80
 8003840:	08003f75 	.word	0x08003f75
 8003844:	200001bc 	.word	0x200001bc
 8003848:	200001a8 	.word	0x200001a8
 800384c:	200001a0 	.word	0x200001a0

08003850 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <vTaskSuspendAll+0x18>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	4a03      	ldr	r2, [pc, #12]	; (8003868 <vTaskSuspendAll+0x18>)
 800385c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	200001c4 	.word	0x200001c4

0800386c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <xTaskResumeAll+0x114>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <xTaskResumeAll+0x2c>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	603b      	str	r3, [r7, #0]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003898:	f001 fb54 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <xTaskResumeAll+0x114>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	4a37      	ldr	r2, [pc, #220]	; (8003980 <xTaskResumeAll+0x114>)
 80038a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <xTaskResumeAll+0x114>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d161      	bne.n	8003972 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038ae:	4b35      	ldr	r3, [pc, #212]	; (8003984 <xTaskResumeAll+0x118>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d05d      	beq.n	8003972 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038b6:	e02e      	b.n	8003916 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b8:	4b33      	ldr	r3, [pc, #204]	; (8003988 <xTaskResumeAll+0x11c>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff f82d 	bl	8002924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f828 	bl	8002924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <xTaskResumeAll+0x120>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	4a2a      	ldr	r2, [pc, #168]	; (800398c <xTaskResumeAll+0x120>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a27      	ldr	r2, [pc, #156]	; (8003990 <xTaskResumeAll+0x124>)
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fe ffb4 	bl	800286a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <xTaskResumeAll+0x128>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <xTaskResumeAll+0x12c>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <xTaskResumeAll+0x11c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cc      	bne.n	80038b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003924:	f000 fc90 	bl	8004248 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <xTaskResumeAll+0x130>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003934:	f000 f8d4 	bl	8003ae0 <xTaskIncrementTick>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <xTaskResumeAll+0x12c>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f1      	bne.n	8003934 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <xTaskResumeAll+0x130>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <xTaskResumeAll+0x12c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <xTaskResumeAll+0x134>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003972:	f001 fb17 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8003976:	68bb      	ldr	r3, [r7, #8]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200001c4 	.word	0x200001c4
 8003984:	2000019c 	.word	0x2000019c
 8003988:	2000015c 	.word	0x2000015c
 800398c:	200001a4 	.word	0x200001a4
 8003990:	200000a0 	.word	0x200000a0
 8003994:	2000009c 	.word	0x2000009c
 8003998:	200001b0 	.word	0x200001b0
 800399c:	200001ac 	.word	0x200001ac
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <xTaskGetTickCount+0x1c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	200001a0 	.word	0x200001a0

080039c4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	2307      	movs	r3, #7
 80039d6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80039d8:	f7ff ff3a 	bl	8003850 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80039dc:	4b3a      	ldr	r3, [pc, #232]	; (8003ac8 <uxTaskGetSystemState+0x104>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d368      	bcc.n	8003ab8 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1898      	adds	r0, r3, r2
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4a31      	ldr	r2, [pc, #196]	; (8003acc <uxTaskGetSystemState+0x108>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f000 fb9d 	bl	800414c <prvListTasksWithinSingleList>
 8003a12:	4602      	mov	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4413      	add	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e2      	bne.n	80039e6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <uxTaskGetSystemState+0x10c>)
 8003a32:	6811      	ldr	r1, [r2, #0]
 8003a34:	2202      	movs	r2, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb88 	bl	800414c <prvListTasksWithinSingleList>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <uxTaskGetSystemState+0x110>)
 8003a56:	6811      	ldr	r1, [r2, #0]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb76 	bl	800414c <prvListTasksWithinSingleList>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	4413      	add	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	2204      	movs	r2, #4
 8003a7a:	4917      	ldr	r1, [pc, #92]	; (8003ad8 <uxTaskGetSystemState+0x114>)
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fb65 	bl	800414c <prvListTasksWithinSingleList>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	490f      	ldr	r1, [pc, #60]	; (8003adc <uxTaskGetSystemState+0x118>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fb54 	bl	800414c <prvListTasksWithinSingleList>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003ab8:	f7ff fed8 	bl	800386c <xTaskResumeAll>

		return uxTask;
 8003abc:	697b      	ldr	r3, [r7, #20]
	}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000019c 	.word	0x2000019c
 8003acc:	200000a0 	.word	0x200000a0
 8003ad0:	20000154 	.word	0x20000154
 8003ad4:	20000158 	.word	0x20000158
 8003ad8:	20000170 	.word	0x20000170
 8003adc:	20000188 	.word	0x20000188

08003ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aea:	4b4e      	ldr	r3, [pc, #312]	; (8003c24 <xTaskIncrementTick+0x144>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 808e 	bne.w	8003c10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003af4:	4b4c      	ldr	r3, [pc, #304]	; (8003c28 <xTaskIncrementTick+0x148>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003afc:	4a4a      	ldr	r2, [pc, #296]	; (8003c28 <xTaskIncrementTick+0x148>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d120      	bne.n	8003b4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b08:	4b48      	ldr	r3, [pc, #288]	; (8003c2c <xTaskIncrementTick+0x14c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	603b      	str	r3, [r7, #0]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <xTaskIncrementTick+0x46>
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <xTaskIncrementTick+0x14c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <xTaskIncrementTick+0x150>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3e      	ldr	r2, [pc, #248]	; (8003c2c <xTaskIncrementTick+0x14c>)
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4a3e      	ldr	r2, [pc, #248]	; (8003c30 <xTaskIncrementTick+0x150>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <xTaskIncrementTick+0x154>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	4a3c      	ldr	r2, [pc, #240]	; (8003c34 <xTaskIncrementTick+0x154>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	f000 fb7f 	bl	8004248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <xTaskIncrementTick+0x158>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d348      	bcc.n	8003be6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <xTaskIncrementTick+0x14c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5e:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <xTaskIncrementTick+0x158>)
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	601a      	str	r2, [r3, #0]
					break;
 8003b66:	e03e      	b.n	8003be6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <xTaskIncrementTick+0x14c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d203      	bcs.n	8003b88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b80:	4a2d      	ldr	r2, [pc, #180]	; (8003c38 <xTaskIncrementTick+0x158>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b86:	e02e      	b.n	8003be6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fec9 	bl	8002924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fec0 	bl	8002924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2201      	movs	r2, #1
 8003baa:	409a      	lsls	r2, r3
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <xTaskIncrementTick+0x15c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <xTaskIncrementTick+0x15c>)
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <xTaskIncrementTick+0x160>)
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f7fe fe4c 	bl	800286a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <xTaskIncrementTick+0x164>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3b9      	bcc.n	8003b54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be4:	e7b6      	b.n	8003b54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003be6:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <xTaskIncrementTick+0x164>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4914      	ldr	r1, [pc, #80]	; (8003c40 <xTaskIncrementTick+0x160>)
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d901      	bls.n	8003c02 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <xTaskIncrementTick+0x168>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e004      	b.n	8003c1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <xTaskIncrementTick+0x16c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <xTaskIncrementTick+0x16c>)
 8003c18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c1a:	697b      	ldr	r3, [r7, #20]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	200001c4 	.word	0x200001c4
 8003c28:	200001a0 	.word	0x200001a0
 8003c2c:	20000154 	.word	0x20000154
 8003c30:	20000158 	.word	0x20000158
 8003c34:	200001b4 	.word	0x200001b4
 8003c38:	200001bc 	.word	0x200001bc
 8003c3c:	200001a4 	.word	0x200001a4
 8003c40:	200000a0 	.word	0x200000a0
 8003c44:	2000009c 	.word	0x2000009c
 8003c48:	200001b0 	.word	0x200001b0
 8003c4c:	200001ac 	.word	0x200001ac

08003c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <vTaskSwitchContext+0xa4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <vTaskSwitchContext+0xa8>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c64:	e03f      	b.n	8003ce6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <vTaskSwitchContext+0xa8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <vTaskSwitchContext+0xac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
 8003c7c:	f1c3 031f 	rsb	r3, r3, #31
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	491f      	ldr	r1, [pc, #124]	; (8003d00 <vTaskSwitchContext+0xb0>)
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	607b      	str	r3, [r7, #4]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <vTaskSwitchContext+0x5a>
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <vTaskSwitchContext+0xb0>)
 8003cb8:	4413      	add	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d104      	bne.n	8003cdc <vTaskSwitchContext+0x8c>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <vTaskSwitchContext+0xb4>)
 8003ce4:	6013      	str	r3, [r2, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	200001c4 	.word	0x200001c4
 8003cf8:	200001b0 	.word	0x200001b0
 8003cfc:	200001a4 	.word	0x200001a4
 8003d00:	200000a0 	.word	0x200000a0
 8003d04:	2000009c 	.word	0x2000009c

08003d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60fb      	str	r3, [r7, #12]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <vTaskPlaceOnEventList+0x44>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3318      	adds	r3, #24
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fe fdbb 	bl	80028b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	6838      	ldr	r0, [r7, #0]
 8003d40:	f000 fc02 	bl	8004548 <prvAddCurrentTaskToDelayedList>
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	2000009c 	.word	0x2000009c

08003d50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	617b      	str	r3, [r7, #20]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	4619      	mov	r1, r3
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7fe fd72 	bl	800286a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68b8      	ldr	r0, [r7, #8]
 8003d96:	f000 fbd7 	bl	8004548 <prvAddCurrentTaskToDelayedList>
	}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000009c 	.word	0x2000009c

08003da8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	60fb      	str	r3, [r7, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3318      	adds	r3, #24
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fda3 	bl	8002924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <xTaskRemoveFromEventList+0xac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11c      	bne.n	8003e20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fd9a 	bl	8002924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <xTaskRemoveFromEventList+0xb0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <xTaskRemoveFromEventList+0xb0>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <xTaskRemoveFromEventList+0xb4>)
 8003e10:	441a      	add	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fe fd26 	bl	800286a <vListInsertEnd>
 8003e1e:	e005      	b.n	8003e2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	3318      	adds	r3, #24
 8003e24:	4619      	mov	r1, r3
 8003e26:	480e      	ldr	r0, [pc, #56]	; (8003e60 <xTaskRemoveFromEventList+0xb8>)
 8003e28:	f7fe fd1f 	bl	800286a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <xTaskRemoveFromEventList+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d905      	bls.n	8003e46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <xTaskRemoveFromEventList+0xc0>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e001      	b.n	8003e4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e4a:	697b      	ldr	r3, [r7, #20]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200001c4 	.word	0x200001c4
 8003e58:	200001a4 	.word	0x200001a4
 8003e5c:	200000a0 	.word	0x200000a0
 8003e60:	2000015c 	.word	0x2000015c
 8003e64:	2000009c 	.word	0x2000009c
 8003e68:	200001b0 	.word	0x200001b0

08003e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <vTaskInternalSetTimeOutState+0x24>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <vTaskInternalSetTimeOutState+0x28>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	200001b4 	.word	0x200001b4
 8003e94:	200001a0 	.word	0x200001a0

08003e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	613b      	str	r3, [r7, #16]
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003eda:	f001 f833 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <xTaskCheckForTimeOut+0xbc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d102      	bne.n	8003efe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	e023      	b.n	8003f46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <xTaskCheckForTimeOut+0xc0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d007      	beq.n	8003f1a <xTaskCheckForTimeOut+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e015      	b.n	8003f46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d20b      	bcs.n	8003f3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff9b 	bl	8003e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e004      	b.n	8003f46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f46:	f001 f82d 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200001a0 	.word	0x200001a0
 8003f58:	200001b4 	.word	0x200001b4

08003f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <vTaskMissedYield+0x14>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	200001b0 	.word	0x200001b0

08003f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f7c:	f000 f852 	bl	8004024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <prvIdleTask+0x28>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d9f9      	bls.n	8003f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <prvIdleTask+0x2c>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f98:	e7f0      	b.n	8003f7c <prvIdleTask+0x8>
 8003f9a:	bf00      	nop
 8003f9c:	200000a0 	.word	0x200000a0
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	e00c      	b.n	8003fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a12      	ldr	r2, [pc, #72]	; (8004004 <prvInitialiseTaskLists+0x60>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fc26 	bl	8002810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d9ef      	bls.n	8003fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fd0:	480d      	ldr	r0, [pc, #52]	; (8004008 <prvInitialiseTaskLists+0x64>)
 8003fd2:	f7fe fc1d 	bl	8002810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fd6:	480d      	ldr	r0, [pc, #52]	; (800400c <prvInitialiseTaskLists+0x68>)
 8003fd8:	f7fe fc1a 	bl	8002810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <prvInitialiseTaskLists+0x6c>)
 8003fde:	f7fe fc17 	bl	8002810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fe2:	480c      	ldr	r0, [pc, #48]	; (8004014 <prvInitialiseTaskLists+0x70>)
 8003fe4:	f7fe fc14 	bl	8002810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fe8:	480b      	ldr	r0, [pc, #44]	; (8004018 <prvInitialiseTaskLists+0x74>)
 8003fea:	f7fe fc11 	bl	8002810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <prvInitialiseTaskLists+0x78>)
 8003ff0:	4a05      	ldr	r2, [pc, #20]	; (8004008 <prvInitialiseTaskLists+0x64>)
 8003ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <prvInitialiseTaskLists+0x7c>)
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <prvInitialiseTaskLists+0x68>)
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200000a0 	.word	0x200000a0
 8004008:	2000012c 	.word	0x2000012c
 800400c:	20000140 	.word	0x20000140
 8004010:	2000015c 	.word	0x2000015c
 8004014:	20000170 	.word	0x20000170
 8004018:	20000188 	.word	0x20000188
 800401c:	20000154 	.word	0x20000154
 8004020:	20000158 	.word	0x20000158

08004024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800402a:	e019      	b.n	8004060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800402c:	f000 ff8a 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <prvCheckTasksWaitingTermination+0x50>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fc71 	bl	8002924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <prvCheckTasksWaitingTermination+0x54>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <prvCheckTasksWaitingTermination+0x54>)
 800404a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <prvCheckTasksWaitingTermination+0x58>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3b01      	subs	r3, #1
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <prvCheckTasksWaitingTermination+0x58>)
 8004054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004056:	f000 ffa5 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8e4 	bl	8004228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <prvCheckTasksWaitingTermination+0x58>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e1      	bne.n	800402c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000170 	.word	0x20000170
 8004078:	2000019c 	.word	0x2000019c
 800407c:	20000184 	.word	0x20000184

08004080 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <vTaskGetInfo+0x1a>
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <vTaskGetInfo+0xc8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	e000      	b.n	800409c <vTaskGetInfo+0x1c>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d01a      	beq.n	8004110 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <vTaskGetInfo+0xc8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d103      	bne.n	80040ec <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	731a      	strb	r2, [r3, #12]
 80040ea:	e018      	b.n	800411e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d112      	bne.n	800411e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 80040f8:	f7ff fbaa 	bl	8003850 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2202      	movs	r2, #2
 8004108:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800410a:	f7ff fbaf 	bl	800386c <xTaskResumeAll>
 800410e:	e006      	b.n	800411e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004110:	6978      	ldr	r0, [r7, #20]
 8004112:	f7ff fae9 	bl	80036e8 <eTaskGetState>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f861 	bl	80041f0 <prvTaskCheckFreeStackSpace>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004136:	e002      	b.n	800413e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	841a      	strh	r2, [r3, #32]
	}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000009c 	.word	0x2000009c

0800414c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03f      	beq.n	80041e6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	3308      	adds	r3, #8
 800417c:	429a      	cmp	r2, r3
 800417e:	d104      	bne.n	800418a <prvListTasksWithinSingleList+0x3e>
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	3308      	adds	r3, #8
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d104      	bne.n	80041b6 <prvListTasksWithinSingleList+0x6a>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	461a      	mov	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1899      	adds	r1, r3, r2
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	2201      	movs	r2, #1
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff54 	bl	8004080 <vTaskGetInfo>
				uxTask++;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	3301      	adds	r3, #1
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d1d5      	bne.n	8004192 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80041fc:	e005      	b.n	800420a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3301      	adds	r3, #1
 8004202:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2ba5      	cmp	r3, #165	; 0xa5
 8004210:	d0f5      	beq.n	80041fe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	b29b      	uxth	r3, r3
	}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	4618      	mov	r0, r3
 8004236:	f001 f873 	bl	8005320 <vPortFree>
			vPortFree( pxTCB );
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 f870 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <prvResetNextTaskUnblockTime+0x38>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <prvResetNextTaskUnblockTime+0x3c>)
 800425a:	f04f 32ff 	mov.w	r2, #4294967295
 800425e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004260:	e008      	b.n	8004274 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <prvResetNextTaskUnblockTime+0x38>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <prvResetNextTaskUnblockTime+0x3c>)
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	20000154 	.word	0x20000154
 8004284:	200001bc 	.word	0x200001bc

08004288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <xTaskGetSchedulerState+0x34>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004296:	2301      	movs	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	e008      	b.n	80042ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <xTaskGetSchedulerState+0x38>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042a4:	2302      	movs	r3, #2
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e001      	b.n	80042ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ae:	687b      	ldr	r3, [r7, #4]
	}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	200001a8 	.word	0x200001a8
 80042c0:	200001c4 	.word	0x200001c4

080042c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d06e      	beq.n	80043b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042da:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <xTaskPriorityDisinherit+0x100>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d00a      	beq.n	80042fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
}
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	60bb      	str	r3, [r7, #8]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	1e5a      	subs	r2, r3, #1
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	429a      	cmp	r2, r3
 800432c:	d044      	beq.n	80043b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004332:	2b00      	cmp	r3, #0
 8004334:	d140      	bne.n	80043b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe faf2 	bl	8002924 <uxListRemove>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d115      	bne.n	8004372 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	491f      	ldr	r1, [pc, #124]	; (80043c8 <xTaskPriorityDisinherit+0x104>)
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xTaskPriorityDisinherit+0xae>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <xTaskPriorityDisinherit+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4013      	ands	r3, r2
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <xTaskPriorityDisinherit+0x108>)
 8004370:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f1c3 0207 	rsb	r2, r3, #7
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <xTaskPriorityDisinherit+0x108>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <xTaskPriorityDisinherit+0x108>)
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <xTaskPriorityDisinherit+0x104>)
 80043a6:	441a      	add	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f7fe fa5b 	bl	800286a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043b8:	697b      	ldr	r3, [r7, #20]
	}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000009c 	.word	0x2000009c
 80043c8:	200000a0 	.word	0x200000a0
 80043cc:	200001a4 	.word	0x200001a4

080043d0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80043da:	6839      	ldr	r1, [r7, #0]
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f001 f929 	bl	8005634 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fb fefc 	bl	80001e0 <strlen>
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	e007      	b.n	80043fc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	2220      	movs	r2, #32
 80043f4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b0e      	cmp	r3, #14
 8004400:	d9f4      	bls.n	80043ec <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
	}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800442a:	4b45      	ldr	r3, [pc, #276]	; (8004540 <vTaskList+0x124>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <vTaskList+0x124>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fea3 	bl	8005188 <pvPortMalloc>
 8004442:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d076      	beq.n	8004538 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800444a:	2200      	movs	r2, #0
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7ff fab8 	bl	80039c4 <uxTaskGetSystemState>
 8004454:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e066      	b.n	800452a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4413      	add	r3, r2
 800446c:	7b1b      	ldrb	r3, [r3, #12]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d81b      	bhi.n	80044aa <vTaskList+0x8e>
 8004472:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <vTaskList+0x5c>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	0800448d 	.word	0x0800448d
 800447c:	08004493 	.word	0x08004493
 8004480:	08004499 	.word	0x08004499
 8004484:	0800449f 	.word	0x0800449f
 8004488:	080044a5 	.word	0x080044a5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800448c:	2358      	movs	r3, #88	; 0x58
 800448e:	74fb      	strb	r3, [r7, #19]
										break;
 8004490:	e00e      	b.n	80044b0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8004492:	2352      	movs	r3, #82	; 0x52
 8004494:	74fb      	strb	r3, [r7, #19]
										break;
 8004496:	e00b      	b.n	80044b0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8004498:	2342      	movs	r3, #66	; 0x42
 800449a:	74fb      	strb	r3, [r7, #19]
										break;
 800449c:	e008      	b.n	80044b0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800449e:	2353      	movs	r3, #83	; 0x53
 80044a0:	74fb      	strb	r3, [r7, #19]
										break;
 80044a2:	e005      	b.n	80044b0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80044a4:	2344      	movs	r3, #68	; 0x44
 80044a6:	74fb      	strb	r3, [r7, #19]
										break;
 80044a8:	e002      	b.n	80044b0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80044aa:	2300      	movs	r3, #0
 80044ac:	74fb      	strb	r3, [r7, #19]
										break;
 80044ae:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4413      	add	r3, r2
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff83 	bl	80043d0 <prvWriteNameToBuffer>
 80044ca:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80044cc:	7cf9      	ldrb	r1, [r7, #19]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4413      	add	r3, r2
 80044de:	6918      	ldr	r0, [r3, #16]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4413      	add	r3, r2
 80044f0:	8c1b      	ldrh	r3, [r3, #32]
 80044f2:	461c      	mov	r4, r3
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4413      	add	r3, r2
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	9400      	str	r4, [sp, #0]
 800450a:	4603      	mov	r3, r0
 800450c:	460a      	mov	r2, r1
 800450e:	490d      	ldr	r1, [pc, #52]	; (8004544 <vTaskList+0x128>)
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 f86f 	bl	80055f4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fb fe62 	bl	80001e0 <strlen>
 800451c:	4602      	mov	r2, r0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3301      	adds	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	429a      	cmp	r2, r3
 8004530:	d394      	bcc.n	800445c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8004532:	68b8      	ldr	r0, [r7, #8]
 8004534:	f000 fef4 	bl	8005320 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd90      	pop	{r4, r7, pc}
 8004540:	2000019c 	.word	0x2000019c
 8004544:	08005f88 	.word	0x08005f88

08004548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004558:	4b28      	ldr	r3, [pc, #160]	; (80045fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe f9e0 	bl	8002924 <uxListRemove>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2201      	movs	r2, #1
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43da      	mvns	r2, r3
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4013      	ands	r3, r2
 800457e:	4a20      	ldr	r2, [pc, #128]	; (8004600 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d10a      	bne.n	80045a0 <prvAddCurrentTaskToDelayedList+0x58>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3304      	adds	r3, #4
 8004596:	4619      	mov	r1, r3
 8004598:	481a      	ldr	r0, [pc, #104]	; (8004604 <prvAddCurrentTaskToDelayedList+0xbc>)
 800459a:	f7fe f966 	bl	800286a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800459e:	e026      	b.n	80045ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d209      	bcs.n	80045cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7fe f974 	bl	80028b2 <vListInsert>
}
 80045ca:	e010      	b.n	80045ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <prvAddCurrentTaskToDelayedList+0xc4>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fe f96a 	bl	80028b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d202      	bcs.n	80045ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045e8:	4a09      	ldr	r2, [pc, #36]	; (8004610 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	6013      	str	r3, [r2, #0]
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200001a0 	.word	0x200001a0
 80045fc:	2000009c 	.word	0x2000009c
 8004600:	200001a4 	.word	0x200001a4
 8004604:	20000188 	.word	0x20000188
 8004608:	20000158 	.word	0x20000158
 800460c:	20000154 	.word	0x20000154
 8004610:	200001bc 	.word	0x200001bc

08004614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800461e:	f000 fb31 	bl	8004c84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <xTimerCreateTimerTask+0x54>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <xTimerCreateTimerTask+0x58>)
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	2305      	movs	r3, #5
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004638:	490d      	ldr	r1, [pc, #52]	; (8004670 <xTimerCreateTimerTask+0x5c>)
 800463a:	480e      	ldr	r0, [pc, #56]	; (8004674 <xTimerCreateTimerTask+0x60>)
 800463c:	f7fe fee1 	bl	8003402 <xTaskCreate>
 8004640:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	603b      	str	r3, [r7, #0]
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800465e:	687b      	ldr	r3, [r7, #4]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	200001f8 	.word	0x200001f8
 800466c:	200001fc 	.word	0x200001fc
 8004670:	08005f98 	.word	0x08005f98
 8004674:	08004865 	.word	0x08004865

08004678 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004686:	202c      	movs	r0, #44	; 0x2c
 8004688:	f000 fd7e 	bl	8005188 <pvPortMalloc>
 800468c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f805 	bl	80046ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80046b0:	697b      	ldr	r3, [r7, #20]
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	617b      	str	r3, [r7, #20]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01e      	beq.n	8004728 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80046ea:	f000 facb 	bl	8004c84 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	6a3a      	ldr	r2, [r7, #32]
 8004704:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe f8a0 	bl	8002850 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	623b      	str	r3, [r7, #32]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <xTimerGenericCommand+0x98>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02a      	beq.n	80047bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b05      	cmp	r3, #5
 8004776:	dc18      	bgt.n	80047aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004778:	f7ff fd86 	bl	8004288 <xTaskGetSchedulerState>
 800477c:	4603      	mov	r3, r0
 800477e:	2b02      	cmp	r3, #2
 8004780:	d109      	bne.n	8004796 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <xTimerGenericCommand+0x98>)
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	f107 0114 	add.w	r1, r7, #20
 800478a:	2300      	movs	r3, #0
 800478c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478e:	f7fe f9b7 	bl	8002b00 <xQueueGenericSend>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24
 8004794:	e012      	b.n	80047bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <xTimerGenericCommand+0x98>)
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	f107 0114 	add.w	r1, r7, #20
 800479e:	2300      	movs	r3, #0
 80047a0:	2200      	movs	r2, #0
 80047a2:	f7fe f9ad 	bl	8002b00 <xQueueGenericSend>
 80047a6:	6278      	str	r0, [r7, #36]	; 0x24
 80047a8:	e008      	b.n	80047bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <xTimerGenericCommand+0x98>)
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	f107 0114 	add.w	r1, r7, #20
 80047b2:	2300      	movs	r3, #0
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f7fe fabd 	bl	8002d34 <xQueueGenericSendFromISR>
 80047ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3728      	adds	r7, #40	; 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	200001f8 	.word	0x200001f8

080047cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <prvProcessExpiredTimer+0x94>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe f89d 	bl	8002924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d022      	beq.n	800483e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	18d1      	adds	r1, r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	f000 f8d1 	bl	80049ac <prvInsertTimerInActiveList>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01f      	beq.n	8004850 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004810:	2300      	movs	r3, #0
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	2100      	movs	r1, #0
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7ff ff88 	bl	8004730 <xTimerGenericCommand>
 8004820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d113      	bne.n	8004850 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	60fb      	str	r3, [r7, #12]
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	6978      	ldr	r0, [r7, #20]
 8004856:	4798      	blx	r3
}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	200001f0 	.word	0x200001f0

08004864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f857 	bl	8004924 <prvGetNextExpireTime>
 8004876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4619      	mov	r1, r3
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f803 	bl	8004888 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004882:	f000 f8d5 	bl	8004a30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004886:	e7f1      	b.n	800486c <prvTimerTask+0x8>

08004888 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004892:	f7fe ffdd 	bl	8003850 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004896:	f107 0308 	add.w	r3, r7, #8
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f866 	bl	800496c <prvSampleTimeNow>
 80048a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d130      	bne.n	800490a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <prvProcessTimerOrBlockTask+0x3c>
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d806      	bhi.n	80048c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048b6:	f7fe ffd9 	bl	800386c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ff85 	bl	80047cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048c2:	e024      	b.n	800490e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <prvProcessTimerOrBlockTask+0x90>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <prvProcessTimerOrBlockTask+0x50>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <prvProcessTimerOrBlockTask+0x52>
 80048d8:	2300      	movs	r3, #0
 80048da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <prvProcessTimerOrBlockTask+0x94>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	4619      	mov	r1, r3
 80048ea:	f7fe fcfd 	bl	80032e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048ee:	f7fe ffbd 	bl	800386c <xTaskResumeAll>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <prvProcessTimerOrBlockTask+0x98>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
}
 8004908:	e001      	b.n	800490e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800490a:	f7fe ffaf 	bl	800386c <xTaskResumeAll>
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200001f4 	.word	0x200001f4
 800491c:	200001f8 	.word	0x200001f8
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <prvGetNextExpireTime+0x44>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <prvGetNextExpireTime+0x16>
 8004936:	2201      	movs	r2, #1
 8004938:	e000      	b.n	800493c <prvGetNextExpireTime+0x18>
 800493a:	2200      	movs	r2, #0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <prvGetNextExpireTime+0x44>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e001      	b.n	8004958 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004958:	68fb      	ldr	r3, [r7, #12]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	200001f0 	.word	0x200001f0

0800496c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004974:	f7ff f816 	bl	80039a4 <xTaskGetTickCount>
 8004978:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <prvSampleTimeNow+0x3c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	429a      	cmp	r2, r3
 8004982:	d205      	bcs.n	8004990 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004984:	f000 f91a 	bl	8004bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e002      	b.n	8004996 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <prvSampleTimeNow+0x3c>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800499c:	68fb      	ldr	r3, [r7, #12]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000200 	.word	0x20000200

080049ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d812      	bhi.n	80049f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e01b      	b.n	8004a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <prvInsertTimerInActiveList+0x7c>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fd ff5e 	bl	80028b2 <vListInsert>
 80049f6:	e012      	b.n	8004a1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d206      	bcs.n	8004a0e <prvInsertTimerInActiveList+0x62>
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e007      	b.n	8004a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <prvInsertTimerInActiveList+0x80>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fd ff4a 	bl	80028b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200001f4 	.word	0x200001f4
 8004a2c:	200001f0 	.word	0x200001f0

08004a30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	; 0x30
 8004a34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a36:	e0ae      	b.n	8004b96 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f2c0 80aa 	blt.w	8004b94 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd ff67 	bl	8002924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a56:	1d3b      	adds	r3, r7, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff87 	bl	800496c <prvSampleTimeNow>
 8004a5e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b09      	cmp	r3, #9
 8004a64:	f200 8097 	bhi.w	8004b96 <prvProcessReceivedCommands+0x166>
 8004a68:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <prvProcessReceivedCommands+0x40>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004b0d 	.word	0x08004b0d
 8004a80:	08004b21 	.word	0x08004b21
 8004a84:	08004b6b 	.word	0x08004b6b
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004a99 	.word	0x08004a99
 8004a90:	08004b0d 	.word	0x08004b0d
 8004a94:	08004b21 	.word	0x08004b21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	18d1      	adds	r1, r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ab8:	f7ff ff78 	bl	80049ac <prvInsertTimerInActiveList>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d069      	beq.n	8004b96 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ac8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05e      	beq.n	8004b96 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	441a      	add	r2, r3
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aea:	f7ff fe21 	bl	8004730 <xTimerGenericCommand>
 8004aee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d14f      	bne.n	8004b96 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	61bb      	str	r3, [r7, #24]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b1e:	e03a      	b.n	8004b96 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	617b      	str	r3, [r7, #20]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	18d1      	adds	r1, r2, r3
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b64:	f7ff ff22 	bl	80049ac <prvInsertTimerInActiveList>
					break;
 8004b68:	e015      	b.n	8004b96 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b7a:	f000 fbd1 	bl	8005320 <vPortFree>
 8004b7e:	e00a      	b.n	8004b96 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b92:	e000      	b.n	8004b96 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <prvProcessReceivedCommands+0x188>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f107 0108 	add.w	r1, r7, #8
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe f979 	bl	8002e98 <xQueueReceive>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f47f af45 	bne.w	8004a38 <prvProcessReceivedCommands+0x8>
	}
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	200001f8 	.word	0x200001f8

08004bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc2:	e048      	b.n	8004c56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <prvSwitchTimerLists+0xc0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bce:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <prvSwitchTimerLists+0xc0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd fea1 	bl	8002924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d02e      	beq.n	8004c56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d90e      	bls.n	8004c28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <prvSwitchTimerLists+0xc0>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f7fd fe46 	bl	80028b2 <vListInsert>
 8004c26:	e016      	b.n	8004c56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	2100      	movs	r1, #0
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fd7c 	bl	8004730 <xTimerGenericCommand>
 8004c38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	603b      	str	r3, [r7, #0]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <prvSwitchTimerLists+0xc0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1b1      	bne.n	8004bc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <prvSwitchTimerLists+0xc0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <prvSwitchTimerLists+0xc4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <prvSwitchTimerLists+0xc0>)
 8004c6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c6e:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <prvSwitchTimerLists+0xc4>)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6013      	str	r3, [r2, #0]
}
 8004c74:	bf00      	nop
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	200001f0 	.word	0x200001f0
 8004c80:	200001f4 	.word	0x200001f4

08004c84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c88:	f000 f95c 	bl	8004f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvCheckForValidListAndQueue+0x54>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11d      	bne.n	8004cd0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c94:	4811      	ldr	r0, [pc, #68]	; (8004cdc <prvCheckForValidListAndQueue+0x58>)
 8004c96:	f7fd fdbb 	bl	8002810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c9a:	4811      	ldr	r0, [pc, #68]	; (8004ce0 <prvCheckForValidListAndQueue+0x5c>)
 8004c9c:	f7fd fdb8 	bl	8002810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <prvCheckForValidListAndQueue+0x60>)
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <prvCheckForValidListAndQueue+0x58>)
 8004ca4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <prvCheckForValidListAndQueue+0x64>)
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <prvCheckForValidListAndQueue+0x5c>)
 8004caa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004cac:	2200      	movs	r2, #0
 8004cae:	210c      	movs	r1, #12
 8004cb0:	200a      	movs	r0, #10
 8004cb2:	f7fd fec9 	bl	8002a48 <xQueueGenericCreate>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <prvCheckForValidListAndQueue+0x54>)
 8004cba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <prvCheckForValidListAndQueue+0x54>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <prvCheckForValidListAndQueue+0x54>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4908      	ldr	r1, [pc, #32]	; (8004cec <prvCheckForValidListAndQueue+0x68>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fae2 	bl	8003294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cd0:	f000 f968 	bl	8004fa4 <vPortExitCritical>
}
 8004cd4:	bf00      	nop
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	200001f8 	.word	0x200001f8
 8004cdc:	200001c8 	.word	0x200001c8
 8004ce0:	200001dc 	.word	0x200001dc
 8004ce4:	200001f0 	.word	0x200001f0
 8004ce8:	200001f4 	.word	0x200001f4
 8004cec:	08005fa0 	.word	0x08005fa0

08004cf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b04      	subs	r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d20:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <pxPortInitialiseStack+0x64>)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b14      	subs	r3, #20
 8004d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f06f 0202 	mvn.w	r2, #2
 8004d3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b20      	subs	r3, #32
 8004d44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	08004d59 	.word	0x08004d59

08004d58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <prvTaskExitError+0x54>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d00a      	beq.n	8004d82 <prvTaskExitError+0x2a>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60fb      	str	r3, [r7, #12]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <prvTaskExitError+0x28>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60bb      	str	r3, [r7, #8]
}
 8004d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d96:	bf00      	nop
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0fc      	beq.n	8004d98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	2000009c 	.word	0x2000009c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7fe fea0 	bl	8003c50 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff22 	bl	8004d58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	20000204 	.word	0x20000204
 8004f34:	20000208 	.word	0x20000208
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe fe0e 	bl	8003c50 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	2000009c 	.word	0x2000009c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fd2d 	bl	8003ae0 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <SysTick_Handler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	20000204 	.word	0x20000204
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20000208 	.word	0x20000208

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7fe fb5c 	bl	8003850 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f92c 	bl	80053fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f914 	bl	80054c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe fac8 	bl	800386c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	2000de14 	.word	0x2000de14
 800530c:	2000de28 	.word	0x2000de28
 8005310:	2000de18 	.word	0x2000de18
 8005314:	2000de0c 	.word	0x2000de0c
 8005318:	2000de1c 	.word	0x2000de1c
 800531c:	2000de20 	.word	0x2000de20

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fa52 	bl	8003850 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f880 	bl	80054c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe fa4f 	bl	800386c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000de28 	.word	0x2000de28
 80053dc:	2000de18 	.word	0x2000de18
 80053e0:	2000de24 	.word	0x2000de24

080053e4 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000de1c 	.word	0x2000de1c

080053fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005402:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8005406:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005408:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <prvHeapInit+0xac>)
 800540a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3307      	adds	r3, #7
 800541a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <prvHeapInit+0xac>)
 800542c:	4413      	add	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <prvHeapInit+0xb0>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <prvHeapInit+0xb0>)
 800543c:	2200      	movs	r2, #0
 800543e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005448:	2208      	movs	r2, #8
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <prvHeapInit+0xb4>)
 800545c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <prvHeapInit+0xb4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <prvHeapInit+0xb4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800547c:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <prvHeapInit+0xb4>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <prvHeapInit+0xb8>)
 800548a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <prvHeapInit+0xbc>)
 8005492:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <prvHeapInit+0xc0>)
 8005496:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800549a:	601a      	str	r2, [r3, #0]
}
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	2000020c 	.word	0x2000020c
 80054ac:	2000de0c 	.word	0x2000de0c
 80054b0:	2000de14 	.word	0x2000de14
 80054b4:	2000de1c 	.word	0x2000de1c
 80054b8:	2000de18 	.word	0x2000de18
 80054bc:	2000de28 	.word	0x2000de28

080054c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <prvInsertBlockIntoFreeList+0xac>)
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e002      	b.n	80054d4 <prvInsertBlockIntoFreeList+0x14>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d8f7      	bhi.n	80054ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d108      	bne.n	8005502 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	441a      	add	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	441a      	add	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d118      	bne.n	8005548 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <prvInsertBlockIntoFreeList+0xb0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d00d      	beq.n	800553e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	441a      	add	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e008      	b.n	8005550 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <prvInsertBlockIntoFreeList+0xb0>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e003      	b.n	8005550 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d002      	beq.n	800555e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2000de0c 	.word	0x2000de0c
 8005570:	2000de14 	.word	0x2000de14

08005574 <__errno>:
 8005574:	4b01      	ldr	r3, [pc, #4]	; (800557c <__errno+0x8>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000010 	.word	0x20000010

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4d0d      	ldr	r5, [pc, #52]	; (80055b8 <__libc_init_array+0x38>)
 8005584:	4c0d      	ldr	r4, [pc, #52]	; (80055bc <__libc_init_array+0x3c>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	2600      	movs	r6, #0
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	4d0b      	ldr	r5, [pc, #44]	; (80055c0 <__libc_init_array+0x40>)
 8005592:	4c0c      	ldr	r4, [pc, #48]	; (80055c4 <__libc_init_array+0x44>)
 8005594:	f000 fc56 	bl	8005e44 <_init>
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	2600      	movs	r6, #0
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	08005ffc 	.word	0x08005ffc
 80055bc:	08005ffc 	.word	0x08005ffc
 80055c0:	08005ffc 	.word	0x08005ffc
 80055c4:	08006000 	.word	0x08006000

080055c8 <memcpy>:
 80055c8:	440a      	add	r2, r1
 80055ca:	4291      	cmp	r1, r2
 80055cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d0:	d100      	bne.n	80055d4 <memcpy+0xc>
 80055d2:	4770      	bx	lr
 80055d4:	b510      	push	{r4, lr}
 80055d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055de:	4291      	cmp	r1, r2
 80055e0:	d1f9      	bne.n	80055d6 <memcpy+0xe>
 80055e2:	bd10      	pop	{r4, pc}

080055e4 <memset>:
 80055e4:	4402      	add	r2, r0
 80055e6:	4603      	mov	r3, r0
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d100      	bne.n	80055ee <memset+0xa>
 80055ec:	4770      	bx	lr
 80055ee:	f803 1b01 	strb.w	r1, [r3], #1
 80055f2:	e7f9      	b.n	80055e8 <memset+0x4>

080055f4 <siprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <siprintf+0x38>)
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4909      	ldr	r1, [pc, #36]	; (8005630 <siprintf+0x3c>)
 800560c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	a902      	add	r1, sp, #8
 8005618:	f000 f870 	bl	80056fc <_svfiprintf_r>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	20000010 	.word	0x20000010
 8005630:	ffff0208 	.word	0xffff0208

08005634 <strcpy>:
 8005634:	4603      	mov	r3, r0
 8005636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800563a:	f803 2b01 	strb.w	r2, [r3], #1
 800563e:	2a00      	cmp	r2, #0
 8005640:	d1f9      	bne.n	8005636 <strcpy+0x2>
 8005642:	4770      	bx	lr

08005644 <__ssputs_r>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	688e      	ldr	r6, [r1, #8]
 800564a:	429e      	cmp	r6, r3
 800564c:	4682      	mov	sl, r0
 800564e:	460c      	mov	r4, r1
 8005650:	4690      	mov	r8, r2
 8005652:	461f      	mov	r7, r3
 8005654:	d838      	bhi.n	80056c8 <__ssputs_r+0x84>
 8005656:	898a      	ldrh	r2, [r1, #12]
 8005658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800565c:	d032      	beq.n	80056c4 <__ssputs_r+0x80>
 800565e:	6825      	ldr	r5, [r4, #0]
 8005660:	6909      	ldr	r1, [r1, #16]
 8005662:	eba5 0901 	sub.w	r9, r5, r1
 8005666:	6965      	ldr	r5, [r4, #20]
 8005668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800566c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005670:	3301      	adds	r3, #1
 8005672:	444b      	add	r3, r9
 8005674:	106d      	asrs	r5, r5, #1
 8005676:	429d      	cmp	r5, r3
 8005678:	bf38      	it	cc
 800567a:	461d      	movcc	r5, r3
 800567c:	0553      	lsls	r3, r2, #21
 800567e:	d531      	bpl.n	80056e4 <__ssputs_r+0xa0>
 8005680:	4629      	mov	r1, r5
 8005682:	f000 fb39 	bl	8005cf8 <_malloc_r>
 8005686:	4606      	mov	r6, r0
 8005688:	b950      	cbnz	r0, 80056a0 <__ssputs_r+0x5c>
 800568a:	230c      	movs	r3, #12
 800568c:	f8ca 3000 	str.w	r3, [sl]
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	6921      	ldr	r1, [r4, #16]
 80056a2:	464a      	mov	r2, r9
 80056a4:	f7ff ff90 	bl	80055c8 <memcpy>
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	81a3      	strh	r3, [r4, #12]
 80056b4:	6126      	str	r6, [r4, #16]
 80056b6:	6165      	str	r5, [r4, #20]
 80056b8:	444e      	add	r6, r9
 80056ba:	eba5 0509 	sub.w	r5, r5, r9
 80056be:	6026      	str	r6, [r4, #0]
 80056c0:	60a5      	str	r5, [r4, #8]
 80056c2:	463e      	mov	r6, r7
 80056c4:	42be      	cmp	r6, r7
 80056c6:	d900      	bls.n	80056ca <__ssputs_r+0x86>
 80056c8:	463e      	mov	r6, r7
 80056ca:	4632      	mov	r2, r6
 80056cc:	6820      	ldr	r0, [r4, #0]
 80056ce:	4641      	mov	r1, r8
 80056d0:	f000 faa8 	bl	8005c24 <memmove>
 80056d4:	68a3      	ldr	r3, [r4, #8]
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	1b9b      	subs	r3, r3, r6
 80056da:	4432      	add	r2, r6
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	6022      	str	r2, [r4, #0]
 80056e0:	2000      	movs	r0, #0
 80056e2:	e7db      	b.n	800569c <__ssputs_r+0x58>
 80056e4:	462a      	mov	r2, r5
 80056e6:	f000 fb61 	bl	8005dac <_realloc_r>
 80056ea:	4606      	mov	r6, r0
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d1e1      	bne.n	80056b4 <__ssputs_r+0x70>
 80056f0:	6921      	ldr	r1, [r4, #16]
 80056f2:	4650      	mov	r0, sl
 80056f4:	f000 fab0 	bl	8005c58 <_free_r>
 80056f8:	e7c7      	b.n	800568a <__ssputs_r+0x46>
	...

080056fc <_svfiprintf_r>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4698      	mov	r8, r3
 8005702:	898b      	ldrh	r3, [r1, #12]
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	b09d      	sub	sp, #116	; 0x74
 8005708:	4607      	mov	r7, r0
 800570a:	460d      	mov	r5, r1
 800570c:	4614      	mov	r4, r2
 800570e:	d50e      	bpl.n	800572e <_svfiprintf_r+0x32>
 8005710:	690b      	ldr	r3, [r1, #16]
 8005712:	b963      	cbnz	r3, 800572e <_svfiprintf_r+0x32>
 8005714:	2140      	movs	r1, #64	; 0x40
 8005716:	f000 faef 	bl	8005cf8 <_malloc_r>
 800571a:	6028      	str	r0, [r5, #0]
 800571c:	6128      	str	r0, [r5, #16]
 800571e:	b920      	cbnz	r0, 800572a <_svfiprintf_r+0x2e>
 8005720:	230c      	movs	r3, #12
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e0d1      	b.n	80058ce <_svfiprintf_r+0x1d2>
 800572a:	2340      	movs	r3, #64	; 0x40
 800572c:	616b      	str	r3, [r5, #20]
 800572e:	2300      	movs	r3, #0
 8005730:	9309      	str	r3, [sp, #36]	; 0x24
 8005732:	2320      	movs	r3, #32
 8005734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005738:	f8cd 800c 	str.w	r8, [sp, #12]
 800573c:	2330      	movs	r3, #48	; 0x30
 800573e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058e8 <_svfiprintf_r+0x1ec>
 8005742:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005746:	f04f 0901 	mov.w	r9, #1
 800574a:	4623      	mov	r3, r4
 800574c:	469a      	mov	sl, r3
 800574e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005752:	b10a      	cbz	r2, 8005758 <_svfiprintf_r+0x5c>
 8005754:	2a25      	cmp	r2, #37	; 0x25
 8005756:	d1f9      	bne.n	800574c <_svfiprintf_r+0x50>
 8005758:	ebba 0b04 	subs.w	fp, sl, r4
 800575c:	d00b      	beq.n	8005776 <_svfiprintf_r+0x7a>
 800575e:	465b      	mov	r3, fp
 8005760:	4622      	mov	r2, r4
 8005762:	4629      	mov	r1, r5
 8005764:	4638      	mov	r0, r7
 8005766:	f7ff ff6d 	bl	8005644 <__ssputs_r>
 800576a:	3001      	adds	r0, #1
 800576c:	f000 80aa 	beq.w	80058c4 <_svfiprintf_r+0x1c8>
 8005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005772:	445a      	add	r2, fp
 8005774:	9209      	str	r2, [sp, #36]	; 0x24
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80a2 	beq.w	80058c4 <_svfiprintf_r+0x1c8>
 8005780:	2300      	movs	r3, #0
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800578a:	f10a 0a01 	add.w	sl, sl, #1
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	9307      	str	r3, [sp, #28]
 8005792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005796:	931a      	str	r3, [sp, #104]	; 0x68
 8005798:	4654      	mov	r4, sl
 800579a:	2205      	movs	r2, #5
 800579c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a0:	4851      	ldr	r0, [pc, #324]	; (80058e8 <_svfiprintf_r+0x1ec>)
 80057a2:	f7fa fd25 	bl	80001f0 <memchr>
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	b9d8      	cbnz	r0, 80057e2 <_svfiprintf_r+0xe6>
 80057aa:	06d0      	lsls	r0, r2, #27
 80057ac:	bf44      	itt	mi
 80057ae:	2320      	movmi	r3, #32
 80057b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b4:	0711      	lsls	r1, r2, #28
 80057b6:	bf44      	itt	mi
 80057b8:	232b      	movmi	r3, #43	; 0x2b
 80057ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057be:	f89a 3000 	ldrb.w	r3, [sl]
 80057c2:	2b2a      	cmp	r3, #42	; 0x2a
 80057c4:	d015      	beq.n	80057f2 <_svfiprintf_r+0xf6>
 80057c6:	9a07      	ldr	r2, [sp, #28]
 80057c8:	4654      	mov	r4, sl
 80057ca:	2000      	movs	r0, #0
 80057cc:	f04f 0c0a 	mov.w	ip, #10
 80057d0:	4621      	mov	r1, r4
 80057d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057d6:	3b30      	subs	r3, #48	; 0x30
 80057d8:	2b09      	cmp	r3, #9
 80057da:	d94e      	bls.n	800587a <_svfiprintf_r+0x17e>
 80057dc:	b1b0      	cbz	r0, 800580c <_svfiprintf_r+0x110>
 80057de:	9207      	str	r2, [sp, #28]
 80057e0:	e014      	b.n	800580c <_svfiprintf_r+0x110>
 80057e2:	eba0 0308 	sub.w	r3, r0, r8
 80057e6:	fa09 f303 	lsl.w	r3, r9, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	46a2      	mov	sl, r4
 80057f0:	e7d2      	b.n	8005798 <_svfiprintf_r+0x9c>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	1d19      	adds	r1, r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	9103      	str	r1, [sp, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfbb      	ittet	lt
 80057fe:	425b      	neglt	r3, r3
 8005800:	f042 0202 	orrlt.w	r2, r2, #2
 8005804:	9307      	strge	r3, [sp, #28]
 8005806:	9307      	strlt	r3, [sp, #28]
 8005808:	bfb8      	it	lt
 800580a:	9204      	strlt	r2, [sp, #16]
 800580c:	7823      	ldrb	r3, [r4, #0]
 800580e:	2b2e      	cmp	r3, #46	; 0x2e
 8005810:	d10c      	bne.n	800582c <_svfiprintf_r+0x130>
 8005812:	7863      	ldrb	r3, [r4, #1]
 8005814:	2b2a      	cmp	r3, #42	; 0x2a
 8005816:	d135      	bne.n	8005884 <_svfiprintf_r+0x188>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	9203      	str	r2, [sp, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	bfb8      	it	lt
 8005824:	f04f 33ff 	movlt.w	r3, #4294967295
 8005828:	3402      	adds	r4, #2
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058f8 <_svfiprintf_r+0x1fc>
 8005830:	7821      	ldrb	r1, [r4, #0]
 8005832:	2203      	movs	r2, #3
 8005834:	4650      	mov	r0, sl
 8005836:	f7fa fcdb 	bl	80001f0 <memchr>
 800583a:	b140      	cbz	r0, 800584e <_svfiprintf_r+0x152>
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	eba0 000a 	sub.w	r0, r0, sl
 8005842:	fa03 f000 	lsl.w	r0, r3, r0
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	4303      	orrs	r3, r0
 800584a:	3401      	adds	r4, #1
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005852:	4826      	ldr	r0, [pc, #152]	; (80058ec <_svfiprintf_r+0x1f0>)
 8005854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005858:	2206      	movs	r2, #6
 800585a:	f7fa fcc9 	bl	80001f0 <memchr>
 800585e:	2800      	cmp	r0, #0
 8005860:	d038      	beq.n	80058d4 <_svfiprintf_r+0x1d8>
 8005862:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <_svfiprintf_r+0x1f4>)
 8005864:	bb1b      	cbnz	r3, 80058ae <_svfiprintf_r+0x1b2>
 8005866:	9b03      	ldr	r3, [sp, #12]
 8005868:	3307      	adds	r3, #7
 800586a:	f023 0307 	bic.w	r3, r3, #7
 800586e:	3308      	adds	r3, #8
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	4433      	add	r3, r6
 8005876:	9309      	str	r3, [sp, #36]	; 0x24
 8005878:	e767      	b.n	800574a <_svfiprintf_r+0x4e>
 800587a:	fb0c 3202 	mla	r2, ip, r2, r3
 800587e:	460c      	mov	r4, r1
 8005880:	2001      	movs	r0, #1
 8005882:	e7a5      	b.n	80057d0 <_svfiprintf_r+0xd4>
 8005884:	2300      	movs	r3, #0
 8005886:	3401      	adds	r4, #1
 8005888:	9305      	str	r3, [sp, #20]
 800588a:	4619      	mov	r1, r3
 800588c:	f04f 0c0a 	mov.w	ip, #10
 8005890:	4620      	mov	r0, r4
 8005892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005896:	3a30      	subs	r2, #48	; 0x30
 8005898:	2a09      	cmp	r2, #9
 800589a:	d903      	bls.n	80058a4 <_svfiprintf_r+0x1a8>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0c5      	beq.n	800582c <_svfiprintf_r+0x130>
 80058a0:	9105      	str	r1, [sp, #20]
 80058a2:	e7c3      	b.n	800582c <_svfiprintf_r+0x130>
 80058a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058a8:	4604      	mov	r4, r0
 80058aa:	2301      	movs	r3, #1
 80058ac:	e7f0      	b.n	8005890 <_svfiprintf_r+0x194>
 80058ae:	ab03      	add	r3, sp, #12
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	462a      	mov	r2, r5
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <_svfiprintf_r+0x1f8>)
 80058b6:	a904      	add	r1, sp, #16
 80058b8:	4638      	mov	r0, r7
 80058ba:	f3af 8000 	nop.w
 80058be:	1c42      	adds	r2, r0, #1
 80058c0:	4606      	mov	r6, r0
 80058c2:	d1d6      	bne.n	8005872 <_svfiprintf_r+0x176>
 80058c4:	89ab      	ldrh	r3, [r5, #12]
 80058c6:	065b      	lsls	r3, r3, #25
 80058c8:	f53f af2c 	bmi.w	8005724 <_svfiprintf_r+0x28>
 80058cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ce:	b01d      	add	sp, #116	; 0x74
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	ab03      	add	r3, sp, #12
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	462a      	mov	r2, r5
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <_svfiprintf_r+0x1f8>)
 80058dc:	a904      	add	r1, sp, #16
 80058de:	4638      	mov	r0, r7
 80058e0:	f000 f87a 	bl	80059d8 <_printf_i>
 80058e4:	e7eb      	b.n	80058be <_svfiprintf_r+0x1c2>
 80058e6:	bf00      	nop
 80058e8:	08005fc0 	.word	0x08005fc0
 80058ec:	08005fca 	.word	0x08005fca
 80058f0:	00000000 	.word	0x00000000
 80058f4:	08005645 	.word	0x08005645
 80058f8:	08005fc6 	.word	0x08005fc6

080058fc <_printf_common>:
 80058fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	4616      	mov	r6, r2
 8005902:	4699      	mov	r9, r3
 8005904:	688a      	ldr	r2, [r1, #8]
 8005906:	690b      	ldr	r3, [r1, #16]
 8005908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800590c:	4293      	cmp	r3, r2
 800590e:	bfb8      	it	lt
 8005910:	4613      	movlt	r3, r2
 8005912:	6033      	str	r3, [r6, #0]
 8005914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005918:	4607      	mov	r7, r0
 800591a:	460c      	mov	r4, r1
 800591c:	b10a      	cbz	r2, 8005922 <_printf_common+0x26>
 800591e:	3301      	adds	r3, #1
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	0699      	lsls	r1, r3, #26
 8005926:	bf42      	ittt	mi
 8005928:	6833      	ldrmi	r3, [r6, #0]
 800592a:	3302      	addmi	r3, #2
 800592c:	6033      	strmi	r3, [r6, #0]
 800592e:	6825      	ldr	r5, [r4, #0]
 8005930:	f015 0506 	ands.w	r5, r5, #6
 8005934:	d106      	bne.n	8005944 <_printf_common+0x48>
 8005936:	f104 0a19 	add.w	sl, r4, #25
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	6832      	ldr	r2, [r6, #0]
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	42ab      	cmp	r3, r5
 8005942:	dc26      	bgt.n	8005992 <_printf_common+0x96>
 8005944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005948:	1e13      	subs	r3, r2, #0
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	bf18      	it	ne
 800594e:	2301      	movne	r3, #1
 8005950:	0692      	lsls	r2, r2, #26
 8005952:	d42b      	bmi.n	80059ac <_printf_common+0xb0>
 8005954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005958:	4649      	mov	r1, r9
 800595a:	4638      	mov	r0, r7
 800595c:	47c0      	blx	r8
 800595e:	3001      	adds	r0, #1
 8005960:	d01e      	beq.n	80059a0 <_printf_common+0xa4>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	68e5      	ldr	r5, [r4, #12]
 8005966:	6832      	ldr	r2, [r6, #0]
 8005968:	f003 0306 	and.w	r3, r3, #6
 800596c:	2b04      	cmp	r3, #4
 800596e:	bf08      	it	eq
 8005970:	1aad      	subeq	r5, r5, r2
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	6922      	ldr	r2, [r4, #16]
 8005976:	bf0c      	ite	eq
 8005978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800597c:	2500      	movne	r5, #0
 800597e:	4293      	cmp	r3, r2
 8005980:	bfc4      	itt	gt
 8005982:	1a9b      	subgt	r3, r3, r2
 8005984:	18ed      	addgt	r5, r5, r3
 8005986:	2600      	movs	r6, #0
 8005988:	341a      	adds	r4, #26
 800598a:	42b5      	cmp	r5, r6
 800598c:	d11a      	bne.n	80059c4 <_printf_common+0xc8>
 800598e:	2000      	movs	r0, #0
 8005990:	e008      	b.n	80059a4 <_printf_common+0xa8>
 8005992:	2301      	movs	r3, #1
 8005994:	4652      	mov	r2, sl
 8005996:	4649      	mov	r1, r9
 8005998:	4638      	mov	r0, r7
 800599a:	47c0      	blx	r8
 800599c:	3001      	adds	r0, #1
 800599e:	d103      	bne.n	80059a8 <_printf_common+0xac>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	3501      	adds	r5, #1
 80059aa:	e7c6      	b.n	800593a <_printf_common+0x3e>
 80059ac:	18e1      	adds	r1, r4, r3
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	2030      	movs	r0, #48	; 0x30
 80059b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b6:	4422      	add	r2, r4
 80059b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c0:	3302      	adds	r3, #2
 80059c2:	e7c7      	b.n	8005954 <_printf_common+0x58>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4622      	mov	r2, r4
 80059c8:	4649      	mov	r1, r9
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c0      	blx	r8
 80059ce:	3001      	adds	r0, #1
 80059d0:	d0e6      	beq.n	80059a0 <_printf_common+0xa4>
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7d9      	b.n	800598a <_printf_common+0x8e>
	...

080059d8 <_printf_i>:
 80059d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	460c      	mov	r4, r1
 80059de:	4691      	mov	r9, r2
 80059e0:	7e27      	ldrb	r7, [r4, #24]
 80059e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059e4:	2f78      	cmp	r7, #120	; 0x78
 80059e6:	4680      	mov	r8, r0
 80059e8:	469a      	mov	sl, r3
 80059ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ee:	d807      	bhi.n	8005a00 <_printf_i+0x28>
 80059f0:	2f62      	cmp	r7, #98	; 0x62
 80059f2:	d80a      	bhi.n	8005a0a <_printf_i+0x32>
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	f000 80d8 	beq.w	8005baa <_printf_i+0x1d2>
 80059fa:	2f58      	cmp	r7, #88	; 0x58
 80059fc:	f000 80a3 	beq.w	8005b46 <_printf_i+0x16e>
 8005a00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a08:	e03a      	b.n	8005a80 <_printf_i+0xa8>
 8005a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0e:	2b15      	cmp	r3, #21
 8005a10:	d8f6      	bhi.n	8005a00 <_printf_i+0x28>
 8005a12:	a001      	add	r0, pc, #4	; (adr r0, 8005a18 <_printf_i+0x40>)
 8005a14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a01 	.word	0x08005a01
 8005a24:	08005a01 	.word	0x08005a01
 8005a28:	08005a01 	.word	0x08005a01
 8005a2c:	08005a01 	.word	0x08005a01
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a01 	.word	0x08005a01
 8005a38:	08005a01 	.word	0x08005a01
 8005a3c:	08005a01 	.word	0x08005a01
 8005a40:	08005a01 	.word	0x08005a01
 8005a44:	08005b91 	.word	0x08005b91
 8005a48:	08005ab5 	.word	0x08005ab5
 8005a4c:	08005b73 	.word	0x08005b73
 8005a50:	08005a01 	.word	0x08005a01
 8005a54:	08005a01 	.word	0x08005a01
 8005a58:	08005bb3 	.word	0x08005bb3
 8005a5c:	08005a01 	.word	0x08005a01
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005a01 	.word	0x08005a01
 8005a68:	08005a01 	.word	0x08005a01
 8005a6c:	08005b7b 	.word	0x08005b7b
 8005a70:	680b      	ldr	r3, [r1, #0]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	600a      	str	r2, [r1, #0]
 8005a78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0a3      	b.n	8005bcc <_printf_i+0x1f4>
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	6808      	ldr	r0, [r1, #0]
 8005a88:	062e      	lsls	r6, r5, #24
 8005a8a:	f100 0304 	add.w	r3, r0, #4
 8005a8e:	d50a      	bpl.n	8005aa6 <_printf_i+0xce>
 8005a90:	6805      	ldr	r5, [r0, #0]
 8005a92:	600b      	str	r3, [r1, #0]
 8005a94:	2d00      	cmp	r5, #0
 8005a96:	da03      	bge.n	8005aa0 <_printf_i+0xc8>
 8005a98:	232d      	movs	r3, #45	; 0x2d
 8005a9a:	426d      	negs	r5, r5
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa0:	485e      	ldr	r0, [pc, #376]	; (8005c1c <_printf_i+0x244>)
 8005aa2:	230a      	movs	r3, #10
 8005aa4:	e019      	b.n	8005ada <_printf_i+0x102>
 8005aa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005aaa:	6805      	ldr	r5, [r0, #0]
 8005aac:	600b      	str	r3, [r1, #0]
 8005aae:	bf18      	it	ne
 8005ab0:	b22d      	sxthne	r5, r5
 8005ab2:	e7ef      	b.n	8005a94 <_printf_i+0xbc>
 8005ab4:	680b      	ldr	r3, [r1, #0]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	1d18      	adds	r0, r3, #4
 8005aba:	6008      	str	r0, [r1, #0]
 8005abc:	0628      	lsls	r0, r5, #24
 8005abe:	d501      	bpl.n	8005ac4 <_printf_i+0xec>
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <_printf_i+0xf2>
 8005ac4:	0669      	lsls	r1, r5, #25
 8005ac6:	d5fb      	bpl.n	8005ac0 <_printf_i+0xe8>
 8005ac8:	881d      	ldrh	r5, [r3, #0]
 8005aca:	4854      	ldr	r0, [pc, #336]	; (8005c1c <_printf_i+0x244>)
 8005acc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ace:	bf0c      	ite	eq
 8005ad0:	2308      	moveq	r3, #8
 8005ad2:	230a      	movne	r3, #10
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ada:	6866      	ldr	r6, [r4, #4]
 8005adc:	60a6      	str	r6, [r4, #8]
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	bfa2      	ittt	ge
 8005ae2:	6821      	ldrge	r1, [r4, #0]
 8005ae4:	f021 0104 	bicge.w	r1, r1, #4
 8005ae8:	6021      	strge	r1, [r4, #0]
 8005aea:	b90d      	cbnz	r5, 8005af0 <_printf_i+0x118>
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	d04d      	beq.n	8005b8c <_printf_i+0x1b4>
 8005af0:	4616      	mov	r6, r2
 8005af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005af6:	fb03 5711 	mls	r7, r3, r1, r5
 8005afa:	5dc7      	ldrb	r7, [r0, r7]
 8005afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b00:	462f      	mov	r7, r5
 8005b02:	42bb      	cmp	r3, r7
 8005b04:	460d      	mov	r5, r1
 8005b06:	d9f4      	bls.n	8005af2 <_printf_i+0x11a>
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d10b      	bne.n	8005b24 <_printf_i+0x14c>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	07df      	lsls	r7, r3, #31
 8005b10:	d508      	bpl.n	8005b24 <_printf_i+0x14c>
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	6861      	ldr	r1, [r4, #4]
 8005b16:	4299      	cmp	r1, r3
 8005b18:	bfde      	ittt	le
 8005b1a:	2330      	movle	r3, #48	; 0x30
 8005b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b24:	1b92      	subs	r2, r2, r6
 8005b26:	6122      	str	r2, [r4, #16]
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	aa03      	add	r2, sp, #12
 8005b30:	4621      	mov	r1, r4
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7ff fee2 	bl	80058fc <_printf_common>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d14c      	bne.n	8005bd6 <_printf_i+0x1fe>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	b004      	add	sp, #16
 8005b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b46:	4835      	ldr	r0, [pc, #212]	; (8005c1c <_printf_i+0x244>)
 8005b48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	680e      	ldr	r6, [r1, #0]
 8005b50:	061f      	lsls	r7, r3, #24
 8005b52:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b56:	600e      	str	r6, [r1, #0]
 8005b58:	d514      	bpl.n	8005b84 <_printf_i+0x1ac>
 8005b5a:	07d9      	lsls	r1, r3, #31
 8005b5c:	bf44      	itt	mi
 8005b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b62:	6023      	strmi	r3, [r4, #0]
 8005b64:	b91d      	cbnz	r5, 8005b6e <_printf_i+0x196>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f023 0320 	bic.w	r3, r3, #32
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	2310      	movs	r3, #16
 8005b70:	e7b0      	b.n	8005ad4 <_printf_i+0xfc>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f043 0320 	orr.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	2378      	movs	r3, #120	; 0x78
 8005b7c:	4828      	ldr	r0, [pc, #160]	; (8005c20 <_printf_i+0x248>)
 8005b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b82:	e7e3      	b.n	8005b4c <_printf_i+0x174>
 8005b84:	065e      	lsls	r6, r3, #25
 8005b86:	bf48      	it	mi
 8005b88:	b2ad      	uxthmi	r5, r5
 8005b8a:	e7e6      	b.n	8005b5a <_printf_i+0x182>
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	e7bb      	b.n	8005b08 <_printf_i+0x130>
 8005b90:	680b      	ldr	r3, [r1, #0]
 8005b92:	6826      	ldr	r6, [r4, #0]
 8005b94:	6960      	ldr	r0, [r4, #20]
 8005b96:	1d1d      	adds	r5, r3, #4
 8005b98:	600d      	str	r5, [r1, #0]
 8005b9a:	0635      	lsls	r5, r6, #24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_i+0x1cc>
 8005ba0:	6018      	str	r0, [r3, #0]
 8005ba2:	e002      	b.n	8005baa <_printf_i+0x1d2>
 8005ba4:	0671      	lsls	r1, r6, #25
 8005ba6:	d5fb      	bpl.n	8005ba0 <_printf_i+0x1c8>
 8005ba8:	8018      	strh	r0, [r3, #0]
 8005baa:	2300      	movs	r3, #0
 8005bac:	6123      	str	r3, [r4, #16]
 8005bae:	4616      	mov	r6, r2
 8005bb0:	e7ba      	b.n	8005b28 <_printf_i+0x150>
 8005bb2:	680b      	ldr	r3, [r1, #0]
 8005bb4:	1d1a      	adds	r2, r3, #4
 8005bb6:	600a      	str	r2, [r1, #0]
 8005bb8:	681e      	ldr	r6, [r3, #0]
 8005bba:	6862      	ldr	r2, [r4, #4]
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7fa fb16 	bl	80001f0 <memchr>
 8005bc4:	b108      	cbz	r0, 8005bca <_printf_i+0x1f2>
 8005bc6:	1b80      	subs	r0, r0, r6
 8005bc8:	6060      	str	r0, [r4, #4]
 8005bca:	6863      	ldr	r3, [r4, #4]
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd4:	e7a8      	b.n	8005b28 <_printf_i+0x150>
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	4632      	mov	r2, r6
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4640      	mov	r0, r8
 8005bde:	47d0      	blx	sl
 8005be0:	3001      	adds	r0, #1
 8005be2:	d0ab      	beq.n	8005b3c <_printf_i+0x164>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	079b      	lsls	r3, r3, #30
 8005be8:	d413      	bmi.n	8005c12 <_printf_i+0x23a>
 8005bea:	68e0      	ldr	r0, [r4, #12]
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	4298      	cmp	r0, r3
 8005bf0:	bfb8      	it	lt
 8005bf2:	4618      	movlt	r0, r3
 8005bf4:	e7a4      	b.n	8005b40 <_printf_i+0x168>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	47d0      	blx	sl
 8005c00:	3001      	adds	r0, #1
 8005c02:	d09b      	beq.n	8005b3c <_printf_i+0x164>
 8005c04:	3501      	adds	r5, #1
 8005c06:	68e3      	ldr	r3, [r4, #12]
 8005c08:	9903      	ldr	r1, [sp, #12]
 8005c0a:	1a5b      	subs	r3, r3, r1
 8005c0c:	42ab      	cmp	r3, r5
 8005c0e:	dcf2      	bgt.n	8005bf6 <_printf_i+0x21e>
 8005c10:	e7eb      	b.n	8005bea <_printf_i+0x212>
 8005c12:	2500      	movs	r5, #0
 8005c14:	f104 0619 	add.w	r6, r4, #25
 8005c18:	e7f5      	b.n	8005c06 <_printf_i+0x22e>
 8005c1a:	bf00      	nop
 8005c1c:	08005fd1 	.word	0x08005fd1
 8005c20:	08005fe2 	.word	0x08005fe2

08005c24 <memmove>:
 8005c24:	4288      	cmp	r0, r1
 8005c26:	b510      	push	{r4, lr}
 8005c28:	eb01 0402 	add.w	r4, r1, r2
 8005c2c:	d902      	bls.n	8005c34 <memmove+0x10>
 8005c2e:	4284      	cmp	r4, r0
 8005c30:	4623      	mov	r3, r4
 8005c32:	d807      	bhi.n	8005c44 <memmove+0x20>
 8005c34:	1e43      	subs	r3, r0, #1
 8005c36:	42a1      	cmp	r1, r4
 8005c38:	d008      	beq.n	8005c4c <memmove+0x28>
 8005c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c42:	e7f8      	b.n	8005c36 <memmove+0x12>
 8005c44:	4402      	add	r2, r0
 8005c46:	4601      	mov	r1, r0
 8005c48:	428a      	cmp	r2, r1
 8005c4a:	d100      	bne.n	8005c4e <memmove+0x2a>
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c56:	e7f7      	b.n	8005c48 <memmove+0x24>

08005c58 <_free_r>:
 8005c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	d048      	beq.n	8005cf0 <_free_r+0x98>
 8005c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c62:	9001      	str	r0, [sp, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f1a1 0404 	sub.w	r4, r1, #4
 8005c6a:	bfb8      	it	lt
 8005c6c:	18e4      	addlt	r4, r4, r3
 8005c6e:	f000 f8d3 	bl	8005e18 <__malloc_lock>
 8005c72:	4a20      	ldr	r2, [pc, #128]	; (8005cf4 <_free_r+0x9c>)
 8005c74:	9801      	ldr	r0, [sp, #4]
 8005c76:	6813      	ldr	r3, [r2, #0]
 8005c78:	4615      	mov	r5, r2
 8005c7a:	b933      	cbnz	r3, 8005c8a <_free_r+0x32>
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	6014      	str	r4, [r2, #0]
 8005c80:	b003      	add	sp, #12
 8005c82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c86:	f000 b8cd 	b.w	8005e24 <__malloc_unlock>
 8005c8a:	42a3      	cmp	r3, r4
 8005c8c:	d90b      	bls.n	8005ca6 <_free_r+0x4e>
 8005c8e:	6821      	ldr	r1, [r4, #0]
 8005c90:	1862      	adds	r2, r4, r1
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bf04      	itt	eq
 8005c96:	681a      	ldreq	r2, [r3, #0]
 8005c98:	685b      	ldreq	r3, [r3, #4]
 8005c9a:	6063      	str	r3, [r4, #4]
 8005c9c:	bf04      	itt	eq
 8005c9e:	1852      	addeq	r2, r2, r1
 8005ca0:	6022      	streq	r2, [r4, #0]
 8005ca2:	602c      	str	r4, [r5, #0]
 8005ca4:	e7ec      	b.n	8005c80 <_free_r+0x28>
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	b10b      	cbz	r3, 8005cb0 <_free_r+0x58>
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	d9fa      	bls.n	8005ca6 <_free_r+0x4e>
 8005cb0:	6811      	ldr	r1, [r2, #0]
 8005cb2:	1855      	adds	r5, r2, r1
 8005cb4:	42a5      	cmp	r5, r4
 8005cb6:	d10b      	bne.n	8005cd0 <_free_r+0x78>
 8005cb8:	6824      	ldr	r4, [r4, #0]
 8005cba:	4421      	add	r1, r4
 8005cbc:	1854      	adds	r4, r2, r1
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	d1dd      	bne.n	8005c80 <_free_r+0x28>
 8005cc4:	681c      	ldr	r4, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	6053      	str	r3, [r2, #4]
 8005cca:	4421      	add	r1, r4
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	e7d7      	b.n	8005c80 <_free_r+0x28>
 8005cd0:	d902      	bls.n	8005cd8 <_free_r+0x80>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	e7d3      	b.n	8005c80 <_free_r+0x28>
 8005cd8:	6825      	ldr	r5, [r4, #0]
 8005cda:	1961      	adds	r1, r4, r5
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf04      	itt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	6063      	str	r3, [r4, #4]
 8005ce6:	bf04      	itt	eq
 8005ce8:	1949      	addeq	r1, r1, r5
 8005cea:	6021      	streq	r1, [r4, #0]
 8005cec:	6054      	str	r4, [r2, #4]
 8005cee:	e7c7      	b.n	8005c80 <_free_r+0x28>
 8005cf0:	b003      	add	sp, #12
 8005cf2:	bd30      	pop	{r4, r5, pc}
 8005cf4:	2000de2c 	.word	0x2000de2c

08005cf8 <_malloc_r>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	1ccd      	adds	r5, r1, #3
 8005cfc:	f025 0503 	bic.w	r5, r5, #3
 8005d00:	3508      	adds	r5, #8
 8005d02:	2d0c      	cmp	r5, #12
 8005d04:	bf38      	it	cc
 8005d06:	250c      	movcc	r5, #12
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	db01      	blt.n	8005d12 <_malloc_r+0x1a>
 8005d0e:	42a9      	cmp	r1, r5
 8005d10:	d903      	bls.n	8005d1a <_malloc_r+0x22>
 8005d12:	230c      	movs	r3, #12
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	2000      	movs	r0, #0
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1a:	f000 f87d 	bl	8005e18 <__malloc_lock>
 8005d1e:	4921      	ldr	r1, [pc, #132]	; (8005da4 <_malloc_r+0xac>)
 8005d20:	680a      	ldr	r2, [r1, #0]
 8005d22:	4614      	mov	r4, r2
 8005d24:	b99c      	cbnz	r4, 8005d4e <_malloc_r+0x56>
 8005d26:	4f20      	ldr	r7, [pc, #128]	; (8005da8 <_malloc_r+0xb0>)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	b923      	cbnz	r3, 8005d36 <_malloc_r+0x3e>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f000 f862 	bl	8005df8 <_sbrk_r>
 8005d34:	6038      	str	r0, [r7, #0]
 8005d36:	4629      	mov	r1, r5
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 f85d 	bl	8005df8 <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d123      	bne.n	8005d8a <_malloc_r+0x92>
 8005d42:	230c      	movs	r3, #12
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f86c 	bl	8005e24 <__malloc_unlock>
 8005d4c:	e7e3      	b.n	8005d16 <_malloc_r+0x1e>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	1b5b      	subs	r3, r3, r5
 8005d52:	d417      	bmi.n	8005d84 <_malloc_r+0x8c>
 8005d54:	2b0b      	cmp	r3, #11
 8005d56:	d903      	bls.n	8005d60 <_malloc_r+0x68>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	441c      	add	r4, r3
 8005d5c:	6025      	str	r5, [r4, #0]
 8005d5e:	e004      	b.n	8005d6a <_malloc_r+0x72>
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	42a2      	cmp	r2, r4
 8005d64:	bf0c      	ite	eq
 8005d66:	600b      	streq	r3, [r1, #0]
 8005d68:	6053      	strne	r3, [r2, #4]
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f000 f85a 	bl	8005e24 <__malloc_unlock>
 8005d70:	f104 000b 	add.w	r0, r4, #11
 8005d74:	1d23      	adds	r3, r4, #4
 8005d76:	f020 0007 	bic.w	r0, r0, #7
 8005d7a:	1ac2      	subs	r2, r0, r3
 8005d7c:	d0cc      	beq.n	8005d18 <_malloc_r+0x20>
 8005d7e:	1a1b      	subs	r3, r3, r0
 8005d80:	50a3      	str	r3, [r4, r2]
 8005d82:	e7c9      	b.n	8005d18 <_malloc_r+0x20>
 8005d84:	4622      	mov	r2, r4
 8005d86:	6864      	ldr	r4, [r4, #4]
 8005d88:	e7cc      	b.n	8005d24 <_malloc_r+0x2c>
 8005d8a:	1cc4      	adds	r4, r0, #3
 8005d8c:	f024 0403 	bic.w	r4, r4, #3
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d0e3      	beq.n	8005d5c <_malloc_r+0x64>
 8005d94:	1a21      	subs	r1, r4, r0
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 f82e 	bl	8005df8 <_sbrk_r>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d1dd      	bne.n	8005d5c <_malloc_r+0x64>
 8005da0:	e7cf      	b.n	8005d42 <_malloc_r+0x4a>
 8005da2:	bf00      	nop
 8005da4:	2000de2c 	.word	0x2000de2c
 8005da8:	2000de30 	.word	0x2000de30

08005dac <_realloc_r>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	4607      	mov	r7, r0
 8005db0:	4614      	mov	r4, r2
 8005db2:	460e      	mov	r6, r1
 8005db4:	b921      	cbnz	r1, 8005dc0 <_realloc_r+0x14>
 8005db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dba:	4611      	mov	r1, r2
 8005dbc:	f7ff bf9c 	b.w	8005cf8 <_malloc_r>
 8005dc0:	b922      	cbnz	r2, 8005dcc <_realloc_r+0x20>
 8005dc2:	f7ff ff49 	bl	8005c58 <_free_r>
 8005dc6:	4625      	mov	r5, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dcc:	f000 f830 	bl	8005e30 <_malloc_usable_size_r>
 8005dd0:	42a0      	cmp	r0, r4
 8005dd2:	d20f      	bcs.n	8005df4 <_realloc_r+0x48>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	f7ff ff8e 	bl	8005cf8 <_malloc_r>
 8005ddc:	4605      	mov	r5, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d0f2      	beq.n	8005dc8 <_realloc_r+0x1c>
 8005de2:	4631      	mov	r1, r6
 8005de4:	4622      	mov	r2, r4
 8005de6:	f7ff fbef 	bl	80055c8 <memcpy>
 8005dea:	4631      	mov	r1, r6
 8005dec:	4638      	mov	r0, r7
 8005dee:	f7ff ff33 	bl	8005c58 <_free_r>
 8005df2:	e7e9      	b.n	8005dc8 <_realloc_r+0x1c>
 8005df4:	4635      	mov	r5, r6
 8005df6:	e7e7      	b.n	8005dc8 <_realloc_r+0x1c>

08005df8 <_sbrk_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	; (8005e14 <_sbrk_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fa ff5e 	bl	8000cc4 <_sbrk>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_sbrk_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_sbrk_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	2000df0c 	.word	0x2000df0c

08005e18 <__malloc_lock>:
 8005e18:	4801      	ldr	r0, [pc, #4]	; (8005e20 <__malloc_lock+0x8>)
 8005e1a:	f000 b811 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 8005e1e:	bf00      	nop
 8005e20:	2000df14 	.word	0x2000df14

08005e24 <__malloc_unlock>:
 8005e24:	4801      	ldr	r0, [pc, #4]	; (8005e2c <__malloc_unlock+0x8>)
 8005e26:	f000 b80c 	b.w	8005e42 <__retarget_lock_release_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	2000df14 	.word	0x2000df14

08005e30 <_malloc_usable_size_r>:
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	1f18      	subs	r0, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfbc      	itt	lt
 8005e3a:	580b      	ldrlt	r3, [r1, r0]
 8005e3c:	18c0      	addlt	r0, r0, r3
 8005e3e:	4770      	bx	lr

08005e40 <__retarget_lock_acquire_recursive>:
 8005e40:	4770      	bx	lr

08005e42 <__retarget_lock_release_recursive>:
 8005e42:	4770      	bx	lr

08005e44 <_init>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr

08005e50 <_fini>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr
