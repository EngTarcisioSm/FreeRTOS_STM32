
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004588  08004588  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cca8  20000010  080045a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ccb8  080045a0  0002ccb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cb6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002633  00000000  00000000  00030cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  00033330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00034230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001786a  00000000  00000000  00035008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bcc0  00000000  00000000  0004c872  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093946  00000000  00000000  00058532  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebe78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  000ebef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004490 	.word	0x08004490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004490 	.word	0x08004490

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb51 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8cd 	bl	80006c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f8a1 	bl	800066c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  xMutex = xSemaphoreCreateMutex();
 800052a:	2001      	movs	r0, #1
 800052c:	f002 fafa 	bl	8002b24 <xQueueCreateMutex>
 8000530:	4602      	mov	r2, r0
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  // defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);         //removido

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //criação de tarefa 1
  if ((xTaskCreate(vTaskOne, "TASK_ONE_NAME", configMINIMAL_STACK_SIZE, NULL, 1, NULL)) != pdTRUE )
 8000536:	2300      	movs	r3, #0
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	490f      	ldr	r1, [pc, #60]	; (8000580 <main+0x6c>)
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0x70>)
 8000546:	f002 fd2d 	bl	8002fa4 <xTaskCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	d002      	beq.n	8000556 <main+0x42>
  {
    vPrintString("Não foi possivel alocar tarefa vTaskOne no escalonador");
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <main+0x74>)
 8000552:	f000 f977 	bl	8000844 <vPrintString>
  }

  //criação de tarefa 2
  if ((xTaskCreate(vTaskTwo, "TASK_TWO_NAME", configMINIMAL_STACK_SIZE, NULL, 1, NULL)) != pdTRUE )
 8000556:	2300      	movs	r3, #0
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2301      	movs	r3, #1
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	490a      	ldr	r1, [pc, #40]	; (800058c <main+0x78>)
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x7c>)
 8000566:	f002 fd1d 	bl	8002fa4 <xTaskCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d002      	beq.n	8000576 <main+0x62>
  {
    vPrintString("Não foi possivel alocar tarefa vTaskTwo no escalonador");
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x80>)
 8000572:	f000 f967 	bl	8000844 <vPrintString>
  
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  // osKernelStart();    //Remover
  vTaskStartScheduler();
 8000576:	f002 fe7f 	bl	8003278 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x66>
 800057c:	2000cbcc 	.word	0x2000cbcc
 8000580:	080044a8 	.word	0x080044a8
 8000584:	08000901 	.word	0x08000901
 8000588:	080044b8 	.word	0x080044b8
 800058c:	080044f0 	.word	0x080044f0
 8000590:	0800091d 	.word	0x0800091d
 8000594:	08004500 	.word	0x08004500

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 ff69 	bl	800447e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <SystemClock_Config+0xd0>)
 80005e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000610:	2354      	movs	r3, #84	; 0x54
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fd8d 	bl	8001140 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 f996 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2102      	movs	r1, #2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ffe7 	bl	8001620 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 f980 	bl	800095c <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART1_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART1_UART_Init+0x4c>)
 80006a4:	f001 fbfe 	bl	8001ea4 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f955 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000cbd0 	.word	0x2000cbd0
 80006bc:	40011000 	.word	0x40011000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b55      	ldr	r3, [pc, #340]	; (8000830 <MX_GPIO_Init+0x170>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a54      	ldr	r2, [pc, #336]	; (8000830 <MX_GPIO_Init+0x170>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b52      	ldr	r3, [pc, #328]	; (8000830 <MX_GPIO_Init+0x170>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <MX_GPIO_Init+0x170>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a4d      	ldr	r2, [pc, #308]	; (8000830 <MX_GPIO_Init+0x170>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b4b      	ldr	r3, [pc, #300]	; (8000830 <MX_GPIO_Init+0x170>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <MX_GPIO_Init+0x170>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a46      	ldr	r2, [pc, #280]	; (8000830 <MX_GPIO_Init+0x170>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b44      	ldr	r3, [pc, #272]	; (8000830 <MX_GPIO_Init+0x170>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b40      	ldr	r3, [pc, #256]	; (8000830 <MX_GPIO_Init+0x170>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <MX_GPIO_Init+0x170>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <MX_GPIO_Init+0x170>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <MX_GPIO_Init+0x170>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a38      	ldr	r2, [pc, #224]	; (8000830 <MX_GPIO_Init+0x170>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <MX_GPIO_Init+0x170>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin|SEL_1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2109      	movs	r1, #9
 8000766:	4833      	ldr	r0, [pc, #204]	; (8000834 <MX_GPIO_Init+0x174>)
 8000768:	f000 fcd0 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000772:	4831      	ldr	r0, [pc, #196]	; (8000838 <MX_GPIO_Init+0x178>)
 8000774:	f000 fcca 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	482f      	ldr	r0, [pc, #188]	; (800083c <MX_GPIO_Init+0x17c>)
 800077e:	f000 fcc5 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOUT_LED1_Pin */
  GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 8000782:	2301      	movs	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	4826      	ldr	r0, [pc, #152]	; (8000834 <MX_GPIO_Init+0x174>)
 800079a:	f000 fb35 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_0_Pin */
  GPIO_InitStruct.Pin = SEL_0_Pin;
 800079e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4820      	ldr	r0, [pc, #128]	; (8000838 <MX_GPIO_Init+0x178>)
 80007b8:	f000 fb26 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_CFIG_Pin */
  GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 80007bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	481b      	ldr	r0, [pc, #108]	; (8000840 <MX_GPIO_Init+0x180>)
 80007d2:	f000 fb19 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_RX_485_Pin */
  GPIO_InitStruct.Pin = EN_RX_485_Pin;
 80007d6:	2304      	movs	r3, #4
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_GPIO_Init+0x17c>)
 80007ee:	f000 fb0b 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_Pin */
  GPIO_InitStruct.Pin = SEL_1_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <MX_GPIO_Init+0x174>)
 800080a:	f000 fafd 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_TARA_Pin */
  GPIO_InitStruct.Pin = DIN_TARA_Pin;
 800080e:	2310      	movs	r3, #16
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0x174>)
 8000822:	f000 faf1 	bl	8000e08 <HAL_GPIO_Init>

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400
 8000838:	40020000 	.word	0x40020000
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40020800 	.word	0x40020800

08000844 <vPrintString>:

/* USER CODE BEGIN 4 */
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  //acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <vPrintString+0x60>)
 8000854:	f000 fc5a 	bl	800110c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2108      	movs	r1, #8
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <vPrintString+0x64>)
 800085e:	f000 fc55 	bl	800110c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <vPrintString+0x68>)
 8000868:	f000 fc50 	bl	800110c <HAL_GPIO_WritePin>
  taskENTER_CRITICAL();
 800086c:	f003 fb26 	bl	8003ebc <vPortEnterCritical>
  {
    vUsartLib_Puts(pc_uartSend_f);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f82d 	bl	80008d0 <vUsartLib_Puts>
  }
  //acionamentos necessários para chavear e acionar o rs485 em modo de recepção
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <vPrintString+0x60>)
 800087e:	f000 fc45 	bl	800110c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2108      	movs	r1, #8
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <vPrintString+0x64>)
 8000888:	f000 fc40 	bl	800110c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <vPrintString+0x68>)
 8000892:	f000 fc3b 	bl	800110c <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8000896:	f003 fb3f 	bl	8003f18 <vPortExitCritical>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
  //envia um unico caractere
  HAL_UART_Transmit(huart, &c_data, 1, 10);
 80008bc:	1cf9      	adds	r1, r7, #3
 80008be:	230a      	movs	r3, #10
 80008c0:	2201      	movs	r2, #1
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f001 fb3b 	bl	8001f3e <HAL_UART_Transmit>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  //roda todo o buffer até encontrar 0x00
  while(*c_data){
 80008d8:	e007      	b.n	80008ea <vUsartLib_Puts+0x1a>
    vUsartLib_Putc(&huart1, *c_data++);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <vUsartLib_Puts+0x2c>)
 80008e6:	f7ff ffe3 	bl	80008b0 <vUsartLib_Putc>
  while(*c_data){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f3      	bne.n	80008da <vUsartLib_Puts+0xa>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000cbd0 	.word	0x2000cbd0

08000900 <vTaskOne>:

//funções de tarefas
void vTaskOne(void *pvParameters) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  for (;;) {
    vPrintString("Testando task_1...\n");
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <vTaskOne+0x18>)
 800090a:	f7ff ff9b 	bl	8000844 <vPrintString>
    vTaskDelay( 1000 / portTICK_PERIOD_MS);
 800090e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000912:	f002 fc7d 	bl	8003210 <vTaskDelay>
    vPrintString("Testando task_1...\n");
 8000916:	e7f7      	b.n	8000908 <vTaskOne+0x8>
 8000918:	08004538 	.word	0x08004538

0800091c <vTaskTwo>:
  }
  //o comando abaixo não deveria ser executado...Caso algo estranho ocorra, esta task é deletada
  //primeiro parametro NULLinforma que é para desalocar da memória esta task
  vTaskDelete( NULL );
}
void vTaskTwo(void *pvParameters) { 
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  while(1){
    vPrintString("Testando task_2...\n");
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <vTaskTwo+0x18>)
 8000926:	f7ff ff8d 	bl	8000844 <vPrintString>
    vTaskDelay( 1000 / portTICK_PERIOD_MS);
 800092a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092e:	f002 fc6f 	bl	8003210 <vTaskDelay>
    vPrintString("Testando task_2...\n");
 8000932:	e7f7      	b.n	8000924 <vTaskTwo+0x8>
 8000934:	0800454c 	.word	0x0800454c

08000938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094a:	f000 f95b 	bl	8000c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40000800 	.word	0x40000800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000962:	e7fe      	b.n	8000962 <Error_Handler+0x6>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_MspInit+0x54>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <HAL_MspInit+0x54>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x54>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x54>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_MspInit+0x54>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_MspInit+0x54>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	210f      	movs	r1, #15
 80009a6:	f06f 0001 	mvn.w	r0, #1
 80009aa:	f000 fa03 	bl	8000db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_UART_MspInit+0x84>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d12b      	bne.n	8000a36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0x88>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x88>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_UART_MspInit+0x88>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_UART_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a16:	23c0      	movs	r3, #192	; 0xc0
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a26:	2307      	movs	r3, #7
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_UART_MspInit+0x8c>)
 8000a32:	f000 f9e9 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40011000 	.word	0x40011000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	201e      	movs	r0, #30
 8000a62:	f000 f9a7 	bl	8000db4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a66:	201e      	movs	r0, #30
 8000a68:	f000 f9c0 	bl	8000dec <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_InitTick+0xa4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_InitTick+0xa4>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_InitTick+0xa4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 ffb6 	bl	8001a04 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a98:	f000 ff8c 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_InitTick+0xa8>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	0c9b      	lsrs	r3, r3, #18
 8000aac:	3b01      	subs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_InitTick+0xac>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <HAL_InitTick+0xb0>)
 8000ab4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_InitTick+0xac>)
 8000ab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000abc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_InitTick+0xac>)
 8000ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_InitTick+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_InitTick+0xac>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <HAL_InitTick+0xac>)
 8000ad2:	f000 ffc9 	bl	8001a68 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d104      	bne.n	8000ae6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <HAL_InitTick+0xac>)
 8000ade:	f000 fff8 	bl	8001ad2 <HAL_TIM_Base_Start_IT>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3730      	adds	r7, #48	; 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	2000cc74 	.word	0x2000cc74
 8000afc:	40000800 	.word	0x40000800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM4_IRQHandler+0x10>)
 8000b32:	f000 fff2 	bl	8001b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000cc74 	.word	0x2000cc74

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <SystemInit+0x28>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <SystemInit+0x28>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SystemInit+0x28>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b72:	e003      	b.n	8000b7c <LoopCopyDataInit>

08000b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b7a:	3104      	adds	r1, #4

08000b7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b84:	d3f6      	bcc.n	8000b74 <CopyDataInit>
  ldr  r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b88:	e002      	b.n	8000b90 <LoopFillZerobss>

08000b8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b8c:	f842 3b04 	str.w	r3, [r2], #4

08000b90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b94:	d3f9      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b96:	f7ff ffd3 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f003 fc41 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fcb9 	bl	8000514 <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000ba8:	08004590 	.word	0x08004590
  ldr  r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bb0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000bb4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000bb8:	2000ccb8 	.word	0x2000ccb8

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f8d8 	bl	8000d9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff2c 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff feb6 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	2000ccb4 	.word	0x2000ccb4

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000ccb4 	.word	0x2000ccb4

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff4c 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc6:	f7ff ff61 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	6978      	ldr	r0, [r7, #20]
 8000dd2:	f7ff ffb1 	bl	8000d38 <NVIC_EncodePriority>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff80 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff54 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e159      	b.n	80010d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8148 	bne.w	80010d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d00b      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e56:	2b11      	cmp	r3, #17
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d130      	bne.n	8000ec4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0xfc>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b12      	cmp	r3, #18
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80a2 	beq.w	80010d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b56      	ldr	r3, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a55      	ldr	r2, [pc, #340]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a51      	ldr	r2, [pc, #324]	; (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x202>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x1fe>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_GPIO_Init+0x2f4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <HAL_GPIO_Init+0x2f8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x1f6>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a44      	ldr	r2, [pc, #272]	; (8001104 <HAL_GPIO_Init+0x2fc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x1f2>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x204>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x204>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x204>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x204>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x204>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	4934      	ldr	r1, [pc, #208]	; (80010f0 <HAL_GPIO_Init+0x2e8>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <HAL_GPIO_Init+0x300>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <HAL_GPIO_Init+0x300>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_GPIO_Init+0x300>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_GPIO_Init+0x300>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_GPIO_Init+0x300>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_GPIO_Init+0x300>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x300>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_GPIO_Init+0x300>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f aea2 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e25b      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00c      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	2b08      	cmp	r3, #8
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e236      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a90      	ldr	r2, [pc, #576]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a83      	ldr	r2, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a80      	ldr	r2, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fd18 	bl	8000c2c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fd14 	bl	8000c2c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1fb      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fd04 	bl	8000c2c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fd00 	bl	8000c2c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1e7      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1bb      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4952      	ldr	r1, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fcb9 	bl	8000c2c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fcb5 	bl	8000c2c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e19c      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4940      	ldr	r1, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc98 	bl	8000c2c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc94 	bl	8000c2c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e17b      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fc78 	bl	8000c2c <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc74 	bl	8000c2c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e15b      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fc61 	bl	8000c2c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fc5d 	bl	8000c2c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e144      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a0 	beq.w	80014da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d121      	bne.n	800141a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fc23 	bl	8000c2c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e011      	b.n	800140e <HAL_RCC_OscConfig+0x2ce>
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	42470000 	.word	0x42470000
 80013f4:	42470e80 	.word	0x42470e80
 80013f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7ff fc16 	bl	8000c2c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0fd      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x4d4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x2f0>
 8001422:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x312>
 8001438:	4b77      	ldr	r3, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a76      	ldr	r2, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	4b74      	ldr	r3, [pc, #464]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a73      	ldr	r2, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001452:	4b71      	ldr	r3, [pc, #452]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fbdb 	bl	8000c2c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fbd7 	bl	8000c2c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0bc      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b61      	ldr	r3, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x33a>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbc5 	bl	8000c2c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fbc1 	bl	8000c2c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0a6      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b56      	ldr	r3, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b52      	ldr	r3, [pc, #328]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a51      	ldr	r2, [pc, #324]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8092 	beq.w	8001608 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d05c      	beq.n	80015aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d141      	bne.n	800157c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb95 	bl	8000c2c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb91 	bl	8000c2c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e078      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	3b01      	subs	r3, #1
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	4933      	ldr	r1, [pc, #204]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154e:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_RCC_OscConfig+0x4dc>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb6a 	bl	8000c2c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb66 	bl	8000c2c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e04d      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x41c>
 800157a:	e045      	b.n	8001608 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x4dc>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb53 	bl	8000c2c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb4f 	bl	8000c2c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e036      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x44a>
 80015a8:	e02e      	b.n	8001608 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e029      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11c      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d115      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000
 8001618:	40023800 	.word	0x40023800
 800161c:	42470060 	.word	0x42470060

08001620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0cc      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d90c      	bls.n	800165c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d044      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d119      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d003      	beq.n	80016de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e067      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4934      	ldr	r1, [pc, #208]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff fa8c 	bl	8000c2c <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff fa88 	bl	8000c2c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e04f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d20c      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4601      	mov	r1, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	fa21 f303 	lsr.w	r3, r1, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f940 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	08004568 	.word	0x08004568
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d007      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x32>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d008      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x38>
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80b4 	bne.w	8001980 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800181a:	60bb      	str	r3, [r7, #8]
       break;
 800181c:	e0b3      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181e:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001820:	60bb      	str	r3, [r7, #8]
      break;
 8001822:	e0b0      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d04a      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	ea03 0501 	and.w	r5, r3, r1
 8001850:	ea04 0602 	and.w	r6, r4, r2
 8001854:	4629      	mov	r1, r5
 8001856:	4632      	mov	r2, r6
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	0154      	lsls	r4, r2, #5
 8001862:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001866:	014b      	lsls	r3, r1, #5
 8001868:	4619      	mov	r1, r3
 800186a:	4622      	mov	r2, r4
 800186c:	1b49      	subs	r1, r1, r5
 800186e:	eb62 0206 	sbc.w	r2, r2, r6
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	f04f 0400 	mov.w	r4, #0
 800187a:	0194      	lsls	r4, r2, #6
 800187c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001880:	018b      	lsls	r3, r1, #6
 8001882:	1a5b      	subs	r3, r3, r1
 8001884:	eb64 0402 	sbc.w	r4, r4, r2
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	00e2      	lsls	r2, r4, #3
 8001892:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001896:	00d9      	lsls	r1, r3, #3
 8001898:	460b      	mov	r3, r1
 800189a:	4614      	mov	r4, r2
 800189c:	195b      	adds	r3, r3, r5
 800189e:	eb44 0406 	adc.w	r4, r4, r6
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	0262      	lsls	r2, r4, #9
 80018ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018b0:	0259      	lsls	r1, r3, #9
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	4621      	mov	r1, r4
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f04f 0400 	mov.w	r4, #0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	f7fe fc8c 	bl	80001e0 <__aeabi_uldivmod>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e049      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	f04f 0400 	mov.w	r4, #0
 80018da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	ea03 0501 	and.w	r5, r3, r1
 80018e6:	ea04 0602 	and.w	r6, r4, r2
 80018ea:	4629      	mov	r1, r5
 80018ec:	4632      	mov	r2, r6
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	0154      	lsls	r4, r2, #5
 80018f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fc:	014b      	lsls	r3, r1, #5
 80018fe:	4619      	mov	r1, r3
 8001900:	4622      	mov	r2, r4
 8001902:	1b49      	subs	r1, r1, r5
 8001904:	eb62 0206 	sbc.w	r2, r2, r6
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	0194      	lsls	r4, r2, #6
 8001912:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	1a5b      	subs	r3, r3, r1
 800191a:	eb64 0402 	sbc.w	r4, r4, r2
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	00e2      	lsls	r2, r4, #3
 8001928:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800192c:	00d9      	lsls	r1, r3, #3
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	195b      	adds	r3, r3, r5
 8001934:	eb44 0406 	adc.w	r4, r4, r6
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	02a2      	lsls	r2, r4, #10
 8001942:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001946:	0299      	lsls	r1, r3, #10
 8001948:	460b      	mov	r3, r1
 800194a:	4614      	mov	r4, r2
 800194c:	4618      	mov	r0, r3
 800194e:	4621      	mov	r1, r4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f04f 0400 	mov.w	r4, #0
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	f7fe fc41 	bl	80001e0 <__aeabi_uldivmod>
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	60bb      	str	r3, [r7, #8]
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001982:	60bb      	str	r3, [r7, #8]
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	68bb      	ldr	r3, [r7, #8]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	00f42400 	.word	0x00f42400
 8001998:	007a1200 	.word	0x007a1200

0800199c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019b8:	f7ff fff0 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019bc:	4601      	mov	r1, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0a9b      	lsrs	r3, r3, #10
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08004578 	.word	0x08004578

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff ffdc 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019e4:	4601      	mov	r1, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0b5b      	lsrs	r3, r3, #13
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08004578 	.word	0x08004578

08001a04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	220f      	movs	r2, #15
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_RCC_GetClockConfig+0x60>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 020f 	and.w	r2, r3, #15
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e01d      	b.n	8001ab6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f815 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f000 f968 	bl	8001d7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d007      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d122      	bne.n	8001b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d11b      	bne.n	8001b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f06f 0202 	mvn.w	r2, #2
 8001b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8ee 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001b62:	e005      	b.n	8001b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8e0 	bl	8001d2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8f1 	bl	8001d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d122      	bne.n	8001bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d11b      	bne.n	8001bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0204 	mvn.w	r2, #4
 8001b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8c4 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001bb6:	e005      	b.n	8001bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8b6 	bl	8001d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8c7 	bl	8001d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d122      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11b      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0208 	mvn.w	r2, #8
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f89a 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001c0a:	e005      	b.n	8001c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f88c 	bl	8001d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f89d 	bl	8001d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d122      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d11b      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0210 	mvn.w	r2, #16
 8001c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2208      	movs	r2, #8
 8001c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f870 	bl	8001d3e <HAL_TIM_IC_CaptureCallback>
 8001c5e:	e005      	b.n	8001c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f862 	bl	8001d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f873 	bl	8001d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10e      	bne.n	8001c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0201 	mvn.w	r2, #1
 8001c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7fe fe4d 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d10e      	bne.n	8001cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b80      	cmp	r3, #128	; 0x80
 8001cb8:	d107      	bne.n	8001cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8e3 	bl	8001e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d107      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f838 	bl	8001d66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d10e      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d107      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f06f 0220 	mvn.w	r2, #32
 8001d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8ad 	bl	8001e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <TIM_Base_SetConfig+0xe4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00f      	beq.n	8001db4 <TIM_Base_SetConfig+0x38>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9a:	d00b      	beq.n	8001db4 <TIM_Base_SetConfig+0x38>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <TIM_Base_SetConfig+0xe8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d007      	beq.n	8001db4 <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a30      	ldr	r2, [pc, #192]	; (8001e68 <TIM_Base_SetConfig+0xec>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <TIM_Base_SetConfig+0xf0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d108      	bne.n	8001dc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <TIM_Base_SetConfig+0xe4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01b      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d017      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <TIM_Base_SetConfig+0xe8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <TIM_Base_SetConfig+0xec>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <TIM_Base_SetConfig+0xf0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00b      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <TIM_Base_SetConfig+0xf4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <TIM_Base_SetConfig+0xf8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d003      	beq.n	8001e06 <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <TIM_Base_SetConfig+0xfc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d108      	bne.n	8001e18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <TIM_Base_SetConfig+0xe4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d103      	bne.n	8001e4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	615a      	str	r2, [r3, #20]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800

08001e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e03f      	b.n	8001f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd76 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f90b 	bl	8002104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b088      	sub	sp, #32
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	f040 8083 	bne.w	8002066 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_UART_Transmit+0x2e>
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e07b      	b.n	8002068 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_UART_Transmit+0x40>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e074      	b.n	8002068 <HAL_UART_Transmit+0x12a>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2221      	movs	r2, #33	; 0x21
 8001f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fe4a 	bl	8000c2c <HAL_GetTick>
 8001f98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	88fa      	ldrh	r2, [r7, #6]
 8001fa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001fae:	e042      	b.n	8002036 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc6:	d122      	bne.n	800200e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f84c 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e042      	b.n	8002068 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ff4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3302      	adds	r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	e017      	b.n	8002036 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	e013      	b.n	8002036 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f829 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e01f      	b.n	8002068 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1b7      	bne.n	8001fb0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2200      	movs	r2, #0
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f810 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e006      	b.n	8002068 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002066:	2302      	movs	r3, #2
  }
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002080:	e02c      	b.n	80020dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d028      	beq.n	80020dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002090:	f7fe fdcc 	bl	8000c2c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	429a      	cmp	r2, r3
 800209e:	d21d      	bcs.n	80020dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e00f      	b.n	80020fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d0c3      	beq.n	8002082 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002146:	f023 030c 	bic.w	r3, r3, #12
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	430b      	orrs	r3, r1
 8002152:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002172:	f040 818b 	bne.w	800248c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4ac1      	ldr	r2, [pc, #772]	; (8002480 <UART_SetConfig+0x37c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d005      	beq.n	800218c <UART_SetConfig+0x88>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4abf      	ldr	r2, [pc, #764]	; (8002484 <UART_SetConfig+0x380>)
 8002186:	4293      	cmp	r3, r2
 8002188:	f040 80bd 	bne.w	8002306 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800218c:	f7ff fc26 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8002190:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	461d      	mov	r5, r3
 8002196:	f04f 0600 	mov.w	r6, #0
 800219a:	46a8      	mov	r8, r5
 800219c:	46b1      	mov	r9, r6
 800219e:	eb18 0308 	adds.w	r3, r8, r8
 80021a2:	eb49 0409 	adc.w	r4, r9, r9
 80021a6:	4698      	mov	r8, r3
 80021a8:	46a1      	mov	r9, r4
 80021aa:	eb18 0805 	adds.w	r8, r8, r5
 80021ae:	eb49 0906 	adc.w	r9, r9, r6
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021c6:	4688      	mov	r8, r1
 80021c8:	4691      	mov	r9, r2
 80021ca:	eb18 0005 	adds.w	r0, r8, r5
 80021ce:	eb49 0106 	adc.w	r1, r9, r6
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	461d      	mov	r5, r3
 80021d8:	f04f 0600 	mov.w	r6, #0
 80021dc:	196b      	adds	r3, r5, r5
 80021de:	eb46 0406 	adc.w	r4, r6, r6
 80021e2:	461a      	mov	r2, r3
 80021e4:	4623      	mov	r3, r4
 80021e6:	f7fd fffb 	bl	80001e0 <__aeabi_uldivmod>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	461a      	mov	r2, r3
 80021f0:	4ba5      	ldr	r3, [pc, #660]	; (8002488 <UART_SetConfig+0x384>)
 80021f2:	fba3 2302 	umull	r2, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	461d      	mov	r5, r3
 8002200:	f04f 0600 	mov.w	r6, #0
 8002204:	46a9      	mov	r9, r5
 8002206:	46b2      	mov	sl, r6
 8002208:	eb19 0309 	adds.w	r3, r9, r9
 800220c:	eb4a 040a 	adc.w	r4, sl, sl
 8002210:	4699      	mov	r9, r3
 8002212:	46a2      	mov	sl, r4
 8002214:	eb19 0905 	adds.w	r9, r9, r5
 8002218:	eb4a 0a06 	adc.w	sl, sl, r6
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800222c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002230:	4689      	mov	r9, r1
 8002232:	4692      	mov	sl, r2
 8002234:	eb19 0005 	adds.w	r0, r9, r5
 8002238:	eb4a 0106 	adc.w	r1, sl, r6
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	461d      	mov	r5, r3
 8002242:	f04f 0600 	mov.w	r6, #0
 8002246:	196b      	adds	r3, r5, r5
 8002248:	eb46 0406 	adc.w	r4, r6, r6
 800224c:	461a      	mov	r2, r3
 800224e:	4623      	mov	r3, r4
 8002250:	f7fd ffc6 	bl	80001e0 <__aeabi_uldivmod>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	461a      	mov	r2, r3
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <UART_SetConfig+0x384>)
 800225c:	fba3 1302 	umull	r1, r3, r3, r2
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	2164      	movs	r1, #100	; 0x64
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	4a86      	ldr	r2, [pc, #536]	; (8002488 <UART_SetConfig+0x384>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800227c:	4498      	add	r8, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	461d      	mov	r5, r3
 8002282:	f04f 0600 	mov.w	r6, #0
 8002286:	46a9      	mov	r9, r5
 8002288:	46b2      	mov	sl, r6
 800228a:	eb19 0309 	adds.w	r3, r9, r9
 800228e:	eb4a 040a 	adc.w	r4, sl, sl
 8002292:	4699      	mov	r9, r3
 8002294:	46a2      	mov	sl, r4
 8002296:	eb19 0905 	adds.w	r9, r9, r5
 800229a:	eb4a 0a06 	adc.w	sl, sl, r6
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022b2:	4689      	mov	r9, r1
 80022b4:	4692      	mov	sl, r2
 80022b6:	eb19 0005 	adds.w	r0, r9, r5
 80022ba:	eb4a 0106 	adc.w	r1, sl, r6
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	461d      	mov	r5, r3
 80022c4:	f04f 0600 	mov.w	r6, #0
 80022c8:	196b      	adds	r3, r5, r5
 80022ca:	eb46 0406 	adc.w	r4, r6, r6
 80022ce:	461a      	mov	r2, r3
 80022d0:	4623      	mov	r3, r4
 80022d2:	f7fd ff85 	bl	80001e0 <__aeabi_uldivmod>
 80022d6:	4603      	mov	r3, r0
 80022d8:	460c      	mov	r4, r1
 80022da:	461a      	mov	r2, r3
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <UART_SetConfig+0x384>)
 80022de:	fba3 1302 	umull	r1, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2164      	movs	r1, #100	; 0x64
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3332      	adds	r3, #50	; 0x32
 80022f0:	4a65      	ldr	r2, [pc, #404]	; (8002488 <UART_SetConfig+0x384>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	f003 0207 	and.w	r2, r3, #7
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4442      	add	r2, r8
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e26f      	b.n	80027e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002306:	f7ff fb55 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 800230a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	461d      	mov	r5, r3
 8002310:	f04f 0600 	mov.w	r6, #0
 8002314:	46a8      	mov	r8, r5
 8002316:	46b1      	mov	r9, r6
 8002318:	eb18 0308 	adds.w	r3, r8, r8
 800231c:	eb49 0409 	adc.w	r4, r9, r9
 8002320:	4698      	mov	r8, r3
 8002322:	46a1      	mov	r9, r4
 8002324:	eb18 0805 	adds.w	r8, r8, r5
 8002328:	eb49 0906 	adc.w	r9, r9, r6
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002338:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800233c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002340:	4688      	mov	r8, r1
 8002342:	4691      	mov	r9, r2
 8002344:	eb18 0005 	adds.w	r0, r8, r5
 8002348:	eb49 0106 	adc.w	r1, r9, r6
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	461d      	mov	r5, r3
 8002352:	f04f 0600 	mov.w	r6, #0
 8002356:	196b      	adds	r3, r5, r5
 8002358:	eb46 0406 	adc.w	r4, r6, r6
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	f7fd ff3e 	bl	80001e0 <__aeabi_uldivmod>
 8002364:	4603      	mov	r3, r0
 8002366:	460c      	mov	r4, r1
 8002368:	461a      	mov	r2, r3
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <UART_SetConfig+0x384>)
 800236c:	fba3 2302 	umull	r2, r3, r3, r2
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	461d      	mov	r5, r3
 800237a:	f04f 0600 	mov.w	r6, #0
 800237e:	46a9      	mov	r9, r5
 8002380:	46b2      	mov	sl, r6
 8002382:	eb19 0309 	adds.w	r3, r9, r9
 8002386:	eb4a 040a 	adc.w	r4, sl, sl
 800238a:	4699      	mov	r9, r3
 800238c:	46a2      	mov	sl, r4
 800238e:	eb19 0905 	adds.w	r9, r9, r5
 8002392:	eb4a 0a06 	adc.w	sl, sl, r6
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023aa:	4689      	mov	r9, r1
 80023ac:	4692      	mov	sl, r2
 80023ae:	eb19 0005 	adds.w	r0, r9, r5
 80023b2:	eb4a 0106 	adc.w	r1, sl, r6
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	461d      	mov	r5, r3
 80023bc:	f04f 0600 	mov.w	r6, #0
 80023c0:	196b      	adds	r3, r5, r5
 80023c2:	eb46 0406 	adc.w	r4, r6, r6
 80023c6:	461a      	mov	r2, r3
 80023c8:	4623      	mov	r3, r4
 80023ca:	f7fd ff09 	bl	80001e0 <__aeabi_uldivmod>
 80023ce:	4603      	mov	r3, r0
 80023d0:	460c      	mov	r4, r1
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <UART_SetConfig+0x384>)
 80023d6:	fba3 1302 	umull	r1, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2164      	movs	r1, #100	; 0x64
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	3332      	adds	r3, #50	; 0x32
 80023e8:	4a27      	ldr	r2, [pc, #156]	; (8002488 <UART_SetConfig+0x384>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023f6:	4498      	add	r8, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	461d      	mov	r5, r3
 80023fc:	f04f 0600 	mov.w	r6, #0
 8002400:	46a9      	mov	r9, r5
 8002402:	46b2      	mov	sl, r6
 8002404:	eb19 0309 	adds.w	r3, r9, r9
 8002408:	eb4a 040a 	adc.w	r4, sl, sl
 800240c:	4699      	mov	r9, r3
 800240e:	46a2      	mov	sl, r4
 8002410:	eb19 0905 	adds.w	r9, r9, r5
 8002414:	eb4a 0a06 	adc.w	sl, sl, r6
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002424:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002428:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800242c:	4689      	mov	r9, r1
 800242e:	4692      	mov	sl, r2
 8002430:	eb19 0005 	adds.w	r0, r9, r5
 8002434:	eb4a 0106 	adc.w	r1, sl, r6
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	461d      	mov	r5, r3
 800243e:	f04f 0600 	mov.w	r6, #0
 8002442:	196b      	adds	r3, r5, r5
 8002444:	eb46 0406 	adc.w	r4, r6, r6
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	f7fd fec8 	bl	80001e0 <__aeabi_uldivmod>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	461a      	mov	r2, r3
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <UART_SetConfig+0x384>)
 8002458:	fba3 1302 	umull	r1, r3, r3, r2
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	2164      	movs	r1, #100	; 0x64
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	3332      	adds	r3, #50	; 0x32
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <UART_SetConfig+0x384>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	f003 0207 	and.w	r2, r3, #7
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4442      	add	r2, r8
 800247c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800247e:	e1b2      	b.n	80027e6 <UART_SetConfig+0x6e2>
 8002480:	40011000 	.word	0x40011000
 8002484:	40011400 	.word	0x40011400
 8002488:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4ad7      	ldr	r2, [pc, #860]	; (80027f0 <UART_SetConfig+0x6ec>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d005      	beq.n	80024a2 <UART_SetConfig+0x39e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4ad6      	ldr	r2, [pc, #856]	; (80027f4 <UART_SetConfig+0x6f0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	f040 80d1 	bne.w	8002644 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024a2:	f7ff fa9b 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 80024a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	469a      	mov	sl, r3
 80024ac:	f04f 0b00 	mov.w	fp, #0
 80024b0:	46d0      	mov	r8, sl
 80024b2:	46d9      	mov	r9, fp
 80024b4:	eb18 0308 	adds.w	r3, r8, r8
 80024b8:	eb49 0409 	adc.w	r4, r9, r9
 80024bc:	4698      	mov	r8, r3
 80024be:	46a1      	mov	r9, r4
 80024c0:	eb18 080a 	adds.w	r8, r8, sl
 80024c4:	eb49 090b 	adc.w	r9, r9, fp
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024dc:	4688      	mov	r8, r1
 80024de:	4691      	mov	r9, r2
 80024e0:	eb1a 0508 	adds.w	r5, sl, r8
 80024e4:	eb4b 0609 	adc.w	r6, fp, r9
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	f04f 0400 	mov.w	r4, #0
 80024fa:	0094      	lsls	r4, r2, #2
 80024fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002500:	008b      	lsls	r3, r1, #2
 8002502:	461a      	mov	r2, r3
 8002504:	4623      	mov	r3, r4
 8002506:	4628      	mov	r0, r5
 8002508:	4631      	mov	r1, r6
 800250a:	f7fd fe69 	bl	80001e0 <__aeabi_uldivmod>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	461a      	mov	r2, r3
 8002514:	4bb8      	ldr	r3, [pc, #736]	; (80027f8 <UART_SetConfig+0x6f4>)
 8002516:	fba3 2302 	umull	r2, r3, r3, r2
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	469b      	mov	fp, r3
 8002524:	f04f 0c00 	mov.w	ip, #0
 8002528:	46d9      	mov	r9, fp
 800252a:	46e2      	mov	sl, ip
 800252c:	eb19 0309 	adds.w	r3, r9, r9
 8002530:	eb4a 040a 	adc.w	r4, sl, sl
 8002534:	4699      	mov	r9, r3
 8002536:	46a2      	mov	sl, r4
 8002538:	eb19 090b 	adds.w	r9, r9, fp
 800253c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002540:	f04f 0100 	mov.w	r1, #0
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800254c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002550:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002554:	4689      	mov	r9, r1
 8002556:	4692      	mov	sl, r2
 8002558:	eb1b 0509 	adds.w	r5, fp, r9
 800255c:	eb4c 060a 	adc.w	r6, ip, sl
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4619      	mov	r1, r3
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	0094      	lsls	r4, r2, #2
 8002574:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002578:	008b      	lsls	r3, r1, #2
 800257a:	461a      	mov	r2, r3
 800257c:	4623      	mov	r3, r4
 800257e:	4628      	mov	r0, r5
 8002580:	4631      	mov	r1, r6
 8002582:	f7fd fe2d 	bl	80001e0 <__aeabi_uldivmod>
 8002586:	4603      	mov	r3, r0
 8002588:	460c      	mov	r4, r1
 800258a:	461a      	mov	r2, r3
 800258c:	4b9a      	ldr	r3, [pc, #616]	; (80027f8 <UART_SetConfig+0x6f4>)
 800258e:	fba3 1302 	umull	r1, r3, r3, r2
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2164      	movs	r1, #100	; 0x64
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	3332      	adds	r3, #50	; 0x32
 80025a0:	4a95      	ldr	r2, [pc, #596]	; (80027f8 <UART_SetConfig+0x6f4>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ac:	4498      	add	r8, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	469b      	mov	fp, r3
 80025b2:	f04f 0c00 	mov.w	ip, #0
 80025b6:	46d9      	mov	r9, fp
 80025b8:	46e2      	mov	sl, ip
 80025ba:	eb19 0309 	adds.w	r3, r9, r9
 80025be:	eb4a 040a 	adc.w	r4, sl, sl
 80025c2:	4699      	mov	r9, r3
 80025c4:	46a2      	mov	sl, r4
 80025c6:	eb19 090b 	adds.w	r9, r9, fp
 80025ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025e2:	4689      	mov	r9, r1
 80025e4:	4692      	mov	sl, r2
 80025e6:	eb1b 0509 	adds.w	r5, fp, r9
 80025ea:	eb4c 060a 	adc.w	r6, ip, sl
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4619      	mov	r1, r3
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	f04f 0400 	mov.w	r4, #0
 8002600:	0094      	lsls	r4, r2, #2
 8002602:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002606:	008b      	lsls	r3, r1, #2
 8002608:	461a      	mov	r2, r3
 800260a:	4623      	mov	r3, r4
 800260c:	4628      	mov	r0, r5
 800260e:	4631      	mov	r1, r6
 8002610:	f7fd fde6 	bl	80001e0 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	461a      	mov	r2, r3
 800261a:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <UART_SetConfig+0x6f4>)
 800261c:	fba3 1302 	umull	r1, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <UART_SetConfig+0x6f4>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4442      	add	r2, r8
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	e0d0      	b.n	80027e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002644:	f7ff f9b6 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8002648:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	469a      	mov	sl, r3
 800264e:	f04f 0b00 	mov.w	fp, #0
 8002652:	46d0      	mov	r8, sl
 8002654:	46d9      	mov	r9, fp
 8002656:	eb18 0308 	adds.w	r3, r8, r8
 800265a:	eb49 0409 	adc.w	r4, r9, r9
 800265e:	4698      	mov	r8, r3
 8002660:	46a1      	mov	r9, r4
 8002662:	eb18 080a 	adds.w	r8, r8, sl
 8002666:	eb49 090b 	adc.w	r9, r9, fp
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002676:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800267a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800267e:	4688      	mov	r8, r1
 8002680:	4691      	mov	r9, r2
 8002682:	eb1a 0508 	adds.w	r5, sl, r8
 8002686:	eb4b 0609 	adc.w	r6, fp, r9
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f04f 0400 	mov.w	r4, #0
 800269c:	0094      	lsls	r4, r2, #2
 800269e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026a2:	008b      	lsls	r3, r1, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	4628      	mov	r0, r5
 80026aa:	4631      	mov	r1, r6
 80026ac:	f7fd fd98 	bl	80001e0 <__aeabi_uldivmod>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <UART_SetConfig+0x6f4>)
 80026b8:	fba3 2302 	umull	r2, r3, r3, r2
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	469b      	mov	fp, r3
 80026c6:	f04f 0c00 	mov.w	ip, #0
 80026ca:	46d9      	mov	r9, fp
 80026cc:	46e2      	mov	sl, ip
 80026ce:	eb19 0309 	adds.w	r3, r9, r9
 80026d2:	eb4a 040a 	adc.w	r4, sl, sl
 80026d6:	4699      	mov	r9, r3
 80026d8:	46a2      	mov	sl, r4
 80026da:	eb19 090b 	adds.w	r9, r9, fp
 80026de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f6:	4689      	mov	r9, r1
 80026f8:	4692      	mov	sl, r2
 80026fa:	eb1b 0509 	adds.w	r5, fp, r9
 80026fe:	eb4c 060a 	adc.w	r6, ip, sl
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	0094      	lsls	r4, r2, #2
 8002716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800271a:	008b      	lsls	r3, r1, #2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	4628      	mov	r0, r5
 8002722:	4631      	mov	r1, r6
 8002724:	f7fd fd5c 	bl	80001e0 <__aeabi_uldivmod>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	461a      	mov	r2, r3
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <UART_SetConfig+0x6f4>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	; 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <UART_SetConfig+0x6f4>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274e:	4498      	add	r8, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	469b      	mov	fp, r3
 8002754:	f04f 0c00 	mov.w	ip, #0
 8002758:	46d9      	mov	r9, fp
 800275a:	46e2      	mov	sl, ip
 800275c:	eb19 0309 	adds.w	r3, r9, r9
 8002760:	eb4a 040a 	adc.w	r4, sl, sl
 8002764:	4699      	mov	r9, r3
 8002766:	46a2      	mov	sl, r4
 8002768:	eb19 090b 	adds.w	r9, r9, fp
 800276c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800277c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002780:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002784:	4689      	mov	r9, r1
 8002786:	4692      	mov	sl, r2
 8002788:	eb1b 0509 	adds.w	r5, fp, r9
 800278c:	eb4c 060a 	adc.w	r6, ip, sl
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4619      	mov	r1, r3
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	f04f 0400 	mov.w	r4, #0
 80027a2:	0094      	lsls	r4, r2, #2
 80027a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027a8:	008b      	lsls	r3, r1, #2
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	4628      	mov	r0, r5
 80027b0:	4631      	mov	r1, r6
 80027b2:	f7fd fd15 	bl	80001e0 <__aeabi_uldivmod>
 80027b6:	4603      	mov	r3, r0
 80027b8:	460c      	mov	r4, r1
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <UART_SetConfig+0x6f4>)
 80027be:	fba3 1302 	umull	r1, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2164      	movs	r1, #100	; 0x64
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	3332      	adds	r3, #50	; 0x32
 80027d0:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <UART_SetConfig+0x6f4>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4442      	add	r2, r8
 80027e2:	609a      	str	r2, [r3, #8]
}
 80027e4:	e7ff      	b.n	80027e6 <UART_SetConfig+0x6e2>
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40011400 	.word	0x40011400
 80027f8:	51eb851f 	.word	0x51eb851f

080027fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f103 0208 	add.w	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0208 	add.w	r2, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 0208 	add.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	601a      	str	r2, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d103      	bne.n	80028be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e00c      	b.n	80028d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3308      	adds	r3, #8
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e002      	b.n	80028cc <vListInsert+0x2e>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d2f6      	bcs.n	80028c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6892      	ldr	r2, [r2, #8]
 8002926:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6852      	ldr	r2, [r2, #4]
 8002930:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d103      	bne.n	8002944 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	e7fe      	b.n	800298a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800298c:	f001 fa96 	bl	8003ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	441a      	add	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	3b01      	subs	r3, #1
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	22ff      	movs	r2, #255	; 0xff
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d114      	bne.n	8002a0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01a      	beq.n	8002a20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3310      	adds	r3, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fe80 	bl	80036f4 <xTaskRemoveFromEventList>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <xQueueGenericReset+0xcc>)
 80029fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	e009      	b.n	8002a20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fef3 	bl	80027fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3324      	adds	r3, #36	; 0x24
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff feee 	bl	80027fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a20:	f001 fa7a 	bl	8003f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <xQueueGenericCreate+0x28>
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e7fe      	b.n	8002a5a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e004      	b.n	8002a72 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3348      	adds	r3, #72	; 0x48
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fafc 	bl	8004074 <pvPortMalloc>
 8002a7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3348      	adds	r3, #72	; 0x48
 8002a8c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a96:	79fa      	ldrb	r2, [r7, #7]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f805 	bl	8002ab2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e002      	b.n	8002ad4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	f7ff ff3e 	bl	8002964 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002b10:	2300      	movs	r3, #0
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f81c 	bl	8002b54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6939      	ldr	r1, [r7, #16]
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f7ff ff79 	bl	8002a34 <xQueueGenericCreate>
 8002b42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff ffd3 	bl	8002af0 <prvInitialiseMutex>

		return xNewQueue;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
	}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <xQueueGenericSend+0x30>
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <xQueueGenericSend+0x3e>
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <xQueueGenericSend+0x42>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <xQueueGenericSend+0x44>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <xQueueGenericSend+0x5c>
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSend+0x6a>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <xQueueGenericSend+0x6e>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericSend+0x70>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <xQueueGenericSend+0x88>
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e7fe      	b.n	8002bda <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bdc:	f000 ff40 	bl	8003a60 <xTaskGetSchedulerState>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <xQueueGenericSend+0x98>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <xQueueGenericSend+0x9c>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <xQueueGenericSend+0x9e>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <xQueueGenericSend+0xb6>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c0a:	f001 f957 	bl	8003ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <xQueueGenericSend+0xcc>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d129      	bne.n	8002c74 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c26:	f000 f88f 	bl	8002d48 <prvCopyDataToQueue>
 8002c2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd5b 	bl	80036f4 <xTaskRemoveFromEventList>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <xQueueGenericSend+0x1f0>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	e00a      	b.n	8002c6c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c5c:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <xQueueGenericSend+0x1f0>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c6c:	f001 f954 	bl	8003f18 <vPortExitCritical>
				return pdPASS;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e063      	b.n	8002d3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c7a:	f001 f94d 	bl	8003f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e05c      	b.n	8002d3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fd93 	bl	80037b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c96:	f001 f93f 	bl	8003f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c9a:	f000 fb4b 	bl	8003334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c9e:	f001 f90d 	bl	8003ebc <vPortEnterCritical>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d103      	bne.n	8002cb8 <xQueueGenericSend+0x164>
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d103      	bne.n	8002cce <xQueueGenericSend+0x17a>
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cce:	f001 f923 	bl	8003f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd2:	1d3a      	adds	r2, r7, #4
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fd82 	bl	80037e4 <xTaskCheckForTimeOut>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d124      	bne.n	8002d30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce8:	f000 f8ea 	bl	8002ec0 <prvIsQueueFull>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fcd6 	bl	80036ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d02:	f000 f88b 	bl	8002e1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d06:	f000 fb23 	bl	8003350 <xTaskResumeAll>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f af7c 	bne.w	8002c0a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <xQueueGenericSend+0x1f0>)
 8002d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	e772      	b.n	8002c0a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d26:	f000 f879 	bl	8002e1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d2a:	f000 fb11 	bl	8003350 <xTaskResumeAll>
 8002d2e:	e76c      	b.n	8002c0a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d32:	f000 f873 	bl	8002e1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d36:	f000 fb0b 	bl	8003350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d14d      	bne.n	8002e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fe92 	bl	8003a9c <xTaskPriorityDisinherit>
 8002d78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	e043      	b.n	8002e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d119      	bne.n	8002dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6858      	ldr	r0, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	461a      	mov	r2, r3
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	f001 fb68 	bl	8004468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	441a      	add	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d32b      	bcc.n	8002e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	e026      	b.n	8002e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68d8      	ldr	r0, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	f001 fb4e 	bl	8004468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	425b      	negs	r3, r3
 8002dd6:	441a      	add	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	425b      	negs	r3, r3
 8002df2:	441a      	add	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d105      	bne.n	8002e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e12:	697b      	ldr	r3, [r7, #20]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e24:	f001 f84a 	bl	8003ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e30:	e011      	b.n	8002e56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3324      	adds	r3, #36	; 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fc58 	bl	80036f4 <xTaskRemoveFromEventList>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e4a:	f000 fd2b 	bl	80038a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dce9      	bgt.n	8002e32 <prvUnlockQueue+0x16>
 8002e5e:	e000      	b.n	8002e62 <prvUnlockQueue+0x46>
					break;
 8002e60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e6a:	f001 f855 	bl	8003f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e6e:	f001 f825 	bl	8003ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e7a:	e011      	b.n	8002ea0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3310      	adds	r3, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fc33 	bl	80036f4 <xTaskRemoveFromEventList>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e94:	f000 fd06 	bl	80038a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	dce9      	bgt.n	8002e7c <prvUnlockQueue+0x60>
 8002ea8:	e000      	b.n	8002eac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002eaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002eb4:	f001 f830 	bl	8003f18 <vPortExitCritical>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ec8:	f000 fff8 	bl	8003ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d102      	bne.n	8002ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e001      	b.n	8002ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ee2:	f001 f819 	bl	8003f18 <vPortExitCritical>

	return xReturn;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08e      	sub	sp, #56	; 0x38
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <xTaskCreateStatic+0x28>
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	e7fe      	b.n	8002f16 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <xTaskCreateStatic+0x42>
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	e7fe      	b.n	8002f30 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f32:	2354      	movs	r3, #84	; 0x54
 8002f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b54      	cmp	r3, #84	; 0x54
 8002f3a:	d009      	beq.n	8002f50 <xTaskCreateStatic+0x60>
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e7fe      	b.n	8002f4e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01e      	beq.n	8002f96 <xTaskCreateStatic+0xa6>
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01b      	beq.n	8002f96 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f70:	2300      	movs	r3, #0
 8002f72:	9303      	str	r3, [sp, #12]
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f850 	bl	800302e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f90:	f000 f8d4 	bl	800313c <prvAddNewTaskToReadyList>
 8002f94:	e001      	b.n	8002f9a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f9a:	697b      	ldr	r3, [r7, #20]
	}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 f85b 	bl	8004074 <pvPortMalloc>
 8002fbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00e      	beq.n	8002fe4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fc6:	2054      	movs	r0, #84	; 0x54
 8002fc8:	f001 f854 	bl	8004074 <pvPortMalloc>
 8002fcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fda:	e005      	b.n	8002fe8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fdc:	6978      	ldr	r0, [r7, #20]
 8002fde:	f001 f90b 	bl	80041f8 <vPortFree>
 8002fe2:	e001      	b.n	8002fe8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	9302      	str	r3, [sp, #8]
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f80e 	bl	800302e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003012:	69f8      	ldr	r0, [r7, #28]
 8003014:	f000 f892 	bl	800313c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003018:	2301      	movs	r3, #1
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e002      	b.n	8003024 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003024:	69bb      	ldr	r3, [r7, #24]
	}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b088      	sub	sp, #32
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003046:	3b01      	subs	r3, #1
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f023 0307 	bic.w	r3, r3, #7
 8003054:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <prvInitialiseNewTask+0x46>
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e7fe      	b.n	8003072 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01f      	beq.n	80030ba <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e012      	b.n	80030a6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	7819      	ldrb	r1, [r3, #0]
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	3334      	adds	r3, #52	; 0x34
 8003090:	460a      	mov	r2, r1
 8003092:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3301      	adds	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d9e9      	bls.n	8003080 <prvInitialiseNewTask+0x52>
 80030ac:	e000      	b.n	80030b0 <prvInitialiseNewTask+0x82>
			{
				break;
 80030ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030b8:	e003      	b.n	80030c2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d901      	bls.n	80030cc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030c8:	2306      	movs	r3, #6
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2200      	movs	r2, #0
 80030dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	3304      	adds	r3, #4
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fbaa 	bl	800283c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	3318      	adds	r3, #24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fba5 	bl	800283c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	f1c3 0207 	rsb	r2, r3, #7
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2200      	movs	r2, #0
 800310c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	69b8      	ldr	r0, [r7, #24]
 800311c:	f000 fda8 	bl	8003c70 <pxPortInitialiseStack>
 8003120:	4602      	mov	r2, r0
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003132:	bf00      	nop
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003144:	f000 feba 	bl	8003ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <prvAddNewTaskToReadyList+0xb8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <prvAddNewTaskToReadyList+0xb8>)
 8003150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <prvAddNewTaskToReadyList+0xbc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800315a:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <prvAddNewTaskToReadyList+0xbc>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <prvAddNewTaskToReadyList+0xb8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d110      	bne.n	800318a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003168:	f000 fbc0 	bl	80038ec <prvInitialiseTaskLists>
 800316c:	e00d      	b.n	800318a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <prvAddNewTaskToReadyList+0xc0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <prvAddNewTaskToReadyList+0xbc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	d802      	bhi.n	800318a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <prvAddNewTaskToReadyList+0xbc>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <prvAddNewTaskToReadyList+0xc4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <prvAddNewTaskToReadyList+0xc4>)
 8003192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <prvAddNewTaskToReadyList+0xc8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <prvAddNewTaskToReadyList+0xc8>)
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <prvAddNewTaskToReadyList+0xcc>)
 80031b4:	441a      	add	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7ff fb4a 	bl	8002856 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031c2:	f000 fea9 	bl	8003f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <prvAddNewTaskToReadyList+0xc0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <prvAddNewTaskToReadyList+0xbc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d207      	bcs.n	80031ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <prvAddNewTaskToReadyList+0xd0>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000380 	.word	0x20000380
 80031f8:	20000280 	.word	0x20000280
 80031fc:	2000038c 	.word	0x2000038c
 8003200:	2000039c 	.word	0x2000039c
 8003204:	20000388 	.word	0x20000388
 8003208:	20000284 	.word	0x20000284
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <vTaskDelay+0x60>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <vTaskDelay+0x2e>
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	e7fe      	b.n	800323c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800323e:	f000 f879 	bl	8003334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003242:	2100      	movs	r1, #0
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fcad 	bl	8003ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800324a:	f000 f881 	bl	8003350 <xTaskResumeAll>
 800324e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <vTaskDelay+0x64>)
 8003258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200003a8 	.word	0x200003a8
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003286:	463a      	mov	r2, r7
 8003288:	1d39      	adds	r1, r7, #4
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f926 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	9202      	str	r2, [sp, #8]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	460a      	mov	r2, r1
 80032a6:	491d      	ldr	r1, [pc, #116]	; (800331c <vTaskStartScheduler+0xa4>)
 80032a8:	481d      	ldr	r0, [pc, #116]	; (8003320 <vTaskStartScheduler+0xa8>)
 80032aa:	f7ff fe21 	bl	8002ef0 <xTaskCreateStatic>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <vTaskStartScheduler+0xac>)
 80032b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <vTaskStartScheduler+0xac>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032bc:	2301      	movs	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e001      	b.n	80032c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d115      	bne.n	80032f8 <vTaskStartScheduler+0x80>
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <vTaskStartScheduler+0xb0>)
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <vTaskStartScheduler+0xb4>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <vTaskStartScheduler+0xb8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032f2:	f000 fd45 	bl	8003d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032f6:	e00d      	b.n	8003314 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d109      	bne.n	8003314 <vTaskStartScheduler+0x9c>
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e7fe      	b.n	8003312 <vTaskStartScheduler+0x9a>
}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	08004560 	.word	0x08004560
 8003320:	080038bd 	.word	0x080038bd
 8003324:	200003a4 	.word	0x200003a4
 8003328:	200003a0 	.word	0x200003a0
 800332c:	2000038c 	.word	0x2000038c
 8003330:	20000384 	.word	0x20000384

08003334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <vTaskSuspendAll+0x18>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a03      	ldr	r2, [pc, #12]	; (800334c <vTaskSuspendAll+0x18>)
 8003340:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	200003a8 	.word	0x200003a8

08003350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <xTaskResumeAll+0x114>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <xTaskResumeAll+0x2a>
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	e7fe      	b.n	8003378 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800337a:	f000 fd9f 	bl	8003ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800337e:	4b39      	ldr	r3, [pc, #228]	; (8003464 <xTaskResumeAll+0x114>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	4a37      	ldr	r2, [pc, #220]	; (8003464 <xTaskResumeAll+0x114>)
 8003386:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <xTaskResumeAll+0x114>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d161      	bne.n	8003454 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <xTaskResumeAll+0x118>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05d      	beq.n	8003454 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003398:	e02e      	b.n	80033f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <xTaskResumeAll+0x11c>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3318      	adds	r3, #24
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fab2 	bl	8002910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff faad 	bl	8002910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <xTaskResumeAll+0x120>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <xTaskResumeAll+0x120>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <xTaskResumeAll+0x124>)
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7ff fa39 	bl	8002856 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <xTaskResumeAll+0x128>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <xTaskResumeAll+0x12c>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <xTaskResumeAll+0x11c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1cc      	bne.n	800339a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003406:	f000 fb0b 	bl	8003a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <xTaskResumeAll+0x130>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003416:	f000 f837 	bl	8003488 <xTaskIncrementTick>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <xTaskResumeAll+0x12c>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3b01      	subs	r3, #1
 800342a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f1      	bne.n	8003416 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <xTaskResumeAll+0x130>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <xTaskResumeAll+0x12c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003440:	2301      	movs	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <xTaskResumeAll+0x134>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003454:	f000 fd60 	bl	8003f18 <vPortExitCritical>

	return xAlreadyYielded;
 8003458:	68bb      	ldr	r3, [r7, #8]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200003a8 	.word	0x200003a8
 8003468:	20000380 	.word	0x20000380
 800346c:	20000340 	.word	0x20000340
 8003470:	20000388 	.word	0x20000388
 8003474:	20000284 	.word	0x20000284
 8003478:	20000280 	.word	0x20000280
 800347c:	20000394 	.word	0x20000394
 8003480:	20000390 	.word	0x20000390
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <xTaskIncrementTick+0x144>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 8087 	bne.w	80035aa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800349c:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <xTaskIncrementTick+0x148>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034a4:	4a4a      	ldr	r2, [pc, #296]	; (80035d0 <xTaskIncrementTick+0x148>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11f      	bne.n	80034f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80034b0:	4b48      	ldr	r3, [pc, #288]	; (80035d4 <xTaskIncrementTick+0x14c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <xTaskIncrementTick+0x46>
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	e7fe      	b.n	80034cc <xTaskIncrementTick+0x44>
 80034ce:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <xTaskIncrementTick+0x14c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <xTaskIncrementTick+0x14c>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4a3e      	ldr	r2, [pc, #248]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <xTaskIncrementTick+0x154>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a3c      	ldr	r2, [pc, #240]	; (80035dc <xTaskIncrementTick+0x154>)
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	f000 fa98 	bl	8003a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <xTaskIncrementTick+0x158>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d348      	bcc.n	800358c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034fa:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <xTaskIncrementTick+0x14c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <xTaskIncrementTick+0x158>)
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	601a      	str	r2, [r3, #0]
					break;
 800350c:	e03e      	b.n	800358c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <xTaskIncrementTick+0x14c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d203      	bcs.n	800352e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <xTaskIncrementTick+0x158>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800352c:	e02e      	b.n	800358c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3304      	adds	r3, #4
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f9ec 	bl	8002910 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3318      	adds	r3, #24
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f9e3 	bl	8002910 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	2201      	movs	r2, #1
 8003550:	409a      	lsls	r2, r3
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <xTaskIncrementTick+0x15c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <xTaskIncrementTick+0x15c>)
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <xTaskIncrementTick+0x160>)
 800356a:	441a      	add	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7ff f96f 	bl	8002856 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <xTaskIncrementTick+0x164>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	429a      	cmp	r2, r3
 8003584:	d3b9      	bcc.n	80034fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003586:	2301      	movs	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800358a:	e7b6      	b.n	80034fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <xTaskIncrementTick+0x164>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	4915      	ldr	r1, [pc, #84]	; (80035e8 <xTaskIncrementTick+0x160>)
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d907      	bls.n	80035b4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e004      	b.n	80035b4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <xTaskIncrementTick+0x168>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <xTaskIncrementTick+0x168>)
 80035b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <xTaskIncrementTick+0x16c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035c0:	697b      	ldr	r3, [r7, #20]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200003a8 	.word	0x200003a8
 80035d0:	20000384 	.word	0x20000384
 80035d4:	20000338 	.word	0x20000338
 80035d8:	2000033c 	.word	0x2000033c
 80035dc:	20000398 	.word	0x20000398
 80035e0:	200003a0 	.word	0x200003a0
 80035e4:	20000388 	.word	0x20000388
 80035e8:	20000284 	.word	0x20000284
 80035ec:	20000280 	.word	0x20000280
 80035f0:	20000390 	.word	0x20000390
 80035f4:	20000394 	.word	0x20000394

080035f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <vTaskSwitchContext+0xa0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003606:	4b25      	ldr	r3, [pc, #148]	; (800369c <vTaskSwitchContext+0xa4>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800360c:	e03e      	b.n	800368c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <vTaskSwitchContext+0xa4>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <vTaskSwitchContext+0xa8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003622:	7afb      	ldrb	r3, [r7, #11]
 8003624:	f1c3 031f 	rsb	r3, r3, #31
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	491e      	ldr	r1, [pc, #120]	; (80036a4 <vTaskSwitchContext+0xac>)
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <vTaskSwitchContext+0x5a>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	e7fe      	b.n	8003650 <vTaskSwitchContext+0x58>
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <vTaskSwitchContext+0xac>)
 800365e:	4413      	add	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	3308      	adds	r3, #8
 8003674:	429a      	cmp	r2, r3
 8003676:	d104      	bne.n	8003682 <vTaskSwitchContext+0x8a>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <vTaskSwitchContext+0xb0>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	200003a8 	.word	0x200003a8
 800369c:	20000394 	.word	0x20000394
 80036a0:	20000388 	.word	0x20000388
 80036a4:	20000284 	.word	0x20000284
 80036a8:	20000280 	.word	0x20000280

080036ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <vTaskPlaceOnEventList+0x24>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e7fe      	b.n	80036ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <vTaskPlaceOnEventList+0x44>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3318      	adds	r3, #24
 80036d6:	4619      	mov	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff f8e0 	bl	800289e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036de:	2101      	movs	r1, #1
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f000 fa5f 	bl	8003ba4 <prvAddCurrentTaskToDelayedList>
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000280 	.word	0x20000280

080036f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <xTaskRemoveFromEventList+0x2a>
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e7fe      	b.n	800371c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3318      	adds	r3, #24
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f8f4 	bl	8002910 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <xTaskRemoveFromEventList+0xac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11c      	bne.n	800376a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff f8eb 	bl	8002910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	2201      	movs	r2, #1
 8003740:	409a      	lsls	r2, r3
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <xTaskRemoveFromEventList+0xb0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <xTaskRemoveFromEventList+0xb0>)
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <xTaskRemoveFromEventList+0xb4>)
 800375a:	441a      	add	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3304      	adds	r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f7ff f877 	bl	8002856 <vListInsertEnd>
 8003768:	e005      	b.n	8003776 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3318      	adds	r3, #24
 800376e:	4619      	mov	r1, r3
 8003770:	480e      	ldr	r0, [pc, #56]	; (80037ac <xTaskRemoveFromEventList+0xb8>)
 8003772:	f7ff f870 	bl	8002856 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <xTaskRemoveFromEventList+0xbc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	429a      	cmp	r2, r3
 8003782:	d905      	bls.n	8003790 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <xTaskRemoveFromEventList+0xc0>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e001      	b.n	8003794 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003794:	697b      	ldr	r3, [r7, #20]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200003a8 	.word	0x200003a8
 80037a4:	20000388 	.word	0x20000388
 80037a8:	20000284 	.word	0x20000284
 80037ac:	20000340 	.word	0x20000340
 80037b0:	20000280 	.word	0x20000280
 80037b4:	20000394 	.word	0x20000394

080037b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <vTaskInternalSetTimeOutState+0x24>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <vTaskInternalSetTimeOutState+0x28>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	605a      	str	r2, [r3, #4]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000398 	.word	0x20000398
 80037e0:	20000384 	.word	0x20000384

080037e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <xTaskCheckForTimeOut+0x24>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e7fe      	b.n	8003806 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <xTaskCheckForTimeOut+0x3e>
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e7fe      	b.n	8003820 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003822:	f000 fb4b 	bl	8003ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <xTaskCheckForTimeOut+0xb8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d102      	bne.n	8003846 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e023      	b.n	800388e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <xTaskCheckForTimeOut+0xbc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d007      	beq.n	8003862 <xTaskCheckForTimeOut+0x7e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e015      	b.n	800388e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	d20b      	bcs.n	8003884 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff9d 	bl	80037b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e004      	b.n	800388e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800388a:	2301      	movs	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800388e:	f000 fb43 	bl	8003f18 <vPortExitCritical>

	return xReturn;
 8003892:	69fb      	ldr	r3, [r7, #28]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000384 	.word	0x20000384
 80038a0:	20000398 	.word	0x20000398

080038a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <vTaskMissedYield+0x14>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000394 	.word	0x20000394

080038bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038c4:	f000 f852 	bl	800396c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <prvIdleTask+0x28>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d9f9      	bls.n	80038c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <prvIdleTask+0x2c>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038e0:	e7f0      	b.n	80038c4 <prvIdleTask+0x8>
 80038e2:	bf00      	nop
 80038e4:	20000284 	.word	0x20000284
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	e00c      	b.n	8003912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <prvInitialiseTaskLists+0x60>)
 8003904:	4413      	add	r3, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe ff78 	bl	80027fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3301      	adds	r3, #1
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b06      	cmp	r3, #6
 8003916:	d9ef      	bls.n	80038f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003918:	480d      	ldr	r0, [pc, #52]	; (8003950 <prvInitialiseTaskLists+0x64>)
 800391a:	f7fe ff6f 	bl	80027fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800391e:	480d      	ldr	r0, [pc, #52]	; (8003954 <prvInitialiseTaskLists+0x68>)
 8003920:	f7fe ff6c 	bl	80027fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003924:	480c      	ldr	r0, [pc, #48]	; (8003958 <prvInitialiseTaskLists+0x6c>)
 8003926:	f7fe ff69 	bl	80027fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800392a:	480c      	ldr	r0, [pc, #48]	; (800395c <prvInitialiseTaskLists+0x70>)
 800392c:	f7fe ff66 	bl	80027fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003930:	480b      	ldr	r0, [pc, #44]	; (8003960 <prvInitialiseTaskLists+0x74>)
 8003932:	f7fe ff63 	bl	80027fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <prvInitialiseTaskLists+0x78>)
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <prvInitialiseTaskLists+0x64>)
 800393a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvInitialiseTaskLists+0x7c>)
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <prvInitialiseTaskLists+0x68>)
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000284 	.word	0x20000284
 8003950:	20000310 	.word	0x20000310
 8003954:	20000324 	.word	0x20000324
 8003958:	20000340 	.word	0x20000340
 800395c:	20000354 	.word	0x20000354
 8003960:	2000036c 	.word	0x2000036c
 8003964:	20000338 	.word	0x20000338
 8003968:	2000033c 	.word	0x2000033c

0800396c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003972:	e019      	b.n	80039a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003974:	f000 faa2 	bl	8003ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <prvCheckTasksWaitingTermination+0x4c>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe ffc3 	bl	8002910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <prvCheckTasksWaitingTermination+0x50>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <prvCheckTasksWaitingTermination+0x50>)
 8003992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvCheckTasksWaitingTermination+0x54>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3b01      	subs	r3, #1
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <prvCheckTasksWaitingTermination+0x54>)
 800399c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800399e:	f000 fabb 	bl	8003f18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f80e 	bl	80039c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <prvCheckTasksWaitingTermination+0x54>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e1      	bne.n	8003974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000354 	.word	0x20000354
 80039bc:	20000380 	.word	0x20000380
 80039c0:	20000368 	.word	0x20000368

080039c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fc0c 	bl	80041f8 <vPortFree>
				vPortFree( pxTCB );
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fc09 	bl	80041f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039e6:	e017      	b.n	8003a18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d103      	bne.n	80039fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fc00 	bl	80041f8 <vPortFree>
	}
 80039f8:	e00e      	b.n	8003a18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d009      	beq.n	8003a18 <prvDeleteTCB+0x54>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e7fe      	b.n	8003a16 <prvDeleteTCB+0x52>
	}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <prvResetNextTaskUnblockTime+0x38>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvResetNextTaskUnblockTime+0x3c>)
 8003a32:	f04f 32ff 	mov.w	r2, #4294967295
 8003a36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a38:	e008      	b.n	8003a4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <prvResetNextTaskUnblockTime+0x38>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <prvResetNextTaskUnblockTime+0x3c>)
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	20000338 	.word	0x20000338
 8003a5c:	200003a0 	.word	0x200003a0

08003a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <xTaskGetSchedulerState+0x34>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	e008      	b.n	8003a86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <xTaskGetSchedulerState+0x38>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	e001      	b.n	8003a86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a86:	687b      	ldr	r3, [r7, #4]
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	2000038c 	.word	0x2000038c
 8003a98:	200003a8 	.word	0x200003a8

08003a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d06c      	beq.n	8003b8c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ab2:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <xTaskPriorityDisinherit+0xfc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d009      	beq.n	8003ad0 <xTaskPriorityDisinherit+0x34>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e7fe      	b.n	8003ace <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <xTaskPriorityDisinherit+0x50>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	e7fe      	b.n	8003aea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d044      	beq.n	8003b8c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d140      	bne.n	8003b8c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fefe 	bl	8002910 <uxListRemove>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	491f      	ldr	r1, [pc, #124]	; (8003b9c <xTaskPriorityDisinherit+0x100>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskPriorityDisinherit+0xaa>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <xTaskPriorityDisinherit+0x104>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4013      	ands	r3, r2
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <xTaskPriorityDisinherit+0x104>)
 8003b44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f1c3 0207 	rsb	r2, r3, #7
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	2201      	movs	r2, #1
 8003b60:	409a      	lsls	r2, r3
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <xTaskPriorityDisinherit+0x104>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <xTaskPriorityDisinherit+0x104>)
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <xTaskPriorityDisinherit+0x100>)
 8003b7a:	441a      	add	r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fe fe67 	bl	8002856 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b8c:	697b      	ldr	r3, [r7, #20]
	}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000280 	.word	0x20000280
 8003b9c:	20000284 	.word	0x20000284
 8003ba0:	20000388 	.word	0x20000388

08003ba4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bae:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fea8 	bl	8002910 <uxListRemove>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d10a      	bne.n	8003bfc <prvAddCurrentTaskToDelayedList+0x58>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bec:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	481a      	ldr	r0, [pc, #104]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bf6:	f7fe fe2e 	bl	8002856 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bfa:	e026      	b.n	8003c4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d209      	bcs.n	8003c28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7fe fe3c 	bl	800289e <vListInsert>
}
 8003c26:	e010      	b.n	8003c4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f7fe fe32 	bl	800289e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d202      	bcs.n	8003c4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000384 	.word	0x20000384
 8003c58:	20000280 	.word	0x20000280
 8003c5c:	20000388 	.word	0x20000388
 8003c60:	2000036c 	.word	0x2000036c
 8003c64:	2000033c 	.word	0x2000033c
 8003c68:	20000338 	.word	0x20000338
 8003c6c:	200003a0 	.word	0x200003a0

08003c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3b04      	subs	r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b04      	subs	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <pxPortInitialiseStack+0x64>)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b14      	subs	r3, #20
 8003caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3b04      	subs	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f06f 0202 	mvn.w	r2, #2
 8003cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3b20      	subs	r3, #32
 8003cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	08003cd9 	.word	0x08003cd9

08003cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <prvTaskExitError+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d009      	beq.n	8003d00 <prvTaskExitError+0x28>
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e7fe      	b.n	8003cfe <prvTaskExitError+0x26>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d12:	bf00      	nop
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0fc      	beq.n	8003d14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c
 8003d2c:	00000000 	.word	0x00000000

08003d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <pxCurrentTCBConst2>)
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	6808      	ldr	r0, [r1, #0]
 8003d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3a:	f380 8809 	msr	PSP, r0
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f380 8811 	msr	BASEPRI, r0
 8003d4a:	4770      	bx	lr
 8003d4c:	f3af 8000 	nop.w

08003d50 <pxCurrentTCBConst2>:
 8003d50:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop

08003d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d58:	4808      	ldr	r0, [pc, #32]	; (8003d7c <prvPortStartFirstTask+0x24>)
 8003d5a:	6800      	ldr	r0, [r0, #0]
 8003d5c:	6800      	ldr	r0, [r0, #0]
 8003d5e:	f380 8808 	msr	MSP, r0
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f380 8814 	msr	CONTROL, r0
 8003d6a:	b662      	cpsie	i
 8003d6c:	b661      	cpsie	f
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	df00      	svc	0
 8003d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d7a:	bf00      	nop
 8003d7c:	e000ed08 	.word	0xe000ed08

08003d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d86:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <xPortStartScheduler+0x118>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a44      	ldr	r2, [pc, #272]	; (8003e9c <xPortStartScheduler+0x11c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d109      	bne.n	8003da4 <xPortStartScheduler+0x24>
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e7fe      	b.n	8003da2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003da4:	4b3c      	ldr	r3, [pc, #240]	; (8003e98 <xPortStartScheduler+0x118>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3d      	ldr	r2, [pc, #244]	; (8003ea0 <xPortStartScheduler+0x120>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d109      	bne.n	8003dc2 <xPortStartScheduler+0x42>
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e7fe      	b.n	8003dc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dc2:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <xPortStartScheduler+0x124>)
 8003dc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <xPortStartScheduler+0x128>)
 8003de8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dea:	4b30      	ldr	r3, [pc, #192]	; (8003eac <xPortStartScheduler+0x12c>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003df0:	e009      	b.n	8003e06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <xPortStartScheduler+0x12c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <xPortStartScheduler+0x12c>)
 8003dfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d0ef      	beq.n	8003df2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <xPortStartScheduler+0x12c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1c3 0307 	rsb	r3, r3, #7
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d009      	beq.n	8003e32 <xPortStartScheduler+0xb2>
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	e7fe      	b.n	8003e30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <xPortStartScheduler+0x12c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <xPortStartScheduler+0x12c>)
 8003e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <xPortStartScheduler+0x12c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <xPortStartScheduler+0x12c>)
 8003e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e50:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <xPortStartScheduler+0x130>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <xPortStartScheduler+0x130>)
 8003e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <xPortStartScheduler+0x130>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <xPortStartScheduler+0x130>)
 8003e62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e68:	f000 f8d6 	bl	8004018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <xPortStartScheduler+0x134>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e72:	f000 f8f5 	bl	8004060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <xPortStartScheduler+0x138>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <xPortStartScheduler+0x138>)
 8003e7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e82:	f7ff ff69 	bl	8003d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e86:	f7ff fbb7 	bl	80035f8 <vTaskSwitchContext>
	prvTaskExitError();
 8003e8a:	f7ff ff25 	bl	8003cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	e000ed00 	.word	0xe000ed00
 8003e9c:	410fc271 	.word	0x410fc271
 8003ea0:	410fc270 	.word	0x410fc270
 8003ea4:	e000e400 	.word	0xe000e400
 8003ea8:	200003ac 	.word	0x200003ac
 8003eac:	200003b0 	.word	0x200003b0
 8003eb0:	e000ed20 	.word	0xe000ed20
 8003eb4:	2000000c 	.word	0x2000000c
 8003eb8:	e000ef34 	.word	0xe000ef34

08003ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <vPortEnterCritical+0x54>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	4a0d      	ldr	r2, [pc, #52]	; (8003f10 <vPortEnterCritical+0x54>)
 8003edc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <vPortEnterCritical+0x54>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d10e      	bne.n	8003f04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <vPortEnterCritical+0x58>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <vPortEnterCritical+0x48>
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	e7fe      	b.n	8003f02 <vPortEnterCritical+0x46>
	}
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	2000000c 	.word	0x2000000c
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <vPortExitCritical+0x4c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <vPortExitCritical+0x22>
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	e7fe      	b.n	8003f38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <vPortExitCritical+0x4c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <vPortExitCritical+0x4c>)
 8003f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <vPortExitCritical+0x4c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <vPortExitCritical+0x3e>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	2000000c 	.word	0x2000000c
	...

08003f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f70:	f3ef 8009 	mrs	r0, PSP
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <pxCurrentTCBConst>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f01e 0f10 	tst.w	lr, #16
 8003f80:	bf08      	it	eq
 8003f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8a:	6010      	str	r0, [r2, #0]
 8003f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f94:	f380 8811 	msr	BASEPRI, r0
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f7ff fb2a 	bl	80035f8 <vTaskSwitchContext>
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f380 8811 	msr	BASEPRI, r0
 8003fac:	bc09      	pop	{r0, r3}
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	6808      	ldr	r0, [r1, #0]
 8003fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb6:	f01e 0f10 	tst.w	lr, #16
 8003fba:	bf08      	it	eq
 8003fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fc0:	f380 8809 	msr	PSP, r0
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	f3af 8000 	nop.w

08003fd0 <pxCurrentTCBConst>:
 8003fd0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop

08003fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ff0:	f7ff fa4a 	bl	8003488 <xTaskIncrementTick>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <SysTick_Handler+0x3c>)
 8003ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <vPortSetupTimerInterrupt+0x34>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <vPortSetupTimerInterrupt+0x38>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <vPortSetupTimerInterrupt+0x3c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <vPortSetupTimerInterrupt+0x40>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <vPortSetupTimerInterrupt+0x44>)
 8004036:	3b01      	subs	r3, #1
 8004038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <vPortSetupTimerInterrupt+0x34>)
 800403c:	2207      	movs	r2, #7
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000e010 	.word	0xe000e010
 8004050:	e000e018 	.word	0xe000e018
 8004054:	20000000 	.word	0x20000000
 8004058:	10624dd3 	.word	0x10624dd3
 800405c:	e000e014 	.word	0xe000e014

08004060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004070 <vPortEnableVFP+0x10>
 8004064:	6801      	ldr	r1, [r0, #0]
 8004066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800406a:	6001      	str	r1, [r0, #0]
 800406c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800406e:	bf00      	nop
 8004070:	e000ed88 	.word	0xe000ed88

08004074 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004080:	f7ff f958 	bl	8003334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004084:	4b57      	ldr	r3, [pc, #348]	; (80041e4 <pvPortMalloc+0x170>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800408c:	f000 f90c 	bl	80042a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004090:	4b55      	ldr	r3, [pc, #340]	; (80041e8 <pvPortMalloc+0x174>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 808c 	bne.w	80041b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80040a4:	2208      	movs	r2, #8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d013      	beq.n	80040de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f023 0307 	bic.w	r3, r3, #7
 80040bc:	3308      	adds	r3, #8
 80040be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <pvPortMalloc+0x6a>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e7fe      	b.n	80040dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d068      	beq.n	80041b6 <pvPortMalloc+0x142>
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <pvPortMalloc+0x178>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d863      	bhi.n	80041b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040ee:	4b40      	ldr	r3, [pc, #256]	; (80041f0 <pvPortMalloc+0x17c>)
 80040f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040f2:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <pvPortMalloc+0x17c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040f8:	e004      	b.n	8004104 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d903      	bls.n	8004116 <pvPortMalloc+0xa2>
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f1      	bne.n	80040fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <pvPortMalloc+0x170>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	429a      	cmp	r2, r3
 800411e:	d04a      	beq.n	80041b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	4413      	add	r3, r2
 8004128:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	2308      	movs	r3, #8
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	429a      	cmp	r2, r3
 8004140:	d91e      	bls.n	8004180 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <pvPortMalloc+0xf4>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	e7fe      	b.n	8004166 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800417a:	69b8      	ldr	r0, [r7, #24]
 800417c:	f000 f8f6 	bl	800436c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <pvPortMalloc+0x178>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	4a18      	ldr	r2, [pc, #96]	; (80041ec <pvPortMalloc+0x178>)
 800418c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <pvPortMalloc+0x178>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <pvPortMalloc+0x180>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d203      	bcs.n	80041a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <pvPortMalloc+0x178>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <pvPortMalloc+0x180>)
 80041a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <pvPortMalloc+0x174>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041b6:	f7ff f8cb 	bl	8003350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <pvPortMalloc+0x164>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e7fe      	b.n	80041d6 <pvPortMalloc+0x162>
	return pvReturn;
 80041d8:	69fb      	ldr	r3, [r7, #28]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2000cbbc 	.word	0x2000cbbc
 80041e8:	2000cbc8 	.word	0x2000cbc8
 80041ec:	2000cbc0 	.word	0x2000cbc0
 80041f0:	2000cbb4 	.word	0x2000cbb4
 80041f4:	2000cbc4 	.word	0x2000cbc4

080041f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d046      	beq.n	8004298 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800420a:	2308      	movs	r3, #8
 800420c:	425b      	negs	r3, r3
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4413      	add	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <vPortFree+0xa8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <vPortFree+0x42>
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e7fe      	b.n	8004238 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <vPortFree+0x5e>
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	e7fe      	b.n	8004254 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <vPortFree+0xa8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d019      	beq.n	8004298 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d115      	bne.n	8004298 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <vPortFree+0xa8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800427c:	f7ff f85a 	bl	8003334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <vPortFree+0xac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4413      	add	r3, r2
 800428a:	4a06      	ldr	r2, [pc, #24]	; (80042a4 <vPortFree+0xac>)
 800428c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800428e:	6938      	ldr	r0, [r7, #16]
 8004290:	f000 f86c 	bl	800436c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004294:	f7ff f85c 	bl	8003350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004298:	bf00      	nop
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	2000cbc8 	.word	0x2000cbc8
 80042a4:	2000cbc0 	.word	0x2000cbc0

080042a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042ae:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80042b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042b4:	4b27      	ldr	r3, [pc, #156]	; (8004354 <prvHeapInit+0xac>)
 80042b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3307      	adds	r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <prvHeapInit+0xac>)
 80042d8:	4413      	add	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <prvHeapInit+0xb0>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <prvHeapInit+0xb0>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042f4:	2208      	movs	r2, #8
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <prvHeapInit+0xb4>)
 8004308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <prvHeapInit+0xb4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <prvHeapInit+0xb4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	1ad2      	subs	r2, r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <prvHeapInit+0xb4>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <prvHeapInit+0xb8>)
 8004336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a09      	ldr	r2, [pc, #36]	; (8004364 <prvHeapInit+0xbc>)
 800433e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <prvHeapInit+0xc0>)
 8004342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	200003b4 	.word	0x200003b4
 8004358:	2000cbb4 	.word	0x2000cbb4
 800435c:	2000cbbc 	.word	0x2000cbbc
 8004360:	2000cbc4 	.word	0x2000cbc4
 8004364:	2000cbc0 	.word	0x2000cbc0
 8004368:	2000cbc8 	.word	0x2000cbc8

0800436c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <prvInsertBlockIntoFreeList+0xac>)
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e002      	b.n	8004380 <prvInsertBlockIntoFreeList+0x14>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d8f7      	bhi.n	800437a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d108      	bne.n	80043ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	441a      	add	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d118      	bne.n	80043f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <prvInsertBlockIntoFreeList+0xb0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d00d      	beq.n	80043ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e008      	b.n	80043fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <prvInsertBlockIntoFreeList+0xb0>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e003      	b.n	80043fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d002      	beq.n	800440a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000cbb4 	.word	0x2000cbb4
 800441c:	2000cbbc 	.word	0x2000cbbc

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4e0d      	ldr	r6, [pc, #52]	; (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004426:	1ba4      	subs	r4, r4, r6
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2500      	movs	r5, #0
 800442c:	42a5      	cmp	r5, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4e0b      	ldr	r6, [pc, #44]	; (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x44>)
 8004434:	f000 f82c 	bl	8004490 <_init>
 8004438:	1ba4      	subs	r4, r4, r6
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2500      	movs	r5, #0
 800443e:	42a5      	cmp	r5, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004448:	4798      	blx	r3
 800444a:	3501      	adds	r5, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004452:	4798      	blx	r3
 8004454:	3501      	adds	r5, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	08004588 	.word	0x08004588
 800445c:	08004588 	.word	0x08004588
 8004460:	08004588 	.word	0x08004588
 8004464:	0800458c 	.word	0x0800458c

08004468 <memcpy>:
 8004468:	b510      	push	{r4, lr}
 800446a:	1e43      	subs	r3, r0, #1
 800446c:	440a      	add	r2, r1
 800446e:	4291      	cmp	r1, r2
 8004470:	d100      	bne.n	8004474 <memcpy+0xc>
 8004472:	bd10      	pop	{r4, pc}
 8004474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800447c:	e7f7      	b.n	800446e <memcpy+0x6>

0800447e <memset>:
 800447e:	4402      	add	r2, r0
 8004480:	4603      	mov	r3, r0
 8004482:	4293      	cmp	r3, r2
 8004484:	d100      	bne.n	8004488 <memset+0xa>
 8004486:	4770      	bx	lr
 8004488:	f803 1b01 	strb.w	r1, [r3], #1
 800448c:	e7f9      	b.n	8004482 <memset+0x4>
	...

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
