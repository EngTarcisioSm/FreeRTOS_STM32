
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005adc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d8  080060d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e0  080060e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de30  20000074  0800615c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dea4  0800615c  0002dea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fbc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac0  00000000  00000000  00035060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00037b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00038b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000329c  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ff2  00000000  00000000  0003cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000953c5  00000000  00000000  0004ed16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e40db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  000e4130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c64 	.word	0x08005c64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005c64 	.word	0x08005c64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd69 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f909 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f99b 	bl	80008d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f96f 	bl	800087c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	xMutex = xSemaphoreCreateMutex();
 800059e:	2001      	movs	r0, #1
 80005a0:	f002 fc22 	bl	8002de8 <xQueueCreateMutex>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a62      	ldr	r2, [pc, #392]	; (8000730 <main+0x1a8>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	//criação da queue
	 if((xQueue1 = xQueueCreate(1, sizeof(char *))) == NULL) {
 80005aa:	2200      	movs	r2, #0
 80005ac:	2104      	movs	r1, #4
 80005ae:	2001      	movs	r0, #1
 80005b0:	f002 fba4 	bl	8002cfc <xQueueGenericCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a5f      	ldr	r2, [pc, #380]	; (8000734 <main+0x1ac>)
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <main+0x1ac>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <main+0x42>
		 //queue não foi possivel de ser criada gerando erro
		 vPrintString("Não foi possivel alocar xQueue1");
 80005c2:	485d      	ldr	r0, [pc, #372]	; (8000738 <main+0x1b0>)
 80005c4:	f000 fa4e 	bl	8000a64 <vPrintString>
 80005c8:	e048      	b.n	800065c <main+0xd4>
	 } else {
		 if((xQueue2 = xQueueCreate(1, sizeof(char *))) == NULL) {
 80005ca:	2200      	movs	r2, #0
 80005cc:	2104      	movs	r1, #4
 80005ce:	2001      	movs	r0, #1
 80005d0:	f002 fb94 	bl	8002cfc <xQueueGenericCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a59      	ldr	r2, [pc, #356]	; (800073c <main+0x1b4>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	4b58      	ldr	r3, [pc, #352]	; (800073c <main+0x1b4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <main+0x62>
			 //queue não foi possivel de ser criada gerando erro
			 vPrintString("Não foi possivel alocar xQueue2");
 80005e2:	4857      	ldr	r0, [pc, #348]	; (8000740 <main+0x1b8>)
 80005e4:	f000 fa3e 	bl	8000a64 <vPrintString>
 80005e8:	e038      	b.n	800065c <main+0xd4>
		 } else {
			 if((xQueue3 = xQueueCreate(1, sizeof(uint32_t *))) == NULL) {
 80005ea:	2200      	movs	r2, #0
 80005ec:	2104      	movs	r1, #4
 80005ee:	2001      	movs	r0, #1
 80005f0:	f002 fb84 	bl	8002cfc <xQueueGenericCreate>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a53      	ldr	r2, [pc, #332]	; (8000744 <main+0x1bc>)
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b52      	ldr	r3, [pc, #328]	; (8000744 <main+0x1bc>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d103      	bne.n	800060a <main+0x82>
				 //queue não foi possivel de ser criada gerando erro
				 vPrintString("Não foi possivel alocar xQueue3");
 8000602:	4851      	ldr	r0, [pc, #324]	; (8000748 <main+0x1c0>)
 8000604:	f000 fa2e 	bl	8000a64 <vPrintString>
 8000608:	e028      	b.n	800065c <main+0xd4>
			 } else {
				 if((xQueueSet = xQueueCreateSet(1 * 3)) == NULL) {
 800060a:	2003      	movs	r0, #3
 800060c:	f003 f83f 	bl	800368e <xQueueCreateSet>
 8000610:	4603      	mov	r3, r0
 8000612:	4a4e      	ldr	r2, [pc, #312]	; (800074c <main+0x1c4>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <main+0x1c4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d103      	bne.n	8000626 <main+0x9e>
					 //queue não foi possivel de ser criada gerando erro
					 vPrintString("Não foi possivel alocar xQueueSet");
 800061e:	484c      	ldr	r0, [pc, #304]	; (8000750 <main+0x1c8>)
 8000620:	f000 fa20 	bl	8000a64 <vPrintString>
 8000624:	e01a      	b.n	800065c <main+0xd4>
				 } else {
					 xQueueAddToSet(xQueue1, xQueueSet);
 8000626:	4b43      	ldr	r3, [pc, #268]	; (8000734 <main+0x1ac>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a48      	ldr	r2, [pc, #288]	; (800074c <main+0x1c4>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f83b 	bl	80036ac <xQueueAddToSet>
					 xQueueAddToSet(xQueue2, xQueueSet);
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <main+0x1b4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a44      	ldr	r2, [pc, #272]	; (800074c <main+0x1c4>)
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f003 f833 	bl	80036ac <xQueueAddToSet>
					 xQueueAddToSet(xQueue3, xQueueSet);
 8000646:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <main+0x1bc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a40      	ldr	r2, [pc, #256]	; (800074c <main+0x1c4>)
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f003 f82b 	bl	80036ac <xQueueAddToSet>
					 vPrintString("xQueueSet Preenchido");
 8000656:	483f      	ldr	r0, [pc, #252]	; (8000754 <main+0x1cc>)
 8000658:	f000 fa04 	bl	8000a64 <vPrintString>
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask1, "task_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 800065c:	2300      	movs	r3, #0
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	493b      	ldr	r1, [pc, #236]	; (8000758 <main+0x1d0>)
 800066a:	483c      	ldr	r0, [pc, #240]	; (800075c <main+0x1d4>)
 800066c:	f003 f8ab 	bl	80037c6 <xTaskCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d003      	beq.n	800067e <main+0xf6>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_1 no escalonador\n");
 8000676:	483a      	ldr	r0, [pc, #232]	; (8000760 <main+0x1d8>)
 8000678:	f000 f9f4 	bl	8000a64 <vPrintString>
 800067c:	e002      	b.n	8000684 <main+0xfc>
	} else {
		vPrintString("Tarefa Task_1 criada com sucesso!\n");
 800067e:	4839      	ldr	r0, [pc, #228]	; (8000764 <main+0x1dc>)
 8000680:	f000 f9f0 	bl	8000a64 <vPrintString>
	}

	if ((xTaskCreate(vTask2, "task_2", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 8000684:	2300      	movs	r3, #0
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2301      	movs	r3, #1
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	4935      	ldr	r1, [pc, #212]	; (8000768 <main+0x1e0>)
 8000692:	4836      	ldr	r0, [pc, #216]	; (800076c <main+0x1e4>)
 8000694:	f003 f897 	bl	80037c6 <xTaskCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d003      	beq.n	80006a6 <main+0x11e>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 800069e:	4834      	ldr	r0, [pc, #208]	; (8000770 <main+0x1e8>)
 80006a0:	f000 f9e0 	bl	8000a64 <vPrintString>
 80006a4:	e002      	b.n	80006ac <main+0x124>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80006a6:	4833      	ldr	r0, [pc, #204]	; (8000774 <main+0x1ec>)
 80006a8:	f000 f9dc 	bl	8000a64 <vPrintString>
	}

	if ((xTaskCreate(vTask3, "task_3", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 80006ac:	2300      	movs	r3, #0
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2301      	movs	r3, #1
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	492f      	ldr	r1, [pc, #188]	; (8000778 <main+0x1f0>)
 80006ba:	4830      	ldr	r0, [pc, #192]	; (800077c <main+0x1f4>)
 80006bc:	f003 f883 	bl	80037c6 <xTaskCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d003      	beq.n	80006ce <main+0x146>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_3 no escalonador\n");
 80006c6:	482e      	ldr	r0, [pc, #184]	; (8000780 <main+0x1f8>)
 80006c8:	f000 f9cc 	bl	8000a64 <vPrintString>
 80006cc:	e002      	b.n	80006d4 <main+0x14c>
	} else {
		vPrintString("Tarefa Task_3 criada com sucesso!\n");
 80006ce:	482d      	ldr	r0, [pc, #180]	; (8000784 <main+0x1fc>)
 80006d0:	f000 f9c8 	bl	8000a64 <vPrintString>
	}

	if ((xTaskCreate(vTask_check_event, "check_event", configMINIMAL_STACK_SIZE * 2, NULL, 2, NULL)) != pdTRUE) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	2302      	movs	r3, #2
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2300      	movs	r3, #0
 80006de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e2:	4929      	ldr	r1, [pc, #164]	; (8000788 <main+0x200>)
 80006e4:	4829      	ldr	r0, [pc, #164]	; (800078c <main+0x204>)
 80006e6:	f003 f86e 	bl	80037c6 <xTaskCreate>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d003      	beq.n	80006f8 <main+0x170>
		vPrintString("Não foi possivel alocar tarefa vTask_Print_count no escalonador.");
 80006f0:	4827      	ldr	r0, [pc, #156]	; (8000790 <main+0x208>)
 80006f2:	f000 f9b7 	bl	8000a64 <vPrintString>
 80006f6:	e002      	b.n	80006fe <main+0x176>
	} else {
		vPrintString("Tarefa check_event criada com sucesso!\n");
 80006f8:	4826      	ldr	r0, [pc, #152]	; (8000794 <main+0x20c>)
 80006fa:	f000 f9b3 	bl	8000a64 <vPrintString>
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE * 2, NULL,
 80006fe:	2300      	movs	r3, #0
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070c:	4922      	ldr	r1, [pc, #136]	; (8000798 <main+0x210>)
 800070e:	4823      	ldr	r0, [pc, #140]	; (800079c <main+0x214>)
 8000710:	f003 f859 	bl	80037c6 <xTaskCreate>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d003      	beq.n	8000722 <main+0x19a>
			1, NULL)) != pdTRUE) {
		vPrintString(
 800071a:	4821      	ldr	r0, [pc, #132]	; (80007a0 <main+0x218>)
 800071c:	f000 f9a2 	bl	8000a64 <vPrintString>
 8000720:	e002      	b.n	8000728 <main+0x1a0>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 8000722:	4820      	ldr	r0, [pc, #128]	; (80007a4 <main+0x21c>)
 8000724:	f000 f99e 	bl	8000a64 <vPrintString>
	}


	vTaskStartScheduler();
 8000728:	f003 fa26 	bl	8003b78 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800072c:	e7fe      	b.n	800072c <main+0x1a4>
 800072e:	bf00      	nop
 8000730:	2000de00 	.word	0x2000de00
 8000734:	20000090 	.word	0x20000090
 8000738:	08005c7c 	.word	0x08005c7c
 800073c:	20000094 	.word	0x20000094
 8000740:	08005ca0 	.word	0x08005ca0
 8000744:	20000098 	.word	0x20000098
 8000748:	08005cc4 	.word	0x08005cc4
 800074c:	2000009c 	.word	0x2000009c
 8000750:	08005ce8 	.word	0x08005ce8
 8000754:	08005d0c 	.word	0x08005d0c
 8000758:	08005d24 	.word	0x08005d24
 800075c:	08000c0d 	.word	0x08000c0d
 8000760:	08005d2c 	.word	0x08005d2c
 8000764:	08005d64 	.word	0x08005d64
 8000768:	08005d88 	.word	0x08005d88
 800076c:	08000c49 	.word	0x08000c49
 8000770:	08005d90 	.word	0x08005d90
 8000774:	08005dc8 	.word	0x08005dc8
 8000778:	08005dec 	.word	0x08005dec
 800077c:	08000c85 	.word	0x08000c85
 8000780:	08005df4 	.word	0x08005df4
 8000784:	08005e2c 	.word	0x08005e2c
 8000788:	08005e50 	.word	0x08005e50
 800078c:	08000b51 	.word	0x08000b51
 8000790:	08005e5c 	.word	0x08005e5c
 8000794:	08005ea0 	.word	0x08005ea0
 8000798:	08005ec8 	.word	0x08005ec8
 800079c:	08000cc5 	.word	0x08000cc5
 80007a0:	08005ed4 	.word	0x08005ed4
 80007a4:	08005f18 	.word	0x08005f18

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fe24 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <SystemClock_Config+0xcc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a27      	ldr	r2, [pc, #156]	; (8000874 <SystemClock_Config+0xcc>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <SystemClock_Config+0xd0>)
 80007f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SystemClock_Config+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000820:	2354      	movs	r3, #84	; 0x54
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f000 ff0b 	bl	800164c <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800083c:	f000 faa0 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2102      	movs	r1, #2
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f96d 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000868:	f000 fa8a 	bl	8000d80 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	; 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f001 fdf0 	bl	8002498 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 fa5f 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000de04 	.word	0x2000de04
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b59      	ldr	r3, [pc, #356]	; (8000a50 <MX_GPIO_Init+0x180>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a58      	ldr	r2, [pc, #352]	; (8000a50 <MX_GPIO_Init+0x180>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b56      	ldr	r3, [pc, #344]	; (8000a50 <MX_GPIO_Init+0x180>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a51      	ldr	r2, [pc, #324]	; (8000a50 <MX_GPIO_Init+0x180>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b4b      	ldr	r3, [pc, #300]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a4a      	ldr	r2, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <MX_GPIO_Init+0x180>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <MX_GPIO_Init+0x180>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a3c      	ldr	r2, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <MX_GPIO_Init+0x180>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin|SEL_1_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2109      	movs	r1, #9
 8000976:	4837      	ldr	r0, [pc, #220]	; (8000a54 <MX_GPIO_Init+0x184>)
 8000978:	f000 fe1c 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	4835      	ldr	r0, [pc, #212]	; (8000a58 <MX_GPIO_Init+0x188>)
 8000984:	f000 fe16 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2104      	movs	r1, #4
 800098c:	4833      	ldr	r0, [pc, #204]	; (8000a5c <MX_GPIO_Init+0x18c>)
 800098e:	f000 fe11 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOUT_LED1_Pin */
  GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	482a      	ldr	r0, [pc, #168]	; (8000a54 <MX_GPIO_Init+0x184>)
 80009aa:	f000 fc7f 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_0_Pin */
  GPIO_InitStruct.Pin = SEL_0_Pin;
 80009ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x188>)
 80009c8:	f000 fc70 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_CFIG_Pin */
  GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	481f      	ldr	r0, [pc, #124]	; (8000a60 <MX_GPIO_Init+0x190>)
 80009e4:	f000 fc62 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_RX_485_Pin */
  GPIO_InitStruct.Pin = EN_RX_485_Pin;
 80009e8:	2304      	movs	r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_GPIO_Init+0x18c>)
 8000a00:	f000 fc54 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_Pin */
  GPIO_InitStruct.Pin = SEL_1_Pin;
 8000a04:	2308      	movs	r3, #8
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_GPIO_Init+0x184>)
 8000a1c:	f000 fc46 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN_TARA_Pin */
  GPIO_InitStruct.Pin = DIN_TARA_Pin;
 8000a20:	2310      	movs	r3, #16
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <MX_GPIO_Init+0x184>)
 8000a34:	f000 fc3a 	bl	80012ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	2028      	movs	r0, #40	; 0x28
 8000a3e:	f000 fc0b 	bl	8001258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a42:	2028      	movs	r0, #40	; 0x28
 8000a44:	f000 fc24 	bl	8001290 <HAL_NVIC_EnableIRQ>

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020800 	.word	0x40020800

08000a64 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <vPrintString+0x74>)
 8000a74:	f000 fd9e 	bl	80015b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <vPrintString+0x78>)
 8000a7e:	f000 fd99 	bl	80015b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2104      	movs	r1, #4
 8000a86:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <vPrintString+0x7c>)
 8000a88:	f000 fd94 	bl	80015b4 <HAL_GPIO_WritePin>
	//taskENTER_CRITICAL();	//removido
	xSemaphoreTake(xMutex, portMAX_DELAY);
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <vPrintString+0x80>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fbb9 	bl	800320c <xQueueSemaphoreTake>
	{
		vUsartLib_Puts(pc_uartSend_f);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f834 	bl	8000b08 <vUsartLib_Puts>
	}
	//taskEXIT_CRITICAL();		//removido
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	xSemaphoreGive(xMutex);
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <vPrintString+0x80>)
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f002 f9b5 	bl	8002e18 <xQueueGenericSend>
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <vPrintString+0x74>)
 8000ab6:	f000 fd7d 	bl	80015b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2108      	movs	r1, #8
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <vPrintString+0x78>)
 8000ac0:	f000 fd78 	bl	80015b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <vPrintString+0x7c>)
 8000aca:	f000 fd73 	bl	80015b4 <HAL_GPIO_WritePin>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	2000de00 	.word	0x2000de00

08000ae8 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 8000af4:	1cf9      	adds	r1, r7, #3
 8000af6:	230a      	movs	r3, #10
 8000af8:	2201      	movs	r2, #1
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f001 fd19 	bl	8002532 <HAL_UART_Transmit>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000b10:	e007      	b.n	8000b22 <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <vUsartLib_Puts+0x2c>)
 8000b1e:	f7ff ffe3 	bl	8000ae8 <vUsartLib_Putc>
	while (*c_data) {
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f3      	bne.n	8000b12 <vUsartLib_Puts+0xa>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000de04 	.word	0x2000de04

08000b38 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]

}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <vTask_check_event>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_check_event(void *pvParameters) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	vPrintString("vTask_check_event iniciada! \r\n");
 8000b58:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <vTask_check_event+0xa4>)
 8000b5a:	f7ff ff83 	bl	8000a64 <vPrintString>

	char *pcReceivedString;
	char ucNumBuff[30];
	uint32_t ulReceivedUInt32;

	const TickType_t xDelay100ms = pdMS_TO_TICKS( 100 );
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34

	for(;;){

		xHandle_Queue_Set = xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <vTask_check_event+0xa8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fdbf 	bl	80036ee <xQueueSelectFromSet>
 8000b70:	6338      	str	r0, [r7, #48]	; 0x30

		if( xHandle_Queue_Set != NULL ) {
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f4      	beq.n	8000b62 <vTask_check_event+0x12>
			if( xHandle_Queue_Set == (QueueSetMemberHandle_t) xQueue1) {
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <vTask_check_event+0xac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d10c      	bne.n	8000b9c <vTask_check_event+0x4c>
				xQueueReceive(xQueue1, &pcReceivedString, 0);
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <vTask_check_event+0xac>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 fa5d 	bl	800304c <xQueueReceive>
				vPrintString(pcReceivedString);
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff65 	bl	8000a64 <vPrintString>
 8000b9a:	e7e2      	b.n	8000b62 <vTask_check_event+0x12>
			} else if( xHandle_Queue_Set == (QueueSetMemberHandle_t) xQueue2 ) {
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <vTask_check_event+0xb0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d10c      	bne.n	8000bc0 <vTask_check_event+0x70>
				xQueueReceive(xQueue2, &pcReceivedString, 0);
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <vTask_check_event+0xb0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 fa4b 	bl	800304c <xQueueReceive>
				vPrintString(pcReceivedString);
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff53 	bl	8000a64 <vPrintString>
 8000bbe:	e7d0      	b.n	8000b62 <vTask_check_event+0x12>
			} else if( xHandle_Queue_Set == (QueueSetMemberHandle_t) xQueue3 ) {
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <vTask_check_event+0xb4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d1cb      	bne.n	8000b62 <vTask_check_event+0x12>
				xQueueReceive(xQueue3, &ulReceivedUInt32, 0);
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <vTask_check_event+0xb4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f107 0108 	add.w	r1, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fa39 	bl	800304c <xQueueReceive>
				sprintf(ucNumBuff, "ulUINT32: %lu\r\n", ulReceivedUInt32);
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4909      	ldr	r1, [pc, #36]	; (8000c08 <vTask_check_event+0xb8>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 fc16 	bl	8005414 <siprintf>
				vPrintString(ucNumBuff);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff39 	bl	8000a64 <vPrintString>
		xHandle_Queue_Set = xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 8000bf2:	e7b6      	b.n	8000b62 <vTask_check_event+0x12>
 8000bf4:	08005f40 	.word	0x08005f40
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	20000090 	.word	0x20000090
 8000c00:	20000094 	.word	0x20000094
 8000c04:	20000098 	.word	0x20000098
 8000c08:	08005f60 	.word	0x08005f60

08000c0c <vTask1>:
		}
	}
	vTaskDelete(NULL);
}

void vTask1(void *pvParameters) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_1 iniciada! \r\n");
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <vTask1+0x30>)
 8000c16:	f7ff ff25 	bl	8000a64 <vPrintString>

	const TickType_t xBlockTime = pdMS_TO_TICKS( 500 );
 8000c1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c1e:	60fb      	str	r3, [r7, #12]

	const char * const pc_message = "Mensagem da task1 para Queue Set! \r\n";
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <vTask1+0x34>)
 8000c22:	60bb      	str	r3, [r7, #8]

	for(;;){

		vTaskDelay(xBlockTime);
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f002 ff0d 	bl	8003a44 <vTaskDelay>
		 * Não é necessário usar um tempo de bloquei, mesmo que a fila possa conter apenas um item.
		 * Isso ocorre porque a prioridade da tarefa que lê da fila é superior a prioridade da fila,
		 * portanto a fila ja estará vazia novamente no momento em que a chamada para xQueueSend()
		 * retornar. O tempo do bloco é definido como 0.
		 */
		xQueueSend(xQueue1, &pc_message, 0);
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <vTask1+0x38>)
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	f107 0108 	add.w	r1, r7, #8
 8000c32:	2300      	movs	r3, #0
 8000c34:	2200      	movs	r2, #0
 8000c36:	f002 f8ef 	bl	8002e18 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 8000c3a:	e7f3      	b.n	8000c24 <vTask1+0x18>
 8000c3c:	08005f70 	.word	0x08005f70
 8000c40:	08005f88 	.word	0x08005f88
 8000c44:	20000090 	.word	0x20000090

08000c48 <vTask2>:
	}
	vTaskDelete(NULL);
}

void vTask2(void *pvParameters) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_2 inicada!\r\n");
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <vTask2+0x30>)
 8000c52:	f7ff ff07 	bl	8000a64 <vPrintString>
	const TickType_t xBlockTime = pdMS_TO_TICKS( 1000 );
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	60fb      	str	r3, [r7, #12]

	const char * const pc_message = "Mensagem da task2 para Queue Set! \r\n";
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <vTask2+0x34>)
 8000c5e:	60bb      	str	r3, [r7, #8]

	for(;;){
		vTaskDelay(xBlockTime);
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f002 feef 	bl	8003a44 <vTaskDelay>
		 * Não é necessário usar um tempo de bloquei, mesmo que a fila possa conter apenas um item.
		 * Isso ocorre porque a prioridade da tarefa que lê da fila é superior a prioridade da fila,
		 * portanto a fila ja estará vazia novamente no momento em que a chamada para xQueueSend()
		 * retornar. O tempo do bloco é definido como 0.
		 */
		xQueueSend(xQueue2, &pc_message, 0);
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <vTask2+0x38>)
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	f107 0108 	add.w	r1, r7, #8
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	f002 f8d1 	bl	8002e18 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 8000c76:	e7f3      	b.n	8000c60 <vTask2+0x18>
 8000c78:	08005fb0 	.word	0x08005fb0
 8000c7c:	08005fc4 	.word	0x08005fc4
 8000c80:	20000094 	.word	0x20000094

08000c84 <vTask3>:

	}
	vTaskDelete(NULL);
}

void vTask3(void *pvParameters) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	vPrintString("vTask_3 inicada!\r\n");
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <vTask3+0x38>)
 8000c8e:	f7ff fee9 	bl	8000a64 <vPrintString>
	const TickType_t xBlockTime = pdMS_TO_TICKS( 500 );
 8000c92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c96:	60fb      	str	r3, [r7, #12]

	uint32_t ulReceivedUInt32 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]

	for(;;){
		vTaskDelay(xBlockTime);
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f002 fed1 	bl	8003a44 <vTaskDelay>
		 * Não é necessário usar um tempo de bloquei, mesmo que a fila possa conter apenas um item.
		 * Isso ocorre porque a prioridade da tarefa que lê da fila é superior a prioridade da fila,
		 * portanto a fila ja estará vazia novamente no momento em que a chamada para xQueueSend()
		 * retornar. O tempo do bloco é definido como 0.
		 */
		xQueueSend(xQueue3, &ulReceivedUInt32, 0);
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <vTask3+0x3c>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	f107 0108 	add.w	r1, r7, #8
 8000caa:	2300      	movs	r3, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	f002 f8b3 	bl	8002e18 <xQueueGenericSend>
		ulReceivedUInt32++;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
		vTaskDelay(xBlockTime);
 8000cb8:	e7f0      	b.n	8000c9c <vTask3+0x18>
 8000cba:	bf00      	nop
 8000cbc:	08005fec 	.word	0x08005fec
 8000cc0:	20000098 	.word	0x20000098

08000cc4 <vTask_blink>:
	vTaskDelete(NULL);
}



void vTask_blink(void *pvParameters) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0b4      	sub	sp, #208	; 0xd0
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	char  c_buff[200];

	vPrintString("Entrando da Task de debug");
 8000ccc:	481d      	ldr	r0, [pc, #116]	; (8000d44 <vTask_blink+0x80>)
 8000cce:	f7ff fec9 	bl	8000a64 <vPrintString>

	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	481c      	ldr	r0, [pc, #112]	; (8000d48 <vTask_blink+0x84>)
 8000cd6:	f000 fc86 	bl	80015e6 <HAL_GPIO_TogglePin>

		vTaskList(c_buff);
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fe40 	bl	8004964 <vTaskList>

		vPrintString("\n\r\nTask-------------State-----Prio------Stack---Num\r\n");
 8000ce4:	4819      	ldr	r0, [pc, #100]	; (8000d4c <vTask_blink+0x88>)
 8000ce6:	f7ff febd 	bl	8000a64 <vPrintString>
		vPrintString(c_buff);
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff feb8 	bl	8000a64 <vPrintString>
		vPrintString("\n");
 8000cf4:	4816      	ldr	r0, [pc, #88]	; (8000d50 <vTask_blink+0x8c>)
 8000cf6:	f7ff feb5 	bl	8000a64 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	22c8      	movs	r2, #200	; 0xc8
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 fb7e 	bl	8005404 <memset>

		sprintf(c_buff, "Free Heap: %d bytes \n\n", xPortGetMinimumEverFreeHeapSize());
 8000d08:	f004 fa7c 	bl	8005204 <xPortGetMinimumEverFreeHeapSize>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4910      	ldr	r1, [pc, #64]	; (8000d54 <vTask_blink+0x90>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 fb7d 	bl	8005414 <siprintf>
		vPrintString(c_buff);
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fea0 	bl	8000a64 <vPrintString>

		memset(c_buff, 0, sizeof(c_buff));
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	22c8      	movs	r2, #200	; 0xc8
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fb69 	bl	8005404 <memset>

		vPrintString("\n\n\n");
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <vTask_blink+0x94>)
 8000d34:	f7ff fe96 	bl	8000a64 <vPrintString>
		vTaskDelay(5000 / portTICK_PERIOD_MS);
 8000d38:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d3c:	f002 fe82 	bl	8003a44 <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000d40:	e7c7      	b.n	8000cd2 <vTask_blink+0xe>
 8000d42:	bf00      	nop
 8000d44:	08006000 	.word	0x08006000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	0800601c 	.word	0x0800601c
 8000d50:	08006054 	.word	0x08006054
 8000d54:	08006058 	.word	0x08006058
 8000d58:	08006070 	.word	0x08006070

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 f99b 	bl	80010a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40000800 	.word	0x40000800

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_MspInit+0x54>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_MspInit+0x54>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x54>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_MspInit+0x54>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_MspInit+0x54>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_MspInit+0x54>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	210f      	movs	r1, #15
 8000dce:	f06f 0001 	mvn.w	r0, #1
 8000dd2:	f000 fa41 	bl	8001258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0x88>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_UART_MspInit+0x88>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_UART_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	23c0      	movs	r3, #192	; 0xc0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0x8c>)
 8000e5a:	f000 fa27 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020400 	.word	0x40020400

08000e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	201e      	movs	r0, #30
 8000e8a:	f000 f9e5 	bl	8001258 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e8e:	201e      	movs	r0, #30
 8000e90:	f000 f9fe 	bl	8001290 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <HAL_InitTick+0xa4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_InitTick+0xa4>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 f83a 	bl	8001f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ec0:	f001 f810 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_InitTick+0xa8>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_InitTick+0xac>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_InitTick+0xb0>)
 8000edc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_InitTick+0xac>)
 8000ee0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_InitTick+0xac>)
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_InitTick+0xac>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_InitTick+0xac>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <HAL_InitTick+0xac>)
 8000efa:	f001 f84d 	bl	8001f98 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <HAL_InitTick+0xac>)
 8000f06:	f001 f8a1 	bl	800204c <HAL_TIM_Base_Start_IT>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3730      	adds	r7, #48	; 0x30
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	431bde83 	.word	0x431bde83
 8000f20:	2000de48 	.word	0x2000de48
 8000f24:	40000800 	.word	0x40000800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM4_IRQHandler+0x10>)
 8000f5a:	f001 f8d9 	bl	8002110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000de48 	.word	0x2000de48

08000f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f70:	f000 fb54 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f004 f9f4 	bl	8005394 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20010000 	.word	0x20010000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	200000a0 	.word	0x200000a0
 8000fe0:	2000dea8 	.word	0x2000dea8

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <SystemInit+0x28>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <SystemInit+0x28>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <SystemInit+0x28>)
 8000ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001016:	e003      	b.n	8001020 <LoopCopyDataInit>

08001018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800101a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800101c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800101e:	3104      	adds	r1, #4

08001020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001028:	d3f6      	bcc.n	8001018 <CopyDataInit>
  ldr  r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800102c:	e002      	b.n	8001034 <LoopFillZerobss>

0800102e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800102e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001030:	f842 3b04 	str.w	r3, [r2], #4

08001034 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001038:	d3f9      	bcc.n	800102e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103a:	f7ff ffd3 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f004 f9af 	bl	80053a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff faa1 	bl	8000588 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800104c:	080060e8 	.word	0x080060e8
  ldr  r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001054:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001058:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800105c:	2000dea4 	.word	0x2000dea4

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f8d8 	bl	8001242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff feee 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fe78 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	2000de90 	.word	0x2000de90

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000de90 	.word	0x2000de90

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff4c 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126a:	f7ff ff61 	bl	8001130 <__NVIC_GetPriorityGrouping>
 800126e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff ffb1 	bl	80011dc <NVIC_EncodePriority>
 800127a:	4602      	mov	r2, r0
 800127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff80 	bl	8001188 <__NVIC_SetPriority>
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff54 	bl	800114c <__NVIC_EnableIRQ>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e159      	b.n	800157c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 8148 	bne.w	8001576 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a2 	beq.w	8001576 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a56      	ldr	r2, [pc, #344]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b54      	ldr	r3, [pc, #336]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x202>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2f4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x1fe>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x1fa>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <HAL_GPIO_Init+0x2fc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x1f6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_GPIO_Init+0x300>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x1f2>
 800149a:	2304      	movs	r3, #4
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 800149e:	2307      	movs	r3, #7
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f2:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151c:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f aea2 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015f8:	887a      	ldrh	r2, [r7, #2]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	041a      	lsls	r2, r3, #16
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43d9      	mvns	r1, r3
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	400b      	ands	r3, r1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa7c 	bl	8000b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e264      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166a:	4ba3      	ldr	r3, [pc, #652]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d00c      	beq.n	8001690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4ba0      	ldr	r3, [pc, #640]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	2b08      	cmp	r3, #8
 8001680:	d112      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b9d      	ldr	r3, [pc, #628]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b99      	ldr	r3, [pc, #612]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05b      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d157      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e23f      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x74>
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a90      	ldr	r2, [pc, #576]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a87      	ldr	r2, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016e4:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a83      	ldr	r2, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a80      	ldr	r2, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fce4 	bl	80010d0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fce0 	bl	80010d0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e204      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xc0>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fcd0 	bl	80010d0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fccc 	bl	80010d0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1f0      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1c4      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4952      	ldr	r1, [pc, #328]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <HAL_RCC_OscConfig+0x2b0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fc85 	bl	80010d0 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fc81 	bl	80010d0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1a5      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4940      	ldr	r1, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x2b0>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fc64 	bl	80010d0 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff fc60 	bl	80010d0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e184      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d030      	beq.n	8001898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d016      	beq.n	800186c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x2b4>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fc44 	bl	80010d0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fc40 	bl	80010d0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e164      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x200>
 800186a:	e015      	b.n	8001898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x2b4>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fc2d 	bl	80010d0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fc29 	bl	80010d0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e14d      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a0 	beq.w	80019e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d121      	bne.n	8001926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fbef 	bl	80010d0 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e011      	b.n	800191a <HAL_RCC_OscConfig+0x2ce>
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	42470000 	.word	0x42470000
 8001900:	42470e80 	.word	0x42470e80
 8001904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001908:	f7ff fbe2 	bl	80010d0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e106      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x4e4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x2f0>
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a77      	ldr	r2, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x32a>
 800195e:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff fba7 	bl	80010d0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff fba3 	bl	80010d0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0c5      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ee      	beq.n	8001986 <HAL_RCC_OscConfig+0x33a>
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb91 	bl	80010d0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb8d 	bl	80010d0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0af      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 809b 	beq.w	8001b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d05c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d141      	bne.n	8001a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fb61 	bl	80010d0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff fb5d 	bl	80010d0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e081      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	4937      	ldr	r1, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb36 	bl	80010d0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff fb32 	bl	80010d0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e056      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x41c>
 8001a86:	e04e      	b.n	8001b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb1f 	bl	80010d0 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb1b 	bl	80010d0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e03f      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x44a>
 8001ab4:	e037      	b.n	8001b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d028      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d121      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d11a      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d111      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40007000 	.word	0x40007000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	42470060 	.word	0x42470060

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cc      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d90c      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	494d      	ldr	r1, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d044      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e067      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4934      	ldr	r1, [pc, #208]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7ff fa50 	bl	80010d0 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff fa4c 	bl	80010d0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e032      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc2:	f000 f821 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	490a      	ldr	r1, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	5ccb      	ldrb	r3, [r1, r3]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f8c6 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	0800608c 	.word	0x0800608c
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d20:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d00d      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	f200 80bd 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x34>
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d3a:	e0b7      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d3e:	60bb      	str	r3, [r7, #8]
       break;
 8001d40:	e0b7      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d42:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d44:	60bb      	str	r3, [r7, #8]
      break;
 8001d46:	e0b4      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d48:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d52:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04d      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	461a      	mov	r2, r3
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	ea02 0800 	and.w	r8, r2, r0
 8001d76:	ea03 0901 	and.w	r9, r3, r1
 8001d7a:	4640      	mov	r0, r8
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	014b      	lsls	r3, r1, #5
 8001d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d8c:	0142      	lsls	r2, r0, #5
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	ebb0 0008 	subs.w	r0, r0, r8
 8001d96:	eb61 0109 	sbc.w	r1, r1, r9
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	018b      	lsls	r3, r1, #6
 8001da4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001da8:	0182      	lsls	r2, r0, #6
 8001daa:	1a12      	subs	r2, r2, r0
 8001dac:	eb63 0301 	sbc.w	r3, r3, r1
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	00d9      	lsls	r1, r3, #3
 8001dba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dbe:	00d0      	lsls	r0, r2, #3
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	eb12 0208 	adds.w	r2, r2, r8
 8001dc8:	eb43 0309 	adc.w	r3, r3, r9
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	0259      	lsls	r1, r3, #9
 8001dd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dda:	0250      	lsls	r0, r2, #9
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe fa50 	bl	8000290 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e04a      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	099b      	lsrs	r3, r3, #6
 8001e00:	461a      	mov	r2, r3
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	ea02 0400 	and.w	r4, r2, r0
 8001e12:	ea03 0501 	and.w	r5, r3, r1
 8001e16:	4620      	mov	r0, r4
 8001e18:	4629      	mov	r1, r5
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	014b      	lsls	r3, r1, #5
 8001e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e28:	0142      	lsls	r2, r0, #5
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	1b00      	subs	r0, r0, r4
 8001e30:	eb61 0105 	sbc.w	r1, r1, r5
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	018b      	lsls	r3, r1, #6
 8001e3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e42:	0182      	lsls	r2, r0, #6
 8001e44:	1a12      	subs	r2, r2, r0
 8001e46:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	00d9      	lsls	r1, r3, #3
 8001e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e58:	00d0      	lsls	r0, r2, #3
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	1912      	adds	r2, r2, r4
 8001e60:	eb45 0303 	adc.w	r3, r5, r3
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0299      	lsls	r1, r3, #10
 8001e6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e72:	0290      	lsls	r0, r2, #10
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f7fe fa04 	bl	8000290 <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	60bb      	str	r3, [r7, #8]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001eae:	60bb      	str	r3, [r7, #8]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	007a1200 	.word	0x007a1200

08001ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	f7ff fff0 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0a9b      	lsrs	r3, r3, #10
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	0800609c 	.word	0x0800609c

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f10:	f7ff ffdc 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0b5b      	lsrs	r3, r3, #13
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	0800609c 	.word	0x0800609c

08001f34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	220f      	movs	r2, #15
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCC_GetClockConfig+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0207 	and.w	r2, r3, #7
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40023c00 	.word	0x40023c00

08001f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e041      	b.n	800202e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f839 	bl	8002036 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 f9ca 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d001      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e044      	b.n	80020ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_TIM_Base_Start_IT+0xb0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d018      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d013      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_TIM_Base_Start_IT+0xb4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x6c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_TIM_Base_Start_IT+0xb8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x6c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_TIM_Base_Start_IT+0xbc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x6c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_TIM_Base_Start_IT+0xc0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d010      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	e007      	b.n	80020ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800
 8002108:	40000c00 	.word	0x40000c00
 800210c:	40014000 	.word	0x40014000

08002110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d122      	bne.n	800216c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d11b      	bne.n	800216c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0202 	mvn.w	r2, #2
 800213c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8ee 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8e0 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f8f1 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b04      	cmp	r3, #4
 8002178:	d122      	bne.n	80021c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b04      	cmp	r3, #4
 8002186:	d11b      	bne.n	80021c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0204 	mvn.w	r2, #4
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8c4 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8b6 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f8c7 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d122      	bne.n	8002214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d11b      	bne.n	8002214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0208 	mvn.w	r2, #8
 80021e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2204      	movs	r2, #4
 80021ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f89a 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8002200:	e005      	b.n	800220e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f88c 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f89d 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b10      	cmp	r3, #16
 8002220:	d122      	bne.n	8002268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b10      	cmp	r3, #16
 800222e:	d11b      	bne.n	8002268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0210 	mvn.w	r2, #16
 8002238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2208      	movs	r2, #8
 800223e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f870 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f862 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f873 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0201 	mvn.w	r2, #1
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe fd64 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b80      	cmp	r3, #128	; 0x80
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ac:	2b80      	cmp	r3, #128	; 0x80
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8e2 	bl	8002484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b40      	cmp	r3, #64	; 0x40
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f838 	bl	800235c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b20      	cmp	r3, #32
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0220 	mvn.w	r2, #32
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8ac 	bl	8002470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a34      	ldr	r2, [pc, #208]	; (8002454 <TIM_Base_SetConfig+0xe4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00f      	beq.n	80023a8 <TIM_Base_SetConfig+0x38>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238e:	d00b      	beq.n	80023a8 <TIM_Base_SetConfig+0x38>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a31      	ldr	r2, [pc, #196]	; (8002458 <TIM_Base_SetConfig+0xe8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x38>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <TIM_Base_SetConfig+0xec>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x38>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <TIM_Base_SetConfig+0xf0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <TIM_Base_SetConfig+0xe4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01b      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d017      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a22      	ldr	r2, [pc, #136]	; (8002458 <TIM_Base_SetConfig+0xe8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <TIM_Base_SetConfig+0xec>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00f      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a20      	ldr	r2, [pc, #128]	; (8002460 <TIM_Base_SetConfig+0xf0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <TIM_Base_SetConfig+0xf4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <TIM_Base_SetConfig+0xf8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <TIM_Base_SetConfig+0x8a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <TIM_Base_SetConfig+0xfc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <TIM_Base_SetConfig+0xe4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d103      	bne.n	8002440 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	615a      	str	r2, [r3, #20]
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800
 8002460:	40000c00 	.word	0x40000c00
 8002464:	40014000 	.word	0x40014000
 8002468:	40014400 	.word	0x40014400
 800246c:	40014800 	.word	0x40014800

08002470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e03f      	b.n	800252a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fc90 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f929 	bl	8002734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b08a      	sub	sp, #40	; 0x28
 8002536:	af02      	add	r7, sp, #8
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	d17c      	bne.n	800264c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_UART_Transmit+0x2c>
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e075      	b.n	800264e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_UART_Transmit+0x3e>
 800256c:	2302      	movs	r3, #2
 800256e:	e06e      	b.n	800264e <HAL_UART_Transmit+0x11c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2221      	movs	r2, #33	; 0x21
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002586:	f7fe fda3 	bl	80010d0 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	88fa      	ldrh	r2, [r7, #6]
 8002590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a0:	d108      	bne.n	80025b4 <HAL_UART_Transmit+0x82>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d104      	bne.n	80025b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	e003      	b.n	80025bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025c4:	e02a      	b.n	800261c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f840 	bl	8002656 <UART_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e036      	b.n	800264e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3302      	adds	r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	e007      	b.n	800260e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	3301      	adds	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1cf      	bne.n	80025c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f810 	bl	8002656 <UART_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e006      	b.n	800264e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b090      	sub	sp, #64	; 0x40
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002666:	e050      	b.n	800270a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d04c      	beq.n	800270a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <UART_WaitOnFlagUntilTimeout+0x30>
 8002676:	f7fe fd2b 	bl	80010d0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002682:	429a      	cmp	r2, r3
 8002684:	d241      	bcs.n	800270a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a6:	637a      	str	r2, [r7, #52]	; 0x34
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e5      	bne.n	8002686 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3314      	adds	r3, #20
 80026c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	613b      	str	r3, [r7, #16]
   return(result);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3314      	adds	r3, #20
 80026d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026da:	623a      	str	r2, [r7, #32]
 80026dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	69f9      	ldr	r1, [r7, #28]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e5      	bne.n	80026ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e00f      	b.n	800272a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	429a      	cmp	r2, r3
 8002726:	d09f      	beq.n	8002668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3740      	adds	r7, #64	; 0x40
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	b09f      	sub	sp, #124	; 0x7c
 800273a:	af00      	add	r7, sp, #0
 800273c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	ea40 0301 	orr.w	r3, r0, r1
 8002754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	431a      	orrs	r2, r3
 8002766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4313      	orrs	r3, r2
 800276c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002778:	f021 010c 	bic.w	r1, r1, #12
 800277c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002782:	430b      	orrs	r3, r1
 8002784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	6999      	ldr	r1, [r3, #24]
 8002794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	ea40 0301 	orr.w	r3, r0, r1
 800279c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800279e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4bc5      	ldr	r3, [pc, #788]	; (8002ab8 <UART_SetConfig+0x384>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d004      	beq.n	80027b2 <UART_SetConfig+0x7e>
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4bc3      	ldr	r3, [pc, #780]	; (8002abc <UART_SetConfig+0x388>)
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d103      	bne.n	80027ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b2:	f7ff fbab 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 80027b6:	6778      	str	r0, [r7, #116]	; 0x74
 80027b8:	e002      	b.n	80027c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ba:	f7ff fb93 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 80027be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c8:	f040 80b6 	bne.w	8002938 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ce:	461c      	mov	r4, r3
 80027d0:	f04f 0500 	mov.w	r5, #0
 80027d4:	4622      	mov	r2, r4
 80027d6:	462b      	mov	r3, r5
 80027d8:	1891      	adds	r1, r2, r2
 80027da:	6439      	str	r1, [r7, #64]	; 0x40
 80027dc:	415b      	adcs	r3, r3
 80027de:	647b      	str	r3, [r7, #68]	; 0x44
 80027e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027e4:	1912      	adds	r2, r2, r4
 80027e6:	eb45 0303 	adc.w	r3, r5, r3
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	00d9      	lsls	r1, r3, #3
 80027f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027f8:	00d0      	lsls	r0, r2, #3
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	1911      	adds	r1, r2, r4
 8002800:	6639      	str	r1, [r7, #96]	; 0x60
 8002802:	416b      	adcs	r3, r5
 8002804:	667b      	str	r3, [r7, #100]	; 0x64
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	1891      	adds	r1, r2, r2
 8002812:	63b9      	str	r1, [r7, #56]	; 0x38
 8002814:	415b      	adcs	r3, r3
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800281c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002820:	f7fd fd36 	bl	8000290 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4ba5      	ldr	r3, [pc, #660]	; (8002ac0 <UART_SetConfig+0x38c>)
 800282a:	fba3 2302 	umull	r2, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	011e      	lsls	r6, r3, #4
 8002832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002834:	461c      	mov	r4, r3
 8002836:	f04f 0500 	mov.w	r5, #0
 800283a:	4622      	mov	r2, r4
 800283c:	462b      	mov	r3, r5
 800283e:	1891      	adds	r1, r2, r2
 8002840:	6339      	str	r1, [r7, #48]	; 0x30
 8002842:	415b      	adcs	r3, r3
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
 8002846:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800284a:	1912      	adds	r2, r2, r4
 800284c:	eb45 0303 	adc.w	r3, r5, r3
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	00d9      	lsls	r1, r3, #3
 800285a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800285e:	00d0      	lsls	r0, r2, #3
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	1911      	adds	r1, r2, r4
 8002866:	65b9      	str	r1, [r7, #88]	; 0x58
 8002868:	416b      	adcs	r3, r5
 800286a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	461a      	mov	r2, r3
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	1891      	adds	r1, r2, r2
 8002878:	62b9      	str	r1, [r7, #40]	; 0x28
 800287a:	415b      	adcs	r3, r3
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002882:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002886:	f7fd fd03 	bl	8000290 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4b8c      	ldr	r3, [pc, #560]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002890:	fba3 1302 	umull	r1, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	2164      	movs	r1, #100	; 0x64
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	3332      	adds	r3, #50	; 0x32
 80028a2:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <UART_SetConfig+0x38c>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028b0:	441e      	add	r6, r3
 80028b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b4:	4618      	mov	r0, r3
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	1894      	adds	r4, r2, r2
 80028c0:	623c      	str	r4, [r7, #32]
 80028c2:	415b      	adcs	r3, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ca:	1812      	adds	r2, r2, r0
 80028cc:	eb41 0303 	adc.w	r3, r1, r3
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	f04f 0500 	mov.w	r5, #0
 80028d8:	00dd      	lsls	r5, r3, #3
 80028da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028de:	00d4      	lsls	r4, r2, #3
 80028e0:	4622      	mov	r2, r4
 80028e2:	462b      	mov	r3, r5
 80028e4:	1814      	adds	r4, r2, r0
 80028e6:	653c      	str	r4, [r7, #80]	; 0x50
 80028e8:	414b      	adcs	r3, r1
 80028ea:	657b      	str	r3, [r7, #84]	; 0x54
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	1891      	adds	r1, r2, r2
 80028f8:	61b9      	str	r1, [r7, #24]
 80028fa:	415b      	adcs	r3, r3
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002902:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002906:	f7fd fcc3 	bl	8000290 <__aeabi_uldivmod>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002910:	fba3 1302 	umull	r1, r3, r3, r2
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	2164      	movs	r1, #100	; 0x64
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	3332      	adds	r3, #50	; 0x32
 8002922:	4a67      	ldr	r2, [pc, #412]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	f003 0207 	and.w	r2, r3, #7
 800292e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4432      	add	r2, r6
 8002934:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002936:	e0b9      	b.n	8002aac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	461c      	mov	r4, r3
 800293c:	f04f 0500 	mov.w	r5, #0
 8002940:	4622      	mov	r2, r4
 8002942:	462b      	mov	r3, r5
 8002944:	1891      	adds	r1, r2, r2
 8002946:	6139      	str	r1, [r7, #16]
 8002948:	415b      	adcs	r3, r3
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002950:	1912      	adds	r2, r2, r4
 8002952:	eb45 0303 	adc.w	r3, r5, r3
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	00d9      	lsls	r1, r3, #3
 8002960:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002964:	00d0      	lsls	r0, r2, #3
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	eb12 0804 	adds.w	r8, r2, r4
 800296e:	eb43 0905 	adc.w	r9, r3, r5
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	008b      	lsls	r3, r1, #2
 8002986:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800298a:	0082      	lsls	r2, r0, #2
 800298c:	4640      	mov	r0, r8
 800298e:	4649      	mov	r1, r9
 8002990:	f7fd fc7e 	bl	8000290 <__aeabi_uldivmod>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <UART_SetConfig+0x38c>)
 800299a:	fba3 2302 	umull	r2, r3, r3, r2
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	011e      	lsls	r6, r3, #4
 80029a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a4:	4618      	mov	r0, r3
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	1894      	adds	r4, r2, r2
 80029b0:	60bc      	str	r4, [r7, #8]
 80029b2:	415b      	adcs	r3, r3
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ba:	1812      	adds	r2, r2, r0
 80029bc:	eb41 0303 	adc.w	r3, r1, r3
 80029c0:	f04f 0400 	mov.w	r4, #0
 80029c4:	f04f 0500 	mov.w	r5, #0
 80029c8:	00dd      	lsls	r5, r3, #3
 80029ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029ce:	00d4      	lsls	r4, r2, #3
 80029d0:	4622      	mov	r2, r4
 80029d2:	462b      	mov	r3, r5
 80029d4:	1814      	adds	r4, r2, r0
 80029d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80029d8:	414b      	adcs	r3, r1
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	008b      	lsls	r3, r1, #2
 80029f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029f4:	0082      	lsls	r2, r0, #2
 80029f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029fa:	f7fd fc49 	bl	8000290 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002a04:	fba3 1302 	umull	r1, r3, r3, r2
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	2164      	movs	r1, #100	; 0x64
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	3332      	adds	r3, #50	; 0x32
 8002a16:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a22:	441e      	add	r6, r3
 8002a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a26:	4618      	mov	r0, r3
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	1894      	adds	r4, r2, r2
 8002a32:	603c      	str	r4, [r7, #0]
 8002a34:	415b      	adcs	r3, r3
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3c:	1812      	adds	r2, r2, r0
 8002a3e:	eb41 0303 	adc.w	r3, r1, r3
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	f04f 0500 	mov.w	r5, #0
 8002a4a:	00dd      	lsls	r5, r3, #3
 8002a4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a50:	00d4      	lsls	r4, r2, #3
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	eb12 0a00 	adds.w	sl, r2, r0
 8002a5a:	eb43 0b01 	adc.w	fp, r3, r1
 8002a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	008b      	lsls	r3, r1, #2
 8002a72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a76:	0082      	lsls	r2, r0, #2
 8002a78:	4650      	mov	r0, sl
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	f7fd fc08 	bl	8000290 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002a86:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2164      	movs	r1, #100	; 0x64
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <UART_SetConfig+0x38c>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4432      	add	r2, r6
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	377c      	adds	r7, #124	; 0x7c
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40011400 	.word	0x40011400
 8002ac0:	51eb851f 	.word	0x51eb851f

08002ac4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f103 0208 	add.w	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f103 0208 	add.w	r2, r3, #8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f103 0208 	add.w	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d103      	bne.n	8002b86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e00c      	b.n	8002ba0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3308      	adds	r3, #8
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e002      	b.n	8002b94 <vListInsert+0x2e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d2f6      	bcs.n	8002b8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6892      	ldr	r2, [r2, #8]
 8002bee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6852      	ldr	r2, [r2, #4]
 8002bf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d103      	bne.n	8002c0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c56:	f002 f8c5 	bl	8004de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	68f9      	ldr	r1, [r7, #12]
 8002c64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	441a      	add	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	3b01      	subs	r3, #1
 8002c88:	68f9      	ldr	r1, [r7, #12]
 8002c8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	441a      	add	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d114      	bne.n	8002cd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01a      	beq.n	8002cea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fa15 	bl	80040e8 <xTaskRemoveFromEventList>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <xQueueGenericReset+0xcc>)
 8002cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	e009      	b.n	8002cea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3310      	adds	r3, #16
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fef2 	bl	8002ac4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff feed 	bl	8002ac4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cea:	f002 f8ab 	bl	8004e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	613b      	str	r3, [r7, #16]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3354      	adds	r3, #84	; 0x54
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 f937 	bl	8004fa8 <pvPortMalloc>
 8002d3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3354      	adds	r3, #84	; 0x54
 8002d4a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d4c:	79fa      	ldrb	r2, [r7, #7]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f805 	bl	8002d68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
	}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e002      	b.n	8002d8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d96:	2101      	movs	r1, #1
 8002d98:	69b8      	ldr	r0, [r7, #24]
 8002d9a:	f7ff ff47 	bl	8002c2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2200      	movs	r2, #0
 8002daa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00e      	beq.n	8002de0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f81c 	bl	8002e18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6939      	ldr	r1, [r7, #16]
 8002e00:	6978      	ldr	r0, [r7, #20]
 8002e02:	f7ff ff7b 	bl	8002cfc <xQueueGenericCreate>
 8002e06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff ffd3 	bl	8002db4 <prvInitialiseMutex>

		return xNewQueue;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
	}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08e      	sub	sp, #56	; 0x38
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xQueueGenericSend+0x32>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <xQueueGenericSend+0x40>
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <xQueueGenericSend+0x44>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <xQueueGenericSend+0x46>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <xQueueGenericSend+0x60>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	623b      	str	r3, [r7, #32]
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSend+0x6e>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericSend+0x72>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericSend+0x74>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61fb      	str	r3, [r7, #28]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea6:	f001 fb8f 	bl	80045c8 <xTaskGetSchedulerState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <xQueueGenericSend+0x9e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueGenericSend+0xa2>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueGenericSend+0xa4>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61bb      	str	r3, [r7, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed6:	f001 ff85 	bl	8004de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <xQueueGenericSend+0xd4>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d145      	bne.n	8002f78 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef8:	f000 faac 	bl	8003454 <prvCopyDataToQueue>
 8002efc:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d014      	beq.n	8002f30 <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d102      	bne.n	8002f12 <xQueueGenericSend+0xfa>
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d12e      	bne.n	8002f70 <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f14:	f000 fbfe 	bl	8003714 <prvNotifyQueueSetContainer>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d028      	beq.n	8002f70 <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <xQueueGenericSend+0x230>)
 8002f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	e01f      	b.n	8002f70 <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	3324      	adds	r3, #36	; 0x24
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 f8d3 	bl	80040e8 <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002f48:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <xQueueGenericSend+0x230>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	e00a      	b.n	8002f70 <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <xQueueGenericSend+0x230>)
 8002f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f70:	f001 ff68 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e063      	b.n	8003040 <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f7e:	f001 ff61 	bl	8004e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e05c      	b.n	8003040 <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f90b 	bl	80041ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f96:	2301      	movs	r3, #1
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f9a:	f001 ff53 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f9e:	f000 fe33 	bl	8003c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fa2:	f001 ff1f 	bl	8004de4 <vPortEnterCritical>
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fac:	b25b      	sxtb	r3, r3
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d103      	bne.n	8002fbc <xQueueGenericSend+0x1a4>
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d103      	bne.n	8002fd2 <xQueueGenericSend+0x1ba>
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd2:	f001 ff37 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fd6:	1d3a      	adds	r2, r7, #4
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f8fa 	bl	80041d8 <xTaskCheckForTimeOut>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d124      	bne.n	8003034 <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fec:	f000 fb37 	bl	800365e <prvIsQueueFull>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f84e 	bl	80040a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003006:	f000 fab5 	bl	8003574 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800300a:	f000 fe0b 	bl	8003c24 <xTaskResumeAll>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	f47f af60 	bne.w	8002ed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <xQueueGenericSend+0x230>)
 8003018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	e756      	b.n	8002ed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302a:	f000 faa3 	bl	8003574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800302e:	f000 fdf9 	bl	8003c24 <xTaskResumeAll>
 8003032:	e750      	b.n	8002ed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003036:	f000 fa9d 	bl	8003574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800303a:	f000 fdf3 	bl	8003c24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800303e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003040:	4618      	mov	r0, r3
 8003042:	3738      	adds	r7, #56	; 0x38
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <xQueueReceive+0x30>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	623b      	str	r3, [r7, #32]
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueReceive+0x3e>
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueReceive+0x42>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueReceive+0x44>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueReceive+0x5e>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61fb      	str	r3, [r7, #28]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030aa:	f001 fa8d 	bl	80045c8 <xTaskGetSchedulerState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueReceive+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueReceive+0x72>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueReceive+0x74>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueReceive+0x8e>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61bb      	str	r3, [r7, #24]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030da:	f001 fe83 	bl	8004de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01f      	beq.n	800312a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ee:	f000 fa1b 	bl	8003528 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00f      	beq.n	8003122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	3310      	adds	r3, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f000 ffee 	bl	80040e8 <xTaskRemoveFromEventList>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <xQueueReceive+0x1bc>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003122:	f001 fe8f 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 8003126:	2301      	movs	r3, #1
 8003128:	e069      	b.n	80031fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003130:	f001 fe88 	bl	8004e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003134:	2300      	movs	r3, #0
 8003136:	e062      	b.n	80031fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f001 f832 	bl	80041ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800314c:	f001 fe7a 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003150:	f000 fd5a 	bl	8003c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003154:	f001 fe46 	bl	8004de4 <vPortEnterCritical>
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315e:	b25b      	sxtb	r3, r3
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d103      	bne.n	800316e <xQueueReceive+0x122>
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x138>
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003184:	f001 fe5e 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003188:	1d3a      	adds	r2, r7, #4
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f001 f821 	bl	80041d8 <xTaskCheckForTimeOut>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d123      	bne.n	80031e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319e:	f000 fa48 	bl	8003632 <prvIsQueueEmpty>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	3324      	adds	r3, #36	; 0x24
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 ff75 	bl	80040a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b8:	f000 f9dc 	bl	8003574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031bc:	f000 fd32 	bl	8003c24 <xTaskResumeAll>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d189      	bne.n	80030da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <xQueueReceive+0x1bc>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	e780      	b.n	80030da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 f9cb 	bl	8003574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031de:	f000 fd21 	bl	8003c24 <xTaskResumeAll>
 80031e2:	e77a      	b.n	80030da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e6:	f000 f9c5 	bl	8003574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ea:	f000 fd1b 	bl	8003c24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f0:	f000 fa1f 	bl	8003632 <prvIsQueueEmpty>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f43f af6f 	beq.w	80030da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	; 0x38
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800321e:	2300      	movs	r3, #0
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	623b      	str	r3, [r7, #32]
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	61fb      	str	r3, [r7, #28]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800325c:	f001 f9b4 	bl	80045c8 <xTaskGetSchedulerState>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <xQueueSemaphoreTake+0x60>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <xQueueSemaphoreTake+0x64>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <xQueueSemaphoreTake+0x66>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	61bb      	str	r3, [r7, #24]
}
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800328c:	f001 fdaa 	bl	8004de4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d024      	beq.n	80032e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032ac:	f001 fbf0 	bl	8004a90 <pvTaskIncrementMutexHeldCount>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00f      	beq.n	80032de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	3310      	adds	r3, #16
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 ff10 	bl	80040e8 <xTaskRemoveFromEventList>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <xQueueSemaphoreTake+0x214>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032de:	f001 fdb1 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e097      	b.n	8003416 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	617b      	str	r3, [r7, #20]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003308:	f001 fd9c 	bl	8004e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800330c:	2300      	movs	r3, #0
 800330e:	e082      	b.n	8003416 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	4618      	mov	r0, r3
 800331c:	f000 ff46 	bl	80041ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003320:	2301      	movs	r3, #1
 8003322:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003324:	f001 fd8e 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003328:	f000 fc6e 	bl	8003c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800332c:	f001 fd5a 	bl	8004de4 <vPortEnterCritical>
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d103      	bne.n	8003346 <xQueueSemaphoreTake+0x13a>
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800334c:	b25b      	sxtb	r3, r3
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d103      	bne.n	800335c <xQueueSemaphoreTake+0x150>
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335c:	f001 fd72 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003360:	463a      	mov	r2, r7
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff35 	bl	80041d8 <xTaskCheckForTimeOut>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d132      	bne.n	80033da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003376:	f000 f95c 	bl	8003632 <prvIsQueueEmpty>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d026      	beq.n	80033ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003388:	f001 fd2c 	bl	8004de4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f937 	bl	8004604 <xTaskPriorityInherit>
 8003396:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003398:	f001 fd54 	bl	8004e44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	3324      	adds	r3, #36	; 0x24
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fe7b 	bl	80040a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ac:	f000 f8e2 	bl	8003574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033b0:	f000 fc38 	bl	8003c24 <xTaskResumeAll>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f47f af68 	bne.w	800328c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <xQueueSemaphoreTake+0x214>)
 80033be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	e75e      	b.n	800328c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80033ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033d0:	f000 f8d0 	bl	8003574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d4:	f000 fc26 	bl	8003c24 <xTaskResumeAll>
 80033d8:	e758      	b.n	800328c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80033da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033dc:	f000 f8ca 	bl	8003574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e0:	f000 fc20 	bl	8003c24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e6:	f000 f924 	bl	8003632 <prvIsQueueEmpty>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f43f af4d 	beq.w	800328c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80033f8:	f001 fcf4 	bl	8004de4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033fe:	f000 f811 	bl	8003424 <prvGetDisinheritPriorityAfterTimeout>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f9f6 	bl	80047fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003410:	f001 fd18 	bl	8004e44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003416:	4618      	mov	r0, r3
 8003418:	3738      	adds	r7, #56	; 0x38
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e001      	b.n	8003446 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003446:	68fb      	ldr	r3, [r7, #12]
	}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d14d      	bne.n	8003516 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f936 	bl	80046f0 <xTaskPriorityDisinherit>
 8003484:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e043      	b.n	8003516 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d119      	bne.n	80034c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6858      	ldr	r0, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	461a      	mov	r2, r3
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	f001 ffa2 	bl	80053e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	441a      	add	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d32b      	bcc.n	8003516 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e026      	b.n	8003516 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68d8      	ldr	r0, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	461a      	mov	r2, r3
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	f001 ff88 	bl	80053e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	425b      	negs	r3, r3
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d207      	bcs.n	8003504 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	425b      	negs	r3, r3
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d105      	bne.n	8003516 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	3b01      	subs	r3, #1
 8003514:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800351e:	697b      	ldr	r3, [r7, #20]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	441a      	add	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	d303      	bcc.n	800355c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68d9      	ldr	r1, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	461a      	mov	r2, r3
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	f001 ff3e 	bl	80053e8 <memcpy>
	}
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800357c:	f001 fc32 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003586:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003588:	e01e      	b.n	80035c8 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8be 	bl	8003714 <prvNotifyQueueSetContainer>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800359e:	f000 fe7d 	bl	800429c <vTaskMissedYield>
 80035a2:	e00d      	b.n	80035c0 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fd99 	bl	80040e8 <xTaskRemoveFromEventList>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80035bc:	f000 fe6e 	bl	800429c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	dcdc      	bgt.n	800358a <prvUnlockQueue+0x16>
 80035d0:	e000      	b.n	80035d4 <prvUnlockQueue+0x60>
						break;
 80035d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	22ff      	movs	r2, #255	; 0xff
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035dc:	f001 fc32 	bl	8004e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035e0:	f001 fc00 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035ec:	e011      	b.n	8003612 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3310      	adds	r3, #16
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd74 	bl	80040e8 <xTaskRemoveFromEventList>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8003606:	f000 fe49 	bl	800429c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800360a:	7bbb      	ldrb	r3, [r7, #14]
 800360c:	3b01      	subs	r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003616:	2b00      	cmp	r3, #0
 8003618:	dce9      	bgt.n	80035ee <prvUnlockQueue+0x7a>
 800361a:	e000      	b.n	800361e <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 800361c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003626:	f001 fc0d 	bl	8004e44 <vPortExitCritical>
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800363a:	f001 fbd3 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e001      	b.n	8003650 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003650:	f001 fbf8 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003666:	f001 fbbd 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	429a      	cmp	r2, r3
 8003674:	d102      	bne.n	800367c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003676:	2301      	movs	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e001      	b.n	8003680 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003680:	f001 fbe0 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8003696:	2200      	movs	r2, #0
 8003698:	2104      	movs	r1, #4
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fb2e 	bl	8002cfc <xQueueGenericCreate>
 80036a0:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 80036a2:	68fb      	ldr	r3, [r7, #12]
	}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80036b6:	f001 fb95 	bl	8004de4 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e00b      	b.n	80036e0 <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e004      	b.n	80036e0 <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 80036dc:	2301      	movs	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80036e0:	f001 fbb0 	bl	8004e44 <vPortExitCritical>

		return xReturn;
 80036e4:	68fb      	ldr	r3, [r7, #12]
	}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fca1 	bl	800304c <xQueueReceive>
		return xReturn;
 800370a:	68fb      	ldr	r3, [r7, #12]
	}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	613b      	str	r3, [r7, #16]
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	429a      	cmp	r2, r3
 800374c:	d30a      	bcc.n	8003764 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60fb      	str	r3, [r7, #12]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	429a      	cmp	r2, r3
 800376e:	d225      	bcs.n	80037bc <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003776:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2200      	movs	r2, #0
 800377c:	4619      	mov	r1, r3
 800377e:	69b8      	ldr	r0, [r7, #24]
 8003780:	f7ff fe68 	bl	8003454 <prvCopyDataToQueue>
 8003784:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8003786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d10e      	bne.n	80037ae <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d011      	beq.n	80037bc <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fca3 	bl	80040e8 <xTaskRemoveFromEventList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e006      	b.n	80037bc <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	3301      	adds	r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	b25a      	sxtb	r2, r3
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037bc:	69fb      	ldr	r3, [r7, #28]
	}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b08c      	sub	sp, #48	; 0x30
 80037ca:	af04      	add	r7, sp, #16
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fbe4 	bl	8004fa8 <pvPortMalloc>
 80037e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037e8:	205c      	movs	r0, #92	; 0x5c
 80037ea:	f001 fbdd 	bl	8004fa8 <pvPortMalloc>
 80037ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
 80037fc:	e005      	b.n	800380a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037fe:	6978      	ldr	r0, [r7, #20]
 8003800:	f001 fc9e 	bl	8005140 <vPortFree>
 8003804:	e001      	b.n	800380a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	2300      	movs	r3, #0
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	9302      	str	r3, [sp, #8]
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f80e 	bl	8003848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800382c:	69f8      	ldr	r0, [r7, #28]
 800382e:	f000 f89b 	bl	8003968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e002      	b.n	800383e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800383e:	69bb      	ldr	r3, [r7, #24]
	}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	21a5      	movs	r1, #165	; 0xa5
 8003862:	f001 fdcf 	bl	8005404 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003870:	3b01      	subs	r3, #1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	617b      	str	r3, [r7, #20]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e012      	b.n	80038d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	7819      	ldrb	r1, [r3, #0]
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	3334      	adds	r3, #52	; 0x34
 80038bc:	460a      	mov	r2, r1
 80038be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d9e9      	bls.n	80038ac <prvInitialiseNewTask+0x64>
 80038d8:	e000      	b.n	80038dc <prvInitialiseNewTask+0x94>
			{
				break;
 80038da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e4:	e003      	b.n	80038ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d901      	bls.n	80038f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038f4:	2306      	movs	r3, #6
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	2200      	movs	r2, #0
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f8f8 	bl	8002b04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	3318      	adds	r3, #24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f8f3 	bl	8002b04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	f1c3 0207 	rsb	r2, r3, #7
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	69b8      	ldr	r0, [r7, #24]
 8003948:	f001 f91c 	bl	8004b84 <pxPortInitialiseStack>
 800394c:	4602      	mov	r2, r0
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395e:	bf00      	nop
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003970:	f001 fa38 	bl	8004de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003974:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <prvAddNewTaskToReadyList+0xc0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	4a2b      	ldr	r2, [pc, #172]	; (8003a28 <prvAddNewTaskToReadyList+0xc0>)
 800397c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003986:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800398c:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <prvAddNewTaskToReadyList+0xc0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d110      	bne.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003994:	f000 fca6 	bl	80042e4 <prvInitialiseTaskLists>
 8003998:	e00d      	b.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800399a:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d802      	bhi.n	80039b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039b6:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <prvAddNewTaskToReadyList+0xcc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <prvAddNewTaskToReadyList+0xcc>)
 80039be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <prvAddNewTaskToReadyList+0xcc>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	2201      	movs	r2, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <prvAddNewTaskToReadyList+0xd0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <prvAddNewTaskToReadyList+0xd0>)
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <prvAddNewTaskToReadyList+0xd4>)
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f7ff f894 	bl	8002b1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039f6:	f001 fa25 	bl	8004e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <prvAddNewTaskToReadyList+0xc8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <prvAddNewTaskToReadyList+0xc4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d207      	bcs.n	8003a20 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <prvAddNewTaskToReadyList+0xd8>)
 8003a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200001a4 	.word	0x200001a4
 8003a2c:	200000a4 	.word	0x200000a4
 8003a30:	200001b0 	.word	0x200001b0
 8003a34:	200001c0 	.word	0x200001c0
 8003a38:	200001ac 	.word	0x200001ac
 8003a3c:	200000a8 	.word	0x200000a8
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <vTaskDelay+0x60>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <vTaskDelay+0x30>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60bb      	str	r3, [r7, #8]
}
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a74:	f000 f8c8 	bl	8003c08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a78:	2100      	movs	r1, #0
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f001 f81c 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a80:	f000 f8d0 	bl	8003c24 <xTaskResumeAll>
 8003a84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <vTaskDelay+0x64>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200001cc 	.word	0x200001cc
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <eTaskGetState+0x28>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60bb      	str	r3, [r7, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <eTaskGetState+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d102      	bne.n	8003ae4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e03a      	b.n	8003b5a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8003ae4:	f001 f97e 	bl	8004de4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <eTaskGetState+0xbc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <eTaskGetState+0xc0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003afa:	f001 f9a3 	bl	8004e44 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d003      	beq.n	8003b0e <eTaskGetState+0x62>
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d102      	bne.n	8003b14 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e022      	b.n	8003b5a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <eTaskGetState+0xc4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d112      	bne.n	8003b42 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8003b30:	2302      	movs	r3, #2
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e011      	b.n	8003b5a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8003b36:	2303      	movs	r3, #3
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e00e      	b.n	8003b5a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e00b      	b.n	8003b5a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <eTaskGetState+0xc8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d002      	beq.n	8003b50 <eTaskGetState+0xa4>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003b50:	2304      	movs	r3, #4
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e001      	b.n	8003b5a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003b56:	2301      	movs	r3, #1
 8003b58:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003b5a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200000a4 	.word	0x200000a4
 8003b68:	2000015c 	.word	0x2000015c
 8003b6c:	20000160 	.word	0x20000160
 8003b70:	20000190 	.word	0x20000190
 8003b74:	20000178 	.word	0x20000178

08003b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <vTaskStartScheduler+0x78>)
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	491a      	ldr	r1, [pc, #104]	; (8003bf4 <vTaskStartScheduler+0x7c>)
 8003b8c:	481a      	ldr	r0, [pc, #104]	; (8003bf8 <vTaskStartScheduler+0x80>)
 8003b8e:	f7ff fe1a 	bl	80037c6 <xTaskCreate>
 8003b92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d116      	bne.n	8003bc8 <vTaskStartScheduler+0x50>
	__asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	60bb      	str	r3, [r7, #8]
}
 8003bac:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <vTaskStartScheduler+0x84>)
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <vTaskStartScheduler+0x88>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <vTaskStartScheduler+0x8c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bc2:	f001 f86d 	bl	8004ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bc6:	e00e      	b.n	8003be6 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d10a      	bne.n	8003be6 <vTaskStartScheduler+0x6e>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	607b      	str	r3, [r7, #4]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <vTaskStartScheduler+0x6c>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001c8 	.word	0x200001c8
 8003bf4:	08006074 	.word	0x08006074
 8003bf8:	080042b5 	.word	0x080042b5
 8003bfc:	200001c4 	.word	0x200001c4
 8003c00:	200001b0 	.word	0x200001b0
 8003c04:	200001a8 	.word	0x200001a8

08003c08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <vTaskSuspendAll+0x18>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <vTaskSuspendAll+0x18>)
 8003c14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	200001cc 	.word	0x200001cc

08003c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c32:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <xTaskResumeAll+0x114>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	603b      	str	r3, [r7, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c50:	f001 f8c8 	bl	8004de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c54:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <xTaskResumeAll+0x114>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4a37      	ldr	r2, [pc, #220]	; (8003d38 <xTaskResumeAll+0x114>)
 8003c5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <xTaskResumeAll+0x114>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d161      	bne.n	8003d2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c66:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <xTaskResumeAll+0x118>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d05d      	beq.n	8003d2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6e:	e02e      	b.n	8003cce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c70:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <xTaskResumeAll+0x11c>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe ffab 	bl	8002bd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe ffa6 	bl	8002bd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <xTaskResumeAll+0x120>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <xTaskResumeAll+0x120>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <xTaskResumeAll+0x124>)
 8003cac:	441a      	add	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7fe ff32 	bl	8002b1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <xTaskResumeAll+0x128>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d302      	bcc.n	8003cce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <xTaskResumeAll+0x12c>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <xTaskResumeAll+0x11c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1cc      	bne.n	8003c70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cdc:	f000 fc54 	bl	8004588 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <xTaskResumeAll+0x130>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cec:	f000 f8c4 	bl	8003e78 <xTaskIncrementTick>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <xTaskResumeAll+0x12c>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f1      	bne.n	8003cec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <xTaskResumeAll+0x130>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <xTaskResumeAll+0x12c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <xTaskResumeAll+0x134>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d2a:	f001 f88b 	bl	8004e44 <vPortExitCritical>

	return xAlreadyYielded;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200001cc 	.word	0x200001cc
 8003d3c:	200001a4 	.word	0x200001a4
 8003d40:	20000164 	.word	0x20000164
 8003d44:	200001ac 	.word	0x200001ac
 8003d48:	200000a8 	.word	0x200000a8
 8003d4c:	200000a4 	.word	0x200000a4
 8003d50:	200001b8 	.word	0x200001b8
 8003d54:	200001b4 	.word	0x200001b4
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	2307      	movs	r3, #7
 8003d6e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8003d70:	f7ff ff4a 	bl	8003c08 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003d74:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <uxTaskGetSystemState+0x104>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d368      	bcc.n	8003e50 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1898      	adds	r0, r3, r2
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <uxTaskGetSystemState+0x108>)
 8003da0:	4413      	add	r3, r2
 8003da2:	2201      	movs	r2, #1
 8003da4:	4619      	mov	r1, r3
 8003da6:	f000 fb71 	bl	800448c <prvListTasksWithinSingleList>
 8003daa:	4602      	mov	r2, r0
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e2      	bne.n	8003d7e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <uxTaskGetSystemState+0x10c>)
 8003dca:	6811      	ldr	r1, [r2, #0]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fb5c 	bl	800448c <prvListTasksWithinSingleList>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <uxTaskGetSystemState+0x110>)
 8003dee:	6811      	ldr	r1, [r2, #0]
 8003df0:	2202      	movs	r2, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fb4a 	bl	800448c <prvListTasksWithinSingleList>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	2204      	movs	r2, #4
 8003e12:	4917      	ldr	r1, [pc, #92]	; (8003e70 <uxTaskGetSystemState+0x114>)
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fb39 	bl	800448c <prvListTasksWithinSingleList>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	2203      	movs	r2, #3
 8003e34:	490f      	ldr	r1, [pc, #60]	; (8003e74 <uxTaskGetSystemState+0x118>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb28 	bl	800448c <prvListTasksWithinSingleList>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4413      	add	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003e50:	f7ff fee8 	bl	8003c24 <xTaskResumeAll>

		return uxTask;
 8003e54:	697b      	ldr	r3, [r7, #20]
	}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200001a4 	.word	0x200001a4
 8003e64:	200000a8 	.word	0x200000a8
 8003e68:	2000015c 	.word	0x2000015c
 8003e6c:	20000160 	.word	0x20000160
 8003e70:	20000178 	.word	0x20000178
 8003e74:	20000190 	.word	0x20000190

08003e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e82:	4b4e      	ldr	r3, [pc, #312]	; (8003fbc <xTaskIncrementTick+0x144>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 808e 	bne.w	8003fa8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <xTaskIncrementTick+0x148>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e94:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <xTaskIncrementTick+0x148>)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d120      	bne.n	8003ee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <xTaskIncrementTick+0x14c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	603b      	str	r3, [r7, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <xTaskIncrementTick+0x46>
 8003ec0:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <xTaskIncrementTick+0x14c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <xTaskIncrementTick+0x150>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3e      	ldr	r2, [pc, #248]	; (8003fc4 <xTaskIncrementTick+0x14c>)
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4a3e      	ldr	r2, [pc, #248]	; (8003fc8 <xTaskIncrementTick+0x150>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <xTaskIncrementTick+0x154>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <xTaskIncrementTick+0x154>)
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	f000 fb53 	bl	8004588 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <xTaskIncrementTick+0x158>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d348      	bcc.n	8003f7e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <xTaskIncrementTick+0x14c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <xTaskIncrementTick+0x158>)
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	601a      	str	r2, [r3, #0]
					break;
 8003efe:	e03e      	b.n	8003f7e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <xTaskIncrementTick+0x14c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d203      	bcs.n	8003f20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f18:	4a2d      	ldr	r2, [pc, #180]	; (8003fd0 <xTaskIncrementTick+0x158>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f1e:	e02e      	b.n	8003f7e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fe57 	bl	8002bd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3318      	adds	r3, #24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fe4e 	bl	8002bd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	2201      	movs	r2, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <xTaskIncrementTick+0x15c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	4a22      	ldr	r2, [pc, #136]	; (8003fd4 <xTaskIncrementTick+0x15c>)
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <xTaskIncrementTick+0x160>)
 8003f5c:	441a      	add	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7fe fdda 	bl	8002b1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <xTaskIncrementTick+0x164>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d3b9      	bcc.n	8003eec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f7c:	e7b6      	b.n	8003eec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <xTaskIncrementTick+0x164>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4914      	ldr	r1, [pc, #80]	; (8003fd8 <xTaskIncrementTick+0x160>)
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d901      	bls.n	8003f9a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003f96:	2301      	movs	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <xTaskIncrementTick+0x168>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e004      	b.n	8003fb2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <xTaskIncrementTick+0x16c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <xTaskIncrementTick+0x16c>)
 8003fb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fb2:	697b      	ldr	r3, [r7, #20]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200001cc 	.word	0x200001cc
 8003fc0:	200001a8 	.word	0x200001a8
 8003fc4:	2000015c 	.word	0x2000015c
 8003fc8:	20000160 	.word	0x20000160
 8003fcc:	200001bc 	.word	0x200001bc
 8003fd0:	200001c4 	.word	0x200001c4
 8003fd4:	200001ac 	.word	0x200001ac
 8003fd8:	200000a8 	.word	0x200000a8
 8003fdc:	200000a4 	.word	0x200000a4
 8003fe0:	200001b8 	.word	0x200001b8
 8003fe4:	200001b4 	.word	0x200001b4

08003fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <vTaskSwitchContext+0xa4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <vTaskSwitchContext+0xa8>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ffc:	e03f      	b.n	800407e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <vTaskSwitchContext+0xa8>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b23      	ldr	r3, [pc, #140]	; (8004094 <vTaskSwitchContext+0xac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f1c3 031f 	rsb	r3, r3, #31
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	491f      	ldr	r1, [pc, #124]	; (8004098 <vTaskSwitchContext+0xb0>)
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <vTaskSwitchContext+0x5c>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <vTaskSwitchContext+0x5a>
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <vTaskSwitchContext+0xb0>)
 8004050:	4413      	add	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3308      	adds	r3, #8
 8004066:	429a      	cmp	r2, r3
 8004068:	d104      	bne.n	8004074 <vTaskSwitchContext+0x8c>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <vTaskSwitchContext+0xb4>)
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	200001cc 	.word	0x200001cc
 8004090:	200001b8 	.word	0x200001b8
 8004094:	200001ac 	.word	0x200001ac
 8004098:	200000a8 	.word	0x200000a8
 800409c:	200000a4 	.word	0x200000a4

080040a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <vTaskPlaceOnEventList+0x44>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe fd49 	bl	8002b66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040d4:	2101      	movs	r1, #1
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f000 fcee 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200000a4 	.word	0x200000a4

080040e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	60fb      	str	r3, [r7, #12]
}
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3318      	adds	r3, #24
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fd5d 	bl	8002bd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <xTaskRemoveFromEventList+0xac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11c      	bne.n	8004160 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fd54 	bl	8002bd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <xTaskRemoveFromEventList+0xb0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <xTaskRemoveFromEventList+0xb0>)
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <xTaskRemoveFromEventList+0xb4>)
 8004150:	441a      	add	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fe fce0 	bl	8002b1e <vListInsertEnd>
 800415e:	e005      	b.n	800416c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3318      	adds	r3, #24
 8004164:	4619      	mov	r1, r3
 8004166:	480e      	ldr	r0, [pc, #56]	; (80041a0 <xTaskRemoveFromEventList+0xb8>)
 8004168:	f7fe fcd9 	bl	8002b1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <xTaskRemoveFromEventList+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	429a      	cmp	r2, r3
 8004178:	d905      	bls.n	8004186 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <xTaskRemoveFromEventList+0xc0>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e001      	b.n	800418a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800418a:	697b      	ldr	r3, [r7, #20]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200001cc 	.word	0x200001cc
 8004198:	200001ac 	.word	0x200001ac
 800419c:	200000a8 	.word	0x200000a8
 80041a0:	20000164 	.word	0x20000164
 80041a4:	200000a4 	.word	0x200000a4
 80041a8:	200001b8 	.word	0x200001b8

080041ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <vTaskInternalSetTimeOutState+0x24>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <vTaskInternalSetTimeOutState+0x28>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	605a      	str	r2, [r3, #4]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	200001bc 	.word	0x200001bc
 80041d4:	200001a8 	.word	0x200001a8

080041d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	613b      	str	r3, [r7, #16]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800421a:	f000 fde3 	bl	8004de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <xTaskCheckForTimeOut+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d102      	bne.n	800423e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e023      	b.n	8004286 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <xTaskCheckForTimeOut+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d007      	beq.n	800425a <xTaskCheckForTimeOut+0x82>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e015      	b.n	8004286 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	d20b      	bcs.n	800427c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff9b 	bl	80041ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e004      	b.n	8004286 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004282:	2301      	movs	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f000 fddd 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 800428a:	69fb      	ldr	r3, [r7, #28]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	200001a8 	.word	0x200001a8
 8004298:	200001bc 	.word	0x200001bc

0800429c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <vTaskMissedYield+0x14>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	200001b8 	.word	0x200001b8

080042b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042bc:	f000 f852 	bl	8004364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <prvIdleTask+0x28>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d9f9      	bls.n	80042bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <prvIdleTask+0x2c>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042d8:	e7f0      	b.n	80042bc <prvIdleTask+0x8>
 80042da:	bf00      	nop
 80042dc:	200000a8 	.word	0x200000a8
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e00c      	b.n	800430a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <prvInitialiseTaskLists+0x60>)
 80042fc:	4413      	add	r3, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fbe0 	bl	8002ac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b06      	cmp	r3, #6
 800430e:	d9ef      	bls.n	80042f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <prvInitialiseTaskLists+0x64>)
 8004312:	f7fe fbd7 	bl	8002ac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004316:	480d      	ldr	r0, [pc, #52]	; (800434c <prvInitialiseTaskLists+0x68>)
 8004318:	f7fe fbd4 	bl	8002ac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800431c:	480c      	ldr	r0, [pc, #48]	; (8004350 <prvInitialiseTaskLists+0x6c>)
 800431e:	f7fe fbd1 	bl	8002ac4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004322:	480c      	ldr	r0, [pc, #48]	; (8004354 <prvInitialiseTaskLists+0x70>)
 8004324:	f7fe fbce 	bl	8002ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004328:	480b      	ldr	r0, [pc, #44]	; (8004358 <prvInitialiseTaskLists+0x74>)
 800432a:	f7fe fbcb 	bl	8002ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <prvInitialiseTaskLists+0x78>)
 8004330:	4a05      	ldr	r2, [pc, #20]	; (8004348 <prvInitialiseTaskLists+0x64>)
 8004332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <prvInitialiseTaskLists+0x7c>)
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <prvInitialiseTaskLists+0x68>)
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200000a8 	.word	0x200000a8
 8004348:	20000134 	.word	0x20000134
 800434c:	20000148 	.word	0x20000148
 8004350:	20000164 	.word	0x20000164
 8004354:	20000178 	.word	0x20000178
 8004358:	20000190 	.word	0x20000190
 800435c:	2000015c 	.word	0x2000015c
 8004360:	20000160 	.word	0x20000160

08004364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800436a:	e019      	b.n	80043a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800436c:	f000 fd3a 	bl	8004de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <prvCheckTasksWaitingTermination+0x50>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe fc2b 	bl	8002bd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <prvCheckTasksWaitingTermination+0x54>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3b01      	subs	r3, #1
 8004388:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <prvCheckTasksWaitingTermination+0x54>)
 800438a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <prvCheckTasksWaitingTermination+0x58>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3b01      	subs	r3, #1
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <prvCheckTasksWaitingTermination+0x58>)
 8004394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004396:	f000 fd55 	bl	8004e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8e4 	bl	8004568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <prvCheckTasksWaitingTermination+0x58>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e1      	bne.n	800436c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000178 	.word	0x20000178
 80043b8:	200001a4 	.word	0x200001a4
 80043bc:	2000018c 	.word	0x2000018c

080043c0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <vTaskGetInfo+0x1a>
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <vTaskGetInfo+0xc8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	e000      	b.n	80043dc <vTaskGetInfo+0x1c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d01a      	beq.n	8004450 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <vTaskGetInfo+0xc8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	d103      	bne.n	800442c <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	731a      	strb	r2, [r3, #12]
 800442a:	e018      	b.n	800445e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d112      	bne.n	800445e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8004438:	f7ff fbe6 	bl	8003c08 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2202      	movs	r2, #2
 8004448:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800444a:	f7ff fbeb 	bl	8003c24 <xTaskResumeAll>
 800444e:	e006      	b.n	800445e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004450:	6978      	ldr	r0, [r7, #20]
 8004452:	f7ff fb2b 	bl	8003aac <eTaskGetState>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f861 	bl	8004530 <prvTaskCheckFreeStackSpace>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004476:	e002      	b.n	800447e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	841a      	strh	r2, [r3, #32]
	}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200000a4 	.word	0x200000a4

0800448c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03f      	beq.n	8004526 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	3308      	adds	r3, #8
 80044bc:	429a      	cmp	r2, r3
 80044be:	d104      	bne.n	80044ca <prvListTasksWithinSingleList+0x3e>
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3308      	adds	r3, #8
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d104      	bne.n	80044f6 <prvListTasksWithinSingleList+0x6a>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	461a      	mov	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1899      	adds	r1, r3, r2
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	2201      	movs	r2, #1
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f7ff ff54 	bl	80043c0 <vTaskGetInfo>
				uxTask++;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	429a      	cmp	r2, r3
 8004524:	d1d5      	bne.n	80044d2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004528:	4618      	mov	r0, r3
 800452a:	3728      	adds	r7, #40	; 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800453c:	e005      	b.n	800454a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3301      	adds	r3, #1
 8004542:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2ba5      	cmp	r3, #165	; 0xa5
 8004550:	d0f5      	beq.n	800453e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	b29b      	uxth	r3, r3
	}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fde3 	bl	8005140 <vPortFree>
			vPortFree( pxTCB );
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fde0 	bl	8005140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <prvResetNextTaskUnblockTime+0x38>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <prvResetNextTaskUnblockTime+0x3c>)
 800459a:	f04f 32ff 	mov.w	r2, #4294967295
 800459e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045a0:	e008      	b.n	80045b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <prvResetNextTaskUnblockTime+0x38>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <prvResetNextTaskUnblockTime+0x3c>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	2000015c 	.word	0x2000015c
 80045c4:	200001c4 	.word	0x200001c4

080045c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <xTaskGetSchedulerState+0x34>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045d6:	2301      	movs	r3, #1
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	e008      	b.n	80045ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <xTaskGetSchedulerState+0x38>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045e4:	2302      	movs	r3, #2
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e001      	b.n	80045ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ee:	687b      	ldr	r3, [r7, #4]
	}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	200001b0 	.word	0x200001b0
 8004600:	200001cc 	.word	0x200001cc

08004604 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d05e      	beq.n	80046d8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <xTaskPriorityInherit+0xe0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	429a      	cmp	r2, r3
 8004626:	d24e      	bcs.n	80046c6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	db06      	blt.n	800463e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <xTaskPriorityInherit+0xe0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f1c3 0207 	rsb	r2, r3, #7
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6959      	ldr	r1, [r3, #20]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <xTaskPriorityInherit+0xe4>)
 8004650:	4413      	add	r3, r2
 8004652:	4299      	cmp	r1, r3
 8004654:	d12f      	bne.n	80046b6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3304      	adds	r3, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fabc 	bl	8002bd8 <uxListRemove>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	2201      	movs	r2, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43da      	mvns	r2, r3
 8004672:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <xTaskPriorityInherit+0xe8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4013      	ands	r3, r2
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <xTaskPriorityInherit+0xe8>)
 800467a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <xTaskPriorityInherit+0xe0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	2201      	movs	r2, #1
 800468c:	409a      	lsls	r2, r3
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <xTaskPriorityInherit+0xe8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <xTaskPriorityInherit+0xe8>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <xTaskPriorityInherit+0xe4>)
 80046a6:	441a      	add	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7fe fa35 	bl	8002b1e <vListInsertEnd>
 80046b4:	e004      	b.n	80046c0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <xTaskPriorityInherit+0xe0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e008      	b.n	80046d8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <xTaskPriorityInherit+0xe0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d201      	bcs.n	80046d8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046d8:	68fb      	ldr	r3, [r7, #12]
	}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200000a4 	.word	0x200000a4
 80046e8:	200000a8 	.word	0x200000a8
 80046ec:	200001ac 	.word	0x200001ac

080046f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06e      	beq.n	80047e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004706:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <xTaskPriorityDisinherit+0x100>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d00a      	beq.n	8004726 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60fb      	str	r3, [r7, #12]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60bb      	str	r3, [r7, #8]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004748:	1e5a      	subs	r2, r3, #1
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004756:	429a      	cmp	r2, r3
 8004758:	d044      	beq.n	80047e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d140      	bne.n	80047e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fa36 	bl	8002bd8 <uxListRemove>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d115      	bne.n	800479e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004776:	491f      	ldr	r1, [pc, #124]	; (80047f4 <xTaskPriorityDisinherit+0x104>)
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xTaskPriorityDisinherit+0xae>
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2201      	movs	r2, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43da      	mvns	r2, r3
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <xTaskPriorityDisinherit+0x108>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4013      	ands	r3, r2
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <xTaskPriorityDisinherit+0x108>)
 800479c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	f1c3 0207 	rsb	r2, r3, #7
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	2201      	movs	r2, #1
 80047b8:	409a      	lsls	r2, r3
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <xTaskPriorityDisinherit+0x108>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	4a0d      	ldr	r2, [pc, #52]	; (80047f8 <xTaskPriorityDisinherit+0x108>)
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <xTaskPriorityDisinherit+0x104>)
 80047d2:	441a      	add	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fe f99f 	bl	8002b1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047e4:	697b      	ldr	r3, [r7, #20]
	}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200000a4 	.word	0x200000a4
 80047f4:	200000a8 	.word	0x200000a8
 80047f8:	200001ac 	.word	0x200001ac

080047fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d077      	beq.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60fb      	str	r3, [r7, #12]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d902      	bls.n	8004842 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	e002      	b.n	8004848 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004846:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	429a      	cmp	r2, r3
 8004850:	d058      	beq.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	429a      	cmp	r2, r3
 800485a:	d153      	bne.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800485c:	4b2b      	ldr	r3, [pc, #172]	; (800490c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	429a      	cmp	r2, r3
 8004864:	d10a      	bne.n	800487c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60bb      	str	r3, [r7, #8]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	db04      	blt.n	800489a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f1c3 0207 	rsb	r2, r3, #7
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	6959      	ldr	r1, [r3, #20]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80048aa:	4413      	add	r3, r2
 80048ac:	4299      	cmp	r1, r3
 80048ae:	d129      	bne.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe f98f 	bl	8002bd8 <uxListRemove>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	2201      	movs	r2, #1
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43da      	mvns	r2, r3
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4013      	ands	r3, r2
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	2201      	movs	r2, #1
 80048dc:	409a      	lsls	r2, r3
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80048f6:	441a      	add	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fe f90d 	bl	8002b1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004904:	bf00      	nop
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200000a4 	.word	0x200000a4
 8004910:	200000a8 	.word	0x200000a8
 8004914:	200001ac 	.word	0x200001ac

08004918 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fd95 	bl	8005454 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fb fc58 	bl	80001e0 <strlen>
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	e007      	b.n	8004944 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	2220      	movs	r2, #32
 800493c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b0e      	cmp	r3, #14
 8004948:	d9f4      	bls.n	8004934 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
	}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8004972:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <vTaskList+0x124>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004978:	4b43      	ldr	r3, [pc, #268]	; (8004a88 <vTaskList+0x124>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fb0f 	bl	8004fa8 <pvPortMalloc>
 800498a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d076      	beq.n	8004a80 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8004992:	2200      	movs	r2, #0
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	f7ff f9e0 	bl	8003d5c <uxTaskGetSystemState>
 800499c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e066      	b.n	8004a72 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	461a      	mov	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4413      	add	r3, r2
 80049b4:	7b1b      	ldrb	r3, [r3, #12]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d81b      	bhi.n	80049f2 <vTaskList+0x8e>
 80049ba:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <vTaskList+0x5c>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049d5 	.word	0x080049d5
 80049c4:	080049db 	.word	0x080049db
 80049c8:	080049e1 	.word	0x080049e1
 80049cc:	080049e7 	.word	0x080049e7
 80049d0:	080049ed 	.word	0x080049ed
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80049d4:	2358      	movs	r3, #88	; 0x58
 80049d6:	74fb      	strb	r3, [r7, #19]
										break;
 80049d8:	e00e      	b.n	80049f8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 80049da:	2352      	movs	r3, #82	; 0x52
 80049dc:	74fb      	strb	r3, [r7, #19]
										break;
 80049de:	e00b      	b.n	80049f8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80049e0:	2342      	movs	r3, #66	; 0x42
 80049e2:	74fb      	strb	r3, [r7, #19]
										break;
 80049e4:	e008      	b.n	80049f8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80049e6:	2353      	movs	r3, #83	; 0x53
 80049e8:	74fb      	strb	r3, [r7, #19]
										break;
 80049ea:	e005      	b.n	80049f8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80049ec:	2344      	movs	r3, #68	; 0x44
 80049ee:	74fb      	strb	r3, [r7, #19]
										break;
 80049f0:	e002      	b.n	80049f8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80049f2:	2300      	movs	r3, #0
 80049f4:	74fb      	strb	r3, [r7, #19]
										break;
 80049f6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4413      	add	r3, r2
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff83 	bl	8004918 <prvWriteNameToBuffer>
 8004a12:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004a14:	7cf9      	ldrb	r1, [r7, #19]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	461a      	mov	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4413      	add	r3, r2
 8004a26:	6918      	ldr	r0, [r3, #16]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4413      	add	r3, r2
 8004a38:	8c1b      	ldrh	r3, [r3, #32]
 8004a3a:	461c      	mov	r4, r3
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	9400      	str	r4, [sp, #0]
 8004a52:	4603      	mov	r3, r0
 8004a54:	460a      	mov	r2, r1
 8004a56:	490d      	ldr	r1, [pc, #52]	; (8004a8c <vTaskList+0x128>)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fcdb 	bl	8005414 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fb fbbe 	bl	80001e0 <strlen>
 8004a64:	4602      	mov	r2, r0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d394      	bcc.n	80049a4 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f000 fb60 	bl	8005140 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd90      	pop	{r4, r7, pc}
 8004a88:	200001a4 	.word	0x200001a4
 8004a8c:	0800607c 	.word	0x0800607c

08004a90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aa2:	3201      	adds	r2, #1
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004aa6:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	200000a4 	.word	0x200000a4

08004ab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac8:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe f882 	bl	8002bd8 <uxListRemove>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4013      	ands	r3, r2
 8004aee:	4a20      	ldr	r2, [pc, #128]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004af0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d10a      	bne.n	8004b10 <prvAddCurrentTaskToDelayedList+0x58>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4619      	mov	r1, r3
 8004b08:	481a      	ldr	r0, [pc, #104]	; (8004b74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b0a:	f7fe f808 	bl	8002b1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b0e:	e026      	b.n	8004b5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d209      	bcs.n	8004b3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7fe f816 	bl	8002b66 <vListInsert>
}
 8004b3a:	e010      	b.n	8004b5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fe f80c 	bl	8002b66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d202      	bcs.n	8004b5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b58:	4a09      	ldr	r2, [pc, #36]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6013      	str	r3, [r2, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200001a8 	.word	0x200001a8
 8004b6c:	200000a4 	.word	0x200000a4
 8004b70:	200001ac 	.word	0x200001ac
 8004b74:	20000190 	.word	0x20000190
 8004b78:	20000160 	.word	0x20000160
 8004b7c:	2000015c 	.word	0x2000015c
 8004b80:	200001c4 	.word	0x200001c4

08004b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b04      	subs	r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <pxPortInitialiseStack+0x64>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b14      	subs	r3, #20
 8004bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f06f 0202 	mvn.w	r2, #2
 8004bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b20      	subs	r3, #32
 8004bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	08004bed 	.word	0x08004bed

08004bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <prvTaskExitError+0x54>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d00a      	beq.n	8004c16 <prvTaskExitError+0x2a>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <prvTaskExitError+0x28>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60bb      	str	r3, [r7, #8]
}
 8004c28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c2a:	bf00      	nop
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0fc      	beq.n	8004c2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	2000000c 	.word	0x2000000c
	...

08004c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <pxCurrentTCBConst2>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f380 8809 	msr	PSP, r0
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	4770      	bx	lr
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst2>:
 8004c70:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <prvPortStartFirstTask+0x24>)
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f380 8808 	msr	MSP, r0
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8814 	msr	CONTROL, r0
 8004c8a:	b662      	cpsie	i
 8004c8c:	b661      	cpsie	f
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	df00      	svc	0
 8004c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed08 	.word	0xe000ed08

08004ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a46      	ldr	r2, [pc, #280]	; (8004dc4 <xPortStartScheduler+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10a      	bne.n	8004cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <xPortStartScheduler+0x128>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10a      	bne.n	8004ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d14:	e009      	b.n	8004d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d0ef      	beq.n	8004d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1c3 0307 	rsb	r3, r3, #7
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d00a      	beq.n	8004d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d8e:	f000 f8dd 	bl	8004f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <xPortStartScheduler+0x13c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d98:	f000 f8fc 	bl	8004f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <xPortStartScheduler+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <xPortStartScheduler+0x140>)
 8004da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004da8:	f7ff ff66 	bl	8004c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dac:	f7ff f91c 	bl	8003fe8 <vTaskSwitchContext>
	prvTaskExitError();
 8004db0:	f7ff ff1c 	bl	8004bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00
 8004dc4:	410fc271 	.word	0x410fc271
 8004dc8:	410fc270 	.word	0x410fc270
 8004dcc:	e000e400 	.word	0xe000e400
 8004dd0:	200001d0 	.word	0x200001d0
 8004dd4:	200001d4 	.word	0x200001d4
 8004dd8:	e000ed20 	.word	0xe000ed20
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	e000ef34 	.word	0xe000ef34

08004de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
}
 8004dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10f      	bne.n	8004e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortEnterCritical+0x5c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	603b      	str	r3, [r7, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <vPortEnterCritical+0x4a>
	}
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	2000000c 	.word	0x2000000c
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <vPortExitCritical+0x50>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vPortExitCritical+0x24>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <vPortExitCritical+0x50>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <vPortExitCritical+0x50>)
 8004e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <vPortExitCritical+0x50>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <vPortExitCritical+0x42>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000000c 	.word	0x2000000c
	...

08004ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ea0:	f3ef 8009 	mrs	r0, PSP
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <pxCurrentTCBConst>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	f01e 0f10 	tst.w	lr, #16
 8004eb0:	bf08      	it	eq
 8004eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	6010      	str	r0, [r2, #0]
 8004ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ec4:	f380 8811 	msr	BASEPRI, r0
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f7ff f88a 	bl	8003fe8 <vTaskSwitchContext>
 8004ed4:	f04f 0000 	mov.w	r0, #0
 8004ed8:	f380 8811 	msr	BASEPRI, r0
 8004edc:	bc09      	pop	{r0, r3}
 8004ede:	6819      	ldr	r1, [r3, #0]
 8004ee0:	6808      	ldr	r0, [r1, #0]
 8004ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee6:	f01e 0f10 	tst.w	lr, #16
 8004eea:	bf08      	it	eq
 8004eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ef0:	f380 8809 	msr	PSP, r0
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst>:
 8004f00:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	607b      	str	r3, [r7, #4]
}
 8004f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f22:	f7fe ffa9 	bl	8003e78 <xTaskIncrementTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SysTick_Handler+0x40>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <vPortSetupTimerInterrupt+0x38>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortSetupTimerInterrupt+0x3c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <vPortSetupTimerInterrupt+0x40>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <vPortSetupTimerInterrupt+0x44>)
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010
 8004f84:	e000e018 	.word	0xe000e018
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	10624dd3 	.word	0x10624dd3
 8004f90:	e000e014 	.word	0xe000e014

08004f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fa4 <vPortEnableVFP+0x10>
 8004f98:	6801      	ldr	r1, [r0, #0]
 8004f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f9e:	6001      	str	r1, [r0, #0]
 8004fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed88 	.word	0xe000ed88

08004fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fb4:	f7fe fe28 	bl	8003c08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fb8:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <pvPortMalloc+0x180>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fc0:	f000 f92c 	bl	800521c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fc4:	4b59      	ldr	r3, [pc, #356]	; (800512c <pvPortMalloc+0x184>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 8093 	bne.w	80050f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01d      	beq.n	8005014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fd8:	2208      	movs	r2, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d014      	beq.n	8005014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <pvPortMalloc+0x6c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	617b      	str	r3, [r7, #20]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d06e      	beq.n	80050f8 <pvPortMalloc+0x150>
 800501a:	4b45      	ldr	r3, [pc, #276]	; (8005130 <pvPortMalloc+0x188>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d869      	bhi.n	80050f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <pvPortMalloc+0x18c>)
 8005026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <pvPortMalloc+0x18c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502e:	e004      	b.n	800503a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <pvPortMalloc+0xa4>
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <pvPortMalloc+0x180>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	429a      	cmp	r2, r3
 8005054:	d050      	beq.n	80050f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2208      	movs	r2, #8
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	2308      	movs	r3, #8
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	429a      	cmp	r2, r3
 8005076:	d91f      	bls.n	80050b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <pvPortMalloc+0xf8>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	613b      	str	r3, [r7, #16]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050b2:	69b8      	ldr	r0, [r7, #24]
 80050b4:	f000 f914 	bl	80052e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <pvPortMalloc+0x188>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <pvPortMalloc+0x188>)
 80050c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <pvPortMalloc+0x188>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <pvPortMalloc+0x190>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d203      	bcs.n	80050da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050d2:	4b17      	ldr	r3, [pc, #92]	; (8005130 <pvPortMalloc+0x188>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <pvPortMalloc+0x190>)
 80050d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <pvPortMalloc+0x184>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <pvPortMalloc+0x194>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <pvPortMalloc+0x194>)
 80050f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050f8:	f7fe fd94 	bl	8003c24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <pvPortMalloc+0x174>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60fb      	str	r3, [r7, #12]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <pvPortMalloc+0x172>
	return pvReturn;
 800511c:	69fb      	ldr	r3, [r7, #28]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2000dde0 	.word	0x2000dde0
 800512c:	2000ddf4 	.word	0x2000ddf4
 8005130:	2000dde4 	.word	0x2000dde4
 8005134:	2000ddd8 	.word	0x2000ddd8
 8005138:	2000dde8 	.word	0x2000dde8
 800513c:	2000ddec 	.word	0x2000ddec

08005140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04d      	beq.n	80051ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005152:	2308      	movs	r3, #8
 8005154:	425b      	negs	r3, r3
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <vPortFree+0xb8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <vPortFree+0x44>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <vPortFree+0x62>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60bb      	str	r3, [r7, #8]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <vPortFree+0xb8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01e      	beq.n	80051ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11a      	bne.n	80051ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <vPortFree+0xb8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051c8:	f7fe fd1e 	bl	8003c08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <vPortFree+0xbc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <vPortFree+0xbc>)
 80051d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f000 f880 	bl	80052e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <vPortFree+0xc0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	4a06      	ldr	r2, [pc, #24]	; (8005200 <vPortFree+0xc0>)
 80051e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051ea:	f7fe fd1b 	bl	8003c24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	2000ddf4 	.word	0x2000ddf4
 80051fc:	2000dde4 	.word	0x2000dde4
 8005200:	2000ddf0 	.word	0x2000ddf0

08005204 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	2000dde8 	.word	0x2000dde8

0800521c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005222:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8005226:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005228:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <prvHeapInit+0xac>)
 800522a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3307      	adds	r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0307 	bic.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <prvHeapInit+0xac>)
 800524c:	4413      	add	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005254:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <prvHeapInit+0xb0>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <prvHeapInit+0xb0>)
 800525c:	2200      	movs	r2, #0
 800525e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005268:	2208      	movs	r2, #8
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <prvHeapInit+0xb4>)
 800527c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <prvHeapInit+0xb4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <prvHeapInit+0xb4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <prvHeapInit+0xb4>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <prvHeapInit+0xb8>)
 80052aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <prvHeapInit+0xbc>)
 80052b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <prvHeapInit+0xc0>)
 80052b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052ba:	601a      	str	r2, [r3, #0]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	200001d8 	.word	0x200001d8
 80052cc:	2000ddd8 	.word	0x2000ddd8
 80052d0:	2000dde0 	.word	0x2000dde0
 80052d4:	2000dde8 	.word	0x2000dde8
 80052d8:	2000dde4 	.word	0x2000dde4
 80052dc:	2000ddf4 	.word	0x2000ddf4

080052e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052e8:	4b28      	ldr	r3, [pc, #160]	; (800538c <prvInsertBlockIntoFreeList+0xac>)
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e002      	b.n	80052f4 <prvInsertBlockIntoFreeList+0x14>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d8f7      	bhi.n	80052ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	4413      	add	r3, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d108      	bne.n	8005322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	441a      	add	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d118      	bne.n	8005368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <prvInsertBlockIntoFreeList+0xb0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d00d      	beq.n	800535e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e008      	b.n	8005370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <prvInsertBlockIntoFreeList+0xb0>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e003      	b.n	8005370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d002      	beq.n	800537e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	2000ddd8 	.word	0x2000ddd8
 8005390:	2000dde0 	.word	0x2000dde0

08005394 <__errno>:
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <__errno+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000010 	.word	0x20000010

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	; (80053e4 <__libc_init_array+0x44>)
 80053b4:	f000 fc56 	bl	8005c64 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	080060e0 	.word	0x080060e0
 80053dc:	080060e0 	.word	0x080060e0
 80053e0:	080060e0 	.word	0x080060e0
 80053e4:	080060e4 	.word	0x080060e4

080053e8 <memcpy>:
 80053e8:	440a      	add	r2, r1
 80053ea:	4291      	cmp	r1, r2
 80053ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f0:	d100      	bne.n	80053f4 <memcpy+0xc>
 80053f2:	4770      	bx	lr
 80053f4:	b510      	push	{r4, lr}
 80053f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fe:	4291      	cmp	r1, r2
 8005400:	d1f9      	bne.n	80053f6 <memcpy+0xe>
 8005402:	bd10      	pop	{r4, pc}

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <siprintf>:
 8005414:	b40e      	push	{r1, r2, r3}
 8005416:	b500      	push	{lr}
 8005418:	b09c      	sub	sp, #112	; 0x70
 800541a:	ab1d      	add	r3, sp, #116	; 0x74
 800541c:	9002      	str	r0, [sp, #8]
 800541e:	9006      	str	r0, [sp, #24]
 8005420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005424:	4809      	ldr	r0, [pc, #36]	; (800544c <siprintf+0x38>)
 8005426:	9107      	str	r1, [sp, #28]
 8005428:	9104      	str	r1, [sp, #16]
 800542a:	4909      	ldr	r1, [pc, #36]	; (8005450 <siprintf+0x3c>)
 800542c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005430:	9105      	str	r1, [sp, #20]
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	a902      	add	r1, sp, #8
 8005438:	f000 f870 	bl	800551c <_svfiprintf_r>
 800543c:	9b02      	ldr	r3, [sp, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	b01c      	add	sp, #112	; 0x70
 8005444:	f85d eb04 	ldr.w	lr, [sp], #4
 8005448:	b003      	add	sp, #12
 800544a:	4770      	bx	lr
 800544c:	20000010 	.word	0x20000010
 8005450:	ffff0208 	.word	0xffff0208

08005454 <strcpy>:
 8005454:	4603      	mov	r3, r0
 8005456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545a:	f803 2b01 	strb.w	r2, [r3], #1
 800545e:	2a00      	cmp	r2, #0
 8005460:	d1f9      	bne.n	8005456 <strcpy+0x2>
 8005462:	4770      	bx	lr

08005464 <__ssputs_r>:
 8005464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	688e      	ldr	r6, [r1, #8]
 800546a:	429e      	cmp	r6, r3
 800546c:	4682      	mov	sl, r0
 800546e:	460c      	mov	r4, r1
 8005470:	4690      	mov	r8, r2
 8005472:	461f      	mov	r7, r3
 8005474:	d838      	bhi.n	80054e8 <__ssputs_r+0x84>
 8005476:	898a      	ldrh	r2, [r1, #12]
 8005478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800547c:	d032      	beq.n	80054e4 <__ssputs_r+0x80>
 800547e:	6825      	ldr	r5, [r4, #0]
 8005480:	6909      	ldr	r1, [r1, #16]
 8005482:	eba5 0901 	sub.w	r9, r5, r1
 8005486:	6965      	ldr	r5, [r4, #20]
 8005488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800548c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005490:	3301      	adds	r3, #1
 8005492:	444b      	add	r3, r9
 8005494:	106d      	asrs	r5, r5, #1
 8005496:	429d      	cmp	r5, r3
 8005498:	bf38      	it	cc
 800549a:	461d      	movcc	r5, r3
 800549c:	0553      	lsls	r3, r2, #21
 800549e:	d531      	bpl.n	8005504 <__ssputs_r+0xa0>
 80054a0:	4629      	mov	r1, r5
 80054a2:	f000 fb39 	bl	8005b18 <_malloc_r>
 80054a6:	4606      	mov	r6, r0
 80054a8:	b950      	cbnz	r0, 80054c0 <__ssputs_r+0x5c>
 80054aa:	230c      	movs	r3, #12
 80054ac:	f8ca 3000 	str.w	r3, [sl]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c0:	6921      	ldr	r1, [r4, #16]
 80054c2:	464a      	mov	r2, r9
 80054c4:	f7ff ff90 	bl	80053e8 <memcpy>
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	6126      	str	r6, [r4, #16]
 80054d6:	6165      	str	r5, [r4, #20]
 80054d8:	444e      	add	r6, r9
 80054da:	eba5 0509 	sub.w	r5, r5, r9
 80054de:	6026      	str	r6, [r4, #0]
 80054e0:	60a5      	str	r5, [r4, #8]
 80054e2:	463e      	mov	r6, r7
 80054e4:	42be      	cmp	r6, r7
 80054e6:	d900      	bls.n	80054ea <__ssputs_r+0x86>
 80054e8:	463e      	mov	r6, r7
 80054ea:	4632      	mov	r2, r6
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	4641      	mov	r1, r8
 80054f0:	f000 faa8 	bl	8005a44 <memmove>
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	1b9b      	subs	r3, r3, r6
 80054fa:	4432      	add	r2, r6
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	2000      	movs	r0, #0
 8005502:	e7db      	b.n	80054bc <__ssputs_r+0x58>
 8005504:	462a      	mov	r2, r5
 8005506:	f000 fb61 	bl	8005bcc <_realloc_r>
 800550a:	4606      	mov	r6, r0
 800550c:	2800      	cmp	r0, #0
 800550e:	d1e1      	bne.n	80054d4 <__ssputs_r+0x70>
 8005510:	6921      	ldr	r1, [r4, #16]
 8005512:	4650      	mov	r0, sl
 8005514:	f000 fab0 	bl	8005a78 <_free_r>
 8005518:	e7c7      	b.n	80054aa <__ssputs_r+0x46>
	...

0800551c <_svfiprintf_r>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	4698      	mov	r8, r3
 8005522:	898b      	ldrh	r3, [r1, #12]
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	b09d      	sub	sp, #116	; 0x74
 8005528:	4607      	mov	r7, r0
 800552a:	460d      	mov	r5, r1
 800552c:	4614      	mov	r4, r2
 800552e:	d50e      	bpl.n	800554e <_svfiprintf_r+0x32>
 8005530:	690b      	ldr	r3, [r1, #16]
 8005532:	b963      	cbnz	r3, 800554e <_svfiprintf_r+0x32>
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	f000 faef 	bl	8005b18 <_malloc_r>
 800553a:	6028      	str	r0, [r5, #0]
 800553c:	6128      	str	r0, [r5, #16]
 800553e:	b920      	cbnz	r0, 800554a <_svfiprintf_r+0x2e>
 8005540:	230c      	movs	r3, #12
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e0d1      	b.n	80056ee <_svfiprintf_r+0x1d2>
 800554a:	2340      	movs	r3, #64	; 0x40
 800554c:	616b      	str	r3, [r5, #20]
 800554e:	2300      	movs	r3, #0
 8005550:	9309      	str	r3, [sp, #36]	; 0x24
 8005552:	2320      	movs	r3, #32
 8005554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005558:	f8cd 800c 	str.w	r8, [sp, #12]
 800555c:	2330      	movs	r3, #48	; 0x30
 800555e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005708 <_svfiprintf_r+0x1ec>
 8005562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005566:	f04f 0901 	mov.w	r9, #1
 800556a:	4623      	mov	r3, r4
 800556c:	469a      	mov	sl, r3
 800556e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005572:	b10a      	cbz	r2, 8005578 <_svfiprintf_r+0x5c>
 8005574:	2a25      	cmp	r2, #37	; 0x25
 8005576:	d1f9      	bne.n	800556c <_svfiprintf_r+0x50>
 8005578:	ebba 0b04 	subs.w	fp, sl, r4
 800557c:	d00b      	beq.n	8005596 <_svfiprintf_r+0x7a>
 800557e:	465b      	mov	r3, fp
 8005580:	4622      	mov	r2, r4
 8005582:	4629      	mov	r1, r5
 8005584:	4638      	mov	r0, r7
 8005586:	f7ff ff6d 	bl	8005464 <__ssputs_r>
 800558a:	3001      	adds	r0, #1
 800558c:	f000 80aa 	beq.w	80056e4 <_svfiprintf_r+0x1c8>
 8005590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005592:	445a      	add	r2, fp
 8005594:	9209      	str	r2, [sp, #36]	; 0x24
 8005596:	f89a 3000 	ldrb.w	r3, [sl]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80a2 	beq.w	80056e4 <_svfiprintf_r+0x1c8>
 80055a0:	2300      	movs	r3, #0
 80055a2:	f04f 32ff 	mov.w	r2, #4294967295
 80055a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055aa:	f10a 0a01 	add.w	sl, sl, #1
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	9307      	str	r3, [sp, #28]
 80055b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055b6:	931a      	str	r3, [sp, #104]	; 0x68
 80055b8:	4654      	mov	r4, sl
 80055ba:	2205      	movs	r2, #5
 80055bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c0:	4851      	ldr	r0, [pc, #324]	; (8005708 <_svfiprintf_r+0x1ec>)
 80055c2:	f7fa fe15 	bl	80001f0 <memchr>
 80055c6:	9a04      	ldr	r2, [sp, #16]
 80055c8:	b9d8      	cbnz	r0, 8005602 <_svfiprintf_r+0xe6>
 80055ca:	06d0      	lsls	r0, r2, #27
 80055cc:	bf44      	itt	mi
 80055ce:	2320      	movmi	r3, #32
 80055d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055d4:	0711      	lsls	r1, r2, #28
 80055d6:	bf44      	itt	mi
 80055d8:	232b      	movmi	r3, #43	; 0x2b
 80055da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055de:	f89a 3000 	ldrb.w	r3, [sl]
 80055e2:	2b2a      	cmp	r3, #42	; 0x2a
 80055e4:	d015      	beq.n	8005612 <_svfiprintf_r+0xf6>
 80055e6:	9a07      	ldr	r2, [sp, #28]
 80055e8:	4654      	mov	r4, sl
 80055ea:	2000      	movs	r0, #0
 80055ec:	f04f 0c0a 	mov.w	ip, #10
 80055f0:	4621      	mov	r1, r4
 80055f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055f6:	3b30      	subs	r3, #48	; 0x30
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d94e      	bls.n	800569a <_svfiprintf_r+0x17e>
 80055fc:	b1b0      	cbz	r0, 800562c <_svfiprintf_r+0x110>
 80055fe:	9207      	str	r2, [sp, #28]
 8005600:	e014      	b.n	800562c <_svfiprintf_r+0x110>
 8005602:	eba0 0308 	sub.w	r3, r0, r8
 8005606:	fa09 f303 	lsl.w	r3, r9, r3
 800560a:	4313      	orrs	r3, r2
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	46a2      	mov	sl, r4
 8005610:	e7d2      	b.n	80055b8 <_svfiprintf_r+0x9c>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	1d19      	adds	r1, r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	9103      	str	r1, [sp, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfbb      	ittet	lt
 800561e:	425b      	neglt	r3, r3
 8005620:	f042 0202 	orrlt.w	r2, r2, #2
 8005624:	9307      	strge	r3, [sp, #28]
 8005626:	9307      	strlt	r3, [sp, #28]
 8005628:	bfb8      	it	lt
 800562a:	9204      	strlt	r2, [sp, #16]
 800562c:	7823      	ldrb	r3, [r4, #0]
 800562e:	2b2e      	cmp	r3, #46	; 0x2e
 8005630:	d10c      	bne.n	800564c <_svfiprintf_r+0x130>
 8005632:	7863      	ldrb	r3, [r4, #1]
 8005634:	2b2a      	cmp	r3, #42	; 0x2a
 8005636:	d135      	bne.n	80056a4 <_svfiprintf_r+0x188>
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	1d1a      	adds	r2, r3, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	9203      	str	r2, [sp, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	bfb8      	it	lt
 8005644:	f04f 33ff 	movlt.w	r3, #4294967295
 8005648:	3402      	adds	r4, #2
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005718 <_svfiprintf_r+0x1fc>
 8005650:	7821      	ldrb	r1, [r4, #0]
 8005652:	2203      	movs	r2, #3
 8005654:	4650      	mov	r0, sl
 8005656:	f7fa fdcb 	bl	80001f0 <memchr>
 800565a:	b140      	cbz	r0, 800566e <_svfiprintf_r+0x152>
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	eba0 000a 	sub.w	r0, r0, sl
 8005662:	fa03 f000 	lsl.w	r0, r3, r0
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	4303      	orrs	r3, r0
 800566a:	3401      	adds	r4, #1
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005672:	4826      	ldr	r0, [pc, #152]	; (800570c <_svfiprintf_r+0x1f0>)
 8005674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005678:	2206      	movs	r2, #6
 800567a:	f7fa fdb9 	bl	80001f0 <memchr>
 800567e:	2800      	cmp	r0, #0
 8005680:	d038      	beq.n	80056f4 <_svfiprintf_r+0x1d8>
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <_svfiprintf_r+0x1f4>)
 8005684:	bb1b      	cbnz	r3, 80056ce <_svfiprintf_r+0x1b2>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	3307      	adds	r3, #7
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	3308      	adds	r3, #8
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005694:	4433      	add	r3, r6
 8005696:	9309      	str	r3, [sp, #36]	; 0x24
 8005698:	e767      	b.n	800556a <_svfiprintf_r+0x4e>
 800569a:	fb0c 3202 	mla	r2, ip, r2, r3
 800569e:	460c      	mov	r4, r1
 80056a0:	2001      	movs	r0, #1
 80056a2:	e7a5      	b.n	80055f0 <_svfiprintf_r+0xd4>
 80056a4:	2300      	movs	r3, #0
 80056a6:	3401      	adds	r4, #1
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	4619      	mov	r1, r3
 80056ac:	f04f 0c0a 	mov.w	ip, #10
 80056b0:	4620      	mov	r0, r4
 80056b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056b6:	3a30      	subs	r2, #48	; 0x30
 80056b8:	2a09      	cmp	r2, #9
 80056ba:	d903      	bls.n	80056c4 <_svfiprintf_r+0x1a8>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0c5      	beq.n	800564c <_svfiprintf_r+0x130>
 80056c0:	9105      	str	r1, [sp, #20]
 80056c2:	e7c3      	b.n	800564c <_svfiprintf_r+0x130>
 80056c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056c8:	4604      	mov	r4, r0
 80056ca:	2301      	movs	r3, #1
 80056cc:	e7f0      	b.n	80056b0 <_svfiprintf_r+0x194>
 80056ce:	ab03      	add	r3, sp, #12
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	462a      	mov	r2, r5
 80056d4:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <_svfiprintf_r+0x1f8>)
 80056d6:	a904      	add	r1, sp, #16
 80056d8:	4638      	mov	r0, r7
 80056da:	f3af 8000 	nop.w
 80056de:	1c42      	adds	r2, r0, #1
 80056e0:	4606      	mov	r6, r0
 80056e2:	d1d6      	bne.n	8005692 <_svfiprintf_r+0x176>
 80056e4:	89ab      	ldrh	r3, [r5, #12]
 80056e6:	065b      	lsls	r3, r3, #25
 80056e8:	f53f af2c 	bmi.w	8005544 <_svfiprintf_r+0x28>
 80056ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ee:	b01d      	add	sp, #116	; 0x74
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	ab03      	add	r3, sp, #12
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	462a      	mov	r2, r5
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <_svfiprintf_r+0x1f8>)
 80056fc:	a904      	add	r1, sp, #16
 80056fe:	4638      	mov	r0, r7
 8005700:	f000 f87a 	bl	80057f8 <_printf_i>
 8005704:	e7eb      	b.n	80056de <_svfiprintf_r+0x1c2>
 8005706:	bf00      	nop
 8005708:	080060a4 	.word	0x080060a4
 800570c:	080060ae 	.word	0x080060ae
 8005710:	00000000 	.word	0x00000000
 8005714:	08005465 	.word	0x08005465
 8005718:	080060aa 	.word	0x080060aa

0800571c <_printf_common>:
 800571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	4616      	mov	r6, r2
 8005722:	4699      	mov	r9, r3
 8005724:	688a      	ldr	r2, [r1, #8]
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800572c:	4293      	cmp	r3, r2
 800572e:	bfb8      	it	lt
 8005730:	4613      	movlt	r3, r2
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005738:	4607      	mov	r7, r0
 800573a:	460c      	mov	r4, r1
 800573c:	b10a      	cbz	r2, 8005742 <_printf_common+0x26>
 800573e:	3301      	adds	r3, #1
 8005740:	6033      	str	r3, [r6, #0]
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	0699      	lsls	r1, r3, #26
 8005746:	bf42      	ittt	mi
 8005748:	6833      	ldrmi	r3, [r6, #0]
 800574a:	3302      	addmi	r3, #2
 800574c:	6033      	strmi	r3, [r6, #0]
 800574e:	6825      	ldr	r5, [r4, #0]
 8005750:	f015 0506 	ands.w	r5, r5, #6
 8005754:	d106      	bne.n	8005764 <_printf_common+0x48>
 8005756:	f104 0a19 	add.w	sl, r4, #25
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	6832      	ldr	r2, [r6, #0]
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	42ab      	cmp	r3, r5
 8005762:	dc26      	bgt.n	80057b2 <_printf_common+0x96>
 8005764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005768:	1e13      	subs	r3, r2, #0
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	bf18      	it	ne
 800576e:	2301      	movne	r3, #1
 8005770:	0692      	lsls	r2, r2, #26
 8005772:	d42b      	bmi.n	80057cc <_printf_common+0xb0>
 8005774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005778:	4649      	mov	r1, r9
 800577a:	4638      	mov	r0, r7
 800577c:	47c0      	blx	r8
 800577e:	3001      	adds	r0, #1
 8005780:	d01e      	beq.n	80057c0 <_printf_common+0xa4>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	68e5      	ldr	r5, [r4, #12]
 8005786:	6832      	ldr	r2, [r6, #0]
 8005788:	f003 0306 	and.w	r3, r3, #6
 800578c:	2b04      	cmp	r3, #4
 800578e:	bf08      	it	eq
 8005790:	1aad      	subeq	r5, r5, r2
 8005792:	68a3      	ldr	r3, [r4, #8]
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	bf0c      	ite	eq
 8005798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800579c:	2500      	movne	r5, #0
 800579e:	4293      	cmp	r3, r2
 80057a0:	bfc4      	itt	gt
 80057a2:	1a9b      	subgt	r3, r3, r2
 80057a4:	18ed      	addgt	r5, r5, r3
 80057a6:	2600      	movs	r6, #0
 80057a8:	341a      	adds	r4, #26
 80057aa:	42b5      	cmp	r5, r6
 80057ac:	d11a      	bne.n	80057e4 <_printf_common+0xc8>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e008      	b.n	80057c4 <_printf_common+0xa8>
 80057b2:	2301      	movs	r3, #1
 80057b4:	4652      	mov	r2, sl
 80057b6:	4649      	mov	r1, r9
 80057b8:	4638      	mov	r0, r7
 80057ba:	47c0      	blx	r8
 80057bc:	3001      	adds	r0, #1
 80057be:	d103      	bne.n	80057c8 <_printf_common+0xac>
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	3501      	adds	r5, #1
 80057ca:	e7c6      	b.n	800575a <_printf_common+0x3e>
 80057cc:	18e1      	adds	r1, r4, r3
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	2030      	movs	r0, #48	; 0x30
 80057d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d6:	4422      	add	r2, r4
 80057d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e0:	3302      	adds	r3, #2
 80057e2:	e7c7      	b.n	8005774 <_printf_common+0x58>
 80057e4:	2301      	movs	r3, #1
 80057e6:	4622      	mov	r2, r4
 80057e8:	4649      	mov	r1, r9
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d0e6      	beq.n	80057c0 <_printf_common+0xa4>
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7d9      	b.n	80057aa <_printf_common+0x8e>
	...

080057f8 <_printf_i>:
 80057f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	460c      	mov	r4, r1
 80057fe:	4691      	mov	r9, r2
 8005800:	7e27      	ldrb	r7, [r4, #24]
 8005802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005804:	2f78      	cmp	r7, #120	; 0x78
 8005806:	4680      	mov	r8, r0
 8005808:	469a      	mov	sl, r3
 800580a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800580e:	d807      	bhi.n	8005820 <_printf_i+0x28>
 8005810:	2f62      	cmp	r7, #98	; 0x62
 8005812:	d80a      	bhi.n	800582a <_printf_i+0x32>
 8005814:	2f00      	cmp	r7, #0
 8005816:	f000 80d8 	beq.w	80059ca <_printf_i+0x1d2>
 800581a:	2f58      	cmp	r7, #88	; 0x58
 800581c:	f000 80a3 	beq.w	8005966 <_printf_i+0x16e>
 8005820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005828:	e03a      	b.n	80058a0 <_printf_i+0xa8>
 800582a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800582e:	2b15      	cmp	r3, #21
 8005830:	d8f6      	bhi.n	8005820 <_printf_i+0x28>
 8005832:	a001      	add	r0, pc, #4	; (adr r0, 8005838 <_printf_i+0x40>)
 8005834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005838:	08005891 	.word	0x08005891
 800583c:	080058a5 	.word	0x080058a5
 8005840:	08005821 	.word	0x08005821
 8005844:	08005821 	.word	0x08005821
 8005848:	08005821 	.word	0x08005821
 800584c:	08005821 	.word	0x08005821
 8005850:	080058a5 	.word	0x080058a5
 8005854:	08005821 	.word	0x08005821
 8005858:	08005821 	.word	0x08005821
 800585c:	08005821 	.word	0x08005821
 8005860:	08005821 	.word	0x08005821
 8005864:	080059b1 	.word	0x080059b1
 8005868:	080058d5 	.word	0x080058d5
 800586c:	08005993 	.word	0x08005993
 8005870:	08005821 	.word	0x08005821
 8005874:	08005821 	.word	0x08005821
 8005878:	080059d3 	.word	0x080059d3
 800587c:	08005821 	.word	0x08005821
 8005880:	080058d5 	.word	0x080058d5
 8005884:	08005821 	.word	0x08005821
 8005888:	08005821 	.word	0x08005821
 800588c:	0800599b 	.word	0x0800599b
 8005890:	680b      	ldr	r3, [r1, #0]
 8005892:	1d1a      	adds	r2, r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	600a      	str	r2, [r1, #0]
 8005898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800589c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0a3      	b.n	80059ec <_printf_i+0x1f4>
 80058a4:	6825      	ldr	r5, [r4, #0]
 80058a6:	6808      	ldr	r0, [r1, #0]
 80058a8:	062e      	lsls	r6, r5, #24
 80058aa:	f100 0304 	add.w	r3, r0, #4
 80058ae:	d50a      	bpl.n	80058c6 <_printf_i+0xce>
 80058b0:	6805      	ldr	r5, [r0, #0]
 80058b2:	600b      	str	r3, [r1, #0]
 80058b4:	2d00      	cmp	r5, #0
 80058b6:	da03      	bge.n	80058c0 <_printf_i+0xc8>
 80058b8:	232d      	movs	r3, #45	; 0x2d
 80058ba:	426d      	negs	r5, r5
 80058bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c0:	485e      	ldr	r0, [pc, #376]	; (8005a3c <_printf_i+0x244>)
 80058c2:	230a      	movs	r3, #10
 80058c4:	e019      	b.n	80058fa <_printf_i+0x102>
 80058c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058ca:	6805      	ldr	r5, [r0, #0]
 80058cc:	600b      	str	r3, [r1, #0]
 80058ce:	bf18      	it	ne
 80058d0:	b22d      	sxthne	r5, r5
 80058d2:	e7ef      	b.n	80058b4 <_printf_i+0xbc>
 80058d4:	680b      	ldr	r3, [r1, #0]
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	1d18      	adds	r0, r3, #4
 80058da:	6008      	str	r0, [r1, #0]
 80058dc:	0628      	lsls	r0, r5, #24
 80058de:	d501      	bpl.n	80058e4 <_printf_i+0xec>
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	e002      	b.n	80058ea <_printf_i+0xf2>
 80058e4:	0669      	lsls	r1, r5, #25
 80058e6:	d5fb      	bpl.n	80058e0 <_printf_i+0xe8>
 80058e8:	881d      	ldrh	r5, [r3, #0]
 80058ea:	4854      	ldr	r0, [pc, #336]	; (8005a3c <_printf_i+0x244>)
 80058ec:	2f6f      	cmp	r7, #111	; 0x6f
 80058ee:	bf0c      	ite	eq
 80058f0:	2308      	moveq	r3, #8
 80058f2:	230a      	movne	r3, #10
 80058f4:	2100      	movs	r1, #0
 80058f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058fa:	6866      	ldr	r6, [r4, #4]
 80058fc:	60a6      	str	r6, [r4, #8]
 80058fe:	2e00      	cmp	r6, #0
 8005900:	bfa2      	ittt	ge
 8005902:	6821      	ldrge	r1, [r4, #0]
 8005904:	f021 0104 	bicge.w	r1, r1, #4
 8005908:	6021      	strge	r1, [r4, #0]
 800590a:	b90d      	cbnz	r5, 8005910 <_printf_i+0x118>
 800590c:	2e00      	cmp	r6, #0
 800590e:	d04d      	beq.n	80059ac <_printf_i+0x1b4>
 8005910:	4616      	mov	r6, r2
 8005912:	fbb5 f1f3 	udiv	r1, r5, r3
 8005916:	fb03 5711 	mls	r7, r3, r1, r5
 800591a:	5dc7      	ldrb	r7, [r0, r7]
 800591c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005920:	462f      	mov	r7, r5
 8005922:	42bb      	cmp	r3, r7
 8005924:	460d      	mov	r5, r1
 8005926:	d9f4      	bls.n	8005912 <_printf_i+0x11a>
 8005928:	2b08      	cmp	r3, #8
 800592a:	d10b      	bne.n	8005944 <_printf_i+0x14c>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07df      	lsls	r7, r3, #31
 8005930:	d508      	bpl.n	8005944 <_printf_i+0x14c>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6861      	ldr	r1, [r4, #4]
 8005936:	4299      	cmp	r1, r3
 8005938:	bfde      	ittt	le
 800593a:	2330      	movle	r3, #48	; 0x30
 800593c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005940:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005944:	1b92      	subs	r2, r2, r6
 8005946:	6122      	str	r2, [r4, #16]
 8005948:	f8cd a000 	str.w	sl, [sp]
 800594c:	464b      	mov	r3, r9
 800594e:	aa03      	add	r2, sp, #12
 8005950:	4621      	mov	r1, r4
 8005952:	4640      	mov	r0, r8
 8005954:	f7ff fee2 	bl	800571c <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	d14c      	bne.n	80059f6 <_printf_i+0x1fe>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	b004      	add	sp, #16
 8005962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005966:	4835      	ldr	r0, [pc, #212]	; (8005a3c <_printf_i+0x244>)
 8005968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	680e      	ldr	r6, [r1, #0]
 8005970:	061f      	lsls	r7, r3, #24
 8005972:	f856 5b04 	ldr.w	r5, [r6], #4
 8005976:	600e      	str	r6, [r1, #0]
 8005978:	d514      	bpl.n	80059a4 <_printf_i+0x1ac>
 800597a:	07d9      	lsls	r1, r3, #31
 800597c:	bf44      	itt	mi
 800597e:	f043 0320 	orrmi.w	r3, r3, #32
 8005982:	6023      	strmi	r3, [r4, #0]
 8005984:	b91d      	cbnz	r5, 800598e <_printf_i+0x196>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	f023 0320 	bic.w	r3, r3, #32
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	2310      	movs	r3, #16
 8005990:	e7b0      	b.n	80058f4 <_printf_i+0xfc>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f043 0320 	orr.w	r3, r3, #32
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	2378      	movs	r3, #120	; 0x78
 800599c:	4828      	ldr	r0, [pc, #160]	; (8005a40 <_printf_i+0x248>)
 800599e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059a2:	e7e3      	b.n	800596c <_printf_i+0x174>
 80059a4:	065e      	lsls	r6, r3, #25
 80059a6:	bf48      	it	mi
 80059a8:	b2ad      	uxthmi	r5, r5
 80059aa:	e7e6      	b.n	800597a <_printf_i+0x182>
 80059ac:	4616      	mov	r6, r2
 80059ae:	e7bb      	b.n	8005928 <_printf_i+0x130>
 80059b0:	680b      	ldr	r3, [r1, #0]
 80059b2:	6826      	ldr	r6, [r4, #0]
 80059b4:	6960      	ldr	r0, [r4, #20]
 80059b6:	1d1d      	adds	r5, r3, #4
 80059b8:	600d      	str	r5, [r1, #0]
 80059ba:	0635      	lsls	r5, r6, #24
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	d501      	bpl.n	80059c4 <_printf_i+0x1cc>
 80059c0:	6018      	str	r0, [r3, #0]
 80059c2:	e002      	b.n	80059ca <_printf_i+0x1d2>
 80059c4:	0671      	lsls	r1, r6, #25
 80059c6:	d5fb      	bpl.n	80059c0 <_printf_i+0x1c8>
 80059c8:	8018      	strh	r0, [r3, #0]
 80059ca:	2300      	movs	r3, #0
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	4616      	mov	r6, r2
 80059d0:	e7ba      	b.n	8005948 <_printf_i+0x150>
 80059d2:	680b      	ldr	r3, [r1, #0]
 80059d4:	1d1a      	adds	r2, r3, #4
 80059d6:	600a      	str	r2, [r1, #0]
 80059d8:	681e      	ldr	r6, [r3, #0]
 80059da:	6862      	ldr	r2, [r4, #4]
 80059dc:	2100      	movs	r1, #0
 80059de:	4630      	mov	r0, r6
 80059e0:	f7fa fc06 	bl	80001f0 <memchr>
 80059e4:	b108      	cbz	r0, 80059ea <_printf_i+0x1f2>
 80059e6:	1b80      	subs	r0, r0, r6
 80059e8:	6060      	str	r0, [r4, #4]
 80059ea:	6863      	ldr	r3, [r4, #4]
 80059ec:	6123      	str	r3, [r4, #16]
 80059ee:	2300      	movs	r3, #0
 80059f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f4:	e7a8      	b.n	8005948 <_printf_i+0x150>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	4632      	mov	r2, r6
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d0ab      	beq.n	800595c <_printf_i+0x164>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	079b      	lsls	r3, r3, #30
 8005a08:	d413      	bmi.n	8005a32 <_printf_i+0x23a>
 8005a0a:	68e0      	ldr	r0, [r4, #12]
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	4298      	cmp	r0, r3
 8005a10:	bfb8      	it	lt
 8005a12:	4618      	movlt	r0, r3
 8005a14:	e7a4      	b.n	8005960 <_printf_i+0x168>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4632      	mov	r2, r6
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	47d0      	blx	sl
 8005a20:	3001      	adds	r0, #1
 8005a22:	d09b      	beq.n	800595c <_printf_i+0x164>
 8005a24:	3501      	adds	r5, #1
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	9903      	ldr	r1, [sp, #12]
 8005a2a:	1a5b      	subs	r3, r3, r1
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dcf2      	bgt.n	8005a16 <_printf_i+0x21e>
 8005a30:	e7eb      	b.n	8005a0a <_printf_i+0x212>
 8005a32:	2500      	movs	r5, #0
 8005a34:	f104 0619 	add.w	r6, r4, #25
 8005a38:	e7f5      	b.n	8005a26 <_printf_i+0x22e>
 8005a3a:	bf00      	nop
 8005a3c:	080060b5 	.word	0x080060b5
 8005a40:	080060c6 	.word	0x080060c6

08005a44 <memmove>:
 8005a44:	4288      	cmp	r0, r1
 8005a46:	b510      	push	{r4, lr}
 8005a48:	eb01 0402 	add.w	r4, r1, r2
 8005a4c:	d902      	bls.n	8005a54 <memmove+0x10>
 8005a4e:	4284      	cmp	r4, r0
 8005a50:	4623      	mov	r3, r4
 8005a52:	d807      	bhi.n	8005a64 <memmove+0x20>
 8005a54:	1e43      	subs	r3, r0, #1
 8005a56:	42a1      	cmp	r1, r4
 8005a58:	d008      	beq.n	8005a6c <memmove+0x28>
 8005a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a62:	e7f8      	b.n	8005a56 <memmove+0x12>
 8005a64:	4402      	add	r2, r0
 8005a66:	4601      	mov	r1, r0
 8005a68:	428a      	cmp	r2, r1
 8005a6a:	d100      	bne.n	8005a6e <memmove+0x2a>
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a76:	e7f7      	b.n	8005a68 <memmove+0x24>

08005a78 <_free_r>:
 8005a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	d048      	beq.n	8005b10 <_free_r+0x98>
 8005a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a82:	9001      	str	r0, [sp, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f1a1 0404 	sub.w	r4, r1, #4
 8005a8a:	bfb8      	it	lt
 8005a8c:	18e4      	addlt	r4, r4, r3
 8005a8e:	f000 f8d3 	bl	8005c38 <__malloc_lock>
 8005a92:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <_free_r+0x9c>)
 8005a94:	9801      	ldr	r0, [sp, #4]
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	4615      	mov	r5, r2
 8005a9a:	b933      	cbnz	r3, 8005aaa <_free_r+0x32>
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	6014      	str	r4, [r2, #0]
 8005aa0:	b003      	add	sp, #12
 8005aa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa6:	f000 b8cd 	b.w	8005c44 <__malloc_unlock>
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	d90b      	bls.n	8005ac6 <_free_r+0x4e>
 8005aae:	6821      	ldr	r1, [r4, #0]
 8005ab0:	1862      	adds	r2, r4, r1
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	bf04      	itt	eq
 8005ab6:	681a      	ldreq	r2, [r3, #0]
 8005ab8:	685b      	ldreq	r3, [r3, #4]
 8005aba:	6063      	str	r3, [r4, #4]
 8005abc:	bf04      	itt	eq
 8005abe:	1852      	addeq	r2, r2, r1
 8005ac0:	6022      	streq	r2, [r4, #0]
 8005ac2:	602c      	str	r4, [r5, #0]
 8005ac4:	e7ec      	b.n	8005aa0 <_free_r+0x28>
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	b10b      	cbz	r3, 8005ad0 <_free_r+0x58>
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	d9fa      	bls.n	8005ac6 <_free_r+0x4e>
 8005ad0:	6811      	ldr	r1, [r2, #0]
 8005ad2:	1855      	adds	r5, r2, r1
 8005ad4:	42a5      	cmp	r5, r4
 8005ad6:	d10b      	bne.n	8005af0 <_free_r+0x78>
 8005ad8:	6824      	ldr	r4, [r4, #0]
 8005ada:	4421      	add	r1, r4
 8005adc:	1854      	adds	r4, r2, r1
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	6011      	str	r1, [r2, #0]
 8005ae2:	d1dd      	bne.n	8005aa0 <_free_r+0x28>
 8005ae4:	681c      	ldr	r4, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	6053      	str	r3, [r2, #4]
 8005aea:	4421      	add	r1, r4
 8005aec:	6011      	str	r1, [r2, #0]
 8005aee:	e7d7      	b.n	8005aa0 <_free_r+0x28>
 8005af0:	d902      	bls.n	8005af8 <_free_r+0x80>
 8005af2:	230c      	movs	r3, #12
 8005af4:	6003      	str	r3, [r0, #0]
 8005af6:	e7d3      	b.n	8005aa0 <_free_r+0x28>
 8005af8:	6825      	ldr	r5, [r4, #0]
 8005afa:	1961      	adds	r1, r4, r5
 8005afc:	428b      	cmp	r3, r1
 8005afe:	bf04      	itt	eq
 8005b00:	6819      	ldreq	r1, [r3, #0]
 8005b02:	685b      	ldreq	r3, [r3, #4]
 8005b04:	6063      	str	r3, [r4, #4]
 8005b06:	bf04      	itt	eq
 8005b08:	1949      	addeq	r1, r1, r5
 8005b0a:	6021      	streq	r1, [r4, #0]
 8005b0c:	6054      	str	r4, [r2, #4]
 8005b0e:	e7c7      	b.n	8005aa0 <_free_r+0x28>
 8005b10:	b003      	add	sp, #12
 8005b12:	bd30      	pop	{r4, r5, pc}
 8005b14:	2000ddf8 	.word	0x2000ddf8

08005b18 <_malloc_r>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	1ccd      	adds	r5, r1, #3
 8005b1c:	f025 0503 	bic.w	r5, r5, #3
 8005b20:	3508      	adds	r5, #8
 8005b22:	2d0c      	cmp	r5, #12
 8005b24:	bf38      	it	cc
 8005b26:	250c      	movcc	r5, #12
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	db01      	blt.n	8005b32 <_malloc_r+0x1a>
 8005b2e:	42a9      	cmp	r1, r5
 8005b30:	d903      	bls.n	8005b3a <_malloc_r+0x22>
 8005b32:	230c      	movs	r3, #12
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	2000      	movs	r0, #0
 8005b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b3a:	f000 f87d 	bl	8005c38 <__malloc_lock>
 8005b3e:	4921      	ldr	r1, [pc, #132]	; (8005bc4 <_malloc_r+0xac>)
 8005b40:	680a      	ldr	r2, [r1, #0]
 8005b42:	4614      	mov	r4, r2
 8005b44:	b99c      	cbnz	r4, 8005b6e <_malloc_r+0x56>
 8005b46:	4f20      	ldr	r7, [pc, #128]	; (8005bc8 <_malloc_r+0xb0>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	b923      	cbnz	r3, 8005b56 <_malloc_r+0x3e>
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f000 f862 	bl	8005c18 <_sbrk_r>
 8005b54:	6038      	str	r0, [r7, #0]
 8005b56:	4629      	mov	r1, r5
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f000 f85d 	bl	8005c18 <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d123      	bne.n	8005baa <_malloc_r+0x92>
 8005b62:	230c      	movs	r3, #12
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	4630      	mov	r0, r6
 8005b68:	f000 f86c 	bl	8005c44 <__malloc_unlock>
 8005b6c:	e7e3      	b.n	8005b36 <_malloc_r+0x1e>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	1b5b      	subs	r3, r3, r5
 8005b72:	d417      	bmi.n	8005ba4 <_malloc_r+0x8c>
 8005b74:	2b0b      	cmp	r3, #11
 8005b76:	d903      	bls.n	8005b80 <_malloc_r+0x68>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	441c      	add	r4, r3
 8005b7c:	6025      	str	r5, [r4, #0]
 8005b7e:	e004      	b.n	8005b8a <_malloc_r+0x72>
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	42a2      	cmp	r2, r4
 8005b84:	bf0c      	ite	eq
 8005b86:	600b      	streq	r3, [r1, #0]
 8005b88:	6053      	strne	r3, [r2, #4]
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f000 f85a 	bl	8005c44 <__malloc_unlock>
 8005b90:	f104 000b 	add.w	r0, r4, #11
 8005b94:	1d23      	adds	r3, r4, #4
 8005b96:	f020 0007 	bic.w	r0, r0, #7
 8005b9a:	1ac2      	subs	r2, r0, r3
 8005b9c:	d0cc      	beq.n	8005b38 <_malloc_r+0x20>
 8005b9e:	1a1b      	subs	r3, r3, r0
 8005ba0:	50a3      	str	r3, [r4, r2]
 8005ba2:	e7c9      	b.n	8005b38 <_malloc_r+0x20>
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	6864      	ldr	r4, [r4, #4]
 8005ba8:	e7cc      	b.n	8005b44 <_malloc_r+0x2c>
 8005baa:	1cc4      	adds	r4, r0, #3
 8005bac:	f024 0403 	bic.w	r4, r4, #3
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d0e3      	beq.n	8005b7c <_malloc_r+0x64>
 8005bb4:	1a21      	subs	r1, r4, r0
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 f82e 	bl	8005c18 <_sbrk_r>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d1dd      	bne.n	8005b7c <_malloc_r+0x64>
 8005bc0:	e7cf      	b.n	8005b62 <_malloc_r+0x4a>
 8005bc2:	bf00      	nop
 8005bc4:	2000ddf8 	.word	0x2000ddf8
 8005bc8:	2000ddfc 	.word	0x2000ddfc

08005bcc <_realloc_r>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	4607      	mov	r7, r0
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	460e      	mov	r6, r1
 8005bd4:	b921      	cbnz	r1, 8005be0 <_realloc_r+0x14>
 8005bd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bda:	4611      	mov	r1, r2
 8005bdc:	f7ff bf9c 	b.w	8005b18 <_malloc_r>
 8005be0:	b922      	cbnz	r2, 8005bec <_realloc_r+0x20>
 8005be2:	f7ff ff49 	bl	8005a78 <_free_r>
 8005be6:	4625      	mov	r5, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bec:	f000 f830 	bl	8005c50 <_malloc_usable_size_r>
 8005bf0:	42a0      	cmp	r0, r4
 8005bf2:	d20f      	bcs.n	8005c14 <_realloc_r+0x48>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f7ff ff8e 	bl	8005b18 <_malloc_r>
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d0f2      	beq.n	8005be8 <_realloc_r+0x1c>
 8005c02:	4631      	mov	r1, r6
 8005c04:	4622      	mov	r2, r4
 8005c06:	f7ff fbef 	bl	80053e8 <memcpy>
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	f7ff ff33 	bl	8005a78 <_free_r>
 8005c12:	e7e9      	b.n	8005be8 <_realloc_r+0x1c>
 8005c14:	4635      	mov	r5, r6
 8005c16:	e7e7      	b.n	8005be8 <_realloc_r+0x1c>

08005c18 <_sbrk_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d06      	ldr	r5, [pc, #24]	; (8005c34 <_sbrk_r+0x1c>)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	f7fb f9a8 	bl	8000f78 <_sbrk>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_sbrk_r+0x1a>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_sbrk_r+0x1a>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	2000de94 	.word	0x2000de94

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f000 b811 	b.w	8005c60 <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	2000de9c 	.word	0x2000de9c

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f000 b80c 	b.w	8005c62 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	2000de9c 	.word	0x2000de9c

08005c50 <_malloc_usable_size_r>:
 8005c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c54:	1f18      	subs	r0, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bfbc      	itt	lt
 8005c5a:	580b      	ldrlt	r3, [r1, r0]
 8005c5c:	18c0      	addlt	r0, r0, r3
 8005c5e:	4770      	bx	lr

08005c60 <__retarget_lock_acquire_recursive>:
 8005c60:	4770      	bx	lr

08005c62 <__retarget_lock_release_recursive>:
 8005c62:	4770      	bx	lr

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
