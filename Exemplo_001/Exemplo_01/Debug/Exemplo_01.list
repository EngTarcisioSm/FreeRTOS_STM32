
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005334  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005714  08005714  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800571c  0800571c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004078  20000074  08005798  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ec  08005798  000240ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014de2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb9  00000000  00000000  00034e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00037a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  000389f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d71  00000000  00000000  00039898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012255  00000000  00000000  00051609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000954b9  00000000  00000000  0006385e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  000f8d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054bc 	.word	0x080054bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080054bc 	.word	0x080054bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000090 	.word	0x20000090
 80005b8:	200000e4 	.word	0x200000e4

080005bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c2:	f000 fc4f 	bl	8000e64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c6:	f000 f86d 	bl	80006a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ca:	f000 f8ff 	bl	80007cc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005ce:	f000 f8d3 	bl	8000778 <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	xMutex = xSemaphoreCreateMutex();
 80005d2:	2001      	movs	r0, #1
 80005d4:	f002 fb05 	bl	8002be2 <xQueueCreateMutex>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <main+0xb4>)
 80005dc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	//criação da queue
	//Criado uma fila com 5 espaços e cada espaço possui um tamanho de uint32_t. Função que Cria uma fila
	if ((xQueue = xQueueCreate(5, sizeof(char*))) == NULL) {
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	2005      	movs	r0, #5
 80005e4:	f002 fa8a 	bl	8002afc <xQueueGenericCreate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a22      	ldr	r2, [pc, #136]	; (8000674 <main+0xb8>)
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <main+0xb8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d103      	bne.n	80005fe <main+0x42>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005f6:	4820      	ldr	r0, [pc, #128]	; (8000678 <main+0xbc>)
 80005f8:	f000 f9aa 	bl	8000950 <vPrintString>
 80005fc:	e002      	b.n	8000604 <main+0x48>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005fe:	481f      	ldr	r0, [pc, #124]	; (800067c <main+0xc0>)
 8000600:	f000 f9a6 	bl	8000950 <vPrintString>
	// osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);   //removido
	// defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);        //removido
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask_print_q, "Task Print Q",
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000612:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0xc4>)
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <main+0xc8>)
 8000616:	f002 ff6c 	bl	80034f2 <xTaskCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d002      	beq.n	8000626 <main+0x6a>
			configMINIMAL_STACK_SIZE * 3, NULL, 2, NULL)) != pdTRUE) {
		vPrintString(
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <main+0xcc>)
 8000622:	f000 f995 	bl	8000950 <vPrintString>
				"Não foi possivel alocar tarefa Task Print Q no escalonador");
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE, NULL,
 8000626:	2300      	movs	r3, #0
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	4916      	ldr	r1, [pc, #88]	; (800068c <main+0xd0>)
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0xd4>)
 8000636:	f002 ff5c 	bl	80034f2 <xTaskCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d002      	beq.n	8000646 <main+0x8a>
			1, NULL)) != pdTRUE) {
		vPrintString(
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <main+0xd8>)
 8000642:	f000 f985 	bl	8000950 <vPrintString>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador");
	}

	if ((xTaskCreate(vTask_print, "Task Print", configMINIMAL_STACK_SIZE * 3,
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000654:	4910      	ldr	r1, [pc, #64]	; (8000698 <main+0xdc>)
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <main+0xe0>)
 8000658:	f002 ff4b 	bl	80034f2 <xTaskCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d002      	beq.n	8000668 <main+0xac>
			NULL, 1, NULL)) != pdTRUE) {
		vPrintString(
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0xe4>)
 8000664:	f000 f974 	bl	8000950 <vPrintString>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	// osKernelStart();    //removido
	vTaskStartScheduler();
 8000668:	f003 f8ae 	bl	80037c8 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800066c:	e7fe      	b.n	800066c <main+0xb0>
 800066e:	bf00      	nop
 8000670:	20004044 	.word	0x20004044
 8000674:	2000408c 	.word	0x2000408c
 8000678:	080054d4 	.word	0x080054d4
 800067c:	080054f8 	.word	0x080054f8
 8000680:	08005514 	.word	0x08005514
 8000684:	08000a25 	.word	0x08000a25
 8000688:	08005524 	.word	0x08005524
 800068c:	08005560 	.word	0x08005560
 8000690:	08000b51 	.word	0x08000b51
 8000694:	0800556c 	.word	0x0800556c
 8000698:	080055ac 	.word	0x080055ac
 800069c:	08000ae1 	.word	0x08000ae1
 80006a0:	080055b8 	.word	0x080055b8

080006a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fada 	bl	8004c6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a20      	ldr	r2, [pc, #128]	; (8000774 <SystemClock_Config+0xd0>)
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800071c:	2354      	movs	r3, #84	; 0x54
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fe8d 	bl	800144c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x98>
		Error_Handler();
 8000738:	f000 fa2a 	bl	8000b90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2102      	movs	r1, #2
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f8ef 	bl	800193c <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xc4>
		Error_Handler();
 8000764:	f000 fa14 	bl	8000b90 <Error_Handler>
	}
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	; 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f001 fd72 	bl	8002298 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80007ba:	f000 f9e9 	bl	8000b90 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20004048 	.word	0x20004048
 80007c8:	40011000 	.word	0x40011000

080007cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b55      	ldr	r3, [pc, #340]	; (800093c <MX_GPIO_Init+0x170>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a54      	ldr	r2, [pc, #336]	; (800093c <MX_GPIO_Init+0x170>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b52      	ldr	r3, [pc, #328]	; (800093c <MX_GPIO_Init+0x170>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b4e      	ldr	r3, [pc, #312]	; (800093c <MX_GPIO_Init+0x170>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4d      	ldr	r2, [pc, #308]	; (800093c <MX_GPIO_Init+0x170>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <MX_GPIO_Init+0x170>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b47      	ldr	r3, [pc, #284]	; (800093c <MX_GPIO_Init+0x170>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a46      	ldr	r2, [pc, #280]	; (800093c <MX_GPIO_Init+0x170>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b44      	ldr	r3, [pc, #272]	; (800093c <MX_GPIO_Init+0x170>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b40      	ldr	r3, [pc, #256]	; (800093c <MX_GPIO_Init+0x170>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a3f      	ldr	r2, [pc, #252]	; (800093c <MX_GPIO_Init+0x170>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <MX_GPIO_Init+0x170>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_GPIO_Init+0x170>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a38      	ldr	r2, [pc, #224]	; (800093c <MX_GPIO_Init+0x170>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_GPIO_Init+0x170>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin | SEL_1_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2109      	movs	r1, #9
 8000872:	4833      	ldr	r0, [pc, #204]	; (8000940 <MX_GPIO_Init+0x174>)
 8000874:	f000 fdb6 	bl	80013e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	4831      	ldr	r0, [pc, #196]	; (8000944 <MX_GPIO_Init+0x178>)
 8000880:	f000 fdb0 	bl	80013e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2104      	movs	r1, #4
 8000888:	482f      	ldr	r0, [pc, #188]	; (8000948 <MX_GPIO_Init+0x17c>)
 800088a:	f000 fdab 	bl	80013e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DOUT_LED1_Pin */
	GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <MX_GPIO_Init+0x174>)
 80008a6:	f000 fc01 	bl	80010ac <HAL_GPIO_Init>

	/*Configure GPIO pin : SEL_0_Pin */
	GPIO_InitStruct.Pin = SEL_0_Pin;
 80008aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4820      	ldr	r0, [pc, #128]	; (8000944 <MX_GPIO_Init+0x178>)
 80008c4:	f000 fbf2 	bl	80010ac <HAL_GPIO_Init>

	/*Configure GPIO pin : DIN_CFIG_Pin */
	GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0x180>)
 80008de:	f000 fbe5 	bl	80010ac <HAL_GPIO_Init>

	/*Configure GPIO pin : EN_RX_485_Pin */
	GPIO_InitStruct.Pin = EN_RX_485_Pin;
 80008e2:	2304      	movs	r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x17c>)
 80008fa:	f000 fbd7 	bl	80010ac <HAL_GPIO_Init>

	/*Configure GPIO pin : SEL_1_Pin */
	GPIO_InitStruct.Pin = SEL_1_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <MX_GPIO_Init+0x174>)
 8000916:	f000 fbc9 	bl	80010ac <HAL_GPIO_Init>

	/*Configure GPIO pin : DIN_TARA_Pin */
	GPIO_InitStruct.Pin = DIN_TARA_Pin;
 800091a:	2310      	movs	r3, #16
 800091c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x174>)
 800092e:	f000 fbbd 	bl	80010ac <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400
 8000944:	40020000 	.word	0x40020000
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020800 	.word	0x40020800

08000950 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095e:	4819      	ldr	r0, [pc, #100]	; (80009c4 <vPrintString+0x74>)
 8000960:	f000 fd40 	bl	80013e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2108      	movs	r1, #8
 8000968:	4817      	ldr	r0, [pc, #92]	; (80009c8 <vPrintString+0x78>)
 800096a:	f000 fd3b 	bl	80013e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <vPrintString+0x7c>)
 8000974:	f000 fd36 	bl	80013e4 <HAL_GPIO_WritePin>
//  taskENTER_CRITICAL();	//removido
	xSemaphoreTake(xMutex, portMAX_DELAY);
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <vPrintString+0x80>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fb25 	bl	8002fd0 <xQueueSemaphoreTake>
	{
		vUsartLib_Puts(pc_uartSend_f);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f834 	bl	80009f4 <vUsartLib_Puts>
	}
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <vPrintString+0x74>)
 8000994:	f000 fd26 	bl	80013e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2108      	movs	r1, #8
 800099c:	480a      	ldr	r0, [pc, #40]	; (80009c8 <vPrintString+0x78>)
 800099e:	f000 fd21 	bl	80013e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2104      	movs	r1, #4
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <vPrintString+0x7c>)
 80009a8:	f000 fd1c 	bl	80013e4 <HAL_GPIO_WritePin>
	xSemaphoreGive(xMutex);
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <vPrintString+0x80>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	2300      	movs	r3, #0
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	f002 f92d 	bl	8002c14 <xQueueGenericSend>
//  taskEXIT_CRITICAL();		//removido
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	20004044 	.word	0x20004044

080009d4 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 80009e0:	1cf9      	adds	r1, r7, #3
 80009e2:	230a      	movs	r3, #10
 80009e4:	2201      	movs	r2, #1
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f001 fca3 	bl	8002332 <HAL_UART_Transmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 80009fc:	e007      	b.n	8000a0e <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <vUsartLib_Puts+0x2c>)
 8000a0a:	f7ff ffe3 	bl	80009d4 <vUsartLib_Putc>
	while (*c_data) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f3      	bne.n	80009fe <vUsartLib_Puts+0xa>
	}
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20004048 	.word	0x20004048

08000a24 <vTask_print_q>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_print_q(void *pvParameters) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint32_t u32_status = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]

	// char *pt_string = c_buffer_test;//ponteiro de queue recebe o endereço do buffer de char

	// sprintf(c_buffer_test, "String teste queue\n");

	const char *pcQueue_send = "Enviando string constante via queue!";
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <vTask_print_q+0xa4>)
 8000a32:	60bb      	str	r3, [r7, #8]

	vPrintString("Entrei na task Queue\n");
 8000a34:	4825      	ldr	r0, [pc, #148]	; (8000acc <vTask_print_q+0xa8>)
 8000a36:	f7ff ff8b 	bl	8000950 <vPrintString>

	for (;;) {

		if(!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && !u32_status) {
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <vTask_print_q+0xac>)
 8000a3e:	f000 fcb9 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d11f      	bne.n	8000a88 <vTask_print_q+0x64>
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d11c      	bne.n	8000a88 <vTask_print_q+0x64>
			//Aguarda um periodo para evitar o efeito bounce bottão pressionado 
			vTaskDelay( 50 / portTICK_PERIOD_MS );
 8000a4e:	2032      	movs	r0, #50	; 0x32
 8000a50:	f002 fe86 	bl	8003760 <vTaskDelay>

			if(!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && !u32_status) {
 8000a54:	2110      	movs	r1, #16
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <vTask_print_q+0xac>)
 8000a58:	f000 fcac 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d110      	bne.n	8000a84 <vTask_print_q+0x60>
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10d      	bne.n	8000a84 <vTask_print_q+0x60>
				//           xQueueSend(1:nome fila   2:endereço da variavel  3: timeout)	
				if( xQueueSend( xQueue, &pcQueue_send, ( 50 / portTICK_PERIOD_MS)) == pdPASS) {
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <vTask_print_q+0xb0>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	2300      	movs	r3, #0
 8000a72:	2232      	movs	r2, #50	; 0x32
 8000a74:	f002 f8ce 	bl	8002c14 <xQueueGenericSend>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d102      	bne.n	8000a84 <vTask_print_q+0x60>

					vPrintString("Valor da constante button enviado na queue! \n\n");
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <vTask_print_q+0xb4>)
 8000a80:	f7ff ff66 	bl	8000950 <vPrintString>
				}
			}

			u32_status = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]

		}

		//checa se o botão foi levantado
		if( HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && u32_status ) {
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <vTask_print_q+0xac>)
 8000a8c:	f000 fc92 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d014      	beq.n	8000ac0 <vTask_print_q+0x9c>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d011      	beq.n	8000ac0 <vTask_print_q+0x9c>

			vTaskDelay( 50 / portTICK_PERIOD_MS );	//delay para debounce
 8000a9c:	2032      	movs	r0, #50	; 0x32
 8000a9e:	f002 fe5f 	bl	8003760 <vTaskDelay>

			if( HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && u32_status ) {
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <vTask_print_q+0xac>)
 8000aa6:	f000 fc85 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d007      	beq.n	8000ac0 <vTask_print_q+0x9c>
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <vTask_print_q+0x9c>
				
				vPrintString("Botão foi solto! \n\n");
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <vTask_print_q+0xb8>)
 8000ab8:	f7ff ff4a 	bl	8000950 <vPrintString>
				u32_status = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
			}
		}

		vTaskDelay( 50 / portTICK_PERIOD_MS );
 8000ac0:	2032      	movs	r0, #50	; 0x32
 8000ac2:	f002 fe4d 	bl	8003760 <vTaskDelay>
		if(!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && !u32_status) {
 8000ac6:	e7b8      	b.n	8000a3a <vTask_print_q+0x16>
 8000ac8:	080055f4 	.word	0x080055f4
 8000acc:	0800561c 	.word	0x0800561c
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	2000408c 	.word	0x2000408c
 8000ad8:	08005634 	.word	0x08005634
 8000adc:	08005664 	.word	0x08005664

08000ae0 <vTask_print>:
	}
	
	vTaskDelete( NULL); //caso ocorra algo que faça o for sair
}

void vTask_print(void *pvParameters) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint32_t u32_status;
	char *ps_receve_string;

	vPrintString("Entrei na task Print");
 8000ae8:	4815      	ldr	r0, [pc, #84]	; (8000b40 <vTask_print+0x60>)
 8000aea:	f7ff ff31 	bl	8000950 <vPrintString>

	for (;;) {
		//xQueueReceive(1:nome da fila 2:endereço variavel de recebimento, 3:timeout)
		u32_status = xQueueReceive(xQueue, &ps_receve_string, portMAX_DELAY);
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <vTask_print+0x64>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f107 010c 	add.w	r1, r7, #12
 8000af6:	f04f 32ff 	mov.w	r2, #4294967295
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f988 	bl	8002e10 <xQueueReceive>
 8000b00:	4603      	mov	r3, r0
 8000b02:	617b      	str	r3, [r7, #20]
		if (u32_status == pdPASS) {
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d115      	bne.n	8000b36 <vTask_print+0x56>
			//Para entender a necessidade de alocação dinamica de memoria
			//deixo o link abaixo, onde explica porque precisamos fazer um malloc
			//para alocar um buffer ao nosso ponteiro para uso na função sprintf
			//lembrando que iremos usar o pvPortMalloc que é safe thread para o FreeRTOS
			//https://stackoverflow.com/questions/19772667/c-sprintf-array-char-pointers
			char *pc_uartSend = pvPortMalloc(strlen(ps_receve_string)+1);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fb67 	bl	80001e0 <strlen>
 8000b12:	4603      	mov	r3, r0
 8000b14:	3301      	adds	r3, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fe86 	bl	8004828 <pvPortMalloc>
 8000b1c:	6138      	str	r0, [r7, #16]

			sprintf(pc_uartSend, "Recebido a string \" %s \" \n", ps_receve_string);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4909      	ldr	r1, [pc, #36]	; (8000b48 <vTask_print+0x68>)
 8000b24:	6938      	ldr	r0, [r7, #16]
 8000b26:	f004 f8a9 	bl	8004c7c <siprintf>
			vPrintString(pc_uartSend);
 8000b2a:	6938      	ldr	r0, [r7, #16]
 8000b2c:	f7ff ff10 	bl	8000950 <vPrintString>
			vPortFree(pc_uartSend);
 8000b30:	6938      	ldr	r0, [r7, #16]
 8000b32:	f003 ff45 	bl	80049c0 <vPortFree>
		}
		vPrintString("Task print \r\n");
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <vTask_print+0x6c>)
 8000b38:	f7ff ff0a 	bl	8000950 <vPrintString>
		u32_status = xQueueReceive(xQueue, &ps_receve_string, portMAX_DELAY);
 8000b3c:	e7d7      	b.n	8000aee <vTask_print+0xe>
 8000b3e:	bf00      	nop
 8000b40:	0800567c 	.word	0x0800567c
 8000b44:	2000408c 	.word	0x2000408c
 8000b48:	08005694 	.word	0x08005694
 8000b4c:	080056b0 	.word	0x080056b0

08000b50 <vTask_blink>:
		//vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
	vTaskDelete( NULL);
}

void vTask_blink(void *pvParameters) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <vTask_blink+0x18>)
 8000b5c:	f000 fc5b 	bl	8001416 <HAL_GPIO_TogglePin>
		vTaskDelay(250 / portTICK_PERIOD_MS);
 8000b60:	20fa      	movs	r0, #250	; 0xfa
 8000b62:	f002 fdfd 	bl	8003760 <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000b66:	e7f7      	b.n	8000b58 <vTask_blink+0x8>
 8000b68:	40020400 	.word	0x40020400

08000b6c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b7e:	f000 f993 	bl	8000ea8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40000800 	.word	0x40000800

08000b90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fa39 	bl	8001058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23c0      	movs	r3, #192	; 0xc0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_MspInit+0x8c>)
 8000c6a:	f000 fa1f 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	201e      	movs	r0, #30
 8000c9a:	f000 f9dd 	bl	8001058 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c9e:	201e      	movs	r0, #30
 8000ca0:	f000 f9f6 	bl	8001090 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_InitTick+0xa4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_InitTick+0xa4>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_InitTick+0xa4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f832 	bl	8001d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cd0:	f001 f808 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_InitTick+0xa8>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xac>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_InitTick+0xb0>)
 8000cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_InitTick+0xac>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_InitTick+0xac>)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xac>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_InitTick+0xac>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_InitTick+0xac>)
 8000d0a:	f001 f845 	bl	8001d98 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_InitTick+0xac>)
 8000d16:	f001 f899 	bl	8001e4c <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	20004090 	.word	0x20004090
 8000d34:	40000800 	.word	0x40000800

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM4_IRQHandler+0x10>)
 8000d6a:	f001 f8d1 	bl	8001f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20004090 	.word	0x20004090

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f003 ff28 	bl	8004bfc <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20010000 	.word	0x20010000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	200002e4 	.word	0x200002e4
 8000de0:	200040f0 	.word	0x200040f0

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <SystemInit+0x28>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <SystemInit+0x28>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SystemInit+0x28>)
 8000dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e16:	e003      	b.n	8000e20 <LoopCopyDataInit>

08000e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e1e:	3104      	adds	r1, #4

08000e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e28:	d3f6      	bcc.n	8000e18 <CopyDataInit>
  ldr  r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e2c:	e002      	b.n	8000e34 <LoopFillZerobss>

08000e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e30:	f842 3b04 	str.w	r3, [r2], #4

08000e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e38:	d3f9      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd3 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 fee3 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fbbb 	bl	80005bc <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000e4c:	08005724 	.word	0x08005724
  ldr  r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e54:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e58:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e5c:	200040ec 	.word	0x200040ec

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8d8 	bl	8001042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fef6 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fe80 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200040d8 	.word	0x200040d8

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200040d8 	.word	0x200040d8

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4c 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff61 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb1 	bl	8000fdc <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff80 	bl	8000f88 <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff54 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e159      	b.n	800137c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 8148 	bne.w	8001376 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a2 	beq.w	8001376 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a56      	ldr	r2, [pc, #344]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b54      	ldr	r3, [pc, #336]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x2ec>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x2f0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x202>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <HAL_GPIO_Init+0x2f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x1fe>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <HAL_GPIO_Init+0x2f8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x1fa>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <HAL_GPIO_Init+0x2fc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x1f6>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a45      	ldr	r2, [pc, #276]	; (80013ac <HAL_GPIO_Init+0x300>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x1f2>
 800129a:	2304      	movs	r3, #4
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 800129e:	2307      	movs	r3, #7
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x2ec>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f2:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131c:	4a24      	ldr	r2, [pc, #144]	; (80013b0 <HAL_GPIO_Init+0x304>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_GPIO_Init+0x304>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f aea2 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001428:	887a      	ldrh	r2, [r7, #2]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43d9      	mvns	r1, r3
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	400b      	ands	r3, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e264      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d075      	beq.n	8001556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	4ba3      	ldr	r3, [pc, #652]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b04      	cmp	r3, #4
 8001474:	d00c      	beq.n	8001490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4ba0      	ldr	r3, [pc, #640]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147e:	2b08      	cmp	r3, #8
 8001480:	d112      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001482:	4b9d      	ldr	r3, [pc, #628]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800148e:	d10b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4b99      	ldr	r3, [pc, #612]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05b      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d157      	bne.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e23f      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x74>
 80014b2:	4b91      	ldr	r3, [pc, #580]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a90      	ldr	r2, [pc, #576]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a8a      	ldr	r2, [pc, #552]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014e4:	4b84      	ldr	r3, [pc, #528]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a83      	ldr	r2, [pc, #524]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fce4 	bl	8000ed0 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fce0 	bl	8000ed0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e204      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b76      	ldr	r3, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xc0>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fcd0 	bl	8000ed0 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fccc 	bl	8000ed0 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1f0      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0xe8>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d063      	beq.n	800162a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	2b08      	cmp	r3, #8
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x152>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1c4      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4952      	ldr	r1, [pc, #328]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e03a      	b.n	800162a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <HAL_RCC_OscConfig+0x2b0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fc85 	bl	8000ed0 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fc81 	bl	8000ed0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1a5      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4940      	ldr	r1, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_RCC_OscConfig+0x2b0>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fc64 	bl	8000ed0 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fc60 	bl	8000ed0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e184      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d030      	beq.n	8001698 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d016      	beq.n	800166c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_RCC_OscConfig+0x2b4>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fc44 	bl	8000ed0 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fc40 	bl	8000ed0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e164      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x200>
 800166a:	e015      	b.n	8001698 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x2b4>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fc2d 	bl	8000ed0 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fc29 	bl	8000ed0 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e14d      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a0 	beq.w	80017e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x2b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d121      	bne.n	8001726 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x2b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_RCC_OscConfig+0x2b8>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbef 	bl	8000ed0 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e011      	b.n	800171a <HAL_RCC_OscConfig+0x2ce>
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470000 	.word	0x42470000
 8001700:	42470e80 	.word	0x42470e80
 8001704:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7ff fbe2 	bl	8000ed0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e106      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b85      	ldr	r3, [pc, #532]	; (8001930 <HAL_RCC_OscConfig+0x4e4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x2f0>
 800172e:	4b81      	ldr	r3, [pc, #516]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a80      	ldr	r2, [pc, #512]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	e01c      	b.n	8001776 <HAL_RCC_OscConfig+0x32a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x312>
 8001744:	4b7b      	ldr	r3, [pc, #492]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a7a      	ldr	r2, [pc, #488]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	4b78      	ldr	r3, [pc, #480]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a77      	ldr	r2, [pc, #476]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0x32a>
 800175e:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a74      	ldr	r2, [pc, #464]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
 800176a:	4b72      	ldr	r3, [pc, #456]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a71      	ldr	r2, [pc, #452]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d015      	beq.n	80017aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff fba7 	bl	8000ed0 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff fba3 	bl	8000ed0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0c5      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179c:	4b65      	ldr	r3, [pc, #404]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ee      	beq.n	8001786 <HAL_RCC_OscConfig+0x33a>
 80017a8:	e014      	b.n	80017d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb91 	bl	8000ed0 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fb8d 	bl	8000ed0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0af      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ee      	bne.n	80017b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d105      	bne.n	80017e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017da:	4b56      	ldr	r3, [pc, #344]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a55      	ldr	r2, [pc, #340]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 80017e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 809b 	beq.w	8001926 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d05c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d141      	bne.n	8001888 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001804:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x4ec>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fb61 	bl	8000ed0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff fb5d 	bl	8000ed0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e081      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001824:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	019b      	lsls	r3, r3, #6
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	3b01      	subs	r3, #1
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	4937      	ldr	r1, [pc, #220]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_OscConfig+0x4ec>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fb36 	bl	8000ed0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fb32 	bl	8000ed0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e056      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x41c>
 8001886:	e04e      	b.n	8001926 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x4ec>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fb1f 	bl	8000ed0 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fb1b 	bl	8000ed0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e03f      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x44a>
 80018b4:	e037      	b.n	8001926 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e032      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_RCC_OscConfig+0x4e8>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d028      	beq.n	8001922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d121      	bne.n	8001922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d11a      	bne.n	8001922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018f2:	4013      	ands	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d111      	bne.n	8001922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d107      	bne.n	8001922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40007000 	.word	0x40007000
 8001934:	40023800 	.word	0x40023800
 8001938:	42470060 	.word	0x42470060

0800193c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0cc      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d90c      	bls.n	8001978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b65      	ldr	r3, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800199a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d044      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d119      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e067      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4934      	ldr	r1, [pc, #208]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fa50 	bl	8000ed0 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff fa4c 	bl	8000ed0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e04f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d20c      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	490a      	ldr	r1, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	5ccb      	ldrb	r3, [r1, r3]
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f8ce 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	080056c8 	.word	0x080056c8
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b20:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d00d      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	f200 80bd 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x34>
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b3a:	e0b7      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b3e:	60bb      	str	r3, [r7, #8]
       break;
 8001b40:	e0b7      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b44:	60bb      	str	r3, [r7, #8]
      break;
 8001b46:	e0b4      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b48:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d04d      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	461a      	mov	r2, r3
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	ea02 0800 	and.w	r8, r2, r0
 8001b76:	ea03 0901 	and.w	r9, r3, r1
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	014b      	lsls	r3, r1, #5
 8001b88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b8c:	0142      	lsls	r2, r0, #5
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	ebb0 0008 	subs.w	r0, r0, r8
 8001b96:	eb61 0109 	sbc.w	r1, r1, r9
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	018b      	lsls	r3, r1, #6
 8001ba4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba8:	0182      	lsls	r2, r0, #6
 8001baa:	1a12      	subs	r2, r2, r0
 8001bac:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	00d9      	lsls	r1, r3, #3
 8001bba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bbe:	00d0      	lsls	r0, r2, #3
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	eb12 0208 	adds.w	r2, r2, r8
 8001bc8:	eb43 0309 	adc.w	r3, r3, r9
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	0259      	lsls	r1, r3, #9
 8001bd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bda:	0250      	lsls	r0, r2, #9
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f7fe fb50 	bl	8000290 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e04a      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	461a      	mov	r2, r3
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	ea02 0400 	and.w	r4, r2, r0
 8001c12:	ea03 0501 	and.w	r5, r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	014b      	lsls	r3, r1, #5
 8001c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c28:	0142      	lsls	r2, r0, #5
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	1b00      	subs	r0, r0, r4
 8001c30:	eb61 0105 	sbc.w	r1, r1, r5
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	018b      	lsls	r3, r1, #6
 8001c3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c42:	0182      	lsls	r2, r0, #6
 8001c44:	1a12      	subs	r2, r2, r0
 8001c46:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	00d9      	lsls	r1, r3, #3
 8001c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c58:	00d0      	lsls	r0, r2, #3
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	1912      	adds	r2, r2, r4
 8001c60:	eb45 0303 	adc.w	r3, r5, r3
 8001c64:	f04f 0000 	mov.w	r0, #0
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	0299      	lsls	r1, r3, #10
 8001c6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c72:	0290      	lsls	r0, r2, #10
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f7fe fb04 	bl	8000290 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	60bb      	str	r3, [r7, #8]
      break;
 8001caa:	e002      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cae:	60bb      	str	r3, [r7, #8]
      break;
 8001cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	080056d8 	.word	0x080056d8

08001d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d10:	f7ff ffdc 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0b5b      	lsrs	r3, r3, #13
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	080056d8 	.word	0x080056d8

08001d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	220f      	movs	r2, #15
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_RCC_GetClockConfig+0x60>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0207 	and.w	r2, r3, #7
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e041      	b.n	8001e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f839 	bl	8001e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f000 f9ca 	bl	8002170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d001      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e044      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_TIM_Base_Start_IT+0xb0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_TIM_Base_Start_IT+0xbc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_TIM_Base_Start_IT+0xc0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40014000 	.word	0x40014000

08001f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0202 	mvn.w	r2, #2
 8001f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8ee 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8e0 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8f1 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0204 	mvn.w	r2, #4
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8c4 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8b6 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f8c7 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d122      	bne.n	8002014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d11b      	bne.n	8002014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f89a 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f88c 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f89d 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b10      	cmp	r3, #16
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b10      	cmp	r3, #16
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0210 	mvn.w	r2, #16
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2208      	movs	r2, #8
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f870 	bl	8002134 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f862 	bl	8002120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f873 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0201 	mvn.w	r2, #1
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fd6c 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d10e      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d107      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8e2 	bl	8002284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d10e      	bne.n	80020ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b40      	cmp	r3, #64	; 0x40
 80020da:	d107      	bne.n	80020ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f838 	bl	800215c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d10e      	bne.n	8002118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b20      	cmp	r3, #32
 8002106:	d107      	bne.n	8002118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0220 	mvn.w	r2, #32
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8ac 	bl	8002270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a34      	ldr	r2, [pc, #208]	; (8002254 <TIM_Base_SetConfig+0xe4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00f      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d00b      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a31      	ldr	r2, [pc, #196]	; (8002258 <TIM_Base_SetConfig+0xe8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a30      	ldr	r2, [pc, #192]	; (800225c <TIM_Base_SetConfig+0xec>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <TIM_Base_SetConfig+0xf0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <TIM_Base_SetConfig+0xe4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <TIM_Base_SetConfig+0xe8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <TIM_Base_SetConfig+0xec>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a20      	ldr	r2, [pc, #128]	; (8002260 <TIM_Base_SetConfig+0xf0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <TIM_Base_SetConfig+0xf4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <TIM_Base_SetConfig+0xf8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <TIM_Base_SetConfig+0xfc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <TIM_Base_SetConfig+0xe4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	615a      	str	r2, [r3, #20]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40014000 	.word	0x40014000
 8002268:	40014400 	.word	0x40014400
 800226c:	40014800 	.word	0x40014800

08002270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fc98 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f929 	bl	8002534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08a      	sub	sp, #40	; 0x28
 8002336:	af02      	add	r7, sp, #8
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	d17c      	bne.n	800244c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_UART_Transmit+0x2c>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e075      	b.n	800244e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_UART_Transmit+0x3e>
 800236c:	2302      	movs	r3, #2
 800236e:	e06e      	b.n	800244e <HAL_UART_Transmit+0x11c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2221      	movs	r2, #33	; 0x21
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002386:	f7fe fda3 	bl	8000ed0 <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	88fa      	ldrh	r2, [r7, #6]
 8002396:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d108      	bne.n	80023b4 <HAL_UART_Transmit+0x82>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e003      	b.n	80023bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c4:	e02a      	b.n	800241c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f840 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e036      	b.n	800244e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10b      	bne.n	80023fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3302      	adds	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e007      	b.n	800240e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1cf      	bne.n	80023c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f810 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b090      	sub	sp, #64	; 0x40
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002466:	e050      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d04c      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
 8002476:	f7fe fd2b 	bl	8000ed0 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002482:	429a      	cmp	r2, r3
 8002484:	d241      	bcs.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a6:	637a      	str	r2, [r7, #52]	; 0x34
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e5      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024da:	623a      	str	r2, [r7, #32]
 80024dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	69f9      	ldr	r1, [r7, #28]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e5      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00f      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	429a      	cmp	r2, r3
 8002526:	d09f      	beq.n	8002468 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3740      	adds	r7, #64	; 0x40
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	b09f      	sub	sp, #124	; 0x7c
 800253a:	af00      	add	r7, sp, #0
 800253c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254a:	68d9      	ldr	r1, [r3, #12]
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	ea40 0301 	orr.w	r3, r0, r1
 8002554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
 8002560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	431a      	orrs	r2, r3
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4313      	orrs	r3, r2
 800256c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002578:	f021 010c 	bic.w	r1, r1, #12
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002582:	430b      	orrs	r3, r1
 8002584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	6999      	ldr	r1, [r3, #24]
 8002594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	ea40 0301 	orr.w	r3, r0, r1
 800259c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4bc5      	ldr	r3, [pc, #788]	; (80028b8 <UART_SetConfig+0x384>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d004      	beq.n	80025b2 <UART_SetConfig+0x7e>
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4bc3      	ldr	r3, [pc, #780]	; (80028bc <UART_SetConfig+0x388>)
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d103      	bne.n	80025ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b2:	f7ff fbab 	bl	8001d0c <HAL_RCC_GetPCLK2Freq>
 80025b6:	6778      	str	r0, [r7, #116]	; 0x74
 80025b8:	e002      	b.n	80025c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ba:	f7ff fb93 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 80025be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c8:	f040 80b6 	bne.w	8002738 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ce:	461c      	mov	r4, r3
 80025d0:	f04f 0500 	mov.w	r5, #0
 80025d4:	4622      	mov	r2, r4
 80025d6:	462b      	mov	r3, r5
 80025d8:	1891      	adds	r1, r2, r2
 80025da:	6439      	str	r1, [r7, #64]	; 0x40
 80025dc:	415b      	adcs	r3, r3
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025e4:	1912      	adds	r2, r2, r4
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	00d9      	lsls	r1, r3, #3
 80025f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025f8:	00d0      	lsls	r0, r2, #3
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	1911      	adds	r1, r2, r4
 8002600:	6639      	str	r1, [r7, #96]	; 0x60
 8002602:	416b      	adcs	r3, r5
 8002604:	667b      	str	r3, [r7, #100]	; 0x64
 8002606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	1891      	adds	r1, r2, r2
 8002612:	63b9      	str	r1, [r7, #56]	; 0x38
 8002614:	415b      	adcs	r3, r3
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800261c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002620:	f7fd fe36 	bl	8000290 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4ba5      	ldr	r3, [pc, #660]	; (80028c0 <UART_SetConfig+0x38c>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011e      	lsls	r6, r3, #4
 8002632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002634:	461c      	mov	r4, r3
 8002636:	f04f 0500 	mov.w	r5, #0
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	1891      	adds	r1, r2, r2
 8002640:	6339      	str	r1, [r7, #48]	; 0x30
 8002642:	415b      	adcs	r3, r3
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800264a:	1912      	adds	r2, r2, r4
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	f04f 0000 	mov.w	r0, #0
 8002654:	f04f 0100 	mov.w	r1, #0
 8002658:	00d9      	lsls	r1, r3, #3
 800265a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800265e:	00d0      	lsls	r0, r2, #3
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	1911      	adds	r1, r2, r4
 8002666:	65b9      	str	r1, [r7, #88]	; 0x58
 8002668:	416b      	adcs	r3, r5
 800266a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	461a      	mov	r2, r3
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	1891      	adds	r1, r2, r2
 8002678:	62b9      	str	r1, [r7, #40]	; 0x28
 800267a:	415b      	adcs	r3, r3
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002682:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002686:	f7fd fe03 	bl	8000290 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <UART_SetConfig+0x38c>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <UART_SetConfig+0x38c>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026b0:	441e      	add	r6, r3
 80026b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b4:	4618      	mov	r0, r3
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	1894      	adds	r4, r2, r2
 80026c0:	623c      	str	r4, [r7, #32]
 80026c2:	415b      	adcs	r3, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ca:	1812      	adds	r2, r2, r0
 80026cc:	eb41 0303 	adc.w	r3, r1, r3
 80026d0:	f04f 0400 	mov.w	r4, #0
 80026d4:	f04f 0500 	mov.w	r5, #0
 80026d8:	00dd      	lsls	r5, r3, #3
 80026da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026de:	00d4      	lsls	r4, r2, #3
 80026e0:	4622      	mov	r2, r4
 80026e2:	462b      	mov	r3, r5
 80026e4:	1814      	adds	r4, r2, r0
 80026e6:	653c      	str	r4, [r7, #80]	; 0x50
 80026e8:	414b      	adcs	r3, r1
 80026ea:	657b      	str	r3, [r7, #84]	; 0x54
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	1891      	adds	r1, r2, r2
 80026f8:	61b9      	str	r1, [r7, #24]
 80026fa:	415b      	adcs	r3, r3
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002702:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002706:	f7fd fdc3 	bl	8000290 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <UART_SetConfig+0x38c>)
 8002710:	fba3 1302 	umull	r1, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	2164      	movs	r1, #100	; 0x64
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	3332      	adds	r3, #50	; 0x32
 8002722:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <UART_SetConfig+0x38c>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	f003 0207 	and.w	r2, r3, #7
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4432      	add	r2, r6
 8002734:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002736:	e0b9      	b.n	80028ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273a:	461c      	mov	r4, r3
 800273c:	f04f 0500 	mov.w	r5, #0
 8002740:	4622      	mov	r2, r4
 8002742:	462b      	mov	r3, r5
 8002744:	1891      	adds	r1, r2, r2
 8002746:	6139      	str	r1, [r7, #16]
 8002748:	415b      	adcs	r3, r3
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002750:	1912      	adds	r2, r2, r4
 8002752:	eb45 0303 	adc.w	r3, r5, r3
 8002756:	f04f 0000 	mov.w	r0, #0
 800275a:	f04f 0100 	mov.w	r1, #0
 800275e:	00d9      	lsls	r1, r3, #3
 8002760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002764:	00d0      	lsls	r0, r2, #3
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	eb12 0804 	adds.w	r8, r2, r4
 800276e:	eb43 0905 	adc.w	r9, r3, r5
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	008b      	lsls	r3, r1, #2
 8002786:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800278a:	0082      	lsls	r2, r0, #2
 800278c:	4640      	mov	r0, r8
 800278e:	4649      	mov	r1, r9
 8002790:	f7fd fd7e 	bl	8000290 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <UART_SetConfig+0x38c>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011e      	lsls	r6, r3, #4
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	4618      	mov	r0, r3
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	1894      	adds	r4, r2, r2
 80027b0:	60bc      	str	r4, [r7, #8]
 80027b2:	415b      	adcs	r3, r3
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ba:	1812      	adds	r2, r2, r0
 80027bc:	eb41 0303 	adc.w	r3, r1, r3
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	f04f 0500 	mov.w	r5, #0
 80027c8:	00dd      	lsls	r5, r3, #3
 80027ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027ce:	00d4      	lsls	r4, r2, #3
 80027d0:	4622      	mov	r2, r4
 80027d2:	462b      	mov	r3, r5
 80027d4:	1814      	adds	r4, r2, r0
 80027d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80027d8:	414b      	adcs	r3, r1
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	008b      	lsls	r3, r1, #2
 80027f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027f4:	0082      	lsls	r2, r0, #2
 80027f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027fa:	f7fd fd49 	bl	8000290 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <UART_SetConfig+0x38c>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	; 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	; 0x32
 8002816:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <UART_SetConfig+0x38c>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002822:	441e      	add	r6, r3
 8002824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002826:	4618      	mov	r0, r3
 8002828:	f04f 0100 	mov.w	r1, #0
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	1894      	adds	r4, r2, r2
 8002832:	603c      	str	r4, [r7, #0]
 8002834:	415b      	adcs	r3, r3
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800283c:	1812      	adds	r2, r2, r0
 800283e:	eb41 0303 	adc.w	r3, r1, r3
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	f04f 0500 	mov.w	r5, #0
 800284a:	00dd      	lsls	r5, r3, #3
 800284c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002850:	00d4      	lsls	r4, r2, #3
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	eb12 0a00 	adds.w	sl, r2, r0
 800285a:	eb43 0b01 	adc.w	fp, r3, r1
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	008b      	lsls	r3, r1, #2
 8002872:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002876:	0082      	lsls	r2, r0, #2
 8002878:	4650      	mov	r0, sl
 800287a:	4659      	mov	r1, fp
 800287c:	f7fd fd08 	bl	8000290 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <UART_SetConfig+0x38c>)
 8002886:	fba3 1302 	umull	r1, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2164      	movs	r1, #100	; 0x64
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <UART_SetConfig+0x38c>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4432      	add	r2, r6
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	377c      	adds	r7, #124	; 0x7c
 80028b0:	46bd      	mov	sp, r7
 80028b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b6:	bf00      	nop
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	51eb851f 	.word	0x51eb851f

080028c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f103 0208 	add.w	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f103 0208 	add.w	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f103 0208 	add.w	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00c      	b.n	80029a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3308      	adds	r3, #8
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e002      	b.n	8002994 <vListInsert+0x2e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d2f6      	bcs.n	800298e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6852      	ldr	r2, [r2, #4]
 80029f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d103      	bne.n	8002a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a56:	f001 fe05 	bl	8004664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	68f9      	ldr	r1, [r7, #12]
 8002a64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	3b01      	subs	r3, #1
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	441a      	add	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	22ff      	movs	r2, #255	; 0xff
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d114      	bne.n	8002ad6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01a      	beq.n	8002aea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 f8c7 	bl	8003c4c <xTaskRemoveFromEventList>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d012      	beq.n	8002aea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <xQueueGenericReset+0xcc>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	e009      	b.n	8002aea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3310      	adds	r3, #16
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fef2 	bl	80028c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3324      	adds	r3, #36	; 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff feed 	bl	80028c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aea:	f001 fdeb 	bl	80046c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	613b      	str	r3, [r7, #16]
}
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3348      	adds	r3, #72	; 0x48
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fe77 	bl	8004828 <pvPortMalloc>
 8002b3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3348      	adds	r3, #72	; 0x48
 8002b4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b54:	79fa      	ldrb	r2, [r7, #7]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f805 	bl	8002b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b66:	69bb      	ldr	r3, [r7, #24]
	}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e002      	b.n	8002b92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	69b8      	ldr	r0, [r7, #24]
 8002ba2:	f7ff ff43 	bl	8002a2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00e      	beq.n	8002bda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f81d 	bl	8002c14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff7e 	bl	8002afc <xQueueGenericCreate>
 8002c00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ffd3 	bl	8002bae <prvInitialiseMutex>

		return xNewQueue;
 8002c08:	68fb      	ldr	r3, [r7, #12]
	}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	; 0x38
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueGenericSend+0x32>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <xQueueGenericSend+0x40>
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <xQueueGenericSend+0x44>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <xQueueGenericSend+0x46>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <xQueueGenericSend+0x60>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSend+0x6e>
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <xQueueGenericSend+0x72>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericSend+0x74>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	623b      	str	r3, [r7, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ca2:	f001 f98f 	bl	8003fc4 <xTaskGetSchedulerState>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <xQueueGenericSend+0x9e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <xQueueGenericSend+0xa2>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xQueueGenericSend+0xa4>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	61fb      	str	r3, [r7, #28]
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cd2:	f001 fcc7 	bl	8004664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <xQueueGenericSend+0xd4>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d129      	bne.n	8002d3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cee:	f000 fa93 	bl	8003218 <prvCopyDataToQueue>
 8002cf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	3324      	adds	r3, #36	; 0x24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 ffa3 	bl	8003c4c <xTaskRemoveFromEventList>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <xQueueGenericSend+0x1f8>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	e00a      	b.n	8002d34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d24:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <xQueueGenericSend+0x1f8>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d34:	f001 fcc6 	bl	80046c4 <vPortExitCritical>
				return pdPASS;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e063      	b.n	8002e04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d42:	f001 fcbf 	bl	80046c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e05c      	b.n	8002e04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 ffdb 	bl	8003d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d5e:	f001 fcb1 	bl	80046c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d62:	f000 fd91 	bl	8003888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d66:	f001 fc7d 	bl	8004664 <vPortEnterCritical>
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d103      	bne.n	8002d80 <xQueueGenericSend+0x16c>
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d103      	bne.n	8002d96 <xQueueGenericSend+0x182>
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d96:	f001 fc95 	bl	80046c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d9a:	1d3a      	adds	r2, r7, #4
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 ffca 	bl	8003d3c <xTaskCheckForTimeOut>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d124      	bne.n	8002df8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db0:	f000 fb2a 	bl	8003408 <prvIsQueueFull>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d018      	beq.n	8002dec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 ff1e 	bl	8003c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dca:	f000 fab5 	bl	8003338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dce:	f000 fd69 	bl	80038a4 <xTaskResumeAll>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f af7c 	bne.w	8002cd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <xQueueGenericSend+0x1f8>)
 8002ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	e772      	b.n	8002cd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dee:	f000 faa3 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002df2:	f000 fd57 	bl	80038a4 <xTaskResumeAll>
 8002df6:	e76c      	b.n	8002cd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 fa9d 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dfe:	f000 fd51 	bl	80038a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3738      	adds	r7, #56	; 0x38
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	; 0x30
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <xQueueReceive+0x30>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	623b      	str	r3, [r7, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueReceive+0x3e>
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <xQueueReceive+0x42>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueReceive+0x44>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <xQueueReceive+0x5e>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	61fb      	str	r3, [r7, #28]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e6e:	f001 f8a9 	bl	8003fc4 <xTaskGetSchedulerState>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <xQueueReceive+0x6e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <xQueueReceive+0x72>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <xQueueReceive+0x74>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <xQueueReceive+0x8e>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	61bb      	str	r3, [r7, #24]
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e9e:	f001 fbe1 	bl	8004664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01f      	beq.n	8002eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb2:	f000 fa1b 	bl	80032ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	3310      	adds	r3, #16
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 febe 	bl	8003c4c <xTaskRemoveFromEventList>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <xQueueReceive+0x1bc>)
 8002ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ee6:	f001 fbed 	bl	80046c4 <vPortExitCritical>
				return pdPASS;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e069      	b.n	8002fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef4:	f001 fbe6 	bl	80046c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e062      	b.n	8002fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ff02 	bl	8003d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f10:	f001 fbd8 	bl	80046c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f14:	f000 fcb8 	bl	8003888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f18:	f001 fba4 	bl	8004664 <vPortEnterCritical>
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d103      	bne.n	8002f32 <xQueueReceive+0x122>
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d103      	bne.n	8002f48 <xQueueReceive+0x138>
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f48:	f001 fbbc 	bl	80046c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f4c:	1d3a      	adds	r2, r7, #4
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fef1 	bl	8003d3c <xTaskCheckForTimeOut>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d123      	bne.n	8002fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f62:	f000 fa3b 	bl	80033dc <prvIsQueueEmpty>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d017      	beq.n	8002f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	3324      	adds	r3, #36	; 0x24
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fe45 	bl	8003c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7c:	f000 f9dc 	bl	8003338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f80:	f000 fc90 	bl	80038a4 <xTaskResumeAll>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d189      	bne.n	8002e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <xQueueReceive+0x1bc>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	e780      	b.n	8002e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f000 f9cb 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa2:	f000 fc7f 	bl	80038a4 <xTaskResumeAll>
 8002fa6:	e77a      	b.n	8002e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002faa:	f000 f9c5 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fae:	f000 fc79 	bl	80038a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb4:	f000 fa12 	bl	80033dc <prvIsQueueEmpty>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f43f af6f 	beq.w	8002e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3730      	adds	r7, #48	; 0x30
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	; 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	623b      	str	r3, [r7, #32]
}
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	61fb      	str	r3, [r7, #28]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003020:	f000 ffd0 	bl	8003fc4 <xTaskGetSchedulerState>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <xQueueSemaphoreTake+0x60>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <xQueueSemaphoreTake+0x64>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <xQueueSemaphoreTake+0x66>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	61bb      	str	r3, [r7, #24]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003050:	f001 fb08 	bl	8004664 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d024      	beq.n	80030aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003070:	f001 f950 	bl	8004314 <pvTaskIncrementMutexHeldCount>
 8003074:	4602      	mov	r2, r0
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00f      	beq.n	80030a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	3310      	adds	r3, #16
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fde0 	bl	8003c4c <xTaskRemoveFromEventList>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003092:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <xQueueSemaphoreTake+0x214>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030a2:	f001 fb0f 	bl	80046c4 <vPortExitCritical>
				return pdPASS;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e097      	b.n	80031da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	617b      	str	r3, [r7, #20]
}
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030cc:	f001 fafa 	bl	80046c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e082      	b.n	80031da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe16 	bl	8003d10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030e8:	f001 faec 	bl	80046c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ec:	f000 fbcc 	bl	8003888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f0:	f001 fab8 	bl	8004664 <vPortEnterCritical>
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d103      	bne.n	800310a <xQueueSemaphoreTake+0x13a>
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003110:	b25b      	sxtb	r3, r3
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d103      	bne.n	8003120 <xQueueSemaphoreTake+0x150>
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003120:	f001 fad0 	bl	80046c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003124:	463a      	mov	r2, r7
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fe05 	bl	8003d3c <xTaskCheckForTimeOut>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d132      	bne.n	800319e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800313a:	f000 f94f 	bl	80033dc <prvIsQueueEmpty>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d026      	beq.n	8003192 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800314c:	f001 fa8a 	bl	8004664 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 ff53 	bl	8004000 <xTaskPriorityInherit>
 800315a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800315c:	f001 fab2 	bl	80046c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fd4b 	bl	8003c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800316e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003170:	f000 f8e2 	bl	8003338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003174:	f000 fb96 	bl	80038a4 <xTaskResumeAll>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f47f af68 	bne.w	8003050 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <xQueueSemaphoreTake+0x214>)
 8003182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	e75e      	b.n	8003050 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003194:	f000 f8d0 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003198:	f000 fb84 	bl	80038a4 <xTaskResumeAll>
 800319c:	e758      	b.n	8003050 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800319e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a0:	f000 f8ca 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a4:	f000 fb7e 	bl	80038a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031aa:	f000 f917 	bl	80033dc <prvIsQueueEmpty>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f43f af4d 	beq.w	8003050 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80031bc:	f001 fa52 	bl	8004664 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031c2:	f000 f811 	bl	80031e8 <prvGetDisinheritPriorityAfterTimeout>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 f812 	bl	80041f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031d4:	f001 fa76 	bl	80046c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3738      	adds	r7, #56	; 0x38
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e001      	b.n	800320a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800320a:	68fb      	ldr	r3, [r7, #12]
	}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d14d      	bne.n	80032da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 ff52 	bl	80040ec <xTaskPriorityDisinherit>
 8003248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	e043      	b.n	80032da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d119      	bne.n	800328c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6858      	ldr	r0, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	461a      	mov	r2, r3
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	f001 fcf4 	bl	8004c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d32b      	bcc.n	80032da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e026      	b.n	80032da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68d8      	ldr	r0, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	461a      	mov	r2, r3
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	f001 fcda 	bl	8004c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	425b      	negs	r3, r3
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d207      	bcs.n	80032c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	425b      	negs	r3, r3
 80032c2:	441a      	add	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d105      	bne.n	80032da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d303      	bcc.n	8003320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68d9      	ldr	r1, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	461a      	mov	r2, r3
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f001 fc90 	bl	8004c50 <memcpy>
	}
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003340:	f001 f990 	bl	8004664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800334a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800334c:	e011      	b.n	8003372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3324      	adds	r3, #36	; 0x24
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fc76 	bl	8003c4c <xTaskRemoveFromEventList>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003366:	f000 fd4b 	bl	8003e00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3b01      	subs	r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	dce9      	bgt.n	800334e <prvUnlockQueue+0x16>
 800337a:	e000      	b.n	800337e <prvUnlockQueue+0x46>
					break;
 800337c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003386:	f001 f99d 	bl	80046c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800338a:	f001 f96b 	bl	8004664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003396:	e011      	b.n	80033bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3310      	adds	r3, #16
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fc51 	bl	8003c4c <xTaskRemoveFromEventList>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033b0:	f000 fd26 	bl	8003e00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dce9      	bgt.n	8003398 <prvUnlockQueue+0x60>
 80033c4:	e000      	b.n	80033c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033d0:	f001 f978 	bl	80046c4 <vPortExitCritical>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033e4:	f001 f93e 	bl	8004664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e001      	b.n	80033fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033fa:	f001 f963 	bl	80046c4 <vPortExitCritical>

	return xReturn;
 80033fe:	68fb      	ldr	r3, [r7, #12]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003410:	f001 f928 	bl	8004664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	429a      	cmp	r2, r3
 800341e:	d102      	bne.n	8003426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e001      	b.n	800342a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800342a:	f001 f94b 	bl	80046c4 <vPortExitCritical>

	return xReturn;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08e      	sub	sp, #56	; 0x38
 800343c:	af04      	add	r7, sp, #16
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xTaskCreateStatic+0x2a>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	623b      	str	r3, [r7, #32]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xTaskCreateStatic+0x46>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	61fb      	str	r3, [r7, #28]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800347e:	2354      	movs	r3, #84	; 0x54
 8003480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b54      	cmp	r3, #84	; 0x54
 8003486:	d00a      	beq.n	800349e <xTaskCreateStatic+0x66>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	61bb      	str	r3, [r7, #24]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800349e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01e      	beq.n	80034e4 <xTaskCreateStatic+0xac>
 80034a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034be:	2300      	movs	r3, #0
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	9302      	str	r3, [sp, #8]
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f850 	bl	800357c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034de:	f000 f8d5 	bl	800368c <prvAddNewTaskToReadyList>
 80034e2:	e001      	b.n	80034e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034e8:	697b      	ldr	r3, [r7, #20]
	}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3728      	adds	r7, #40	; 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08c      	sub	sp, #48	; 0x30
 80034f6:	af04      	add	r7, sp, #16
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f001 f98e 	bl	8004828 <pvPortMalloc>
 800350c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003514:	2054      	movs	r0, #84	; 0x54
 8003516:	f001 f987 	bl	8004828 <pvPortMalloc>
 800351a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
 8003528:	e005      	b.n	8003536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f001 fa48 	bl	80049c0 <vPortFree>
 8003530:	e001      	b.n	8003536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d017      	beq.n	800356c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	2300      	movs	r3, #0
 8003548:	9303      	str	r3, [sp, #12]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	9302      	str	r3, [sp, #8]
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f80e 	bl	800357c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003560:	69f8      	ldr	r0, [r7, #28]
 8003562:	f000 f893 	bl	800368c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e002      	b.n	8003572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003572:	69bb      	ldr	r3, [r7, #24]
	}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003594:	3b01      	subs	r3, #1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f023 0307 	bic.w	r3, r3, #7
 80035a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	617b      	str	r3, [r7, #20]
}
 80035c0:	bf00      	nop
 80035c2:	e7fe      	b.n	80035c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01f      	beq.n	800360a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e012      	b.n	80035f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	7819      	ldrb	r1, [r3, #0]
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	3334      	adds	r3, #52	; 0x34
 80035e0:	460a      	mov	r2, r1
 80035e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3301      	adds	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2b0f      	cmp	r3, #15
 80035fa:	d9e9      	bls.n	80035d0 <prvInitialiseNewTask+0x54>
 80035fc:	e000      	b.n	8003600 <prvInitialiseNewTask+0x84>
			{
				break;
 80035fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	e003      	b.n	8003612 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2b06      	cmp	r3, #6
 8003616:	d901      	bls.n	800361c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003618:	2306      	movs	r3, #6
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	3304      	adds	r3, #4
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff f966 	bl	8002904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	3318      	adds	r3, #24
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f961 	bl	8002904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	f1c3 0207 	rsb	r2, r3, #7
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	2200      	movs	r2, #0
 800365c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	69b8      	ldr	r0, [r7, #24]
 800366c:	f000 fecc 	bl	8004408 <pxPortInitialiseStack>
 8003670:	4602      	mov	r2, r0
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003682:	bf00      	nop
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003694:	f000 ffe6 	bl	8004664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003698:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <prvAddNewTaskToReadyList+0xb8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a29      	ldr	r2, [pc, #164]	; (8003744 <prvAddNewTaskToReadyList+0xb8>)
 80036a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <prvAddNewTaskToReadyList+0xbc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <prvAddNewTaskToReadyList+0xbc>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <prvAddNewTaskToReadyList+0xb8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d110      	bne.n	80036da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036b8:	f000 fbc6 	bl	8003e48 <prvInitialiseTaskLists>
 80036bc:	e00d      	b.n	80036da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036be:	4b23      	ldr	r3, [pc, #140]	; (800374c <prvAddNewTaskToReadyList+0xc0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <prvAddNewTaskToReadyList+0xbc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d802      	bhi.n	80036da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <prvAddNewTaskToReadyList+0xbc>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <prvAddNewTaskToReadyList+0xc4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <prvAddNewTaskToReadyList+0xc4>)
 80036e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <prvAddNewTaskToReadyList+0xc8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <prvAddNewTaskToReadyList+0xc8>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <prvAddNewTaskToReadyList+0xcc>)
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7ff f906 	bl	800291e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003712:	f000 ffd7 	bl	80046c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <prvAddNewTaskToReadyList+0xc0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <prvAddNewTaskToReadyList+0xbc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	429a      	cmp	r2, r3
 800372a:	d207      	bcs.n	800373c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <prvAddNewTaskToReadyList+0xd0>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200003e8 	.word	0x200003e8
 8003748:	200002e8 	.word	0x200002e8
 800374c:	200003f4 	.word	0x200003f4
 8003750:	20000404 	.word	0x20000404
 8003754:	200003f0 	.word	0x200003f0
 8003758:	200002ec 	.word	0x200002ec
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d017      	beq.n	80037a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <vTaskDelay+0x60>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <vTaskDelay+0x30>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	60bb      	str	r3, [r7, #8]
}
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003790:	f000 f87a 	bl	8003888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003794:	2100      	movs	r1, #0
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fdd0 	bl	800433c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800379c:	f000 f882 	bl	80038a4 <xTaskResumeAll>
 80037a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <vTaskDelay+0x64>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000410 	.word	0x20000410
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037d6:	463a      	mov	r2, r7
 80037d8:	1d39      	adds	r1, r7, #4
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fed2 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	9202      	str	r2, [sp, #8]
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	460a      	mov	r2, r1
 80037f6:	491e      	ldr	r1, [pc, #120]	; (8003870 <vTaskStartScheduler+0xa8>)
 80037f8:	481e      	ldr	r0, [pc, #120]	; (8003874 <vTaskStartScheduler+0xac>)
 80037fa:	f7ff fe1d 	bl	8003438 <xTaskCreateStatic>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <vTaskStartScheduler+0xb0>)
 8003802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <vTaskStartScheduler+0xb0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800380c:	2301      	movs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e001      	b.n	8003816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d116      	bne.n	800384a <vTaskStartScheduler+0x82>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	613b      	str	r3, [r7, #16]
}
 800382e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <vTaskStartScheduler+0xb4>)
 8003832:	f04f 32ff 	mov.w	r2, #4294967295
 8003836:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <vTaskStartScheduler+0xb8>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <vTaskStartScheduler+0xbc>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003844:	f000 fe6c 	bl	8004520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003848:	e00e      	b.n	8003868 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d10a      	bne.n	8003868 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	60fb      	str	r3, [r7, #12]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <vTaskStartScheduler+0x9e>
}
 8003868:	bf00      	nop
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	080056c0 	.word	0x080056c0
 8003874:	08003e19 	.word	0x08003e19
 8003878:	2000040c 	.word	0x2000040c
 800387c:	20000408 	.word	0x20000408
 8003880:	200003f4 	.word	0x200003f4
 8003884:	200003ec 	.word	0x200003ec

08003888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <vTaskSuspendAll+0x18>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <vTaskSuspendAll+0x18>)
 8003894:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20000410 	.word	0x20000410

080038a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <xTaskResumeAll+0x114>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	603b      	str	r3, [r7, #0]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038d0:	f000 fec8 	bl	8004664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038d4:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <xTaskResumeAll+0x114>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <xTaskResumeAll+0x114>)
 80038dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038de:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <xTaskResumeAll+0x114>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d161      	bne.n	80039aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038e6:	4b35      	ldr	r3, [pc, #212]	; (80039bc <xTaskResumeAll+0x118>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d05d      	beq.n	80039aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ee:	e02e      	b.n	800394e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f0:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <xTaskResumeAll+0x11c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3318      	adds	r3, #24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff f86b 	bl	80029d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3304      	adds	r3, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff f866 	bl	80029d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	2201      	movs	r2, #1
 8003912:	409a      	lsls	r2, r3
 8003914:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <xTaskResumeAll+0x120>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <xTaskResumeAll+0x120>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <xTaskResumeAll+0x124>)
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fe fff2 	bl	800291e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <xTaskResumeAll+0x128>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <xTaskResumeAll+0x12c>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <xTaskResumeAll+0x11c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1cc      	bne.n	80038f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800395c:	f000 fb12 	bl	8003f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <xTaskResumeAll+0x130>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800396c:	f000 f836 	bl	80039dc <xTaskIncrementTick>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <xTaskResumeAll+0x12c>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f1      	bne.n	800396c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <xTaskResumeAll+0x130>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <xTaskResumeAll+0x12c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <xTaskResumeAll+0x134>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039aa:	f000 fe8b 	bl	80046c4 <vPortExitCritical>

	return xAlreadyYielded;
 80039ae:	68bb      	ldr	r3, [r7, #8]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000410 	.word	0x20000410
 80039bc:	200003e8 	.word	0x200003e8
 80039c0:	200003a8 	.word	0x200003a8
 80039c4:	200003f0 	.word	0x200003f0
 80039c8:	200002ec 	.word	0x200002ec
 80039cc:	200002e8 	.word	0x200002e8
 80039d0:	200003fc 	.word	0x200003fc
 80039d4:	200003f8 	.word	0x200003f8
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e6:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <xTaskIncrementTick+0x144>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 808e 	bne.w	8003b0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039f0:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <xTaskIncrementTick+0x148>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039f8:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <xTaskIncrementTick+0x148>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d120      	bne.n	8003a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a04:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	603b      	str	r3, [r7, #0]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xTaskIncrementTick+0x46>
 8003a24:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <xTaskIncrementTick+0x150>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4a3e      	ldr	r2, [pc, #248]	; (8003b2c <xTaskIncrementTick+0x150>)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <xTaskIncrementTick+0x154>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <xTaskIncrementTick+0x154>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	f000 fa9f 	bl	8003f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <xTaskIncrementTick+0x158>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d348      	bcc.n	8003ae2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <xTaskIncrementTick+0x158>)
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	601a      	str	r2, [r3, #0]
					break;
 8003a62:	e03e      	b.n	8003ae2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a64:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d203      	bcs.n	8003a84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <xTaskIncrementTick+0x158>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a82:	e02e      	b.n	8003ae2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe ffa5 	bl	80029d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3318      	adds	r3, #24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff9c 	bl	80029d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <xTaskIncrementTick+0x15c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <xTaskIncrementTick+0x15c>)
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <xTaskIncrementTick+0x160>)
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe ff28 	bl	800291e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <xTaskIncrementTick+0x164>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3b9      	bcc.n	8003a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae0:	e7b6      	b.n	8003a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <xTaskIncrementTick+0x164>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4914      	ldr	r1, [pc, #80]	; (8003b3c <xTaskIncrementTick+0x160>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d901      	bls.n	8003afe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <xTaskIncrementTick+0x168>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e004      	b.n	8003b16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <xTaskIncrementTick+0x16c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <xTaskIncrementTick+0x16c>)
 8003b14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b16:	697b      	ldr	r3, [r7, #20]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000410 	.word	0x20000410
 8003b24:	200003ec 	.word	0x200003ec
 8003b28:	200003a0 	.word	0x200003a0
 8003b2c:	200003a4 	.word	0x200003a4
 8003b30:	20000400 	.word	0x20000400
 8003b34:	20000408 	.word	0x20000408
 8003b38:	200003f0 	.word	0x200003f0
 8003b3c:	200002ec 	.word	0x200002ec
 8003b40:	200002e8 	.word	0x200002e8
 8003b44:	200003fc 	.word	0x200003fc
 8003b48:	200003f8 	.word	0x200003f8

08003b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <vTaskSwitchContext+0xa4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <vTaskSwitchContext+0xa8>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b60:	e03f      	b.n	8003be2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <vTaskSwitchContext+0xa8>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <vTaskSwitchContext+0xac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f1c3 031f 	rsb	r3, r3, #31
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	491f      	ldr	r1, [pc, #124]	; (8003bfc <vTaskSwitchContext+0xb0>)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	607b      	str	r3, [r7, #4]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vTaskSwitchContext+0x5a>
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <vTaskSwitchContext+0xb0>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d104      	bne.n	8003bd8 <vTaskSwitchContext+0x8c>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <vTaskSwitchContext+0xb4>)
 8003be0:	6013      	str	r3, [r2, #0]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000410 	.word	0x20000410
 8003bf4:	200003fc 	.word	0x200003fc
 8003bf8:	200003f0 	.word	0x200003f0
 8003bfc:	200002ec 	.word	0x200002ec
 8003c00:	200002e8 	.word	0x200002e8

08003c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <vTaskPlaceOnEventList+0x44>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe fe97 	bl	8002966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c38:	2101      	movs	r1, #1
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f000 fb7e 	bl	800433c <prvAddCurrentTaskToDelayedList>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200002e8 	.word	0x200002e8

08003c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe feab 	bl	80029d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c82:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <xTaskRemoveFromEventList+0xac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11c      	bne.n	8003cc4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fea2 	bl	80029d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <xTaskRemoveFromEventList+0xb0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <xTaskRemoveFromEventList+0xb0>)
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <xTaskRemoveFromEventList+0xb4>)
 8003cb4:	441a      	add	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fe fe2e 	bl	800291e <vListInsertEnd>
 8003cc2:	e005      	b.n	8003cd0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3318      	adds	r3, #24
 8003cc8:	4619      	mov	r1, r3
 8003cca:	480e      	ldr	r0, [pc, #56]	; (8003d04 <xTaskRemoveFromEventList+0xb8>)
 8003ccc:	f7fe fe27 	bl	800291e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <xTaskRemoveFromEventList+0xbc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d905      	bls.n	8003cea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <xTaskRemoveFromEventList+0xc0>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e001      	b.n	8003cee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000410 	.word	0x20000410
 8003cfc:	200003f0 	.word	0x200003f0
 8003d00:	200002ec 	.word	0x200002ec
 8003d04:	200003a8 	.word	0x200003a8
 8003d08:	200002e8 	.word	0x200002e8
 8003d0c:	200003fc 	.word	0x200003fc

08003d10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <vTaskInternalSetTimeOutState+0x24>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <vTaskInternalSetTimeOutState+0x28>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20000400 	.word	0x20000400
 8003d38:	200003ec 	.word	0x200003ec

08003d3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d7e:	f000 fc71 	bl	8004664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <xTaskCheckForTimeOut+0xbc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d102      	bne.n	8003da2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	e023      	b.n	8003dea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <xTaskCheckForTimeOut+0xc0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d007      	beq.n	8003dbe <xTaskCheckForTimeOut+0x82>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	e015      	b.n	8003dea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d20b      	bcs.n	8003de0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1ad2      	subs	r2, r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff9b 	bl	8003d10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	e004      	b.n	8003dea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dea:	f000 fc6b 	bl	80046c4 <vPortExitCritical>

	return xReturn;
 8003dee:	69fb      	ldr	r3, [r7, #28]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200003ec 	.word	0x200003ec
 8003dfc:	20000400 	.word	0x20000400

08003e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <vTaskMissedYield+0x14>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	200003fc 	.word	0x200003fc

08003e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e20:	f000 f852 	bl	8003ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <prvIdleTask+0x28>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d9f9      	bls.n	8003e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <prvIdleTask+0x2c>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e3c:	e7f0      	b.n	8003e20 <prvIdleTask+0x8>
 8003e3e:	bf00      	nop
 8003e40:	200002ec 	.word	0x200002ec
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	e00c      	b.n	8003e6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <prvInitialiseTaskLists+0x60>)
 8003e60:	4413      	add	r3, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fd2e 	bl	80028c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b06      	cmp	r3, #6
 8003e72:	d9ef      	bls.n	8003e54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e74:	480d      	ldr	r0, [pc, #52]	; (8003eac <prvInitialiseTaskLists+0x64>)
 8003e76:	f7fe fd25 	bl	80028c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e7a:	480d      	ldr	r0, [pc, #52]	; (8003eb0 <prvInitialiseTaskLists+0x68>)
 8003e7c:	f7fe fd22 	bl	80028c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e80:	480c      	ldr	r0, [pc, #48]	; (8003eb4 <prvInitialiseTaskLists+0x6c>)
 8003e82:	f7fe fd1f 	bl	80028c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e86:	480c      	ldr	r0, [pc, #48]	; (8003eb8 <prvInitialiseTaskLists+0x70>)
 8003e88:	f7fe fd1c 	bl	80028c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e8c:	480b      	ldr	r0, [pc, #44]	; (8003ebc <prvInitialiseTaskLists+0x74>)
 8003e8e:	f7fe fd19 	bl	80028c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <prvInitialiseTaskLists+0x78>)
 8003e94:	4a05      	ldr	r2, [pc, #20]	; (8003eac <prvInitialiseTaskLists+0x64>)
 8003e96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <prvInitialiseTaskLists+0x7c>)
 8003e9a:	4a05      	ldr	r2, [pc, #20]	; (8003eb0 <prvInitialiseTaskLists+0x68>)
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200002ec 	.word	0x200002ec
 8003eac:	20000378 	.word	0x20000378
 8003eb0:	2000038c 	.word	0x2000038c
 8003eb4:	200003a8 	.word	0x200003a8
 8003eb8:	200003bc 	.word	0x200003bc
 8003ebc:	200003d4 	.word	0x200003d4
 8003ec0:	200003a0 	.word	0x200003a0
 8003ec4:	200003a4 	.word	0x200003a4

08003ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ece:	e019      	b.n	8003f04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ed0:	f000 fbc8 	bl	8004664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <prvCheckTasksWaitingTermination+0x50>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fd79 	bl	80029d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <prvCheckTasksWaitingTermination+0x54>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <prvCheckTasksWaitingTermination+0x54>)
 8003eee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <prvCheckTasksWaitingTermination+0x58>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <prvCheckTasksWaitingTermination+0x58>)
 8003ef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003efa:	f000 fbe3 	bl	80046c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f810 	bl	8003f24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <prvCheckTasksWaitingTermination+0x58>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e1      	bne.n	8003ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200003bc 	.word	0x200003bc
 8003f1c:	200003e8 	.word	0x200003e8
 8003f20:	200003d0 	.word	0x200003d0

08003f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd40 	bl	80049c0 <vPortFree>
				vPortFree( pxTCB );
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fd3d 	bl	80049c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f46:	e018      	b.n	8003f7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d103      	bne.n	8003f5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fd34 	bl	80049c0 <vPortFree>
	}
 8003f58:	e00f      	b.n	8003f7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d00a      	beq.n	8003f7a <prvDeleteTCB+0x56>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60fb      	str	r3, [r7, #12]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <prvDeleteTCB+0x54>
	}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <prvResetNextTaskUnblockTime+0x38>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f9c:	e008      	b.n	8003fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvResetNextTaskUnblockTime+0x38>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	200003a0 	.word	0x200003a0
 8003fc0:	20000408 	.word	0x20000408

08003fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <xTaskGetSchedulerState+0x34>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	e008      	b.n	8003fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <xTaskGetSchedulerState+0x38>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	e001      	b.n	8003fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fea:	687b      	ldr	r3, [r7, #4]
	}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	200003f4 	.word	0x200003f4
 8003ffc:	20000410 	.word	0x20000410

08004000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d05e      	beq.n	80040d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <xTaskPriorityInherit+0xe0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	429a      	cmp	r2, r3
 8004022:	d24e      	bcs.n	80040c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	db06      	blt.n	800403a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <xTaskPriorityInherit+0xe0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	f1c3 0207 	rsb	r2, r3, #7
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6959      	ldr	r1, [r3, #20]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <xTaskPriorityInherit+0xe4>)
 800404c:	4413      	add	r3, r2
 800404e:	4299      	cmp	r1, r3
 8004050:	d12f      	bne.n	80040b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fcbe 	bl	80029d8 <uxListRemove>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	2201      	movs	r2, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43da      	mvns	r2, r3
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <xTaskPriorityInherit+0xe8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4013      	ands	r3, r2
 8004074:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <xTaskPriorityInherit+0xe8>)
 8004076:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <xTaskPriorityInherit+0xe0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <xTaskPriorityInherit+0xe8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <xTaskPriorityInherit+0xe8>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <xTaskPriorityInherit+0xe4>)
 80040a2:	441a      	add	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fe fc37 	bl	800291e <vListInsertEnd>
 80040b0:	e004      	b.n	80040bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <xTaskPriorityInherit+0xe0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e008      	b.n	80040d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <xTaskPriorityInherit+0xe0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d201      	bcs.n	80040d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040d4:	68fb      	ldr	r3, [r7, #12]
	}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200002e8 	.word	0x200002e8
 80040e4:	200002ec 	.word	0x200002ec
 80040e8:	200003f0 	.word	0x200003f0

080040ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d06e      	beq.n	80041e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <xTaskPriorityDisinherit+0x100>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d00a      	beq.n	8004122 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60bb      	str	r3, [r7, #8]
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	429a      	cmp	r2, r3
 8004154:	d044      	beq.n	80041e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	d140      	bne.n	80041e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fc38 	bl	80029d8 <uxListRemove>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004172:	491f      	ldr	r1, [pc, #124]	; (80041f0 <xTaskPriorityDisinherit+0x104>)
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xTaskPriorityDisinherit+0xae>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <xTaskPriorityDisinherit+0x108>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4013      	ands	r3, r2
 8004196:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <xTaskPriorityDisinherit+0x108>)
 8004198:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f1c3 0207 	rsb	r2, r3, #7
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	2201      	movs	r2, #1
 80041b4:	409a      	lsls	r2, r3
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <xTaskPriorityDisinherit+0x108>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <xTaskPriorityDisinherit+0x108>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <xTaskPriorityDisinherit+0x104>)
 80041ce:	441a      	add	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fe fba1 	bl	800291e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041e0:	697b      	ldr	r3, [r7, #20]
	}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200002e8 	.word	0x200002e8
 80041f0:	200002ec 	.word	0x200002ec
 80041f4:	200003f0 	.word	0x200003f0

080041f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004206:	2301      	movs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d077      	beq.n	8004300 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60fb      	str	r3, [r7, #12]
}
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d902      	bls.n	800423e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e002      	b.n	8004244 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	429a      	cmp	r2, r3
 800424c:	d058      	beq.n	8004300 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	d153      	bne.n	8004300 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10a      	bne.n	8004278 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	db04      	blt.n	8004296 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f1c3 0207 	rsb	r2, r3, #7
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	6959      	ldr	r1, [r3, #20]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042a6:	4413      	add	r3, r2
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d129      	bne.n	8004300 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fb91 	bl	80029d8 <uxListRemove>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4013      	ands	r3, r2
 80042ce:	4a10      	ldr	r2, [pc, #64]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	2201      	movs	r2, #1
 80042d8:	409a      	lsls	r2, r3
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042f2:	441a      	add	r2, r3
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7fe fb0f 	bl	800291e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200002e8 	.word	0x200002e8
 800430c:	200002ec 	.word	0x200002ec
 8004310:	200003f0 	.word	0x200003f0

08004314 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <pvTaskIncrementMutexHeldCount+0x24>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <pvTaskIncrementMutexHeldCount+0x24>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004326:	3201      	adds	r2, #1
 8004328:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800432a:	4b03      	ldr	r3, [pc, #12]	; (8004338 <pvTaskIncrementMutexHeldCount+0x24>)
 800432c:	681b      	ldr	r3, [r3, #0]
	}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	200002e8 	.word	0x200002e8

0800433c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004346:	4b29      	ldr	r3, [pc, #164]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434c:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fb40 	bl	80029d8 <uxListRemove>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	2201      	movs	r2, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43da      	mvns	r2, r3
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4013      	ands	r3, r2
 8004372:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004374:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d10a      	bne.n	8004394 <prvAddCurrentTaskToDelayedList+0x58>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	481a      	ldr	r0, [pc, #104]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800438e:	f7fe fac6 	bl	800291e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004392:	e026      	b.n	80043e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d209      	bcs.n	80043c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fe fad4 	bl	8002966 <vListInsert>
}
 80043be:	e010      	b.n	80043e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7fe faca 	bl	8002966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d202      	bcs.n	80043e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043dc:	4a09      	ldr	r2, [pc, #36]	; (8004404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6013      	str	r3, [r2, #0]
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200003ec 	.word	0x200003ec
 80043f0:	200002e8 	.word	0x200002e8
 80043f4:	200003f0 	.word	0x200003f0
 80043f8:	200003d4 	.word	0x200003d4
 80043fc:	200003a4 	.word	0x200003a4
 8004400:	200003a0 	.word	0x200003a0
 8004404:	20000408 	.word	0x20000408

08004408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3b04      	subs	r3, #4
 8004418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b04      	subs	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3b04      	subs	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004438:	4a0c      	ldr	r2, [pc, #48]	; (800446c <pxPortInitialiseStack+0x64>)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b14      	subs	r3, #20
 8004442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b04      	subs	r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f06f 0202 	mvn.w	r2, #2
 8004456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3b20      	subs	r3, #32
 800445c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	08004471 	.word	0x08004471

08004470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <prvTaskExitError+0x54>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d00a      	beq.n	800449a <prvTaskExitError+0x2a>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60fb      	str	r3, [r7, #12]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <prvTaskExitError+0x28>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60bb      	str	r3, [r7, #8]
}
 80044ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044ae:	bf00      	nop
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0fc      	beq.n	80044b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	2000000c 	.word	0x2000000c
	...

080044d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <pxCurrentTCBConst2>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6808      	ldr	r0, [r1, #0]
 80044d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	f380 8809 	msr	PSP, r0
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	4770      	bx	lr
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst2>:
 80044f0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044f8:	4808      	ldr	r0, [pc, #32]	; (800451c <prvPortStartFirstTask+0x24>)
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	6800      	ldr	r0, [r0, #0]
 80044fe:	f380 8808 	msr	MSP, r0
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8814 	msr	CONTROL, r0
 800450a:	b662      	cpsie	i
 800450c:	b661      	cpsie	f
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	df00      	svc	0
 8004518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800451a:	bf00      	nop
 800451c:	e000ed08 	.word	0xe000ed08

08004520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004526:	4b46      	ldr	r3, [pc, #280]	; (8004640 <xPortStartScheduler+0x120>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a46      	ldr	r2, [pc, #280]	; (8004644 <xPortStartScheduler+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <xPortStartScheduler+0x26>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004546:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <xPortStartScheduler+0x120>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <xPortStartScheduler+0x128>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10a      	bne.n	8004566 <xPortStartScheduler+0x46>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60fb      	str	r3, [r7, #12]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <xPortStartScheduler+0x12c>)
 8004568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	22ff      	movs	r2, #255	; 0xff
 8004576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <xPortStartScheduler+0x130>)
 800458c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <xPortStartScheduler+0x134>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004594:	e009      	b.n	80045aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <xPortStartScheduler+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3b01      	subs	r3, #1
 800459c:	4a2d      	ldr	r2, [pc, #180]	; (8004654 <xPortStartScheduler+0x134>)
 800459e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d0ef      	beq.n	8004596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <xPortStartScheduler+0x134>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1c3 0307 	rsb	r3, r3, #7
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00a      	beq.n	80045d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <xPortStartScheduler+0x134>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <xPortStartScheduler+0x134>)
 80045e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <xPortStartScheduler+0x134>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ea:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <xPortStartScheduler+0x134>)
 80045ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <xPortStartScheduler+0x138>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <xPortStartScheduler+0x138>)
 80045fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <xPortStartScheduler+0x138>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <xPortStartScheduler+0x138>)
 8004608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800460c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800460e:	f000 f8dd 	bl	80047cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <xPortStartScheduler+0x13c>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004618:	f000 f8fc 	bl	8004814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <xPortStartScheduler+0x140>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <xPortStartScheduler+0x140>)
 8004622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004628:	f7ff ff66 	bl	80044f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800462c:	f7ff fa8e 	bl	8003b4c <vTaskSwitchContext>
	prvTaskExitError();
 8004630:	f7ff ff1e 	bl	8004470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000ed00 	.word	0xe000ed00
 8004644:	410fc271 	.word	0x410fc271
 8004648:	410fc270 	.word	0x410fc270
 800464c:	e000e400 	.word	0xe000e400
 8004650:	20000414 	.word	0x20000414
 8004654:	20000418 	.word	0x20000418
 8004658:	e000ed20 	.word	0xe000ed20
 800465c:	2000000c 	.word	0x2000000c
 8004660:	e000ef34 	.word	0xe000ef34

08004664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	607b      	str	r3, [r7, #4]
}
 800467c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <vPortEnterCritical+0x58>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <vPortEnterCritical+0x58>)
 8004686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <vPortEnterCritical+0x58>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10f      	bne.n	80046b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <vPortEnterCritical+0x5c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	603b      	str	r3, [r7, #0]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <vPortEnterCritical+0x4a>
	}
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <vPortExitCritical+0x50>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <vPortExitCritical+0x24>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	607b      	str	r3, [r7, #4]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <vPortExitCritical+0x50>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <vPortExitCritical+0x50>)
 80046f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <vPortExitCritical+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <vPortExitCritical+0x42>
 80046fa:	2300      	movs	r3, #0
 80046fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c
	...

08004720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f01e 0f10 	tst.w	lr, #16
 8004730:	bf08      	it	eq
 8004732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	6010      	str	r0, [r2, #0]
 800473c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004744:	f380 8811 	msr	BASEPRI, r0
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f7ff f9fc 	bl	8003b4c <vTaskSwitchContext>
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f380 8811 	msr	BASEPRI, r0
 800475c:	bc09      	pop	{r0, r3}
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004766:	f01e 0f10 	tst.w	lr, #16
 800476a:	bf08      	it	eq
 800476c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004770:	f380 8809 	msr	PSP, r0
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	f3af 8000 	nop.w

08004780 <pxCurrentTCBConst>:
 8004780:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
}
 80047a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047a2:	f7ff f91b 	bl	80039dc <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <SysTick_Handler+0x40>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f383 8811 	msr	BASEPRI, r3
}
 80047be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <vPortSetupTimerInterrupt+0x38>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <vPortSetupTimerInterrupt+0x3c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <vPortSetupTimerInterrupt+0x40>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <vPortSetupTimerInterrupt+0x44>)
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e010 	.word	0xe000e010
 8004804:	e000e018 	.word	0xe000e018
 8004808:	20000000 	.word	0x20000000
 800480c:	10624dd3 	.word	0x10624dd3
 8004810:	e000e014 	.word	0xe000e014

08004814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004824 <vPortEnableVFP+0x10>
 8004818:	6801      	ldr	r1, [r0, #0]
 800481a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800481e:	6001      	str	r1, [r0, #0]
 8004820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004822:	bf00      	nop
 8004824:	e000ed88 	.word	0xe000ed88

08004828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004834:	f7ff f828 	bl	8003888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <pvPortMalloc+0x180>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004840:	f000 f920 	bl	8004a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <pvPortMalloc+0x184>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8093 	bne.w	8004978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01d      	beq.n	8004894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004858:	2208      	movs	r2, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <pvPortMalloc+0x6c>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06e      	beq.n	8004978 <pvPortMalloc+0x150>
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <pvPortMalloc+0x188>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d869      	bhi.n	8004978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <pvPortMalloc+0x18c>)
 80048a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <pvPortMalloc+0x18c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ae:	e004      	b.n	80048ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <pvPortMalloc+0xa4>
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f1      	bne.n	80048b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048cc:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <pvPortMalloc+0x180>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d050      	beq.n	8004978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2208      	movs	r2, #8
 80048dc:	4413      	add	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	2308      	movs	r3, #8
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d91f      	bls.n	8004938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <pvPortMalloc+0xf8>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	613b      	str	r3, [r7, #16]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004932:	69b8      	ldr	r0, [r7, #24]
 8004934:	f000 f908 	bl	8004b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <pvPortMalloc+0x188>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <pvPortMalloc+0x188>)
 8004944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <pvPortMalloc+0x188>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <pvPortMalloc+0x190>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d203      	bcs.n	800495a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <pvPortMalloc+0x188>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <pvPortMalloc+0x190>)
 8004958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <pvPortMalloc+0x184>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	431a      	orrs	r2, r3
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <pvPortMalloc+0x194>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <pvPortMalloc+0x194>)
 8004976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004978:	f7fe ff94 	bl	80038a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <pvPortMalloc+0x174>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <pvPortMalloc+0x172>
	return pvReturn;
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20004024 	.word	0x20004024
 80049ac:	20004038 	.word	0x20004038
 80049b0:	20004028 	.word	0x20004028
 80049b4:	2000401c 	.word	0x2000401c
 80049b8:	2000402c 	.word	0x2000402c
 80049bc:	20004030 	.word	0x20004030

080049c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04d      	beq.n	8004a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049d2:	2308      	movs	r3, #8
 80049d4:	425b      	negs	r3, r3
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4413      	add	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <vPortFree+0xb8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <vPortFree+0x44>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vPortFree+0x62>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60bb      	str	r3, [r7, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <vPortFree+0xb8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11a      	bne.n	8004a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <vPortFree+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a48:	f7fe ff1e 	bl	8003888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <vPortFree+0xbc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vPortFree+0xbc>)
 8004a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f000 f874 	bl	8004b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <vPortFree+0xc0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a06      	ldr	r2, [pc, #24]	; (8004a80 <vPortFree+0xc0>)
 8004a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a6a:	f7fe ff1b 	bl	80038a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20004038 	.word	0x20004038
 8004a7c:	20004028 	.word	0x20004028
 8004a80:	20004034 	.word	0x20004034

08004a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <prvHeapInit+0xac>)
 8004a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3307      	adds	r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <prvHeapInit+0xac>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <prvHeapInit+0xb0>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <prvHeapInit+0xb0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <prvHeapInit+0xb4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvHeapInit+0xb4>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <prvHeapInit+0xb8>)
 8004b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <prvHeapInit+0xbc>)
 8004b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <prvHeapInit+0xc0>)
 8004b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	2000041c 	.word	0x2000041c
 8004b34:	2000401c 	.word	0x2000401c
 8004b38:	20004024 	.word	0x20004024
 8004b3c:	2000402c 	.word	0x2000402c
 8004b40:	20004028 	.word	0x20004028
 8004b44:	20004038 	.word	0x20004038

08004b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <prvInsertBlockIntoFreeList+0xac>)
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e002      	b.n	8004b5c <prvInsertBlockIntoFreeList+0x14>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d8f7      	bhi.n	8004b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d108      	bne.n	8004b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d118      	bne.n	8004bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d00d      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e008      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e003      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d002      	beq.n	8004be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000401c 	.word	0x2000401c
 8004bf8:	20004024 	.word	0x20004024

08004bfc <__errno>:
 8004bfc:	4b01      	ldr	r3, [pc, #4]	; (8004c04 <__errno+0x8>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000010 	.word	0x20000010

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	4d0d      	ldr	r5, [pc, #52]	; (8004c40 <__libc_init_array+0x38>)
 8004c0c:	4c0d      	ldr	r4, [pc, #52]	; (8004c44 <__libc_init_array+0x3c>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	2600      	movs	r6, #0
 8004c14:	42a6      	cmp	r6, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	4d0b      	ldr	r5, [pc, #44]	; (8004c48 <__libc_init_array+0x40>)
 8004c1a:	4c0c      	ldr	r4, [pc, #48]	; (8004c4c <__libc_init_array+0x44>)
 8004c1c:	f000 fc4e 	bl	80054bc <_init>
 8004c20:	1b64      	subs	r4, r4, r5
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	2600      	movs	r6, #0
 8004c26:	42a6      	cmp	r6, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c30:	4798      	blx	r3
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3a:	4798      	blx	r3
 8004c3c:	3601      	adds	r6, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	0800571c 	.word	0x0800571c
 8004c44:	0800571c 	.word	0x0800571c
 8004c48:	0800571c 	.word	0x0800571c
 8004c4c:	08005720 	.word	0x08005720

08004c50 <memcpy>:
 8004c50:	440a      	add	r2, r1
 8004c52:	4291      	cmp	r1, r2
 8004c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c58:	d100      	bne.n	8004c5c <memcpy+0xc>
 8004c5a:	4770      	bx	lr
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c66:	4291      	cmp	r1, r2
 8004c68:	d1f9      	bne.n	8004c5e <memcpy+0xe>
 8004c6a:	bd10      	pop	{r4, pc}

08004c6c <memset>:
 8004c6c:	4402      	add	r2, r0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <siprintf>:
 8004c7c:	b40e      	push	{r1, r2, r3}
 8004c7e:	b500      	push	{lr}
 8004c80:	b09c      	sub	sp, #112	; 0x70
 8004c82:	ab1d      	add	r3, sp, #116	; 0x74
 8004c84:	9002      	str	r0, [sp, #8]
 8004c86:	9006      	str	r0, [sp, #24]
 8004c88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c8c:	4809      	ldr	r0, [pc, #36]	; (8004cb4 <siprintf+0x38>)
 8004c8e:	9107      	str	r1, [sp, #28]
 8004c90:	9104      	str	r1, [sp, #16]
 8004c92:	4909      	ldr	r1, [pc, #36]	; (8004cb8 <siprintf+0x3c>)
 8004c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c98:	9105      	str	r1, [sp, #20]
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	a902      	add	r1, sp, #8
 8004ca0:	f000 f868 	bl	8004d74 <_svfiprintf_r>
 8004ca4:	9b02      	ldr	r3, [sp, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	b01c      	add	sp, #112	; 0x70
 8004cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb0:	b003      	add	sp, #12
 8004cb2:	4770      	bx	lr
 8004cb4:	20000010 	.word	0x20000010
 8004cb8:	ffff0208 	.word	0xffff0208

08004cbc <__ssputs_r>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	688e      	ldr	r6, [r1, #8]
 8004cc2:	429e      	cmp	r6, r3
 8004cc4:	4682      	mov	sl, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4690      	mov	r8, r2
 8004cca:	461f      	mov	r7, r3
 8004ccc:	d838      	bhi.n	8004d40 <__ssputs_r+0x84>
 8004cce:	898a      	ldrh	r2, [r1, #12]
 8004cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd4:	d032      	beq.n	8004d3c <__ssputs_r+0x80>
 8004cd6:	6825      	ldr	r5, [r4, #0]
 8004cd8:	6909      	ldr	r1, [r1, #16]
 8004cda:	eba5 0901 	sub.w	r9, r5, r1
 8004cde:	6965      	ldr	r5, [r4, #20]
 8004ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce8:	3301      	adds	r3, #1
 8004cea:	444b      	add	r3, r9
 8004cec:	106d      	asrs	r5, r5, #1
 8004cee:	429d      	cmp	r5, r3
 8004cf0:	bf38      	it	cc
 8004cf2:	461d      	movcc	r5, r3
 8004cf4:	0553      	lsls	r3, r2, #21
 8004cf6:	d531      	bpl.n	8004d5c <__ssputs_r+0xa0>
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f000 fb39 	bl	8005370 <_malloc_r>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	b950      	cbnz	r0, 8004d18 <__ssputs_r+0x5c>
 8004d02:	230c      	movs	r3, #12
 8004d04:	f8ca 3000 	str.w	r3, [sl]
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d18:	6921      	ldr	r1, [r4, #16]
 8004d1a:	464a      	mov	r2, r9
 8004d1c:	f7ff ff98 	bl	8004c50 <memcpy>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	6126      	str	r6, [r4, #16]
 8004d2e:	6165      	str	r5, [r4, #20]
 8004d30:	444e      	add	r6, r9
 8004d32:	eba5 0509 	sub.w	r5, r5, r9
 8004d36:	6026      	str	r6, [r4, #0]
 8004d38:	60a5      	str	r5, [r4, #8]
 8004d3a:	463e      	mov	r6, r7
 8004d3c:	42be      	cmp	r6, r7
 8004d3e:	d900      	bls.n	8004d42 <__ssputs_r+0x86>
 8004d40:	463e      	mov	r6, r7
 8004d42:	4632      	mov	r2, r6
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	4641      	mov	r1, r8
 8004d48:	f000 faa8 	bl	800529c <memmove>
 8004d4c:	68a3      	ldr	r3, [r4, #8]
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	4432      	add	r2, r6
 8004d54:	60a3      	str	r3, [r4, #8]
 8004d56:	6022      	str	r2, [r4, #0]
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e7db      	b.n	8004d14 <__ssputs_r+0x58>
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	f000 fb61 	bl	8005424 <_realloc_r>
 8004d62:	4606      	mov	r6, r0
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d1e1      	bne.n	8004d2c <__ssputs_r+0x70>
 8004d68:	6921      	ldr	r1, [r4, #16]
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f000 fab0 	bl	80052d0 <_free_r>
 8004d70:	e7c7      	b.n	8004d02 <__ssputs_r+0x46>
	...

08004d74 <_svfiprintf_r>:
 8004d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d78:	4698      	mov	r8, r3
 8004d7a:	898b      	ldrh	r3, [r1, #12]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	b09d      	sub	sp, #116	; 0x74
 8004d80:	4607      	mov	r7, r0
 8004d82:	460d      	mov	r5, r1
 8004d84:	4614      	mov	r4, r2
 8004d86:	d50e      	bpl.n	8004da6 <_svfiprintf_r+0x32>
 8004d88:	690b      	ldr	r3, [r1, #16]
 8004d8a:	b963      	cbnz	r3, 8004da6 <_svfiprintf_r+0x32>
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	f000 faef 	bl	8005370 <_malloc_r>
 8004d92:	6028      	str	r0, [r5, #0]
 8004d94:	6128      	str	r0, [r5, #16]
 8004d96:	b920      	cbnz	r0, 8004da2 <_svfiprintf_r+0x2e>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	e0d1      	b.n	8004f46 <_svfiprintf_r+0x1d2>
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	616b      	str	r3, [r5, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9309      	str	r3, [sp, #36]	; 0x24
 8004daa:	2320      	movs	r3, #32
 8004dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db4:	2330      	movs	r3, #48	; 0x30
 8004db6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f60 <_svfiprintf_r+0x1ec>
 8004dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dbe:	f04f 0901 	mov.w	r9, #1
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dca:	b10a      	cbz	r2, 8004dd0 <_svfiprintf_r+0x5c>
 8004dcc:	2a25      	cmp	r2, #37	; 0x25
 8004dce:	d1f9      	bne.n	8004dc4 <_svfiprintf_r+0x50>
 8004dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd4:	d00b      	beq.n	8004dee <_svfiprintf_r+0x7a>
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f7ff ff6d 	bl	8004cbc <__ssputs_r>
 8004de2:	3001      	adds	r0, #1
 8004de4:	f000 80aa 	beq.w	8004f3c <_svfiprintf_r+0x1c8>
 8004de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dea:	445a      	add	r2, fp
 8004dec:	9209      	str	r2, [sp, #36]	; 0x24
 8004dee:	f89a 3000 	ldrb.w	r3, [sl]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80a2 	beq.w	8004f3c <_svfiprintf_r+0x1c8>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e02:	f10a 0a01 	add.w	sl, sl, #1
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	9307      	str	r3, [sp, #28]
 8004e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e10:	4654      	mov	r4, sl
 8004e12:	2205      	movs	r2, #5
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	4851      	ldr	r0, [pc, #324]	; (8004f60 <_svfiprintf_r+0x1ec>)
 8004e1a:	f7fb f9e9 	bl	80001f0 <memchr>
 8004e1e:	9a04      	ldr	r2, [sp, #16]
 8004e20:	b9d8      	cbnz	r0, 8004e5a <_svfiprintf_r+0xe6>
 8004e22:	06d0      	lsls	r0, r2, #27
 8004e24:	bf44      	itt	mi
 8004e26:	2320      	movmi	r3, #32
 8004e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2c:	0711      	lsls	r1, r2, #28
 8004e2e:	bf44      	itt	mi
 8004e30:	232b      	movmi	r3, #43	; 0x2b
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e36:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3c:	d015      	beq.n	8004e6a <_svfiprintf_r+0xf6>
 8004e3e:	9a07      	ldr	r2, [sp, #28]
 8004e40:	4654      	mov	r4, sl
 8004e42:	2000      	movs	r0, #0
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4621      	mov	r1, r4
 8004e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4e:	3b30      	subs	r3, #48	; 0x30
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	d94e      	bls.n	8004ef2 <_svfiprintf_r+0x17e>
 8004e54:	b1b0      	cbz	r0, 8004e84 <_svfiprintf_r+0x110>
 8004e56:	9207      	str	r2, [sp, #28]
 8004e58:	e014      	b.n	8004e84 <_svfiprintf_r+0x110>
 8004e5a:	eba0 0308 	sub.w	r3, r0, r8
 8004e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	46a2      	mov	sl, r4
 8004e68:	e7d2      	b.n	8004e10 <_svfiprintf_r+0x9c>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9103      	str	r1, [sp, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfbb      	ittet	lt
 8004e76:	425b      	neglt	r3, r3
 8004e78:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7c:	9307      	strge	r3, [sp, #28]
 8004e7e:	9307      	strlt	r3, [sp, #28]
 8004e80:	bfb8      	it	lt
 8004e82:	9204      	strlt	r2, [sp, #16]
 8004e84:	7823      	ldrb	r3, [r4, #0]
 8004e86:	2b2e      	cmp	r3, #46	; 0x2e
 8004e88:	d10c      	bne.n	8004ea4 <_svfiprintf_r+0x130>
 8004e8a:	7863      	ldrb	r3, [r4, #1]
 8004e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8e:	d135      	bne.n	8004efc <_svfiprintf_r+0x188>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	9203      	str	r2, [sp, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bfb8      	it	lt
 8004e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea0:	3402      	adds	r4, #2
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f70 <_svfiprintf_r+0x1fc>
 8004ea8:	7821      	ldrb	r1, [r4, #0]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	4650      	mov	r0, sl
 8004eae:	f7fb f99f 	bl	80001f0 <memchr>
 8004eb2:	b140      	cbz	r0, 8004ec6 <_svfiprintf_r+0x152>
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	eba0 000a 	sub.w	r0, r0, sl
 8004eba:	fa03 f000 	lsl.w	r0, r3, r0
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	4303      	orrs	r3, r0
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	9304      	str	r3, [sp, #16]
 8004ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eca:	4826      	ldr	r0, [pc, #152]	; (8004f64 <_svfiprintf_r+0x1f0>)
 8004ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed0:	2206      	movs	r2, #6
 8004ed2:	f7fb f98d 	bl	80001f0 <memchr>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d038      	beq.n	8004f4c <_svfiprintf_r+0x1d8>
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <_svfiprintf_r+0x1f4>)
 8004edc:	bb1b      	cbnz	r3, 8004f26 <_svfiprintf_r+0x1b2>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	3307      	adds	r3, #7
 8004ee2:	f023 0307 	bic.w	r3, r3, #7
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eec:	4433      	add	r3, r6
 8004eee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef0:	e767      	b.n	8004dc2 <_svfiprintf_r+0x4e>
 8004ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	2001      	movs	r0, #1
 8004efa:	e7a5      	b.n	8004e48 <_svfiprintf_r+0xd4>
 8004efc:	2300      	movs	r3, #0
 8004efe:	3401      	adds	r4, #1
 8004f00:	9305      	str	r3, [sp, #20]
 8004f02:	4619      	mov	r1, r3
 8004f04:	f04f 0c0a 	mov.w	ip, #10
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f0e:	3a30      	subs	r2, #48	; 0x30
 8004f10:	2a09      	cmp	r2, #9
 8004f12:	d903      	bls.n	8004f1c <_svfiprintf_r+0x1a8>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0c5      	beq.n	8004ea4 <_svfiprintf_r+0x130>
 8004f18:	9105      	str	r1, [sp, #20]
 8004f1a:	e7c3      	b.n	8004ea4 <_svfiprintf_r+0x130>
 8004f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f20:	4604      	mov	r4, r0
 8004f22:	2301      	movs	r3, #1
 8004f24:	e7f0      	b.n	8004f08 <_svfiprintf_r+0x194>
 8004f26:	ab03      	add	r3, sp, #12
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <_svfiprintf_r+0x1f8>)
 8004f2e:	a904      	add	r1, sp, #16
 8004f30:	4638      	mov	r0, r7
 8004f32:	f3af 8000 	nop.w
 8004f36:	1c42      	adds	r2, r0, #1
 8004f38:	4606      	mov	r6, r0
 8004f3a:	d1d6      	bne.n	8004eea <_svfiprintf_r+0x176>
 8004f3c:	89ab      	ldrh	r3, [r5, #12]
 8004f3e:	065b      	lsls	r3, r3, #25
 8004f40:	f53f af2c 	bmi.w	8004d9c <_svfiprintf_r+0x28>
 8004f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f46:	b01d      	add	sp, #116	; 0x74
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	ab03      	add	r3, sp, #12
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <_svfiprintf_r+0x1f8>)
 8004f54:	a904      	add	r1, sp, #16
 8004f56:	4638      	mov	r0, r7
 8004f58:	f000 f87a 	bl	8005050 <_printf_i>
 8004f5c:	e7eb      	b.n	8004f36 <_svfiprintf_r+0x1c2>
 8004f5e:	bf00      	nop
 8004f60:	080056e0 	.word	0x080056e0
 8004f64:	080056ea 	.word	0x080056ea
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	08004cbd 	.word	0x08004cbd
 8004f70:	080056e6 	.word	0x080056e6

08004f74 <_printf_common>:
 8004f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	4616      	mov	r6, r2
 8004f7a:	4699      	mov	r9, r3
 8004f7c:	688a      	ldr	r2, [r1, #8]
 8004f7e:	690b      	ldr	r3, [r1, #16]
 8004f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f84:	4293      	cmp	r3, r2
 8004f86:	bfb8      	it	lt
 8004f88:	4613      	movlt	r3, r2
 8004f8a:	6033      	str	r3, [r6, #0]
 8004f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f90:	4607      	mov	r7, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	b10a      	cbz	r2, 8004f9a <_printf_common+0x26>
 8004f96:	3301      	adds	r3, #1
 8004f98:	6033      	str	r3, [r6, #0]
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	0699      	lsls	r1, r3, #26
 8004f9e:	bf42      	ittt	mi
 8004fa0:	6833      	ldrmi	r3, [r6, #0]
 8004fa2:	3302      	addmi	r3, #2
 8004fa4:	6033      	strmi	r3, [r6, #0]
 8004fa6:	6825      	ldr	r5, [r4, #0]
 8004fa8:	f015 0506 	ands.w	r5, r5, #6
 8004fac:	d106      	bne.n	8004fbc <_printf_common+0x48>
 8004fae:	f104 0a19 	add.w	sl, r4, #25
 8004fb2:	68e3      	ldr	r3, [r4, #12]
 8004fb4:	6832      	ldr	r2, [r6, #0]
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	42ab      	cmp	r3, r5
 8004fba:	dc26      	bgt.n	800500a <_printf_common+0x96>
 8004fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fc0:	1e13      	subs	r3, r2, #0
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	bf18      	it	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	0692      	lsls	r2, r2, #26
 8004fca:	d42b      	bmi.n	8005024 <_printf_common+0xb0>
 8004fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	47c0      	blx	r8
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d01e      	beq.n	8005018 <_printf_common+0xa4>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	68e5      	ldr	r5, [r4, #12]
 8004fde:	6832      	ldr	r2, [r6, #0]
 8004fe0:	f003 0306 	and.w	r3, r3, #6
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	bf08      	it	eq
 8004fe8:	1aad      	subeq	r5, r5, r2
 8004fea:	68a3      	ldr	r3, [r4, #8]
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	bf0c      	ite	eq
 8004ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff4:	2500      	movne	r5, #0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bfc4      	itt	gt
 8004ffa:	1a9b      	subgt	r3, r3, r2
 8004ffc:	18ed      	addgt	r5, r5, r3
 8004ffe:	2600      	movs	r6, #0
 8005000:	341a      	adds	r4, #26
 8005002:	42b5      	cmp	r5, r6
 8005004:	d11a      	bne.n	800503c <_printf_common+0xc8>
 8005006:	2000      	movs	r0, #0
 8005008:	e008      	b.n	800501c <_printf_common+0xa8>
 800500a:	2301      	movs	r3, #1
 800500c:	4652      	mov	r2, sl
 800500e:	4649      	mov	r1, r9
 8005010:	4638      	mov	r0, r7
 8005012:	47c0      	blx	r8
 8005014:	3001      	adds	r0, #1
 8005016:	d103      	bne.n	8005020 <_printf_common+0xac>
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005020:	3501      	adds	r5, #1
 8005022:	e7c6      	b.n	8004fb2 <_printf_common+0x3e>
 8005024:	18e1      	adds	r1, r4, r3
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	2030      	movs	r0, #48	; 0x30
 800502a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800502e:	4422      	add	r2, r4
 8005030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005038:	3302      	adds	r3, #2
 800503a:	e7c7      	b.n	8004fcc <_printf_common+0x58>
 800503c:	2301      	movs	r3, #1
 800503e:	4622      	mov	r2, r4
 8005040:	4649      	mov	r1, r9
 8005042:	4638      	mov	r0, r7
 8005044:	47c0      	blx	r8
 8005046:	3001      	adds	r0, #1
 8005048:	d0e6      	beq.n	8005018 <_printf_common+0xa4>
 800504a:	3601      	adds	r6, #1
 800504c:	e7d9      	b.n	8005002 <_printf_common+0x8e>
	...

08005050 <_printf_i>:
 8005050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	460c      	mov	r4, r1
 8005056:	4691      	mov	r9, r2
 8005058:	7e27      	ldrb	r7, [r4, #24]
 800505a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800505c:	2f78      	cmp	r7, #120	; 0x78
 800505e:	4680      	mov	r8, r0
 8005060:	469a      	mov	sl, r3
 8005062:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005066:	d807      	bhi.n	8005078 <_printf_i+0x28>
 8005068:	2f62      	cmp	r7, #98	; 0x62
 800506a:	d80a      	bhi.n	8005082 <_printf_i+0x32>
 800506c:	2f00      	cmp	r7, #0
 800506e:	f000 80d8 	beq.w	8005222 <_printf_i+0x1d2>
 8005072:	2f58      	cmp	r7, #88	; 0x58
 8005074:	f000 80a3 	beq.w	80051be <_printf_i+0x16e>
 8005078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800507c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005080:	e03a      	b.n	80050f8 <_printf_i+0xa8>
 8005082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005086:	2b15      	cmp	r3, #21
 8005088:	d8f6      	bhi.n	8005078 <_printf_i+0x28>
 800508a:	a001      	add	r0, pc, #4	; (adr r0, 8005090 <_printf_i+0x40>)
 800508c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005090:	080050e9 	.word	0x080050e9
 8005094:	080050fd 	.word	0x080050fd
 8005098:	08005079 	.word	0x08005079
 800509c:	08005079 	.word	0x08005079
 80050a0:	08005079 	.word	0x08005079
 80050a4:	08005079 	.word	0x08005079
 80050a8:	080050fd 	.word	0x080050fd
 80050ac:	08005079 	.word	0x08005079
 80050b0:	08005079 	.word	0x08005079
 80050b4:	08005079 	.word	0x08005079
 80050b8:	08005079 	.word	0x08005079
 80050bc:	08005209 	.word	0x08005209
 80050c0:	0800512d 	.word	0x0800512d
 80050c4:	080051eb 	.word	0x080051eb
 80050c8:	08005079 	.word	0x08005079
 80050cc:	08005079 	.word	0x08005079
 80050d0:	0800522b 	.word	0x0800522b
 80050d4:	08005079 	.word	0x08005079
 80050d8:	0800512d 	.word	0x0800512d
 80050dc:	08005079 	.word	0x08005079
 80050e0:	08005079 	.word	0x08005079
 80050e4:	080051f3 	.word	0x080051f3
 80050e8:	680b      	ldr	r3, [r1, #0]
 80050ea:	1d1a      	adds	r2, r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	600a      	str	r2, [r1, #0]
 80050f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0a3      	b.n	8005244 <_printf_i+0x1f4>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	6808      	ldr	r0, [r1, #0]
 8005100:	062e      	lsls	r6, r5, #24
 8005102:	f100 0304 	add.w	r3, r0, #4
 8005106:	d50a      	bpl.n	800511e <_printf_i+0xce>
 8005108:	6805      	ldr	r5, [r0, #0]
 800510a:	600b      	str	r3, [r1, #0]
 800510c:	2d00      	cmp	r5, #0
 800510e:	da03      	bge.n	8005118 <_printf_i+0xc8>
 8005110:	232d      	movs	r3, #45	; 0x2d
 8005112:	426d      	negs	r5, r5
 8005114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005118:	485e      	ldr	r0, [pc, #376]	; (8005294 <_printf_i+0x244>)
 800511a:	230a      	movs	r3, #10
 800511c:	e019      	b.n	8005152 <_printf_i+0x102>
 800511e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005122:	6805      	ldr	r5, [r0, #0]
 8005124:	600b      	str	r3, [r1, #0]
 8005126:	bf18      	it	ne
 8005128:	b22d      	sxthne	r5, r5
 800512a:	e7ef      	b.n	800510c <_printf_i+0xbc>
 800512c:	680b      	ldr	r3, [r1, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	1d18      	adds	r0, r3, #4
 8005132:	6008      	str	r0, [r1, #0]
 8005134:	0628      	lsls	r0, r5, #24
 8005136:	d501      	bpl.n	800513c <_printf_i+0xec>
 8005138:	681d      	ldr	r5, [r3, #0]
 800513a:	e002      	b.n	8005142 <_printf_i+0xf2>
 800513c:	0669      	lsls	r1, r5, #25
 800513e:	d5fb      	bpl.n	8005138 <_printf_i+0xe8>
 8005140:	881d      	ldrh	r5, [r3, #0]
 8005142:	4854      	ldr	r0, [pc, #336]	; (8005294 <_printf_i+0x244>)
 8005144:	2f6f      	cmp	r7, #111	; 0x6f
 8005146:	bf0c      	ite	eq
 8005148:	2308      	moveq	r3, #8
 800514a:	230a      	movne	r3, #10
 800514c:	2100      	movs	r1, #0
 800514e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005152:	6866      	ldr	r6, [r4, #4]
 8005154:	60a6      	str	r6, [r4, #8]
 8005156:	2e00      	cmp	r6, #0
 8005158:	bfa2      	ittt	ge
 800515a:	6821      	ldrge	r1, [r4, #0]
 800515c:	f021 0104 	bicge.w	r1, r1, #4
 8005160:	6021      	strge	r1, [r4, #0]
 8005162:	b90d      	cbnz	r5, 8005168 <_printf_i+0x118>
 8005164:	2e00      	cmp	r6, #0
 8005166:	d04d      	beq.n	8005204 <_printf_i+0x1b4>
 8005168:	4616      	mov	r6, r2
 800516a:	fbb5 f1f3 	udiv	r1, r5, r3
 800516e:	fb03 5711 	mls	r7, r3, r1, r5
 8005172:	5dc7      	ldrb	r7, [r0, r7]
 8005174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005178:	462f      	mov	r7, r5
 800517a:	42bb      	cmp	r3, r7
 800517c:	460d      	mov	r5, r1
 800517e:	d9f4      	bls.n	800516a <_printf_i+0x11a>
 8005180:	2b08      	cmp	r3, #8
 8005182:	d10b      	bne.n	800519c <_printf_i+0x14c>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	07df      	lsls	r7, r3, #31
 8005188:	d508      	bpl.n	800519c <_printf_i+0x14c>
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	6861      	ldr	r1, [r4, #4]
 800518e:	4299      	cmp	r1, r3
 8005190:	bfde      	ittt	le
 8005192:	2330      	movle	r3, #48	; 0x30
 8005194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800519c:	1b92      	subs	r2, r2, r6
 800519e:	6122      	str	r2, [r4, #16]
 80051a0:	f8cd a000 	str.w	sl, [sp]
 80051a4:	464b      	mov	r3, r9
 80051a6:	aa03      	add	r2, sp, #12
 80051a8:	4621      	mov	r1, r4
 80051aa:	4640      	mov	r0, r8
 80051ac:	f7ff fee2 	bl	8004f74 <_printf_common>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d14c      	bne.n	800524e <_printf_i+0x1fe>
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	b004      	add	sp, #16
 80051ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051be:	4835      	ldr	r0, [pc, #212]	; (8005294 <_printf_i+0x244>)
 80051c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	680e      	ldr	r6, [r1, #0]
 80051c8:	061f      	lsls	r7, r3, #24
 80051ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80051ce:	600e      	str	r6, [r1, #0]
 80051d0:	d514      	bpl.n	80051fc <_printf_i+0x1ac>
 80051d2:	07d9      	lsls	r1, r3, #31
 80051d4:	bf44      	itt	mi
 80051d6:	f043 0320 	orrmi.w	r3, r3, #32
 80051da:	6023      	strmi	r3, [r4, #0]
 80051dc:	b91d      	cbnz	r5, 80051e6 <_printf_i+0x196>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f023 0320 	bic.w	r3, r3, #32
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	2310      	movs	r3, #16
 80051e8:	e7b0      	b.n	800514c <_printf_i+0xfc>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f043 0320 	orr.w	r3, r3, #32
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	2378      	movs	r3, #120	; 0x78
 80051f4:	4828      	ldr	r0, [pc, #160]	; (8005298 <_printf_i+0x248>)
 80051f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051fa:	e7e3      	b.n	80051c4 <_printf_i+0x174>
 80051fc:	065e      	lsls	r6, r3, #25
 80051fe:	bf48      	it	mi
 8005200:	b2ad      	uxthmi	r5, r5
 8005202:	e7e6      	b.n	80051d2 <_printf_i+0x182>
 8005204:	4616      	mov	r6, r2
 8005206:	e7bb      	b.n	8005180 <_printf_i+0x130>
 8005208:	680b      	ldr	r3, [r1, #0]
 800520a:	6826      	ldr	r6, [r4, #0]
 800520c:	6960      	ldr	r0, [r4, #20]
 800520e:	1d1d      	adds	r5, r3, #4
 8005210:	600d      	str	r5, [r1, #0]
 8005212:	0635      	lsls	r5, r6, #24
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	d501      	bpl.n	800521c <_printf_i+0x1cc>
 8005218:	6018      	str	r0, [r3, #0]
 800521a:	e002      	b.n	8005222 <_printf_i+0x1d2>
 800521c:	0671      	lsls	r1, r6, #25
 800521e:	d5fb      	bpl.n	8005218 <_printf_i+0x1c8>
 8005220:	8018      	strh	r0, [r3, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	4616      	mov	r6, r2
 8005228:	e7ba      	b.n	80051a0 <_printf_i+0x150>
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	600a      	str	r2, [r1, #0]
 8005230:	681e      	ldr	r6, [r3, #0]
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	2100      	movs	r1, #0
 8005236:	4630      	mov	r0, r6
 8005238:	f7fa ffda 	bl	80001f0 <memchr>
 800523c:	b108      	cbz	r0, 8005242 <_printf_i+0x1f2>
 800523e:	1b80      	subs	r0, r0, r6
 8005240:	6060      	str	r0, [r4, #4]
 8005242:	6863      	ldr	r3, [r4, #4]
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	2300      	movs	r3, #0
 8005248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524c:	e7a8      	b.n	80051a0 <_printf_i+0x150>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	4632      	mov	r2, r6
 8005252:	4649      	mov	r1, r9
 8005254:	4640      	mov	r0, r8
 8005256:	47d0      	blx	sl
 8005258:	3001      	adds	r0, #1
 800525a:	d0ab      	beq.n	80051b4 <_printf_i+0x164>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	079b      	lsls	r3, r3, #30
 8005260:	d413      	bmi.n	800528a <_printf_i+0x23a>
 8005262:	68e0      	ldr	r0, [r4, #12]
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	4298      	cmp	r0, r3
 8005268:	bfb8      	it	lt
 800526a:	4618      	movlt	r0, r3
 800526c:	e7a4      	b.n	80051b8 <_printf_i+0x168>
 800526e:	2301      	movs	r3, #1
 8005270:	4632      	mov	r2, r6
 8005272:	4649      	mov	r1, r9
 8005274:	4640      	mov	r0, r8
 8005276:	47d0      	blx	sl
 8005278:	3001      	adds	r0, #1
 800527a:	d09b      	beq.n	80051b4 <_printf_i+0x164>
 800527c:	3501      	adds	r5, #1
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	9903      	ldr	r1, [sp, #12]
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	42ab      	cmp	r3, r5
 8005286:	dcf2      	bgt.n	800526e <_printf_i+0x21e>
 8005288:	e7eb      	b.n	8005262 <_printf_i+0x212>
 800528a:	2500      	movs	r5, #0
 800528c:	f104 0619 	add.w	r6, r4, #25
 8005290:	e7f5      	b.n	800527e <_printf_i+0x22e>
 8005292:	bf00      	nop
 8005294:	080056f1 	.word	0x080056f1
 8005298:	08005702 	.word	0x08005702

0800529c <memmove>:
 800529c:	4288      	cmp	r0, r1
 800529e:	b510      	push	{r4, lr}
 80052a0:	eb01 0402 	add.w	r4, r1, r2
 80052a4:	d902      	bls.n	80052ac <memmove+0x10>
 80052a6:	4284      	cmp	r4, r0
 80052a8:	4623      	mov	r3, r4
 80052aa:	d807      	bhi.n	80052bc <memmove+0x20>
 80052ac:	1e43      	subs	r3, r0, #1
 80052ae:	42a1      	cmp	r1, r4
 80052b0:	d008      	beq.n	80052c4 <memmove+0x28>
 80052b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ba:	e7f8      	b.n	80052ae <memmove+0x12>
 80052bc:	4402      	add	r2, r0
 80052be:	4601      	mov	r1, r0
 80052c0:	428a      	cmp	r2, r1
 80052c2:	d100      	bne.n	80052c6 <memmove+0x2a>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ce:	e7f7      	b.n	80052c0 <memmove+0x24>

080052d0 <_free_r>:
 80052d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d048      	beq.n	8005368 <_free_r+0x98>
 80052d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052da:	9001      	str	r0, [sp, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f1a1 0404 	sub.w	r4, r1, #4
 80052e2:	bfb8      	it	lt
 80052e4:	18e4      	addlt	r4, r4, r3
 80052e6:	f000 f8d3 	bl	8005490 <__malloc_lock>
 80052ea:	4a20      	ldr	r2, [pc, #128]	; (800536c <_free_r+0x9c>)
 80052ec:	9801      	ldr	r0, [sp, #4]
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	4615      	mov	r5, r2
 80052f2:	b933      	cbnz	r3, 8005302 <_free_r+0x32>
 80052f4:	6063      	str	r3, [r4, #4]
 80052f6:	6014      	str	r4, [r2, #0]
 80052f8:	b003      	add	sp, #12
 80052fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052fe:	f000 b8cd 	b.w	800549c <__malloc_unlock>
 8005302:	42a3      	cmp	r3, r4
 8005304:	d90b      	bls.n	800531e <_free_r+0x4e>
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	1862      	adds	r2, r4, r1
 800530a:	4293      	cmp	r3, r2
 800530c:	bf04      	itt	eq
 800530e:	681a      	ldreq	r2, [r3, #0]
 8005310:	685b      	ldreq	r3, [r3, #4]
 8005312:	6063      	str	r3, [r4, #4]
 8005314:	bf04      	itt	eq
 8005316:	1852      	addeq	r2, r2, r1
 8005318:	6022      	streq	r2, [r4, #0]
 800531a:	602c      	str	r4, [r5, #0]
 800531c:	e7ec      	b.n	80052f8 <_free_r+0x28>
 800531e:	461a      	mov	r2, r3
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b10b      	cbz	r3, 8005328 <_free_r+0x58>
 8005324:	42a3      	cmp	r3, r4
 8005326:	d9fa      	bls.n	800531e <_free_r+0x4e>
 8005328:	6811      	ldr	r1, [r2, #0]
 800532a:	1855      	adds	r5, r2, r1
 800532c:	42a5      	cmp	r5, r4
 800532e:	d10b      	bne.n	8005348 <_free_r+0x78>
 8005330:	6824      	ldr	r4, [r4, #0]
 8005332:	4421      	add	r1, r4
 8005334:	1854      	adds	r4, r2, r1
 8005336:	42a3      	cmp	r3, r4
 8005338:	6011      	str	r1, [r2, #0]
 800533a:	d1dd      	bne.n	80052f8 <_free_r+0x28>
 800533c:	681c      	ldr	r4, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	6053      	str	r3, [r2, #4]
 8005342:	4421      	add	r1, r4
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	e7d7      	b.n	80052f8 <_free_r+0x28>
 8005348:	d902      	bls.n	8005350 <_free_r+0x80>
 800534a:	230c      	movs	r3, #12
 800534c:	6003      	str	r3, [r0, #0]
 800534e:	e7d3      	b.n	80052f8 <_free_r+0x28>
 8005350:	6825      	ldr	r5, [r4, #0]
 8005352:	1961      	adds	r1, r4, r5
 8005354:	428b      	cmp	r3, r1
 8005356:	bf04      	itt	eq
 8005358:	6819      	ldreq	r1, [r3, #0]
 800535a:	685b      	ldreq	r3, [r3, #4]
 800535c:	6063      	str	r3, [r4, #4]
 800535e:	bf04      	itt	eq
 8005360:	1949      	addeq	r1, r1, r5
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	6054      	str	r4, [r2, #4]
 8005366:	e7c7      	b.n	80052f8 <_free_r+0x28>
 8005368:	b003      	add	sp, #12
 800536a:	bd30      	pop	{r4, r5, pc}
 800536c:	2000403c 	.word	0x2000403c

08005370 <_malloc_r>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	1ccd      	adds	r5, r1, #3
 8005374:	f025 0503 	bic.w	r5, r5, #3
 8005378:	3508      	adds	r5, #8
 800537a:	2d0c      	cmp	r5, #12
 800537c:	bf38      	it	cc
 800537e:	250c      	movcc	r5, #12
 8005380:	2d00      	cmp	r5, #0
 8005382:	4606      	mov	r6, r0
 8005384:	db01      	blt.n	800538a <_malloc_r+0x1a>
 8005386:	42a9      	cmp	r1, r5
 8005388:	d903      	bls.n	8005392 <_malloc_r+0x22>
 800538a:	230c      	movs	r3, #12
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	2000      	movs	r0, #0
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005392:	f000 f87d 	bl	8005490 <__malloc_lock>
 8005396:	4921      	ldr	r1, [pc, #132]	; (800541c <_malloc_r+0xac>)
 8005398:	680a      	ldr	r2, [r1, #0]
 800539a:	4614      	mov	r4, r2
 800539c:	b99c      	cbnz	r4, 80053c6 <_malloc_r+0x56>
 800539e:	4f20      	ldr	r7, [pc, #128]	; (8005420 <_malloc_r+0xb0>)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b923      	cbnz	r3, 80053ae <_malloc_r+0x3e>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4630      	mov	r0, r6
 80053a8:	f000 f862 	bl	8005470 <_sbrk_r>
 80053ac:	6038      	str	r0, [r7, #0]
 80053ae:	4629      	mov	r1, r5
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f85d 	bl	8005470 <_sbrk_r>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	d123      	bne.n	8005402 <_malloc_r+0x92>
 80053ba:	230c      	movs	r3, #12
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	4630      	mov	r0, r6
 80053c0:	f000 f86c 	bl	800549c <__malloc_unlock>
 80053c4:	e7e3      	b.n	800538e <_malloc_r+0x1e>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	1b5b      	subs	r3, r3, r5
 80053ca:	d417      	bmi.n	80053fc <_malloc_r+0x8c>
 80053cc:	2b0b      	cmp	r3, #11
 80053ce:	d903      	bls.n	80053d8 <_malloc_r+0x68>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	441c      	add	r4, r3
 80053d4:	6025      	str	r5, [r4, #0]
 80053d6:	e004      	b.n	80053e2 <_malloc_r+0x72>
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	42a2      	cmp	r2, r4
 80053dc:	bf0c      	ite	eq
 80053de:	600b      	streq	r3, [r1, #0]
 80053e0:	6053      	strne	r3, [r2, #4]
 80053e2:	4630      	mov	r0, r6
 80053e4:	f000 f85a 	bl	800549c <__malloc_unlock>
 80053e8:	f104 000b 	add.w	r0, r4, #11
 80053ec:	1d23      	adds	r3, r4, #4
 80053ee:	f020 0007 	bic.w	r0, r0, #7
 80053f2:	1ac2      	subs	r2, r0, r3
 80053f4:	d0cc      	beq.n	8005390 <_malloc_r+0x20>
 80053f6:	1a1b      	subs	r3, r3, r0
 80053f8:	50a3      	str	r3, [r4, r2]
 80053fa:	e7c9      	b.n	8005390 <_malloc_r+0x20>
 80053fc:	4622      	mov	r2, r4
 80053fe:	6864      	ldr	r4, [r4, #4]
 8005400:	e7cc      	b.n	800539c <_malloc_r+0x2c>
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d0e3      	beq.n	80053d4 <_malloc_r+0x64>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4630      	mov	r0, r6
 8005410:	f000 f82e 	bl	8005470 <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d1dd      	bne.n	80053d4 <_malloc_r+0x64>
 8005418:	e7cf      	b.n	80053ba <_malloc_r+0x4a>
 800541a:	bf00      	nop
 800541c:	2000403c 	.word	0x2000403c
 8005420:	20004040 	.word	0x20004040

08005424 <_realloc_r>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	4607      	mov	r7, r0
 8005428:	4614      	mov	r4, r2
 800542a:	460e      	mov	r6, r1
 800542c:	b921      	cbnz	r1, 8005438 <_realloc_r+0x14>
 800542e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005432:	4611      	mov	r1, r2
 8005434:	f7ff bf9c 	b.w	8005370 <_malloc_r>
 8005438:	b922      	cbnz	r2, 8005444 <_realloc_r+0x20>
 800543a:	f7ff ff49 	bl	80052d0 <_free_r>
 800543e:	4625      	mov	r5, r4
 8005440:	4628      	mov	r0, r5
 8005442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005444:	f000 f830 	bl	80054a8 <_malloc_usable_size_r>
 8005448:	42a0      	cmp	r0, r4
 800544a:	d20f      	bcs.n	800546c <_realloc_r+0x48>
 800544c:	4621      	mov	r1, r4
 800544e:	4638      	mov	r0, r7
 8005450:	f7ff ff8e 	bl	8005370 <_malloc_r>
 8005454:	4605      	mov	r5, r0
 8005456:	2800      	cmp	r0, #0
 8005458:	d0f2      	beq.n	8005440 <_realloc_r+0x1c>
 800545a:	4631      	mov	r1, r6
 800545c:	4622      	mov	r2, r4
 800545e:	f7ff fbf7 	bl	8004c50 <memcpy>
 8005462:	4631      	mov	r1, r6
 8005464:	4638      	mov	r0, r7
 8005466:	f7ff ff33 	bl	80052d0 <_free_r>
 800546a:	e7e9      	b.n	8005440 <_realloc_r+0x1c>
 800546c:	4635      	mov	r5, r6
 800546e:	e7e7      	b.n	8005440 <_realloc_r+0x1c>

08005470 <_sbrk_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_sbrk_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fc7c 	bl	8000d78 <_sbrk>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_sbrk_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_sbrk_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	200040dc 	.word	0x200040dc

08005490 <__malloc_lock>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__malloc_lock+0x8>)
 8005492:	f000 b811 	b.w	80054b8 <__retarget_lock_acquire_recursive>
 8005496:	bf00      	nop
 8005498:	200040e4 	.word	0x200040e4

0800549c <__malloc_unlock>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__malloc_unlock+0x8>)
 800549e:	f000 b80c 	b.w	80054ba <__retarget_lock_release_recursive>
 80054a2:	bf00      	nop
 80054a4:	200040e4 	.word	0x200040e4

080054a8 <_malloc_usable_size_r>:
 80054a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ac:	1f18      	subs	r0, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bfbc      	itt	lt
 80054b2:	580b      	ldrlt	r3, [r1, r0]
 80054b4:	18c0      	addlt	r0, r0, r3
 80054b6:	4770      	bx	lr

080054b8 <__retarget_lock_acquire_recursive>:
 80054b8:	4770      	bx	lr

080054ba <__retarget_lock_release_recursive>:
 80054ba:	4770      	bx	lr

080054bc <_init>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr

080054c8 <_fini>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr
