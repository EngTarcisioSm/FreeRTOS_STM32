
Exemplo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005544  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b5c  08005b5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b64  08005b64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000407c  20000074  08005be0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040f0  08005be0  000240f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f74  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdb  00000000  00000000  00035018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00037bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00038bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d71  00000000  00000000  00039a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012353  00000000  00000000  000517f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095540  00000000  00000000  00063b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004518  00000000  00000000  000f90d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056cc 	.word	0x080056cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080056cc 	.word	0x080056cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b2:	f000 fd61 	bl	8001078 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b6:	f000 f8e5 	bl	8000784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ba:	f000 f977 	bl	80008ac <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005be:	f000 f94b 	bl	8000858 <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	xMutex = xSemaphoreCreateMutex();
 80005c2:	2001      	movs	r0, #1
 80005c4:	f002 fc17 	bl	8002df6 <xQueueCreateMutex>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a53      	ldr	r2, [pc, #332]	; (8000718 <main+0x16c>)
 80005cc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	//criação da queue
	//Criado uma fila com 5 espaços e cada espaço possui um tamanho de uint32_t. Função que Cria uma fila
	if ((xQueue = xQueueCreate(5, sizeof(struct AMessage*))) == NULL) {
 80005ce:	2200      	movs	r2, #0
 80005d0:	2104      	movs	r1, #4
 80005d2:	2005      	movs	r0, #5
 80005d4:	f002 fb9c 	bl	8002d10 <xQueueGenericCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a50      	ldr	r2, [pc, #320]	; (800071c <main+0x170>)
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4b4f      	ldr	r3, [pc, #316]	; (800071c <main+0x170>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d103      	bne.n	80005ee <main+0x42>
		vPrintString("Não foi possivel alocar a xQueue\n");
 80005e6:	484e      	ldr	r0, [pc, #312]	; (8000720 <main+0x174>)
 80005e8:	f000 fa22 	bl	8000a30 <vPrintString>
 80005ec:	e002      	b.n	80005f4 <main+0x48>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 80005ee:	484d      	ldr	r0, [pc, #308]	; (8000724 <main+0x178>)
 80005f0:	f000 fa1e 	bl	8000a30 <vPrintString>
	}

	//Nova fila criada para a struct do tipo xData_t
	if ((xQueue_count = xQueueCreate(5, sizeof(xData_t))) == NULL) {
 80005f4:	2200      	movs	r2, #0
 80005f6:	210c      	movs	r1, #12
 80005f8:	2005      	movs	r0, #5
 80005fa:	f002 fb89 	bl	8002d10 <xQueueGenericCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a49      	ldr	r2, [pc, #292]	; (8000728 <main+0x17c>)
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b48      	ldr	r3, [pc, #288]	; (8000728 <main+0x17c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d103      	bne.n	8000614 <main+0x68>
		vPrintString("Não foi possivel alocar a xQueue\n");
 800060c:	4844      	ldr	r0, [pc, #272]	; (8000720 <main+0x174>)
 800060e:	f000 fa0f 	bl	8000a30 <vPrintString>
 8000612:	e002      	b.n	800061a <main+0x6e>
	} else {
		vPrintString("Fila criada com sucesso!\n");
 8000614:	4843      	ldr	r0, [pc, #268]	; (8000724 <main+0x178>)
 8000616:	f000 fa0b 	bl	8000a30 <vPrintString>
	// osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);   //removido
	// defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);        //removido
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//criação da tarefa 1
	if ((xTaskCreate(vTask_print_q, "Task Print Q",
 800061a:	2300      	movs	r3, #0
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2302      	movs	r3, #2
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000628:	4940      	ldr	r1, [pc, #256]	; (800072c <main+0x180>)
 800062a:	4841      	ldr	r0, [pc, #260]	; (8000730 <main+0x184>)
 800062c:	f003 f86b 	bl	8003706 <xTaskCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d003      	beq.n	800063e <main+0x92>
	configMINIMAL_STACK_SIZE * 3, NULL, 2, NULL)) != pdTRUE) {
		vPrintString(
 8000636:	483f      	ldr	r0, [pc, #252]	; (8000734 <main+0x188>)
 8000638:	f000 f9fa 	bl	8000a30 <vPrintString>
 800063c:	e002      	b.n	8000644 <main+0x98>
				"Não foi possivel alocar tarefa Task Print Q no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print Q criada com sucesso!\n");
 800063e:	483e      	ldr	r0, [pc, #248]	; (8000738 <main+0x18c>)
 8000640:	f000 f9f6 	bl	8000a30 <vPrintString>
	}

	if ((xTaskCreate(vTask_blink, "Task Blink", configMINIMAL_STACK_SIZE, NULL,
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	493a      	ldr	r1, [pc, #232]	; (800073c <main+0x190>)
 8000652:	483b      	ldr	r0, [pc, #236]	; (8000740 <main+0x194>)
 8000654:	f003 f857 	bl	8003706 <xTaskCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <main+0xba>
			1, NULL)) != pdTRUE) {
		vPrintString(
 800065e:	4839      	ldr	r0, [pc, #228]	; (8000744 <main+0x198>)
 8000660:	f000 f9e6 	bl	8000a30 <vPrintString>
 8000664:	e002      	b.n	800066c <main+0xc0>
				"não foi possivel alocar tarefa Blink vTaskBlink no escalonador\n");
	} else {
		vPrintString("Tarefa Task Blink criada com sucesso!\n");
 8000666:	4838      	ldr	r0, [pc, #224]	; (8000748 <main+0x19c>)
 8000668:	f000 f9e2 	bl	8000a30 <vPrintString>
	}

	if ((xTaskCreate(vTask_print, "Task Print", configMINIMAL_STACK_SIZE * 3,
 800066c:	2300      	movs	r3, #0
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2301      	movs	r3, #1
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800067a:	4934      	ldr	r1, [pc, #208]	; (800074c <main+0x1a0>)
 800067c:	4834      	ldr	r0, [pc, #208]	; (8000750 <main+0x1a4>)
 800067e:	f003 f842 	bl	8003706 <xTaskCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d003      	beq.n	8000690 <main+0xe4>
	NULL, 1, NULL)) != pdTRUE) {
		vPrintString(
 8000688:	4832      	ldr	r0, [pc, #200]	; (8000754 <main+0x1a8>)
 800068a:	f000 f9d1 	bl	8000a30 <vPrintString>
 800068e:	e002      	b.n	8000696 <main+0xea>
				"Não foi possivel alocar tarefa Task Print no escalonador\n");
	} else {
		vPrintString("Tarefa Task Print criada com sucesso!\n");
 8000690:	4831      	ldr	r0, [pc, #196]	; (8000758 <main+0x1ac>)
 8000692:	f000 f9cd 	bl	8000a30 <vPrintString>
	}

	if ((xTaskCreate(vTask1, "task_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 8000696:	2300      	movs	r3, #0
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	492e      	ldr	r1, [pc, #184]	; (800075c <main+0x1b0>)
 80006a4:	482e      	ldr	r0, [pc, #184]	; (8000760 <main+0x1b4>)
 80006a6:	f003 f82e 	bl	8003706 <xTaskCreate>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d003      	beq.n	80006b8 <main+0x10c>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_1 no escalonador\n");
 80006b0:	482c      	ldr	r0, [pc, #176]	; (8000764 <main+0x1b8>)
 80006b2:	f000 f9bd 	bl	8000a30 <vPrintString>
 80006b6:	e002      	b.n	80006be <main+0x112>
	} else {
		vPrintString("Tarefa Task_1 criada com sucesso!\n");
 80006b8:	482b      	ldr	r0, [pc, #172]	; (8000768 <main+0x1bc>)
 80006ba:	f000 f9b9 	bl	8000a30 <vPrintString>
	}

	if ((xTaskCreate(vTask2, "task_2", configMINIMAL_STACK_SIZE, NULL, 1, NULL))
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	4928      	ldr	r1, [pc, #160]	; (800076c <main+0x1c0>)
 80006cc:	4828      	ldr	r0, [pc, #160]	; (8000770 <main+0x1c4>)
 80006ce:	f003 f81a 	bl	8003706 <xTaskCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d003      	beq.n	80006e0 <main+0x134>
			!= pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <main+0x1c8>)
 80006da:	f000 f9a9 	bl	8000a30 <vPrintString>
 80006de:	e002      	b.n	80006e6 <main+0x13a>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <main+0x1cc>)
 80006e2:	f000 f9a5 	bl	8000a30 <vPrintString>
	}

	if ((xTaskCreate(vTask_print_count, "vTask_print_count",
 80006e6:	2300      	movs	r3, #0
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006f4:	4921      	ldr	r1, [pc, #132]	; (800077c <main+0x1d0>)
 80006f6:	4822      	ldr	r0, [pc, #136]	; (8000780 <main+0x1d4>)
 80006f8:	f003 f805 	bl	8003706 <xTaskCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d003      	beq.n	800070a <main+0x15e>
			configMINIMAL_STACK_SIZE * 3, NULL, 1, NULL)) != pdTRUE) {
		vPrintString("Não foi possivel alocar tarefa Task_2 no escalonador\n");
 8000702:	481c      	ldr	r0, [pc, #112]	; (8000774 <main+0x1c8>)
 8000704:	f000 f994 	bl	8000a30 <vPrintString>
 8000708:	e002      	b.n	8000710 <main+0x164>
	} else {
		vPrintString("Tarefa Task_2 criada com sucesso!\n");
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <main+0x1cc>)
 800070c:	f000 f990 	bl	8000a30 <vPrintString>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	// osKernelStart();    //removido
	vTaskStartScheduler();
 8000710:	f003 f964 	bl	80039dc <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000714:	e7fe      	b.n	8000714 <main+0x168>
 8000716:	bf00      	nop
 8000718:	20004044 	.word	0x20004044
 800071c:	20004090 	.word	0x20004090
 8000720:	080056f4 	.word	0x080056f4
 8000724:	08005718 	.word	0x08005718
 8000728:	20004048 	.word	0x20004048
 800072c:	08005734 	.word	0x08005734
 8000730:	08000b05 	.word	0x08000b05
 8000734:	08005744 	.word	0x08005744
 8000738:	08005784 	.word	0x08005784
 800073c:	080057b0 	.word	0x080057b0
 8000740:	08000c4d 	.word	0x08000c4d
 8000744:	080057bc 	.word	0x080057bc
 8000748:	08005800 	.word	0x08005800
 800074c:	08005828 	.word	0x08005828
 8000750:	08000bd9 	.word	0x08000bd9
 8000754:	08005834 	.word	0x08005834
 8000758:	08005870 	.word	0x08005870
 800075c:	080056e4 	.word	0x080056e4
 8000760:	08000cc9 	.word	0x08000cc9
 8000764:	08005898 	.word	0x08005898
 8000768:	080058d0 	.word	0x080058d0
 800076c:	080056ec 	.word	0x080056ec
 8000770:	08000d25 	.word	0x08000d25
 8000774:	080058f4 	.word	0x080058f4
 8000778:	0800592c 	.word	0x0800592c
 800077c:	08005950 	.word	0x08005950
 8000780:	08000c69 	.word	0x08000c69

08000784 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fb72 	bl	8004e7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <SystemClock_Config+0xd0>)
 80007d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2310      	movs	r3, #16
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007f8:	2308      	movs	r3, #8
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80007fc:	2354      	movs	r3, #84	; 0x54
 80007fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f000 ff27 	bl	8001660 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x98>
		Error_Handler();
 8000818:	f000 fac4 	bl	8000da4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2102      	movs	r1, #2
 8000838:	4618      	mov	r0, r3
 800083a:	f001 f989 	bl	8001b50 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xc4>
		Error_Handler();
 8000844:	f000 faae 	bl	8000da4 <Error_Handler>
	}
}
 8000848:	bf00      	nop
 800084a:	3750      	adds	r7, #80	; 0x50
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART1_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000890:	f001 fe0c 	bl	80024ac <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800089a:	f000 fa83 	bl	8000da4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000404c 	.word	0x2000404c
 80008a8:	40011000 	.word	0x40011000

080008ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a54      	ldr	r2, [pc, #336]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4d      	ldr	r2, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b44      	ldr	r3, [pc, #272]	; (8000a1c <MX_GPIO_Init+0x170>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <MX_GPIO_Init+0x170>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a3f      	ldr	r2, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a38      	ldr	r2, [pc, #224]	; (8000a1c <MX_GPIO_Init+0x170>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DOUT_LED1_Pin | SEL_1_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2109      	movs	r1, #9
 8000952:	4833      	ldr	r0, [pc, #204]	; (8000a20 <MX_GPIO_Init+0x174>)
 8000954:	f000 fe50 	bl	80015f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095e:	4831      	ldr	r0, [pc, #196]	; (8000a24 <MX_GPIO_Init+0x178>)
 8000960:	f000 fe4a 	bl	80015f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2104      	movs	r1, #4
 8000968:	482f      	ldr	r0, [pc, #188]	; (8000a28 <MX_GPIO_Init+0x17c>)
 800096a:	f000 fe45 	bl	80015f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DOUT_LED1_Pin */
	GPIO_InitStruct.Pin = DOUT_LED1_Pin;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DOUT_LED1_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4826      	ldr	r0, [pc, #152]	; (8000a20 <MX_GPIO_Init+0x174>)
 8000986:	f000 fc9b 	bl	80012c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SEL_0_Pin */
	GPIO_InitStruct.Pin = SEL_0_Pin;
 800098a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEL_0_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4820      	ldr	r0, [pc, #128]	; (8000a24 <MX_GPIO_Init+0x178>)
 80009a4:	f000 fc8c 	bl	80012c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIN_CFIG_Pin */
	GPIO_InitStruct.Pin = DIN_CFIG_Pin;
 80009a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIN_CFIG_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	481b      	ldr	r0, [pc, #108]	; (8000a2c <MX_GPIO_Init+0x180>)
 80009be:	f000 fc7f 	bl	80012c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : EN_RX_485_Pin */
	GPIO_InitStruct.Pin = EN_RX_485_Pin;
 80009c2:	2304      	movs	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(EN_RX_485_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_GPIO_Init+0x17c>)
 80009da:	f000 fc71 	bl	80012c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SEL_1_Pin */
	GPIO_InitStruct.Pin = SEL_1_Pin;
 80009de:	2308      	movs	r3, #8
 80009e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEL_1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <MX_GPIO_Init+0x174>)
 80009f6:	f000 fc63 	bl	80012c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIN_TARA_Pin */
	GPIO_InitStruct.Pin = DIN_TARA_Pin;
 80009fa:	2310      	movs	r3, #16
 80009fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIN_TARA_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x174>)
 8000a0e:	f000 fc57 	bl	80012c0 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020800 	.word	0x40020800

08000a30 <vPrintString>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------
//funções de impressão
void vPrintString(char *pc_uartSend_f) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	//acionamentos necessários para chavear e acionar o rs485 em modo de transmissão
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <vPrintString+0x74>)
 8000a40:	f000 fdda 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2108      	movs	r1, #8
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <vPrintString+0x78>)
 8000a4a:	f000 fdd5 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	4816      	ldr	r0, [pc, #88]	; (8000aac <vPrintString+0x7c>)
 8000a54:	f000 fdd0 	bl	80015f8 <HAL_GPIO_WritePin>
//  taskENTER_CRITICAL();	//removido
	xSemaphoreTake(xMutex, portMAX_DELAY);
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <vPrintString+0x80>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fbbf 	bl	80031e4 <xQueueSemaphoreTake>
	{
		vUsartLib_Puts(pc_uartSend_f);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f834 	bl	8000ad4 <vUsartLib_Puts>
	}
	//acionamentos necessários para chavear e acionar o rs485 em modo de recepção
	HAL_GPIO_WritePin(SEL_0_GPIO_Port, SEL_0_Pin, Bit_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <vPrintString+0x74>)
 8000a74:	f000 fdc0 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEL_1_GPIO_Port, SEL_1_Pin, Bit_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <vPrintString+0x78>)
 8000a7e:	f000 fdbb 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_RX_485_GPIO_Port, EN_RX_485_Pin, Bit_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2104      	movs	r1, #4
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <vPrintString+0x7c>)
 8000a88:	f000 fdb6 	bl	80015f8 <HAL_GPIO_WritePin>
	xSemaphoreGive(xMutex);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <vPrintString+0x80>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	f002 f9c7 	bl	8002e28 <xQueueGenericSend>
//  taskEXIT_CRITICAL();		//removido
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	20004044 	.word	0x20004044

08000ab4 <vUsartLib_Putc>:
void vUsartLib_Putc(UART_HandleTypeDef *huart, char c_data) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	//envia um unico caractere
	HAL_UART_Transmit(huart, &c_data, 1, 10);
 8000ac0:	1cf9      	adds	r1, r7, #3
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f001 fd3d 	bl	8002546 <HAL_UART_Transmit>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <vUsartLib_Puts>:
void vUsartLib_Puts(char *c_data) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	//roda todo o buffer até encontrar 0x00
	while (*c_data) {
 8000adc:	e007      	b.n	8000aee <vUsartLib_Puts+0x1a>
		vUsartLib_Putc(&huart1, *c_data++);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <vUsartLib_Puts+0x2c>)
 8000aea:	f7ff ffe3 	bl	8000ab4 <vUsartLib_Putc>
	while (*c_data) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f3      	bne.n	8000ade <vUsartLib_Puts+0xa>
	}
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000404c 	.word	0x2000404c

08000b04 <vTask_print_q>:
//-----------------------------------------------------------------------------

//funções de tarefas
void vTask_print_q(void *pvParameters) {
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	uint32_t u32_status = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24

	struct AMessage xMessage =
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <vTask_print_q+0xbc>)
 8000b12:	f107 040c 	add.w	r4, r7, #12
 8000b16:	461d      	mov	r5, r3
 8000b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b20:	6020      	str	r0, [r4, #0]
 8000b22:	3404      	adds	r4, #4
 8000b24:	7021      	strb	r1, [r4, #0]
			{ .c_messageID = 2, .c_data = "Curso RTOS STM32" };
	struct AMessage *px_message = &xMessage;
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	60bb      	str	r3, [r7, #8]

	vPrintString("Entrei na task Queue\n");
 8000b2c:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <vTask_print_q+0xc0>)
 8000b2e:	f7ff ff7f 	bl	8000a30 <vPrintString>

	for (;;) {

		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b32:	2110      	movs	r1, #16
 8000b34:	4824      	ldr	r0, [pc, #144]	; (8000bc8 <vTask_print_q+0xc4>)
 8000b36:	f000 fd47 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d11f      	bne.n	8000b80 <vTask_print_q+0x7c>
				&& !u32_status) {
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11c      	bne.n	8000b80 <vTask_print_q+0x7c>
			//Aguarda um periodo para evitar o efeito bounce bottão pressionado
			vTaskDelay(50 / portTICK_PERIOD_MS);
 8000b46:	2032      	movs	r0, #50	; 0x32
 8000b48:	f002 ff14 	bl	8003974 <vTaskDelay>

			if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <vTask_print_q+0xc4>)
 8000b50:	f000 fd3a 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d110      	bne.n	8000b7c <vTask_print_q+0x78>
					&& !u32_status) {
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10d      	bne.n	8000b7c <vTask_print_q+0x78>
				//           xQueueSend(1:nome fila   2:endereço da variavel  3: timeout)
				if ( xQueueSend(xQueue, (void* )&px_message,
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <vTask_print_q+0xc8>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0108 	add.w	r1, r7, #8
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2232      	movs	r2, #50	; 0x32
 8000b6c:	f002 f95c 	bl	8002e28 <xQueueGenericSend>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d102      	bne.n	8000b7c <vTask_print_q+0x78>
						( 50 / portTICK_PERIOD_MS)) == pdPASS) {

					vPrintString(
 8000b76:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <vTask_print_q+0xcc>)
 8000b78:	f7ff ff5a 	bl	8000a30 <vPrintString>
							"Valor da constante button enviado na queue! \n\n");
				}
			}

			u32_status = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24

		}

		//checa se o botão foi levantado
		if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin) && u32_status) {
 8000b80:	2110      	movs	r1, #16
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <vTask_print_q+0xc4>)
 8000b84:	f000 fd20 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d014      	beq.n	8000bb8 <vTask_print_q+0xb4>
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d011      	beq.n	8000bb8 <vTask_print_q+0xb4>

			vTaskDelay(50 / portTICK_PERIOD_MS);	//delay para debounce
 8000b94:	2032      	movs	r0, #50	; 0x32
 8000b96:	f002 feed 	bl	8003974 <vTaskDelay>

			if (HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <vTask_print_q+0xc4>)
 8000b9e:	f000 fd13 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <vTask_print_q+0xb4>
					&& u32_status) {
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <vTask_print_q+0xb4>

				vPrintString("Botão foi solto! \n\n");
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <vTask_print_q+0xd0>)
 8000bb0:	f7ff ff3e 	bl	8000a30 <vPrintString>
				u32_status = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}

		vTaskDelay(50 / portTICK_PERIOD_MS);
 8000bb8:	2032      	movs	r0, #50	; 0x32
 8000bba:	f002 fedb 	bl	8003974 <vTaskDelay>
		if (!HAL_GPIO_ReadPin(DIN_TARA_GPIO_Port, DIN_TARA_Pin)
 8000bbe:	e7b8      	b.n	8000b32 <vTask_print_q+0x2e>
 8000bc0:	080059c4 	.word	0x080059c4
 8000bc4:	08005964 	.word	0x08005964
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	20004090 	.word	0x20004090
 8000bd0:	0800597c 	.word	0x0800597c
 8000bd4:	080059ac 	.word	0x080059ac

08000bd8 <vTask_print>:
	}

	vTaskDelete( NULL); //caso ocorra algo que faça o for sair
}

void vTask_print(void *pvParameters) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint32_t u32_status;
	// char *ps_receve_string;
	struct AMessage *msg;

	vPrintString("Entrei na task Print\n");
 8000be0:	4816      	ldr	r0, [pc, #88]	; (8000c3c <vTask_print+0x64>)
 8000be2:	f7ff ff25 	bl	8000a30 <vPrintString>

	for (;;) {
		//xQueueReceive(1:nome da fila 2:endereço variavel de recebimento, 3:timeout)
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <vTask_print+0x68>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f107 010c 	add.w	r1, r7, #12
 8000bee:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fa16 	bl	8003024 <xQueueReceive>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	617b      	str	r3, [r7, #20]
		if (u32_status == pdPASS) {
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d117      	bne.n	8000c32 <vTask_print+0x5a>
			//Para entender a necessidade de alocação dinamica de memoria
			//deixo o link abaixo, onde explica porque precisamos fazer um malloc
			//para alocar um buffer ao nosso ponteiro para uso na função sprintf
			//lembrando que iremos usar o pvPortMalloc que é safe thread para o FreeRTOS
			//https://stackoverflow.com/questions/19772667/c-sprintf-array-char-pointers
			char *pc_uartSend = pvPortMalloc(sizeof(msg) + 1);
 8000c02:	2005      	movs	r0, #5
 8000c04:	f003 ff18 	bl	8004a38 <pvPortMalloc>
 8000c08:	6138      	str	r0, [r7, #16]

			sprintf(pc_uartSend,
					"Estrutura recebida : ID = %d , MSG = \" %s \" \n",
					msg->c_messageID, msg->c_data);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
			sprintf(pc_uartSend,
 8000c0e:	461a      	mov	r2, r3
					msg->c_messageID, msg->c_data);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
			sprintf(pc_uartSend,
 8000c14:	490b      	ldr	r1, [pc, #44]	; (8000c44 <vTask_print+0x6c>)
 8000c16:	6938      	ldr	r0, [r7, #16]
 8000c18:	f004 f938 	bl	8004e8c <siprintf>
			vPrintString(pc_uartSend);
 8000c1c:	6938      	ldr	r0, [r7, #16]
 8000c1e:	f7ff ff07 	bl	8000a30 <vPrintString>
			vPortFree(pc_uartSend);
 8000c22:	6938      	ldr	r0, [r7, #16]
 8000c24:	f003 ffd4 	bl	8004bd0 <vPortFree>

			msg->c_messageID++;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	701a      	strb	r2, [r3, #0]
		}
		vPrintString("Task print \r\n\n");
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <vTask_print+0x70>)
 8000c34:	f7ff fefc 	bl	8000a30 <vPrintString>
		u32_status = xQueueReceive(xQueue, &msg, portMAX_DELAY);
 8000c38:	e7d5      	b.n	8000be6 <vTask_print+0xe>
 8000c3a:	bf00      	nop
 8000c3c:	080059dc 	.word	0x080059dc
 8000c40:	20004090 	.word	0x20004090
 8000c44:	080059f4 	.word	0x080059f4
 8000c48:	08005a24 	.word	0x08005a24

08000c4c <vTask_blink>:
		//vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
	vTaskDelete( NULL);
}

void vTask_blink(void *pvParameters) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	for (;;) {
		//Altera o estado do led
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000c54:	2101      	movs	r1, #1
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <vTask_blink+0x18>)
 8000c58:	f000 fce7 	bl	800162a <HAL_GPIO_TogglePin>
		vTaskDelay(250 / portTICK_PERIOD_MS);
 8000c5c:	20fa      	movs	r0, #250	; 0xfa
 8000c5e:	f002 fe89 	bl	8003974 <vTaskDelay>
		HAL_GPIO_TogglePin(DOUT_LED1_GPIO_Port, DOUT_LED1_Pin);
 8000c62:	e7f7      	b.n	8000c54 <vTask_blink+0x8>
 8000c64:	40020400 	.word	0x40020400

08000c68 <vTask_print_count>:
	}
	vTaskDelete( NULL);
}

void vTask_print_count(void *pvParameters) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	6078      	str	r0, [r7, #4]
	xData_t x_count;

	vPrintString("vTask_Print_Count iniciada!");
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <vTask_print_count+0x54>)
 8000c72:	f7ff fedd 	bl	8000a30 <vPrintString>

		/*
		 * Realiza a leitura da fila. Caso tenha algum valor a ser lido
		 * este será armazenado em count;
		 */
		xQueueReceive(xQueue_count, &x_count, portMAX_DELAY);
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <vTask_print_count+0x58>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f107 0108 	add.w	r1, r7, #8
 8000c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f9ce 	bl	8003024 <xQueueReceive>

		char *pc_uartSend = pvPortMalloc(sizeof(x_count) + 1);
 8000c88:	200d      	movs	r0, #13
 8000c8a:	f003 fed5 	bl	8004a38 <pvPortMalloc>
 8000c8e:	6178      	str	r0, [r7, #20]

		sprintf(pc_uartSend,
				"Estrutura recebida : task_id = %d, task_name = \" %s \", value = %ld \n\n",
				x_count.c_task_id, x_count.task_name, x_count.u32_value);
 8000c90:	7b3b      	ldrb	r3, [r7, #12]
		sprintf(pc_uartSend,
 8000c92:	4619      	mov	r1, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	4909      	ldr	r1, [pc, #36]	; (8000cc4 <vTask_print_count+0x5c>)
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f004 f8f3 	bl	8004e8c <siprintf>

		vPrintString(pc_uartSend);
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff fec2 	bl	8000a30 <vPrintString>

		vPortFree(pc_uartSend);
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f003 ff8f 	bl	8004bd0 <vPortFree>

		vTaskDelay( 10 / portTICK_PERIOD_MS );
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f002 fe5e 	bl	8003974 <vTaskDelay>
	for (;;) {
 8000cb8:	e7dd      	b.n	8000c76 <vTask_print_count+0xe>
 8000cba:	bf00      	nop
 8000cbc:	08005a34 	.word	0x08005a34
 8000cc0:	20004048 	.word	0x20004048
 8000cc4:	08005a50 	.word	0x08005a50

08000cc8 <vTask1>:
	}
}

void vTask1(void *pvParameters) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	xData_t x_count_1 = {
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <vTask1+0x4c>)
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.task_name = "task_1"
	};

	char c_value_char[30];

	vPrintString("vTask_1 iniciada!");
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <vTask1+0x50>)
 8000cde:	f7ff fea7 	bl	8000a30 <vPrintString>
		 * Caso a fila esteja cheia, esta task será bloqueada
		 *
		 * Não é checada se foi enviado pois caso não consiga existe o portMAX_DELAY, a tarefa
		 * se manterá bloqueada até que seja enviada
		 */
		xQueueSend( xQueue_count, &x_count_1, portMAX_DELAY);
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <vTask1+0x54>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000cea:	2300      	movs	r3, #0
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	f002 f89a 	bl	8002e28 <xQueueGenericSend>

		sprintf(c_value_char, "vTask_1 envia: %ld \r\n", x_count_1.u32_value);
 8000cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4909      	ldr	r1, [pc, #36]	; (8000d20 <vTask1+0x58>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 f8c5 	bl	8004e8c <siprintf>

		x_count_1.u32_value++;
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	3301      	adds	r3, #1
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c

		vTaskDelay( 1000 / portTICK_PERIOD_MS );
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f002 fe32 	bl	8003974 <vTaskDelay>
		xQueueSend( xQueue_count, &x_count_1, portMAX_DELAY);
 8000d10:	e7e7      	b.n	8000ce2 <vTask1+0x1a>
 8000d12:	bf00      	nop
 8000d14:	08005ac4 	.word	0x08005ac4
 8000d18:	08005a98 	.word	0x08005a98
 8000d1c:	20004048 	.word	0x20004048
 8000d20:	08005aac 	.word	0x08005aac

08000d24 <vTask2>:
	}
}

void vTask2(void *pvParameters) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	; 0x38
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	xData_t x_count_2 = {
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <vTask2+0x4c>)
 8000d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.task_name = "task_2"
	};

	char c_value_char[30];

	vPrintString("vTask_2 iniciada!");
 8000d38:	480e      	ldr	r0, [pc, #56]	; (8000d74 <vTask2+0x50>)
 8000d3a:	f7ff fe79 	bl	8000a30 <vPrintString>
		 * Envia uma cópia do valor de count_1 na fila.
		 * Caso a fila esteja cheia, esta task será bloqueada
		 * Não é checada se foi enviado pois caso não consiga existe o portMAX_DELAY, a tarefa
		 * se manterá bloqueada até que seja enviada
		 */
		xQueueSend( xQueue_count, &x_count_2, portMAX_DELAY);
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <vTask2+0x54>)
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d46:	2300      	movs	r3, #0
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	f002 f86c 	bl	8002e28 <xQueueGenericSend>

		sprintf(c_value_char, "vTask_2 envia: %ld \r\n", x_count_2.u32_value);
 8000d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <vTask2+0x58>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 f897 	bl	8004e8c <siprintf>

		x_count_2.u32_value++;
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	3301      	adds	r3, #1
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c

		vTaskDelay( 1000 / portTICK_PERIOD_MS );
 8000d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d68:	f002 fe04 	bl	8003974 <vTaskDelay>
		xQueueSend( xQueue_count, &x_count_2, portMAX_DELAY);
 8000d6c:	e7e7      	b.n	8000d3e <vTask2+0x1a>
 8000d6e:	bf00      	nop
 8000d70:	08005afc 	.word	0x08005afc
 8000d74:	08005ad0 	.word	0x08005ad0
 8000d78:	20004048 	.word	0x20004048
 8000d7c:	08005ae4 	.word	0x08005ae4

08000d80 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d92:	f000 f993 	bl	80010bc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40000800 	.word	0x40000800

08000da4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_MspInit+0x54>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_MspInit+0x54>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x54>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_MspInit+0x54>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_MspInit+0x54>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x54>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	210f      	movs	r1, #15
 8000df2:	f06f 0001 	mvn.w	r0, #1
 8000df6:	f000 fa39 	bl	800126c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <HAL_UART_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12b      	bne.n	8000e82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_UART_MspInit+0x88>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0x88>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_UART_MspInit+0x88>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_UART_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <HAL_UART_MspInit+0x88>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e72:	2307      	movs	r3, #7
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_UART_MspInit+0x8c>)
 8000e7e:	f000 fa1f 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020400 	.word	0x40020400

08000e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	201e      	movs	r0, #30
 8000eae:	f000 f9dd 	bl	800126c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eb2:	201e      	movs	r0, #30
 8000eb4:	f000 f9f6 	bl	80012a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_InitTick+0xa4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_InitTick+0xa4>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_InitTick+0xa4>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed4:	f107 0210 	add.w	r2, r7, #16
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f832 	bl	8001f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ee4:	f001 f808 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef0:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <HAL_InitTick+0xa8>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_InitTick+0xac>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_InitTick+0xb0>)
 8000f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_InitTick+0xac>)
 8000f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f08:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_InitTick+0xac>)
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_InitTick+0xac>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_InitTick+0xac>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <HAL_InitTick+0xac>)
 8000f1e:	f001 f845 	bl	8001fac <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d104      	bne.n	8000f32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <HAL_InitTick+0xac>)
 8000f2a:	f001 f899 	bl	8002060 <HAL_TIM_Base_Start_IT>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	431bde83 	.word	0x431bde83
 8000f44:	20004094 	.word	0x20004094
 8000f48:	40000800 	.word	0x40000800

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM4_IRQHandler+0x10>)
 8000f7e:	f001 f8d1 	bl	8002124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20004094 	.word	0x20004094

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f003 ff26 	bl	8004e0c <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20010000 	.word	0x20010000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	200002e4 	.word	0x200002e4
 8000ff4:	200040f0 	.word	0x200040f0

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <SystemInit+0x28>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <SystemInit+0x28>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SystemInit+0x28>)
 800100e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001012:	609a      	str	r2, [r3, #8]
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001028:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800102a:	e003      	b.n	8001034 <LoopCopyDataInit>

0800102c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800102e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001030:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001032:	3104      	adds	r1, #4

08001034 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001038:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800103c:	d3f6      	bcc.n	800102c <CopyDataInit>
  ldr  r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001040:	e002      	b.n	8001048 <LoopFillZerobss>

08001042 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001042:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001044:	f842 3b04 	str.w	r3, [r2], #4

08001048 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800104a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800104c:	d3f9      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd3 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 fee1 	bl	8004e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff faa9 	bl	80005ac <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001060:	08005b6c 	.word	0x08005b6c
  ldr  r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001068:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800106c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001070:	200040f0 	.word	0x200040f0

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f8d8 	bl	8001256 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fef6 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fe80 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	200040dc 	.word	0x200040dc

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200040dc 	.word	0x200040dc

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff4c 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127e:	f7ff ff61 	bl	8001144 <__NVIC_GetPriorityGrouping>
 8001282:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	6978      	ldr	r0, [r7, #20]
 800128a:	f7ff ffb1 	bl	80011f0 <NVIC_EncodePriority>
 800128e:	4602      	mov	r2, r0
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff80 	bl	800119c <__NVIC_SetPriority>
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff54 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e159      	b.n	8001590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8148 	bne.w	800158a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d005      	beq.n	8001312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	2b02      	cmp	r3, #2
 8001310:	d130      	bne.n	8001374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a2 	beq.w	800158a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x202>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_GPIO_Init+0x2f4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1fe>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <HAL_GPIO_Init+0x2f8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1fa>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a46      	ldr	r2, [pc, #280]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1f6>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <HAL_GPIO_Init+0x300>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1f2>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_GPIO_Init+0x304>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001506:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_GPIO_Init+0x304>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001530:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <HAL_GPIO_Init+0x304>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_GPIO_Init+0x304>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f aea2 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001614:	e003      	b.n	800161e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	041a      	lsls	r2, r3, #16
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	619a      	str	r2, [r3, #24]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800163c:	887a      	ldrh	r2, [r7, #2]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	041a      	lsls	r2, r3, #16
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43d9      	mvns	r1, r3
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	400b      	ands	r3, r1
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e264      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d075      	beq.n	800176a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	4ba3      	ldr	r3, [pc, #652]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d00c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4ba0      	ldr	r3, [pc, #640]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b9d      	ldr	r3, [pc, #628]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a2:	d10b      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4b99      	ldr	r3, [pc, #612]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05b      	beq.n	8001768 <HAL_RCC_OscConfig+0x108>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d157      	bne.n	8001768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e23f      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x74>
 80016c6:	4b91      	ldr	r3, [pc, #580]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a90      	ldr	r2, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x98>
 80016de:	4b8b      	ldr	r3, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a8a      	ldr	r2, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b88      	ldr	r3, [pc, #544]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a87      	ldr	r2, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016f8:	4b84      	ldr	r3, [pc, #528]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a83      	ldr	r2, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a80      	ldr	r2, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fce4 	bl	80010e4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fce0 	bl	80010e4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e204      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0xc0>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fcd0 	bl	80010e4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fccc 	bl	80010e4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1f0      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b6c      	ldr	r3, [pc, #432]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0xe8>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d063      	beq.n	800183e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178a:	2b08      	cmp	r3, #8
 800178c:	d11c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e1c4      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4952      	ldr	r1, [pc, #328]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	e03a      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fc85 	bl	80010e4 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fc81 	bl	80010e4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1a5      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4940      	ldr	r1, [pc, #256]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fc64 	bl	80010e4 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fc60 	bl	80010e4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e184      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fc44 	bl	80010e4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff fc40 	bl	80010e4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e164      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x200>
 800187e:	e015      	b.n	80018ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff fc2d 	bl	80010e4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff fc29 	bl	80010e4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e14d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a0 	beq.w	80019fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d121      	bne.n	800193a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fbef 	bl	80010e4 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e011      	b.n	800192e <HAL_RCC_OscConfig+0x2ce>
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	42470000 	.word	0x42470000
 8001914:	42470e80 	.word	0x42470e80
 8001918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191c:	f7ff fbe2 	bl	80010e4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e106      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <HAL_RCC_OscConfig+0x4e4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a80      	ldr	r2, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e01c      	b.n	800198a <HAL_RCC_OscConfig+0x32a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x312>
 8001958:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x32a>
 8001972:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d015      	beq.n	80019be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff fba7 	bl	80010e4 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff fba3 	bl	80010e4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0c5      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ee      	beq.n	800199a <HAL_RCC_OscConfig+0x33a>
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb91 	bl	80010e4 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fb8d 	bl	80010e4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0af      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a55      	ldr	r2, [pc, #340]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 809b 	beq.w	8001b3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d05c      	beq.n	8001aca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d141      	bne.n	8001a9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb61 	bl	80010e4 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff fb5d 	bl	80010e4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e081      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb36 	bl	80010e4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fb32 	bl	80010e4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e056      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x41c>
 8001a9a:	e04e      	b.n	8001b3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb1f 	bl	80010e4 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fb1b 	bl	80010e4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e03f      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 8001ac8:	e037      	b.n	8001b3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e032      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d028      	beq.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d11a      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d111      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40007000 	.word	0x40007000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470060 	.word	0x42470060

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cc      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d90c      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d044      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e067      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4934      	ldr	r1, [pc, #208]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7ff fa50 	bl	80010e4 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff fa4c 	bl	80010e4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d20c      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f8ce 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08005b10 	.word	0x08005b10
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d00d      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x40>
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	f200 80bd 	bhi.w	8001ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x34>
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4e:	e0b7      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d52:	60bb      	str	r3, [r7, #8]
       break;
 8001d54:	e0b7      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d56:	4b61      	ldr	r3, [pc, #388]	; (8001edc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d58:	60bb      	str	r3, [r7, #8]
      break;
 8001d5a:	e0b4      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5c:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04d      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d82:	f04f 0100 	mov.w	r1, #0
 8001d86:	ea02 0800 	and.w	r8, r2, r0
 8001d8a:	ea03 0901 	and.w	r9, r3, r1
 8001d8e:	4640      	mov	r0, r8
 8001d90:	4649      	mov	r1, r9
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	014b      	lsls	r3, r1, #5
 8001d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001da0:	0142      	lsls	r2, r0, #5
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	ebb0 0008 	subs.w	r0, r0, r8
 8001daa:	eb61 0109 	sbc.w	r1, r1, r9
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	018b      	lsls	r3, r1, #6
 8001db8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dbc:	0182      	lsls	r2, r0, #6
 8001dbe:	1a12      	subs	r2, r2, r0
 8001dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	00d9      	lsls	r1, r3, #3
 8001dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dd2:	00d0      	lsls	r0, r2, #3
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	eb12 0208 	adds.w	r2, r2, r8
 8001ddc:	eb43 0309 	adc.w	r3, r3, r9
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	0259      	lsls	r1, r3, #9
 8001dea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dee:	0250      	lsls	r0, r2, #9
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	f7fe fa3e 	bl	8000280 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e04a      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	461a      	mov	r2, r3
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	ea02 0400 	and.w	r4, r2, r0
 8001e26:	ea03 0501 	and.w	r5, r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	014b      	lsls	r3, r1, #5
 8001e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e3c:	0142      	lsls	r2, r0, #5
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	1b00      	subs	r0, r0, r4
 8001e44:	eb61 0105 	sbc.w	r1, r1, r5
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	018b      	lsls	r3, r1, #6
 8001e52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e56:	0182      	lsls	r2, r0, #6
 8001e58:	1a12      	subs	r2, r2, r0
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	f04f 0000 	mov.w	r0, #0
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	00d9      	lsls	r1, r3, #3
 8001e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e6c:	00d0      	lsls	r0, r2, #3
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	1912      	adds	r2, r2, r4
 8001e74:	eb45 0303 	adc.w	r3, r5, r3
 8001e78:	f04f 0000 	mov.w	r0, #0
 8001e7c:	f04f 0100 	mov.w	r1, #0
 8001e80:	0299      	lsls	r1, r3, #10
 8001e82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e86:	0290      	lsls	r0, r2, #10
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	f7fe f9f2 	bl	8000280 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	60bb      	str	r3, [r7, #8]
      break;
 8001ebe:	e002      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ec2:	60bb      	str	r3, [r7, #8]
      break;
 8001ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0a9b      	lsrs	r3, r3, #10
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08005b20 	.word	0x08005b20

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff ffdc 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0b5b      	lsrs	r3, r3, #13
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08005b20 	.word	0x08005b20

08001f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220f      	movs	r2, #15
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_RCC_GetClockConfig+0x60>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0207 	and.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e041      	b.n	8002042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f839 	bl	800204a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f000 f9ca 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e044      	b.n	8002102 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_TIM_Base_Start_IT+0xb0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d018      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x6c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d013      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x6c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_TIM_Base_Start_IT+0xb4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00e      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x6c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_TIM_Base_Start_IT+0xb8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x6c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_TIM_Base_Start_IT+0xbc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x6c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_TIM_Base_Start_IT+0xc0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d111      	bne.n	80020f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d010      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ee:	e007      	b.n	8002100 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00
 8002120:	40014000 	.word	0x40014000

08002124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b02      	cmp	r3, #2
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0202 	mvn.w	r2, #2
 8002150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8ee 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8e0 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f8f1 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0204 	mvn.w	r2, #4
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8c4 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8b6 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f8c7 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0208 	mvn.w	r2, #8
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2204      	movs	r2, #4
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f89a 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f88c 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f89d 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b10      	cmp	r3, #16
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b10      	cmp	r3, #16
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0210 	mvn.w	r2, #16
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2208      	movs	r2, #8
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f870 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f862 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f873 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fd6c 	bl	8000d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8e2 	bl	8002498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f838 	bl	8002370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b20      	cmp	r3, #32
 800230c:	d10e      	bne.n	800232c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b20      	cmp	r3, #32
 800231a:	d107      	bne.n	800232c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0220 	mvn.w	r2, #32
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8ac 	bl	8002484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a34      	ldr	r2, [pc, #208]	; (8002468 <TIM_Base_SetConfig+0xe4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00f      	beq.n	80023bc <TIM_Base_SetConfig+0x38>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d00b      	beq.n	80023bc <TIM_Base_SetConfig+0x38>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a31      	ldr	r2, [pc, #196]	; (800246c <TIM_Base_SetConfig+0xe8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <TIM_Base_SetConfig+0x38>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a30      	ldr	r2, [pc, #192]	; (8002470 <TIM_Base_SetConfig+0xec>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <TIM_Base_SetConfig+0x38>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <TIM_Base_SetConfig+0xf0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d108      	bne.n	80023ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a25      	ldr	r2, [pc, #148]	; (8002468 <TIM_Base_SetConfig+0xe4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01b      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d017      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <TIM_Base_SetConfig+0xe8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a21      	ldr	r2, [pc, #132]	; (8002470 <TIM_Base_SetConfig+0xec>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00f      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a20      	ldr	r2, [pc, #128]	; (8002474 <TIM_Base_SetConfig+0xf0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00b      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <TIM_Base_SetConfig+0xf4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <TIM_Base_SetConfig+0xf8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <TIM_Base_SetConfig+0x8a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <TIM_Base_SetConfig+0xfc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d108      	bne.n	8002420 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <TIM_Base_SetConfig+0xe4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40014000 	.word	0x40014000
 800247c:	40014400 	.word	0x40014400
 8002480:	40014800 	.word	0x40014800

08002484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03f      	b.n	800253e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fc98 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f929 	bl	8002748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b08a      	sub	sp, #40	; 0x28
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d17c      	bne.n	8002660 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_Transmit+0x2c>
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e075      	b.n	8002662 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_UART_Transmit+0x3e>
 8002580:	2302      	movs	r3, #2
 8002582:	e06e      	b.n	8002662 <HAL_UART_Transmit+0x11c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2221      	movs	r2, #33	; 0x21
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800259a:	f7fe fda3 	bl	80010e4 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b4:	d108      	bne.n	80025c8 <HAL_UART_Transmit+0x82>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e003      	b.n	80025d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025d8:	e02a      	b.n	8002630 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f840 	bl	800266a <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e036      	b.n	8002662 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3302      	adds	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e007      	b.n	8002622 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1cf      	bne.n	80025da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	2140      	movs	r1, #64	; 0x40
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f810 	bl	800266a <UART_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e006      	b.n	8002662 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b090      	sub	sp, #64	; 0x40
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267a:	e050      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d04c      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <UART_WaitOnFlagUntilTimeout+0x30>
 800268a:	f7fe fd2b 	bl	80010e4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002696:	429a      	cmp	r2, r3
 8002698:	d241      	bcs.n	800271e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	330c      	adds	r3, #12
 80026b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ba:	637a      	str	r2, [r7, #52]	; 0x34
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e5      	bne.n	800269a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	613b      	str	r3, [r7, #16]
   return(result);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3314      	adds	r3, #20
 80026ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ee:	623a      	str	r2, [r7, #32]
 80026f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	69f9      	ldr	r1, [r7, #28]
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	e841 2300 	strex	r3, r2, [r1]
 80026fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e5      	bne.n	80026ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e00f      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	429a      	cmp	r2, r3
 800273a:	d09f      	beq.n	800267c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3740      	adds	r7, #64	; 0x40
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	b09f      	sub	sp, #124	; 0x7c
 800274e:	af00      	add	r7, sp, #0
 8002750:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800275c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275e:	68d9      	ldr	r1, [r3, #12]
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	ea40 0301 	orr.w	r3, r0, r1
 8002768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	431a      	orrs	r2, r3
 8002774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	431a      	orrs	r2, r3
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4313      	orrs	r3, r2
 8002780:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800278c:	f021 010c 	bic.w	r1, r1, #12
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002796:	430b      	orrs	r3, r1
 8002798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	6999      	ldr	r1, [r3, #24]
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	ea40 0301 	orr.w	r3, r0, r1
 80027b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4bc5      	ldr	r3, [pc, #788]	; (8002acc <UART_SetConfig+0x384>)
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d004      	beq.n	80027c6 <UART_SetConfig+0x7e>
 80027bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4bc3      	ldr	r3, [pc, #780]	; (8002ad0 <UART_SetConfig+0x388>)
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d103      	bne.n	80027ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027c6:	f7ff fbab 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 80027ca:	6778      	str	r0, [r7, #116]	; 0x74
 80027cc:	e002      	b.n	80027d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ce:	f7ff fb93 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 80027d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027dc:	f040 80b6 	bne.w	800294c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	461c      	mov	r4, r3
 80027e4:	f04f 0500 	mov.w	r5, #0
 80027e8:	4622      	mov	r2, r4
 80027ea:	462b      	mov	r3, r5
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	6439      	str	r1, [r7, #64]	; 0x40
 80027f0:	415b      	adcs	r3, r3
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
 80027f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027f8:	1912      	adds	r2, r2, r4
 80027fa:	eb45 0303 	adc.w	r3, r5, r3
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	00d9      	lsls	r1, r3, #3
 8002808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800280c:	00d0      	lsls	r0, r2, #3
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	1911      	adds	r1, r2, r4
 8002814:	6639      	str	r1, [r7, #96]	; 0x60
 8002816:	416b      	adcs	r3, r5
 8002818:	667b      	str	r3, [r7, #100]	; 0x64
 800281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	1891      	adds	r1, r2, r2
 8002826:	63b9      	str	r1, [r7, #56]	; 0x38
 8002828:	415b      	adcs	r3, r3
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002830:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002834:	f7fd fd24 	bl	8000280 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4ba5      	ldr	r3, [pc, #660]	; (8002ad4 <UART_SetConfig+0x38c>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	011e      	lsls	r6, r3, #4
 8002846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002848:	461c      	mov	r4, r3
 800284a:	f04f 0500 	mov.w	r5, #0
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	1891      	adds	r1, r2, r2
 8002854:	6339      	str	r1, [r7, #48]	; 0x30
 8002856:	415b      	adcs	r3, r3
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
 800285a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800285e:	1912      	adds	r2, r2, r4
 8002860:	eb45 0303 	adc.w	r3, r5, r3
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	00d9      	lsls	r1, r3, #3
 800286e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002872:	00d0      	lsls	r0, r2, #3
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	1911      	adds	r1, r2, r4
 800287a:	65b9      	str	r1, [r7, #88]	; 0x58
 800287c:	416b      	adcs	r3, r5
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	461a      	mov	r2, r3
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	1891      	adds	r1, r2, r2
 800288c:	62b9      	str	r1, [r7, #40]	; 0x28
 800288e:	415b      	adcs	r3, r3
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002896:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800289a:	f7fd fcf1 	bl	8000280 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <UART_SetConfig+0x38c>)
 80028a4:	fba3 1302 	umull	r1, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	2164      	movs	r1, #100	; 0x64
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3332      	adds	r3, #50	; 0x32
 80028b6:	4a87      	ldr	r2, [pc, #540]	; (8002ad4 <UART_SetConfig+0x38c>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028c4:	441e      	add	r6, r3
 80028c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c8:	4618      	mov	r0, r3
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	1894      	adds	r4, r2, r2
 80028d4:	623c      	str	r4, [r7, #32]
 80028d6:	415b      	adcs	r3, r3
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028de:	1812      	adds	r2, r2, r0
 80028e0:	eb41 0303 	adc.w	r3, r1, r3
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	f04f 0500 	mov.w	r5, #0
 80028ec:	00dd      	lsls	r5, r3, #3
 80028ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028f2:	00d4      	lsls	r4, r2, #3
 80028f4:	4622      	mov	r2, r4
 80028f6:	462b      	mov	r3, r5
 80028f8:	1814      	adds	r4, r2, r0
 80028fa:	653c      	str	r4, [r7, #80]	; 0x50
 80028fc:	414b      	adcs	r3, r1
 80028fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	1891      	adds	r1, r2, r2
 800290c:	61b9      	str	r1, [r7, #24]
 800290e:	415b      	adcs	r3, r3
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002916:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800291a:	f7fd fcb1 	bl	8000280 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a67      	ldr	r2, [pc, #412]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 0207 	and.w	r2, r3, #7
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4432      	add	r2, r6
 8002948:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800294a:	e0b9      	b.n	8002ac0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800294c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294e:	461c      	mov	r4, r3
 8002950:	f04f 0500 	mov.w	r5, #0
 8002954:	4622      	mov	r2, r4
 8002956:	462b      	mov	r3, r5
 8002958:	1891      	adds	r1, r2, r2
 800295a:	6139      	str	r1, [r7, #16]
 800295c:	415b      	adcs	r3, r3
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002964:	1912      	adds	r2, r2, r4
 8002966:	eb45 0303 	adc.w	r3, r5, r3
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	00d9      	lsls	r1, r3, #3
 8002974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002978:	00d0      	lsls	r0, r2, #3
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	eb12 0804 	adds.w	r8, r2, r4
 8002982:	eb43 0905 	adc.w	r9, r3, r5
 8002986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4618      	mov	r0, r3
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	008b      	lsls	r3, r1, #2
 800299a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800299e:	0082      	lsls	r2, r0, #2
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc6c 	bl	8000280 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <UART_SetConfig+0x38c>)
 80029ae:	fba3 2302 	umull	r2, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	011e      	lsls	r6, r3, #4
 80029b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b8:	4618      	mov	r0, r3
 80029ba:	f04f 0100 	mov.w	r1, #0
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	1894      	adds	r4, r2, r2
 80029c4:	60bc      	str	r4, [r7, #8]
 80029c6:	415b      	adcs	r3, r3
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ce:	1812      	adds	r2, r2, r0
 80029d0:	eb41 0303 	adc.w	r3, r1, r3
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f04f 0500 	mov.w	r5, #0
 80029dc:	00dd      	lsls	r5, r3, #3
 80029de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029e2:	00d4      	lsls	r4, r2, #3
 80029e4:	4622      	mov	r2, r4
 80029e6:	462b      	mov	r3, r5
 80029e8:	1814      	adds	r4, r2, r0
 80029ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80029ec:	414b      	adcs	r3, r1
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	008b      	lsls	r3, r1, #2
 8002a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a08:	0082      	lsls	r2, r0, #2
 8002a0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a0e:	f7fd fc37 	bl	8000280 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	3332      	adds	r3, #50	; 0x32
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a36:	441e      	add	r6, r3
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	1894      	adds	r4, r2, r2
 8002a46:	603c      	str	r4, [r7, #0]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a50:	1812      	adds	r2, r2, r0
 8002a52:	eb41 0303 	adc.w	r3, r1, r3
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	f04f 0500 	mov.w	r5, #0
 8002a5e:	00dd      	lsls	r5, r3, #3
 8002a60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a64:	00d4      	lsls	r4, r2, #3
 8002a66:	4622      	mov	r2, r4
 8002a68:	462b      	mov	r3, r5
 8002a6a:	eb12 0a00 	adds.w	sl, r2, r0
 8002a6e:	eb43 0b01 	adc.w	fp, r3, r1
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	008b      	lsls	r3, r1, #2
 8002a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a8a:	0082      	lsls	r2, r0, #2
 8002a8c:	4650      	mov	r0, sl
 8002a8e:	4659      	mov	r1, fp
 8002a90:	f7fd fbf6 	bl	8000280 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2164      	movs	r1, #100	; 0x64
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	3332      	adds	r3, #50	; 0x32
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	f003 020f 	and.w	r2, r3, #15
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4432      	add	r2, r6
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	377c      	adds	r7, #124	; 0x7c
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aca:	bf00      	nop
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	51eb851f 	.word	0x51eb851f

08002ad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f103 0208 	add.w	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f103 0208 	add.w	r2, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0208 	add.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d103      	bne.n	8002b9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e00c      	b.n	8002bb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e002      	b.n	8002ba8 <vListInsert+0x2e>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d2f6      	bcs.n	8002ba2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6852      	ldr	r2, [r2, #4]
 8002c0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d103      	bne.n	8002c20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c66:	bf00      	nop
 8002c68:	e7fe      	b.n	8002c68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c6a:	f001 fe03 	bl	8004874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	441a      	add	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d114      	bne.n	8002cea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01a      	beq.n	8002cfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3310      	adds	r3, #16
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 f8c7 	bl	8003e60 <xTaskRemoveFromEventList>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <xQueueGenericReset+0xcc>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	e009      	b.n	8002cfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3310      	adds	r3, #16
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fef2 	bl	8002ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff feed 	bl	8002ad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cfe:	f001 fde9 	bl	80048d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	613b      	str	r3, [r7, #16]
}
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3348      	adds	r3, #72	; 0x48
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fe75 	bl	8004a38 <pvPortMalloc>
 8002d4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d011      	beq.n	8002d7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3348      	adds	r3, #72	; 0x48
 8002d5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d68:	79fa      	ldrb	r2, [r7, #7]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f805 	bl	8002d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002db2:	2101      	movs	r1, #1
 8002db4:	69b8      	ldr	r0, [r7, #24]
 8002db6:	f7ff ff43 	bl	8002c40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00e      	beq.n	8002dee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002de2:	2300      	movs	r3, #0
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f81d 	bl	8002e28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6939      	ldr	r1, [r7, #16]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff7e 	bl	8002d10 <xQueueGenericCreate>
 8002e14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff ffd3 	bl	8002dc2 <prvInitialiseMutex>

		return xNewQueue;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
	}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	; 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e36:	2300      	movs	r3, #0
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xQueueGenericSend+0x32>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <xQueueGenericSend+0x40>
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <xQueueGenericSend+0x44>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <xQueueGenericSend+0x46>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <xQueueGenericSend+0x60>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d103      	bne.n	8002e96 <xQueueGenericSend+0x6e>
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <xQueueGenericSend+0x72>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <xQueueGenericSend+0x74>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	623b      	str	r3, [r7, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eb6:	f001 f98f 	bl	80041d8 <xTaskGetSchedulerState>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <xQueueGenericSend+0x9e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSend+0xa2>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSend+0xa4>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ee6:	f001 fcc5 	bl	8004874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <xQueueGenericSend+0xd4>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d129      	bne.n	8002f50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f02:	f000 fa93 	bl	800342c <prvCopyDataToQueue>
 8002f06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d010      	beq.n	8002f32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	3324      	adds	r3, #36	; 0x24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ffa3 	bl	8003e60 <xTaskRemoveFromEventList>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f20:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <xQueueGenericSend+0x1f8>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	e00a      	b.n	8002f48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <xQueueGenericSend+0x1f8>)
 8002f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f48:	f001 fcc4 	bl	80048d4 <vPortExitCritical>
				return pdPASS;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e063      	b.n	8003018 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f56:	f001 fcbd 	bl	80048d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e05c      	b.n	8003018 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 ffdb 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f72:	f001 fcaf 	bl	80048d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f76:	f000 fd91 	bl	8003a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f7a:	f001 fc7b 	bl	8004874 <vPortEnterCritical>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d103      	bne.n	8002f94 <xQueueGenericSend+0x16c>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d103      	bne.n	8002faa <xQueueGenericSend+0x182>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002faa:	f001 fc93 	bl	80048d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fae:	1d3a      	adds	r2, r7, #4
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ffca 	bl	8003f50 <xTaskCheckForTimeOut>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d124      	bne.n	800300c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc4:	f000 fb2a 	bl	800361c <prvIsQueueFull>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d018      	beq.n	8003000 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 ff1e 	bl	8003e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fde:	f000 fab5 	bl	800354c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fe2:	f000 fd69 	bl	8003ab8 <xTaskResumeAll>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af7c 	bne.w	8002ee6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <xQueueGenericSend+0x1f8>)
 8002ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	e772      	b.n	8002ee6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003002:	f000 faa3 	bl	800354c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003006:	f000 fd57 	bl	8003ab8 <xTaskResumeAll>
 800300a:	e76c      	b.n	8002ee6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800300c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300e:	f000 fa9d 	bl	800354c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003012:	f000 fd51 	bl	8003ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003018:	4618      	mov	r0, r3
 800301a:	3738      	adds	r7, #56	; 0x38
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xQueueReceive+0x30>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	623b      	str	r3, [r7, #32]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <xQueueReceive+0x3e>
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <xQueueReceive+0x42>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <xQueueReceive+0x44>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueReceive+0x5e>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	61fb      	str	r3, [r7, #28]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003082:	f001 f8a9 	bl	80041d8 <xTaskGetSchedulerState>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <xQueueReceive+0x6e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <xQueueReceive+0x72>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueReceive+0x74>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueReceive+0x8e>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	61bb      	str	r3, [r7, #24]
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030b2:	f001 fbdf 	bl	8004874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01f      	beq.n	8003102 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c6:	f000 fa1b 	bl	8003500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	1e5a      	subs	r2, r3, #1
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00f      	beq.n	80030fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	3310      	adds	r3, #16
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 febe 	bl	8003e60 <xTaskRemoveFromEventList>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030ea:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <xQueueReceive+0x1bc>)
 80030ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030fa:	f001 fbeb 	bl	80048d4 <vPortExitCritical>
				return pdPASS;
 80030fe:	2301      	movs	r3, #1
 8003100:	e069      	b.n	80031d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003108:	f001 fbe4 	bl	80048d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800310c:	2300      	movs	r3, #0
 800310e:	e062      	b.n	80031d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	4618      	mov	r0, r3
 800311c:	f000 ff02 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003120:	2301      	movs	r3, #1
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003124:	f001 fbd6 	bl	80048d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003128:	f000 fcb8 	bl	8003a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800312c:	f001 fba2 	bl	8004874 <vPortEnterCritical>
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003136:	b25b      	sxtb	r3, r3
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d103      	bne.n	8003146 <xQueueReceive+0x122>
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314c:	b25b      	sxtb	r3, r3
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d103      	bne.n	800315c <xQueueReceive+0x138>
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800315c:	f001 fbba 	bl	80048d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003160:	1d3a      	adds	r2, r7, #4
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fef1 	bl	8003f50 <xTaskCheckForTimeOut>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d123      	bne.n	80031bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003176:	f000 fa3b 	bl	80035f0 <prvIsQueueEmpty>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d017      	beq.n	80031b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	3324      	adds	r3, #36	; 0x24
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fe45 	bl	8003e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800318e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003190:	f000 f9dc 	bl	800354c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003194:	f000 fc90 	bl	8003ab8 <xTaskResumeAll>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d189      	bne.n	80030b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <xQueueReceive+0x1bc>)
 80031a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	e780      	b.n	80030b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b2:	f000 f9cb 	bl	800354c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031b6:	f000 fc7f 	bl	8003ab8 <xTaskResumeAll>
 80031ba:	e77a      	b.n	80030b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031be:	f000 f9c5 	bl	800354c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031c2:	f000 fc79 	bl	8003ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c8:	f000 fa12 	bl	80035f0 <prvIsQueueEmpty>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f43f af6f 	beq.w	80030b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3730      	adds	r7, #48	; 0x30
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	623b      	str	r3, [r7, #32]
}
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	61fb      	str	r3, [r7, #28]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003234:	f000 ffd0 	bl	80041d8 <xTaskGetSchedulerState>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <xQueueSemaphoreTake+0x60>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <xQueueSemaphoreTake+0x64>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <xQueueSemaphoreTake+0x66>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61bb      	str	r3, [r7, #24]
}
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003264:	f001 fb06 	bl	8004874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d024      	beq.n	80032be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	1e5a      	subs	r2, r3, #1
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003284:	f001 f950 	bl	8004528 <pvTaskIncrementMutexHeldCount>
 8003288:	4602      	mov	r2, r0
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00f      	beq.n	80032b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	3310      	adds	r3, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fde0 	bl	8003e60 <xTaskRemoveFromEventList>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032a6:	4b54      	ldr	r3, [pc, #336]	; (80033f8 <xQueueSemaphoreTake+0x214>)
 80032a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032b6:	f001 fb0d 	bl	80048d4 <vPortExitCritical>
				return pdPASS;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e097      	b.n	80033ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	617b      	str	r3, [r7, #20]
}
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032e0:	f001 faf8 	bl	80048d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e082      	b.n	80033ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fe16 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032fc:	f001 faea 	bl	80048d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003300:	f000 fbcc 	bl	8003a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003304:	f001 fab6 	bl	8004874 <vPortEnterCritical>
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueSemaphoreTake+0x13a>
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003324:	b25b      	sxtb	r3, r3
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d103      	bne.n	8003334 <xQueueSemaphoreTake+0x150>
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003334:	f001 face 	bl	80048d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003338:	463a      	mov	r2, r7
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fe05 	bl	8003f50 <xTaskCheckForTimeOut>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d132      	bne.n	80033b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800334c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800334e:	f000 f94f 	bl	80035f0 <prvIsQueueEmpty>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d026      	beq.n	80033a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003360:	f001 fa88 	bl	8004874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff53 	bl	8004214 <xTaskPriorityInherit>
 800336e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003370:	f001 fab0 	bl	80048d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	3324      	adds	r3, #36	; 0x24
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd4b 	bl	8003e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003384:	f000 f8e2 	bl	800354c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003388:	f000 fb96 	bl	8003ab8 <xTaskResumeAll>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	f47f af68 	bne.w	8003264 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <xQueueSemaphoreTake+0x214>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	e75e      	b.n	8003264 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80033a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033a8:	f000 f8d0 	bl	800354c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033ac:	f000 fb84 	bl	8003ab8 <xTaskResumeAll>
 80033b0:	e758      	b.n	8003264 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80033b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033b4:	f000 f8ca 	bl	800354c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033b8:	f000 fb7e 	bl	8003ab8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033be:	f000 f917 	bl	80035f0 <prvIsQueueEmpty>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f43f af4d 	beq.w	8003264 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80033d0:	f001 fa50 	bl	8004874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033d6:	f000 f811 	bl	80033fc <prvGetDisinheritPriorityAfterTimeout>
 80033da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f812 	bl	800440c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033e8:	f001 fa74 	bl	80048d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3738      	adds	r7, #56	; 0x38
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800341e:	68fb      	ldr	r3, [r7, #12]
	}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d14d      	bne.n	80034ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 ff52 	bl	8004300 <xTaskPriorityDisinherit>
 800345c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e043      	b.n	80034ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d119      	bne.n	80034a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6858      	ldr	r0, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	461a      	mov	r2, r3
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	f001 fcf2 	bl	8004e60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	441a      	add	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d32b      	bcc.n	80034ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	e026      	b.n	80034ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68d8      	ldr	r0, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	461a      	mov	r2, r3
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	f001 fcd8 	bl	8004e60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	425b      	negs	r3, r3
 80034ba:	441a      	add	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d207      	bcs.n	80034dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	425b      	negs	r3, r3
 80034d6:	441a      	add	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d105      	bne.n	80034ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034f6:	697b      	ldr	r3, [r7, #20]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d018      	beq.n	8003544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	441a      	add	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	429a      	cmp	r2, r3
 800352a:	d303      	bcc.n	8003534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	461a      	mov	r2, r3
 800353e:	6838      	ldr	r0, [r7, #0]
 8003540:	f001 fc8e 	bl	8004e60 <memcpy>
	}
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003554:	f001 f98e 	bl	8004874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003560:	e011      	b.n	8003586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3324      	adds	r3, #36	; 0x24
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fc76 	bl	8003e60 <xTaskRemoveFromEventList>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800357a:	f000 fd4b 	bl	8004014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	3b01      	subs	r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	dce9      	bgt.n	8003562 <prvUnlockQueue+0x16>
 800358e:	e000      	b.n	8003592 <prvUnlockQueue+0x46>
					break;
 8003590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	22ff      	movs	r2, #255	; 0xff
 8003596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800359a:	f001 f99b 	bl	80048d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800359e:	f001 f969 	bl	8004874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035aa:	e011      	b.n	80035d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3310      	adds	r3, #16
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fc51 	bl	8003e60 <xTaskRemoveFromEventList>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035c4:	f000 fd26 	bl	8004014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	dce9      	bgt.n	80035ac <prvUnlockQueue+0x60>
 80035d8:	e000      	b.n	80035dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035e4:	f001 f976 	bl	80048d4 <vPortExitCritical>
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f8:	f001 f93c 	bl	8004874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e001      	b.n	800360e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800360e:	f001 f961 	bl	80048d4 <vPortExitCritical>

	return xReturn;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003624:	f001 f926 	bl	8004874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	429a      	cmp	r2, r3
 8003632:	d102      	bne.n	800363a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e001      	b.n	800363e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800363e:	f001 f949 	bl	80048d4 <vPortExitCritical>

	return xReturn;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	; 0x38
 8003650:	af04      	add	r7, sp, #16
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xTaskCreateStatic+0x46>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61fb      	str	r3, [r7, #28]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003692:	2354      	movs	r3, #84	; 0x54
 8003694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b54      	cmp	r3, #84	; 0x54
 800369a:	d00a      	beq.n	80036b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	61bb      	str	r3, [r7, #24]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01e      	beq.n	80036f8 <xTaskCreateStatic+0xac>
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036d2:	2300      	movs	r3, #0
 80036d4:	9303      	str	r3, [sp, #12]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	9302      	str	r3, [sp, #8]
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f850 	bl	8003790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036f2:	f000 f8d5 	bl	80038a0 <prvAddNewTaskToReadyList>
 80036f6:	e001      	b.n	80036fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036fc:	697b      	ldr	r3, [r7, #20]
	}
 80036fe:	4618      	mov	r0, r3
 8003700:	3728      	adds	r7, #40	; 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08c      	sub	sp, #48	; 0x30
 800370a:	af04      	add	r7, sp, #16
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f98c 	bl	8004a38 <pvPortMalloc>
 8003720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003728:	2054      	movs	r0, #84	; 0x54
 800372a:	f001 f985 	bl	8004a38 <pvPortMalloc>
 800372e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
 800373c:	e005      	b.n	800374a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f001 fa46 	bl	8004bd0 <vPortFree>
 8003744:	e001      	b.n	800374a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d017      	beq.n	8003780 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	2300      	movs	r3, #0
 800375c:	9303      	str	r3, [sp, #12]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	9302      	str	r3, [sp, #8]
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f80e 	bl	8003790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003774:	69f8      	ldr	r0, [r7, #28]
 8003776:	f000 f893 	bl	80038a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800377a:	2301      	movs	r3, #1
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e002      	b.n	8003786 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003786:	69bb      	ldr	r3, [r7, #24]
	}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037a8:	3b01      	subs	r3, #1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	617b      	str	r3, [r7, #20]
}
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01f      	beq.n	800381e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	e012      	b.n	800380a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	7819      	ldrb	r1, [r3, #0]
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	3334      	adds	r3, #52	; 0x34
 80037f4:	460a      	mov	r2, r1
 80037f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d9e9      	bls.n	80037e4 <prvInitialiseNewTask+0x54>
 8003810:	e000      	b.n	8003814 <prvInitialiseNewTask+0x84>
			{
				break;
 8003812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800381c:	e003      	b.n	8003826 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	2b06      	cmp	r3, #6
 800382a:	d901      	bls.n	8003830 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800382c:	2306      	movs	r3, #6
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	2200      	movs	r2, #0
 8003840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f966 	bl	8002b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	3318      	adds	r3, #24
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f961 	bl	8002b18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	f1c3 0207 	rsb	r2, r3, #7
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	2200      	movs	r2, #0
 8003870:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	69b8      	ldr	r0, [r7, #24]
 8003880:	f000 fecc 	bl	800461c <pxPortInitialiseStack>
 8003884:	4602      	mov	r2, r0
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003896:	bf00      	nop
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038a8:	f000 ffe4 	bl	8004874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <prvAddNewTaskToReadyList+0xb8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a29      	ldr	r2, [pc, #164]	; (8003958 <prvAddNewTaskToReadyList+0xb8>)
 80038b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038be:	4a27      	ldr	r2, [pc, #156]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <prvAddNewTaskToReadyList+0xb8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d110      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038cc:	f000 fbc6 	bl	800405c <prvInitialiseTaskLists>
 80038d0:	e00d      	b.n	80038ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <prvAddNewTaskToReadyList+0xc0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d802      	bhi.n	80038ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4313      	orrs	r3, r2
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <prvAddNewTaskToReadyList+0xcc>)
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7ff f906 	bl	8002b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003926:	f000 ffd5 	bl	80048d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <prvAddNewTaskToReadyList+0xc0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	429a      	cmp	r2, r3
 800393e:	d207      	bcs.n	8003950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <prvAddNewTaskToReadyList+0xd0>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	200003e8 	.word	0x200003e8
 800395c:	200002e8 	.word	0x200002e8
 8003960:	200003f4 	.word	0x200003f4
 8003964:	20000404 	.word	0x20000404
 8003968:	200003f0 	.word	0x200003f0
 800396c:	200002ec 	.word	0x200002ec
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <vTaskDelay+0x60>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <vTaskDelay+0x30>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60bb      	str	r3, [r7, #8]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039a4:	f000 f87a 	bl	8003a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a8:	2100      	movs	r1, #0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fdd0 	bl	8004550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039b0:	f000 f882 	bl	8003ab8 <xTaskResumeAll>
 80039b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <vTaskDelay+0x64>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000410 	.word	0x20000410
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ea:	463a      	mov	r2, r7
 80039ec:	1d39      	adds	r1, r7, #4
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fdc0 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	9202      	str	r2, [sp, #8]
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	491e      	ldr	r1, [pc, #120]	; (8003a84 <vTaskStartScheduler+0xa8>)
 8003a0c:	481e      	ldr	r0, [pc, #120]	; (8003a88 <vTaskStartScheduler+0xac>)
 8003a0e:	f7ff fe1d 	bl	800364c <xTaskCreateStatic>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <vTaskStartScheduler+0xb0>)
 8003a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <vTaskStartScheduler+0xb0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e001      	b.n	8003a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d116      	bne.n	8003a5e <vTaskStartScheduler+0x82>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	613b      	str	r3, [r7, #16]
}
 8003a42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <vTaskStartScheduler+0xb4>)
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <vTaskStartScheduler+0xb8>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <vTaskStartScheduler+0xbc>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a58:	f000 fe6a 	bl	8004730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a5c:	e00e      	b.n	8003a7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d10a      	bne.n	8003a7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60fb      	str	r3, [r7, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <vTaskStartScheduler+0x9e>
}
 8003a7c:	bf00      	nop
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	08005b08 	.word	0x08005b08
 8003a88:	0800402d 	.word	0x0800402d
 8003a8c:	2000040c 	.word	0x2000040c
 8003a90:	20000408 	.word	0x20000408
 8003a94:	200003f4 	.word	0x200003f4
 8003a98:	200003ec 	.word	0x200003ec

08003a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <vTaskSuspendAll+0x18>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a03      	ldr	r2, [pc, #12]	; (8003ab4 <vTaskSuspendAll+0x18>)
 8003aa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000410 	.word	0x20000410

08003ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <xTaskResumeAll+0x114>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	603b      	str	r3, [r7, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ae4:	f000 fec6 	bl	8004874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ae8:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <xTaskResumeAll+0x114>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4a37      	ldr	r2, [pc, #220]	; (8003bcc <xTaskResumeAll+0x114>)
 8003af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <xTaskResumeAll+0x114>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d161      	bne.n	8003bbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003afa:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <xTaskResumeAll+0x118>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d05d      	beq.n	8003bbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b02:	e02e      	b.n	8003b62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <xTaskResumeAll+0x11c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f86b 	bl	8002bec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f866 	bl	8002bec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	2201      	movs	r2, #1
 8003b26:	409a      	lsls	r2, r3
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <xTaskResumeAll+0x120>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <xTaskResumeAll+0x120>)
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <xTaskResumeAll+0x124>)
 8003b40:	441a      	add	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fe fff2 	bl	8002b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <xTaskResumeAll+0x128>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b5c:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <xTaskResumeAll+0x12c>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <xTaskResumeAll+0x11c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1cc      	bne.n	8003b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b70:	f000 fb12 	bl	8004198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <xTaskResumeAll+0x130>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b80:	f000 f836 	bl	8003bf0 <xTaskIncrementTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <xTaskResumeAll+0x12c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f1      	bne.n	8003b80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <xTaskResumeAll+0x130>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <xTaskResumeAll+0x12c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003baa:	2301      	movs	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <xTaskResumeAll+0x134>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bbe:	f000 fe89 	bl	80048d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000410 	.word	0x20000410
 8003bd0:	200003e8 	.word	0x200003e8
 8003bd4:	200003a8 	.word	0x200003a8
 8003bd8:	200003f0 	.word	0x200003f0
 8003bdc:	200002ec 	.word	0x200002ec
 8003be0:	200002e8 	.word	0x200002e8
 8003be4:	200003fc 	.word	0x200003fc
 8003be8:	200003f8 	.word	0x200003f8
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bfa:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <xTaskIncrementTick+0x144>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 808e 	bne.w	8003d20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <xTaskIncrementTick+0x148>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c0c:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <xTaskIncrementTick+0x148>)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d120      	bne.n	8003c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c18:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	603b      	str	r3, [r7, #0]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xTaskIncrementTick+0x46>
 8003c38:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b40      	ldr	r3, [pc, #256]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3e      	ldr	r2, [pc, #248]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4a3e      	ldr	r2, [pc, #248]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <xTaskIncrementTick+0x154>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a3c      	ldr	r2, [pc, #240]	; (8003d44 <xTaskIncrementTick+0x154>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	f000 fa9f 	bl	8004198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <xTaskIncrementTick+0x158>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d348      	bcc.n	8003cf6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c64:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <xTaskIncrementTick+0x158>)
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	601a      	str	r2, [r3, #0]
					break;
 8003c76:	e03e      	b.n	8003cf6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d203      	bcs.n	8003c98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c90:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <xTaskIncrementTick+0x158>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c96:	e02e      	b.n	8003cf6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe ffa5 	bl	8002bec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3318      	adds	r3, #24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe ff9c 	bl	8002bec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <xTaskIncrementTick+0x15c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <xTaskIncrementTick+0x15c>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <xTaskIncrementTick+0x160>)
 8003cd4:	441a      	add	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f7fe ff28 	bl	8002b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <xTaskIncrementTick+0x164>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3b9      	bcc.n	8003c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf4:	e7b6      	b.n	8003c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <xTaskIncrementTick+0x164>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4914      	ldr	r1, [pc, #80]	; (8003d50 <xTaskIncrementTick+0x160>)
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d901      	bls.n	8003d12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <xTaskIncrementTick+0x168>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e004      	b.n	8003d2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <xTaskIncrementTick+0x16c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	4a0d      	ldr	r2, [pc, #52]	; (8003d5c <xTaskIncrementTick+0x16c>)
 8003d28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d2a:	697b      	ldr	r3, [r7, #20]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000410 	.word	0x20000410
 8003d38:	200003ec 	.word	0x200003ec
 8003d3c:	200003a0 	.word	0x200003a0
 8003d40:	200003a4 	.word	0x200003a4
 8003d44:	20000400 	.word	0x20000400
 8003d48:	20000408 	.word	0x20000408
 8003d4c:	200003f0 	.word	0x200003f0
 8003d50:	200002ec 	.word	0x200002ec
 8003d54:	200002e8 	.word	0x200002e8
 8003d58:	200003fc 	.word	0x200003fc
 8003d5c:	200003f8 	.word	0x200003f8

08003d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <vTaskSwitchContext+0xa4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d6e:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <vTaskSwitchContext+0xa8>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d74:	e03f      	b.n	8003df6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <vTaskSwitchContext+0xa8>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7c:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <vTaskSwitchContext+0xac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
 8003d8c:	f1c3 031f 	rsb	r3, r3, #31
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	491f      	ldr	r1, [pc, #124]	; (8003e10 <vTaskSwitchContext+0xb0>)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	607b      	str	r3, [r7, #4]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vTaskSwitchContext+0x5a>
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <vTaskSwitchContext+0xb0>)
 8003dc8:	4413      	add	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d104      	bne.n	8003dec <vTaskSwitchContext+0x8c>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <vTaskSwitchContext+0xb4>)
 8003df4:	6013      	str	r3, [r2, #0]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000410 	.word	0x20000410
 8003e08:	200003fc 	.word	0x200003fc
 8003e0c:	200003f0 	.word	0x200003f0
 8003e10:	200002ec 	.word	0x200002ec
 8003e14:	200002e8 	.word	0x200002e8

08003e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <vTaskPlaceOnEventList+0x44>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3318      	adds	r3, #24
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fe fe97 	bl	8002b7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f000 fb7e 	bl	8004550 <prvAddCurrentTaskToDelayedList>
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200002e8 	.word	0x200002e8

08003e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	60fb      	str	r3, [r7, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe feab 	bl	8002bec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <xTaskRemoveFromEventList+0xac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11c      	bne.n	8003ed8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fea2 	bl	8002bec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	2201      	movs	r2, #1
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <xTaskRemoveFromEventList+0xb0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <xTaskRemoveFromEventList+0xb0>)
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <xTaskRemoveFromEventList+0xb4>)
 8003ec8:	441a      	add	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fe2e 	bl	8002b32 <vListInsertEnd>
 8003ed6:	e005      	b.n	8003ee4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3318      	adds	r3, #24
 8003edc:	4619      	mov	r1, r3
 8003ede:	480e      	ldr	r0, [pc, #56]	; (8003f18 <xTaskRemoveFromEventList+0xb8>)
 8003ee0:	f7fe fe27 	bl	8002b32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <xTaskRemoveFromEventList+0xbc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d905      	bls.n	8003efe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <xTaskRemoveFromEventList+0xc0>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e001      	b.n	8003f02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f02:	697b      	ldr	r3, [r7, #20]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000410 	.word	0x20000410
 8003f10:	200003f0 	.word	0x200003f0
 8003f14:	200002ec 	.word	0x200002ec
 8003f18:	200003a8 	.word	0x200003a8
 8003f1c:	200002e8 	.word	0x200002e8
 8003f20:	200003fc 	.word	0x200003fc

08003f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <vTaskInternalSetTimeOutState+0x24>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <vTaskInternalSetTimeOutState+0x28>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20000400 	.word	0x20000400
 8003f4c:	200003ec 	.word	0x200003ec

08003f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	613b      	str	r3, [r7, #16]
}
 8003f72:	bf00      	nop
 8003f74:	e7fe      	b.n	8003f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f92:	f000 fc6f 	bl	8004874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <xTaskCheckForTimeOut+0xbc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d102      	bne.n	8003fb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e023      	b.n	8003ffe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <xTaskCheckForTimeOut+0xc0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d007      	beq.n	8003fd2 <xTaskCheckForTimeOut+0x82>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e015      	b.n	8003ffe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d20b      	bcs.n	8003ff4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad2      	subs	r2, r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff9b 	bl	8003f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e004      	b.n	8003ffe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f000 fc69 	bl	80048d4 <vPortExitCritical>

	return xReturn;
 8004002:	69fb      	ldr	r3, [r7, #28]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	200003ec 	.word	0x200003ec
 8004010:	20000400 	.word	0x20000400

08004014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <vTaskMissedYield+0x14>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	200003fc 	.word	0x200003fc

0800402c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004034:	f000 f852 	bl	80040dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <prvIdleTask+0x28>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d9f9      	bls.n	8004034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <prvIdleTask+0x2c>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004050:	e7f0      	b.n	8004034 <prvIdleTask+0x8>
 8004052:	bf00      	nop
 8004054:	200002ec 	.word	0x200002ec
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	e00c      	b.n	8004082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <prvInitialiseTaskLists+0x60>)
 8004074:	4413      	add	r3, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fd2e 	bl	8002ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d9ef      	bls.n	8004068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004088:	480d      	ldr	r0, [pc, #52]	; (80040c0 <prvInitialiseTaskLists+0x64>)
 800408a:	f7fe fd25 	bl	8002ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800408e:	480d      	ldr	r0, [pc, #52]	; (80040c4 <prvInitialiseTaskLists+0x68>)
 8004090:	f7fe fd22 	bl	8002ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004094:	480c      	ldr	r0, [pc, #48]	; (80040c8 <prvInitialiseTaskLists+0x6c>)
 8004096:	f7fe fd1f 	bl	8002ad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800409a:	480c      	ldr	r0, [pc, #48]	; (80040cc <prvInitialiseTaskLists+0x70>)
 800409c:	f7fe fd1c 	bl	8002ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040a0:	480b      	ldr	r0, [pc, #44]	; (80040d0 <prvInitialiseTaskLists+0x74>)
 80040a2:	f7fe fd19 	bl	8002ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <prvInitialiseTaskLists+0x78>)
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <prvInitialiseTaskLists+0x64>)
 80040aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <prvInitialiseTaskLists+0x7c>)
 80040ae:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <prvInitialiseTaskLists+0x68>)
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200002ec 	.word	0x200002ec
 80040c0:	20000378 	.word	0x20000378
 80040c4:	2000038c 	.word	0x2000038c
 80040c8:	200003a8 	.word	0x200003a8
 80040cc:	200003bc 	.word	0x200003bc
 80040d0:	200003d4 	.word	0x200003d4
 80040d4:	200003a0 	.word	0x200003a0
 80040d8:	200003a4 	.word	0x200003a4

080040dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e2:	e019      	b.n	8004118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040e4:	f000 fbc6 	bl	8004874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e8:	4b10      	ldr	r3, [pc, #64]	; (800412c <prvCheckTasksWaitingTermination+0x50>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fd79 	bl	8002bec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <prvCheckTasksWaitingTermination+0x54>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3b01      	subs	r3, #1
 8004100:	4a0b      	ldr	r2, [pc, #44]	; (8004130 <prvCheckTasksWaitingTermination+0x54>)
 8004102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <prvCheckTasksWaitingTermination+0x58>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <prvCheckTasksWaitingTermination+0x58>)
 800410c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800410e:	f000 fbe1 	bl	80048d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f810 	bl	8004138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <prvCheckTasksWaitingTermination+0x58>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e1      	bne.n	80040e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200003bc 	.word	0x200003bc
 8004130:	200003e8 	.word	0x200003e8
 8004134:	200003d0 	.word	0x200003d0

08004138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fd3e 	bl	8004bd0 <vPortFree>
				vPortFree( pxTCB );
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fd3b 	bl	8004bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800415a:	e018      	b.n	800418e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004162:	2b01      	cmp	r3, #1
 8004164:	d103      	bne.n	800416e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fd32 	bl	8004bd0 <vPortFree>
	}
 800416c:	e00f      	b.n	800418e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004174:	2b02      	cmp	r3, #2
 8004176:	d00a      	beq.n	800418e <prvDeleteTCB+0x56>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <prvDeleteTCB+0x54>
	}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <prvResetNextTaskUnblockTime+0x38>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <prvResetNextTaskUnblockTime+0x3c>)
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041b0:	e008      	b.n	80041c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <prvResetNextTaskUnblockTime+0x38>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <prvResetNextTaskUnblockTime+0x3c>)
 80041c2:	6013      	str	r3, [r2, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	200003a0 	.word	0x200003a0
 80041d4:	20000408 	.word	0x20000408

080041d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <xTaskGetSchedulerState+0x34>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041e6:	2301      	movs	r3, #1
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	e008      	b.n	80041fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <xTaskGetSchedulerState+0x38>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041f4:	2302      	movs	r3, #2
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	e001      	b.n	80041fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041fe:	687b      	ldr	r3, [r7, #4]
	}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	200003f4 	.word	0x200003f4
 8004210:	20000410 	.word	0x20000410

08004214 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d05e      	beq.n	80042e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <xTaskPriorityInherit+0xe0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	429a      	cmp	r2, r3
 8004236:	d24e      	bcs.n	80042d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db06      	blt.n	800424e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <xTaskPriorityInherit+0xe0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	f1c3 0207 	rsb	r2, r3, #7
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6959      	ldr	r1, [r3, #20]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <xTaskPriorityInherit+0xe4>)
 8004260:	4413      	add	r3, r2
 8004262:	4299      	cmp	r1, r3
 8004264:	d12f      	bne.n	80042c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fcbe 	bl	8002bec <uxListRemove>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	2201      	movs	r2, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43da      	mvns	r2, r3
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <xTaskPriorityInherit+0xe8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4013      	ands	r3, r2
 8004288:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <xTaskPriorityInherit+0xe8>)
 800428a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <xTaskPriorityInherit+0xe0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	2201      	movs	r2, #1
 800429c:	409a      	lsls	r2, r3
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <xTaskPriorityInherit+0xe8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	4a15      	ldr	r2, [pc, #84]	; (80042fc <xTaskPriorityInherit+0xe8>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <xTaskPriorityInherit+0xe4>)
 80042b6:	441a      	add	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fc37 	bl	8002b32 <vListInsertEnd>
 80042c4:	e004      	b.n	80042d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <xTaskPriorityInherit+0xe0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e008      	b.n	80042e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <xTaskPriorityInherit+0xe0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d201      	bcs.n	80042e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042e8:	68fb      	ldr	r3, [r7, #12]
	}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200002e8 	.word	0x200002e8
 80042f8:	200002ec 	.word	0x200002ec
 80042fc:	200003f0 	.word	0x200003f0

08004300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d06e      	beq.n	80043f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004316:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <xTaskPriorityDisinherit+0x100>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	429a      	cmp	r2, r3
 800431e:	d00a      	beq.n	8004336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60bb      	str	r3, [r7, #8]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	1e5a      	subs	r2, r3, #1
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	429a      	cmp	r2, r3
 8004368:	d044      	beq.n	80043f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	d140      	bne.n	80043f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fc38 	bl	8002bec <uxListRemove>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d115      	bne.n	80043ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	491f      	ldr	r1, [pc, #124]	; (8004404 <xTaskPriorityDisinherit+0x104>)
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xTaskPriorityDisinherit+0xae>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	2201      	movs	r2, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4013      	ands	r3, r2
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f1c3 0207 	rsb	r2, r3, #7
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <xTaskPriorityDisinherit+0x104>)
 80043e2:	441a      	add	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7fe fba1 	bl	8002b32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043f4:	697b      	ldr	r3, [r7, #20]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200002e8 	.word	0x200002e8
 8004404:	200002ec 	.word	0x200002ec
 8004408:	200003f0 	.word	0x200003f0

0800440c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800441a:	2301      	movs	r3, #1
 800441c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d077      	beq.n	8004514 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d902      	bls.n	8004452 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e002      	b.n	8004458 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	429a      	cmp	r2, r3
 8004460:	d058      	beq.n	8004514 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	d153      	bne.n	8004514 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10a      	bne.n	800448c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db04      	blt.n	80044aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f1c3 0207 	rsb	r2, r3, #7
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6959      	ldr	r1, [r3, #20]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80044ba:	4413      	add	r3, r2
 80044bc:	4299      	cmp	r1, r3
 80044be:	d129      	bne.n	8004514 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fb91 	bl	8002bec <uxListRemove>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2201      	movs	r2, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4013      	ands	r3, r2
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	2201      	movs	r2, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4a06      	ldr	r2, [pc, #24]	; (8004520 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004506:	441a      	add	r2, r3
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe fb0f 	bl	8002b32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004514:	bf00      	nop
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	200002e8 	.word	0x200002e8
 8004520:	200002ec 	.word	0x200002ec
 8004524:	200003f0 	.word	0x200003f0

08004528 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <pvTaskIncrementMutexHeldCount+0x24>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <pvTaskIncrementMutexHeldCount+0x24>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800453a:	3201      	adds	r2, #1
 800453c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800453e:	4b03      	ldr	r3, [pc, #12]	; (800454c <pvTaskIncrementMutexHeldCount+0x24>)
 8004540:	681b      	ldr	r3, [r3, #0]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	200002e8 	.word	0x200002e8

08004550 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800455a:	4b29      	ldr	r3, [pc, #164]	; (8004600 <prvAddCurrentTaskToDelayedList+0xb0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fb40 	bl	8002bec <uxListRemove>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2201      	movs	r2, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4013      	ands	r3, r2
 8004586:	4a20      	ldr	r2, [pc, #128]	; (8004608 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004588:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d10a      	bne.n	80045a8 <prvAddCurrentTaskToDelayedList+0x58>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	481a      	ldr	r0, [pc, #104]	; (800460c <prvAddCurrentTaskToDelayedList+0xbc>)
 80045a2:	f7fe fac6 	bl	8002b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045a6:	e026      	b.n	80045f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045b0:	4b14      	ldr	r3, [pc, #80]	; (8004604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d209      	bcs.n	80045d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe fad4 	bl	8002b7a <vListInsert>
}
 80045d2:	e010      	b.n	80045f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3304      	adds	r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7fe faca 	bl	8002b7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d202      	bcs.n	80045f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045f0:	4a09      	ldr	r2, [pc, #36]	; (8004618 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6013      	str	r3, [r2, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	200003ec 	.word	0x200003ec
 8004604:	200002e8 	.word	0x200002e8
 8004608:	200003f0 	.word	0x200003f0
 800460c:	200003d4 	.word	0x200003d4
 8004610:	200003a4 	.word	0x200003a4
 8004614:	200003a0 	.word	0x200003a0
 8004618:	20000408 	.word	0x20000408

0800461c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b04      	subs	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b04      	subs	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3b04      	subs	r3, #4
 800464a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <pxPortInitialiseStack+0x64>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b14      	subs	r3, #20
 8004656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f06f 0202 	mvn.w	r2, #2
 800466a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b20      	subs	r3, #32
 8004670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	08004685 	.word	0x08004685

08004684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <prvTaskExitError+0x54>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d00a      	beq.n	80046ae <prvTaskExitError+0x2a>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60fb      	str	r3, [r7, #12]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <prvTaskExitError+0x28>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60bb      	str	r3, [r7, #8]
}
 80046c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046c2:	bf00      	nop
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0fc      	beq.n	80046c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	2000000c 	.word	0x2000000c
 80046dc:	00000000 	.word	0x00000000

080046e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	4770      	bx	lr
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst2>:
 8004700:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <prvPortStartFirstTask+0x24>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8814 	msr	CONTROL, r0
 800471a:	b662      	cpsie	i
 800471c:	b661      	cpsie	f
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	df00      	svc	0
 8004728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800472a:	bf00      	nop
 800472c:	e000ed08 	.word	0xe000ed08

08004730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004736:	4b46      	ldr	r3, [pc, #280]	; (8004850 <xPortStartScheduler+0x120>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a46      	ldr	r2, [pc, #280]	; (8004854 <xPortStartScheduler+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10a      	bne.n	8004756 <xPortStartScheduler+0x26>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <xPortStartScheduler+0x120>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <xPortStartScheduler+0x128>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10a      	bne.n	8004776 <xPortStartScheduler+0x46>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60fb      	str	r3, [r7, #12]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <xPortStartScheduler+0x12c>)
 8004778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	22ff      	movs	r2, #255	; 0xff
 8004786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004798:	b2da      	uxtb	r2, r3
 800479a:	4b31      	ldr	r3, [pc, #196]	; (8004860 <xPortStartScheduler+0x130>)
 800479c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800479e:	4b31      	ldr	r3, [pc, #196]	; (8004864 <xPortStartScheduler+0x134>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047a4:	e009      	b.n	80047ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047a6:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <xPortStartScheduler+0x134>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <xPortStartScheduler+0x134>)
 80047ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d0ef      	beq.n	80047a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047c6:	4b27      	ldr	r3, [pc, #156]	; (8004864 <xPortStartScheduler+0x134>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1c3 0307 	rsb	r3, r3, #7
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d00a      	beq.n	80047e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60bb      	str	r3, [r7, #8]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <xPortStartScheduler+0x134>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	021b      	lsls	r3, r3, #8
 80047ee:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <xPortStartScheduler+0x134>)
 80047f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <xPortStartScheduler+0x134>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047fa:	4a1a      	ldr	r2, [pc, #104]	; (8004864 <xPortStartScheduler+0x134>)
 80047fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <xPortStartScheduler+0x138>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <xPortStartScheduler+0x138>)
 800480c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <xPortStartScheduler+0x138>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <xPortStartScheduler+0x138>)
 8004818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800481c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800481e:	f000 f8dd 	bl	80049dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <xPortStartScheduler+0x13c>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004828:	f000 f8fc 	bl	8004a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <xPortStartScheduler+0x140>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0f      	ldr	r2, [pc, #60]	; (8004870 <xPortStartScheduler+0x140>)
 8004832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004838:	f7ff ff66 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800483c:	f7ff fa90 	bl	8003d60 <vTaskSwitchContext>
	prvTaskExitError();
 8004840:	f7ff ff20 	bl	8004684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	e000ed00 	.word	0xe000ed00
 8004854:	410fc271 	.word	0x410fc271
 8004858:	410fc270 	.word	0x410fc270
 800485c:	e000e400 	.word	0xe000e400
 8004860:	20000414 	.word	0x20000414
 8004864:	20000418 	.word	0x20000418
 8004868:	e000ed20 	.word	0xe000ed20
 800486c:	2000000c 	.word	0x2000000c
 8004870:	e000ef34 	.word	0xe000ef34

08004874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	607b      	str	r3, [r7, #4]
}
 800488c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <vPortEnterCritical+0x58>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <vPortEnterCritical+0x58>)
 8004896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <vPortEnterCritical+0x58>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10f      	bne.n	80048c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <vPortEnterCritical+0x5c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	603b      	str	r3, [r7, #0]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <vPortEnterCritical+0x4a>
	}
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	2000000c 	.word	0x2000000c
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <vPortExitCritical+0x50>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <vPortExitCritical+0x24>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <vPortExitCritical+0x50>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <vPortExitCritical+0x50>)
 8004900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <vPortExitCritical+0x50>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <vPortExitCritical+0x42>
 800490a:	2300      	movs	r3, #0
 800490c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c
	...

08004930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004930:	f3ef 8009 	mrs	r0, PSP
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <pxCurrentTCBConst>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f01e 0f10 	tst.w	lr, #16
 8004940:	bf08      	it	eq
 8004942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	6010      	str	r0, [r2, #0]
 800494c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004954:	f380 8811 	msr	BASEPRI, r0
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f7ff f9fe 	bl	8003d60 <vTaskSwitchContext>
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f380 8811 	msr	BASEPRI, r0
 800496c:	bc09      	pop	{r0, r3}
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	6808      	ldr	r0, [r1, #0]
 8004972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004976:	f01e 0f10 	tst.w	lr, #16
 800497a:	bf08      	it	eq
 800497c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004980:	f380 8809 	msr	PSP, r0
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w

08004990 <pxCurrentTCBConst>:
 8004990:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop

08004998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
}
 80049b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049b2:	f7ff f91d 	bl	8003bf0 <xTaskIncrementTick>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <SysTick_Handler+0x40>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f383 8811 	msr	BASEPRI, r3
}
 80049ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <vPortSetupTimerInterrupt+0x34>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <vPortSetupTimerInterrupt+0x38>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vPortSetupTimerInterrupt+0x3c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <vPortSetupTimerInterrupt+0x40>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <vPortSetupTimerInterrupt+0x44>)
 80049fa:	3b01      	subs	r3, #1
 80049fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <vPortSetupTimerInterrupt+0x34>)
 8004a00:	2207      	movs	r2, #7
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000e010 	.word	0xe000e010
 8004a14:	e000e018 	.word	0xe000e018
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	10624dd3 	.word	0x10624dd3
 8004a20:	e000e014 	.word	0xe000e014

08004a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a34 <vPortEnableVFP+0x10>
 8004a28:	6801      	ldr	r1, [r0, #0]
 8004a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a2e:	6001      	str	r1, [r0, #0]
 8004a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a32:	bf00      	nop
 8004a34:	e000ed88 	.word	0xe000ed88

08004a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a44:	f7ff f82a 	bl	8003a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <pvPortMalloc+0x180>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a50:	f000 f920 	bl	8004c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a54:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <pvPortMalloc+0x184>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8093 	bne.w	8004b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a68:	2208      	movs	r2, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	617b      	str	r3, [r7, #20]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d06e      	beq.n	8004b88 <pvPortMalloc+0x150>
 8004aaa:	4b45      	ldr	r3, [pc, #276]	; (8004bc0 <pvPortMalloc+0x188>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d869      	bhi.n	8004b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <pvPortMalloc+0x18c>)
 8004ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ab8:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <pvPortMalloc+0x18c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004abe:	e004      	b.n	8004aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d903      	bls.n	8004adc <pvPortMalloc+0xa4>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f1      	bne.n	8004ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <pvPortMalloc+0x180>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d050      	beq.n	8004b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2208      	movs	r2, #8
 8004aec:	4413      	add	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	2308      	movs	r3, #8
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d91f      	bls.n	8004b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <pvPortMalloc+0xf8>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	613b      	str	r3, [r7, #16]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b42:	69b8      	ldr	r0, [r7, #24]
 8004b44:	f000 f908 	bl	8004d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <pvPortMalloc+0x190>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d203      	bcs.n	8004b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a18      	ldr	r2, [pc, #96]	; (8004bc8 <pvPortMalloc+0x190>)
 8004b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <pvPortMalloc+0x184>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <pvPortMalloc+0x194>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <pvPortMalloc+0x194>)
 8004b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b88:	f7fe ff96 	bl	8003ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <pvPortMalloc+0x174>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60fb      	str	r3, [r7, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <pvPortMalloc+0x172>
	return pvReturn;
 8004bac:	69fb      	ldr	r3, [r7, #28]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3728      	adds	r7, #40	; 0x28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20004024 	.word	0x20004024
 8004bbc:	20004038 	.word	0x20004038
 8004bc0:	20004028 	.word	0x20004028
 8004bc4:	2000401c 	.word	0x2000401c
 8004bc8:	2000402c 	.word	0x2000402c
 8004bcc:	20004030 	.word	0x20004030

08004bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04d      	beq.n	8004c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004be2:	2308      	movs	r3, #8
 8004be4:	425b      	negs	r3, r3
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <vPortFree+0xb8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <vPortFree+0x44>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	60fb      	str	r3, [r7, #12]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <vPortFree+0x62>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60bb      	str	r3, [r7, #8]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <vPortFree+0xb8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11a      	bne.n	8004c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <vPortFree+0xb8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c58:	f7fe ff20 	bl	8003a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <vPortFree+0xbc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <vPortFree+0xbc>)
 8004c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 f874 	bl	8004d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <vPortFree+0xc0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <vPortFree+0xc0>)
 8004c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c7a:	f7fe ff1d 	bl	8003ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20004038 	.word	0x20004038
 8004c8c:	20004028 	.word	0x20004028
 8004c90:	20004034 	.word	0x20004034

08004c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <prvHeapInit+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <prvHeapInit+0xac>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <prvHeapInit+0xb0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <prvHeapInit+0xb0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <prvHeapInit+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvHeapInit+0xb4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <prvHeapInit+0xb8>)
 8004d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <prvHeapInit+0xbc>)
 8004d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <prvHeapInit+0xc0>)
 8004d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	2000041c 	.word	0x2000041c
 8004d44:	2000401c 	.word	0x2000401c
 8004d48:	20004024 	.word	0x20004024
 8004d4c:	2000402c 	.word	0x2000402c
 8004d50:	20004028 	.word	0x20004028
 8004d54:	20004038 	.word	0x20004038

08004d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x14>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8f7      	bhi.n	8004d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d108      	bne.n	8004d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d118      	bne.n	8004de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00d      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e008      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e003      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d002      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000401c 	.word	0x2000401c
 8004e08:	20004024 	.word	0x20004024

08004e0c <__errno>:
 8004e0c:	4b01      	ldr	r3, [pc, #4]	; (8004e14 <__errno+0x8>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010

08004e18 <__libc_init_array>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	4d0d      	ldr	r5, [pc, #52]	; (8004e50 <__libc_init_array+0x38>)
 8004e1c:	4c0d      	ldr	r4, [pc, #52]	; (8004e54 <__libc_init_array+0x3c>)
 8004e1e:	1b64      	subs	r4, r4, r5
 8004e20:	10a4      	asrs	r4, r4, #2
 8004e22:	2600      	movs	r6, #0
 8004e24:	42a6      	cmp	r6, r4
 8004e26:	d109      	bne.n	8004e3c <__libc_init_array+0x24>
 8004e28:	4d0b      	ldr	r5, [pc, #44]	; (8004e58 <__libc_init_array+0x40>)
 8004e2a:	4c0c      	ldr	r4, [pc, #48]	; (8004e5c <__libc_init_array+0x44>)
 8004e2c:	f000 fc4e 	bl	80056cc <_init>
 8004e30:	1b64      	subs	r4, r4, r5
 8004e32:	10a4      	asrs	r4, r4, #2
 8004e34:	2600      	movs	r6, #0
 8004e36:	42a6      	cmp	r6, r4
 8004e38:	d105      	bne.n	8004e46 <__libc_init_array+0x2e>
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e40:	4798      	blx	r3
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7ee      	b.n	8004e24 <__libc_init_array+0xc>
 8004e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4a:	4798      	blx	r3
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	e7f2      	b.n	8004e36 <__libc_init_array+0x1e>
 8004e50:	08005b64 	.word	0x08005b64
 8004e54:	08005b64 	.word	0x08005b64
 8004e58:	08005b64 	.word	0x08005b64
 8004e5c:	08005b68 	.word	0x08005b68

08004e60 <memcpy>:
 8004e60:	440a      	add	r2, r1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e68:	d100      	bne.n	8004e6c <memcpy+0xc>
 8004e6a:	4770      	bx	lr
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d1f9      	bne.n	8004e6e <memcpy+0xe>
 8004e7a:	bd10      	pop	{r4, pc}

08004e7c <memset>:
 8004e7c:	4402      	add	r2, r0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d100      	bne.n	8004e86 <memset+0xa>
 8004e84:	4770      	bx	lr
 8004e86:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8a:	e7f9      	b.n	8004e80 <memset+0x4>

08004e8c <siprintf>:
 8004e8c:	b40e      	push	{r1, r2, r3}
 8004e8e:	b500      	push	{lr}
 8004e90:	b09c      	sub	sp, #112	; 0x70
 8004e92:	ab1d      	add	r3, sp, #116	; 0x74
 8004e94:	9002      	str	r0, [sp, #8]
 8004e96:	9006      	str	r0, [sp, #24]
 8004e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e9c:	4809      	ldr	r0, [pc, #36]	; (8004ec4 <siprintf+0x38>)
 8004e9e:	9107      	str	r1, [sp, #28]
 8004ea0:	9104      	str	r1, [sp, #16]
 8004ea2:	4909      	ldr	r1, [pc, #36]	; (8004ec8 <siprintf+0x3c>)
 8004ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ea8:	9105      	str	r1, [sp, #20]
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	a902      	add	r1, sp, #8
 8004eb0:	f000 f868 	bl	8004f84 <_svfiprintf_r>
 8004eb4:	9b02      	ldr	r3, [sp, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	b01c      	add	sp, #112	; 0x70
 8004ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec0:	b003      	add	sp, #12
 8004ec2:	4770      	bx	lr
 8004ec4:	20000010 	.word	0x20000010
 8004ec8:	ffff0208 	.word	0xffff0208

08004ecc <__ssputs_r>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	688e      	ldr	r6, [r1, #8]
 8004ed2:	429e      	cmp	r6, r3
 8004ed4:	4682      	mov	sl, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4690      	mov	r8, r2
 8004eda:	461f      	mov	r7, r3
 8004edc:	d838      	bhi.n	8004f50 <__ssputs_r+0x84>
 8004ede:	898a      	ldrh	r2, [r1, #12]
 8004ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ee4:	d032      	beq.n	8004f4c <__ssputs_r+0x80>
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	6909      	ldr	r1, [r1, #16]
 8004eea:	eba5 0901 	sub.w	r9, r5, r1
 8004eee:	6965      	ldr	r5, [r4, #20]
 8004ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ef8:	3301      	adds	r3, #1
 8004efa:	444b      	add	r3, r9
 8004efc:	106d      	asrs	r5, r5, #1
 8004efe:	429d      	cmp	r5, r3
 8004f00:	bf38      	it	cc
 8004f02:	461d      	movcc	r5, r3
 8004f04:	0553      	lsls	r3, r2, #21
 8004f06:	d531      	bpl.n	8004f6c <__ssputs_r+0xa0>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f000 fb39 	bl	8005580 <_malloc_r>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	b950      	cbnz	r0, 8004f28 <__ssputs_r+0x5c>
 8004f12:	230c      	movs	r3, #12
 8004f14:	f8ca 3000 	str.w	r3, [sl]
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1e:	81a3      	strh	r3, [r4, #12]
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	6921      	ldr	r1, [r4, #16]
 8004f2a:	464a      	mov	r2, r9
 8004f2c:	f7ff ff98 	bl	8004e60 <memcpy>
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	6126      	str	r6, [r4, #16]
 8004f3e:	6165      	str	r5, [r4, #20]
 8004f40:	444e      	add	r6, r9
 8004f42:	eba5 0509 	sub.w	r5, r5, r9
 8004f46:	6026      	str	r6, [r4, #0]
 8004f48:	60a5      	str	r5, [r4, #8]
 8004f4a:	463e      	mov	r6, r7
 8004f4c:	42be      	cmp	r6, r7
 8004f4e:	d900      	bls.n	8004f52 <__ssputs_r+0x86>
 8004f50:	463e      	mov	r6, r7
 8004f52:	4632      	mov	r2, r6
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	4641      	mov	r1, r8
 8004f58:	f000 faa8 	bl	80054ac <memmove>
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	1b9b      	subs	r3, r3, r6
 8004f62:	4432      	add	r2, r6
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6022      	str	r2, [r4, #0]
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e7db      	b.n	8004f24 <__ssputs_r+0x58>
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	f000 fb61 	bl	8005634 <_realloc_r>
 8004f72:	4606      	mov	r6, r0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1e1      	bne.n	8004f3c <__ssputs_r+0x70>
 8004f78:	6921      	ldr	r1, [r4, #16]
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	f000 fab0 	bl	80054e0 <_free_r>
 8004f80:	e7c7      	b.n	8004f12 <__ssputs_r+0x46>
	...

08004f84 <_svfiprintf_r>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	4698      	mov	r8, r3
 8004f8a:	898b      	ldrh	r3, [r1, #12]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	b09d      	sub	sp, #116	; 0x74
 8004f90:	4607      	mov	r7, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	d50e      	bpl.n	8004fb6 <_svfiprintf_r+0x32>
 8004f98:	690b      	ldr	r3, [r1, #16]
 8004f9a:	b963      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x32>
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	f000 faef 	bl	8005580 <_malloc_r>
 8004fa2:	6028      	str	r0, [r5, #0]
 8004fa4:	6128      	str	r0, [r5, #16]
 8004fa6:	b920      	cbnz	r0, 8004fb2 <_svfiprintf_r+0x2e>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e0d1      	b.n	8005156 <_svfiprintf_r+0x1d2>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	616b      	str	r3, [r5, #20]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	2320      	movs	r3, #32
 8004fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc4:	2330      	movs	r3, #48	; 0x30
 8004fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005170 <_svfiprintf_r+0x1ec>
 8004fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fce:	f04f 0901 	mov.w	r9, #1
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	469a      	mov	sl, r3
 8004fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fda:	b10a      	cbz	r2, 8004fe0 <_svfiprintf_r+0x5c>
 8004fdc:	2a25      	cmp	r2, #37	; 0x25
 8004fde:	d1f9      	bne.n	8004fd4 <_svfiprintf_r+0x50>
 8004fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe4:	d00b      	beq.n	8004ffe <_svfiprintf_r+0x7a>
 8004fe6:	465b      	mov	r3, fp
 8004fe8:	4622      	mov	r2, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff ff6d 	bl	8004ecc <__ssputs_r>
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f000 80aa 	beq.w	800514c <_svfiprintf_r+0x1c8>
 8004ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ffa:	445a      	add	r2, fp
 8004ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a2 	beq.w	800514c <_svfiprintf_r+0x1c8>
 8005008:	2300      	movs	r3, #0
 800500a:	f04f 32ff 	mov.w	r2, #4294967295
 800500e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005012:	f10a 0a01 	add.w	sl, sl, #1
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800501e:	931a      	str	r3, [sp, #104]	; 0x68
 8005020:	4654      	mov	r4, sl
 8005022:	2205      	movs	r2, #5
 8005024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005028:	4851      	ldr	r0, [pc, #324]	; (8005170 <_svfiprintf_r+0x1ec>)
 800502a:	f7fb f8d9 	bl	80001e0 <memchr>
 800502e:	9a04      	ldr	r2, [sp, #16]
 8005030:	b9d8      	cbnz	r0, 800506a <_svfiprintf_r+0xe6>
 8005032:	06d0      	lsls	r0, r2, #27
 8005034:	bf44      	itt	mi
 8005036:	2320      	movmi	r3, #32
 8005038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503c:	0711      	lsls	r1, r2, #28
 800503e:	bf44      	itt	mi
 8005040:	232b      	movmi	r3, #43	; 0x2b
 8005042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005046:	f89a 3000 	ldrb.w	r3, [sl]
 800504a:	2b2a      	cmp	r3, #42	; 0x2a
 800504c:	d015      	beq.n	800507a <_svfiprintf_r+0xf6>
 800504e:	9a07      	ldr	r2, [sp, #28]
 8005050:	4654      	mov	r4, sl
 8005052:	2000      	movs	r0, #0
 8005054:	f04f 0c0a 	mov.w	ip, #10
 8005058:	4621      	mov	r1, r4
 800505a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505e:	3b30      	subs	r3, #48	; 0x30
 8005060:	2b09      	cmp	r3, #9
 8005062:	d94e      	bls.n	8005102 <_svfiprintf_r+0x17e>
 8005064:	b1b0      	cbz	r0, 8005094 <_svfiprintf_r+0x110>
 8005066:	9207      	str	r2, [sp, #28]
 8005068:	e014      	b.n	8005094 <_svfiprintf_r+0x110>
 800506a:	eba0 0308 	sub.w	r3, r0, r8
 800506e:	fa09 f303 	lsl.w	r3, r9, r3
 8005072:	4313      	orrs	r3, r2
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	46a2      	mov	sl, r4
 8005078:	e7d2      	b.n	8005020 <_svfiprintf_r+0x9c>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	1d19      	adds	r1, r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	9103      	str	r1, [sp, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	bfbb      	ittet	lt
 8005086:	425b      	neglt	r3, r3
 8005088:	f042 0202 	orrlt.w	r2, r2, #2
 800508c:	9307      	strge	r3, [sp, #28]
 800508e:	9307      	strlt	r3, [sp, #28]
 8005090:	bfb8      	it	lt
 8005092:	9204      	strlt	r2, [sp, #16]
 8005094:	7823      	ldrb	r3, [r4, #0]
 8005096:	2b2e      	cmp	r3, #46	; 0x2e
 8005098:	d10c      	bne.n	80050b4 <_svfiprintf_r+0x130>
 800509a:	7863      	ldrb	r3, [r4, #1]
 800509c:	2b2a      	cmp	r3, #42	; 0x2a
 800509e:	d135      	bne.n	800510c <_svfiprintf_r+0x188>
 80050a0:	9b03      	ldr	r3, [sp, #12]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	9203      	str	r2, [sp, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfb8      	it	lt
 80050ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80050b0:	3402      	adds	r4, #2
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005180 <_svfiprintf_r+0x1fc>
 80050b8:	7821      	ldrb	r1, [r4, #0]
 80050ba:	2203      	movs	r2, #3
 80050bc:	4650      	mov	r0, sl
 80050be:	f7fb f88f 	bl	80001e0 <memchr>
 80050c2:	b140      	cbz	r0, 80050d6 <_svfiprintf_r+0x152>
 80050c4:	2340      	movs	r3, #64	; 0x40
 80050c6:	eba0 000a 	sub.w	r0, r0, sl
 80050ca:	fa03 f000 	lsl.w	r0, r3, r0
 80050ce:	9b04      	ldr	r3, [sp, #16]
 80050d0:	4303      	orrs	r3, r0
 80050d2:	3401      	adds	r4, #1
 80050d4:	9304      	str	r3, [sp, #16]
 80050d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050da:	4826      	ldr	r0, [pc, #152]	; (8005174 <_svfiprintf_r+0x1f0>)
 80050dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e0:	2206      	movs	r2, #6
 80050e2:	f7fb f87d 	bl	80001e0 <memchr>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d038      	beq.n	800515c <_svfiprintf_r+0x1d8>
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <_svfiprintf_r+0x1f4>)
 80050ec:	bb1b      	cbnz	r3, 8005136 <_svfiprintf_r+0x1b2>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	3307      	adds	r3, #7
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	3308      	adds	r3, #8
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fc:	4433      	add	r3, r6
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	e767      	b.n	8004fd2 <_svfiprintf_r+0x4e>
 8005102:	fb0c 3202 	mla	r2, ip, r2, r3
 8005106:	460c      	mov	r4, r1
 8005108:	2001      	movs	r0, #1
 800510a:	e7a5      	b.n	8005058 <_svfiprintf_r+0xd4>
 800510c:	2300      	movs	r3, #0
 800510e:	3401      	adds	r4, #1
 8005110:	9305      	str	r3, [sp, #20]
 8005112:	4619      	mov	r1, r3
 8005114:	f04f 0c0a 	mov.w	ip, #10
 8005118:	4620      	mov	r0, r4
 800511a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800511e:	3a30      	subs	r2, #48	; 0x30
 8005120:	2a09      	cmp	r2, #9
 8005122:	d903      	bls.n	800512c <_svfiprintf_r+0x1a8>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0c5      	beq.n	80050b4 <_svfiprintf_r+0x130>
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	e7c3      	b.n	80050b4 <_svfiprintf_r+0x130>
 800512c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005130:	4604      	mov	r4, r0
 8005132:	2301      	movs	r3, #1
 8005134:	e7f0      	b.n	8005118 <_svfiprintf_r+0x194>
 8005136:	ab03      	add	r3, sp, #12
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	462a      	mov	r2, r5
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <_svfiprintf_r+0x1f8>)
 800513e:	a904      	add	r1, sp, #16
 8005140:	4638      	mov	r0, r7
 8005142:	f3af 8000 	nop.w
 8005146:	1c42      	adds	r2, r0, #1
 8005148:	4606      	mov	r6, r0
 800514a:	d1d6      	bne.n	80050fa <_svfiprintf_r+0x176>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	065b      	lsls	r3, r3, #25
 8005150:	f53f af2c 	bmi.w	8004fac <_svfiprintf_r+0x28>
 8005154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005156:	b01d      	add	sp, #116	; 0x74
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	ab03      	add	r3, sp, #12
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	462a      	mov	r2, r5
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <_svfiprintf_r+0x1f8>)
 8005164:	a904      	add	r1, sp, #16
 8005166:	4638      	mov	r0, r7
 8005168:	f000 f87a 	bl	8005260 <_printf_i>
 800516c:	e7eb      	b.n	8005146 <_svfiprintf_r+0x1c2>
 800516e:	bf00      	nop
 8005170:	08005b28 	.word	0x08005b28
 8005174:	08005b32 	.word	0x08005b32
 8005178:	00000000 	.word	0x00000000
 800517c:	08004ecd 	.word	0x08004ecd
 8005180:	08005b2e 	.word	0x08005b2e

08005184 <_printf_common>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4616      	mov	r6, r2
 800518a:	4699      	mov	r9, r3
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005194:	4293      	cmp	r3, r2
 8005196:	bfb8      	it	lt
 8005198:	4613      	movlt	r3, r2
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a0:	4607      	mov	r7, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b10a      	cbz	r2, 80051aa <_printf_common+0x26>
 80051a6:	3301      	adds	r3, #1
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	0699      	lsls	r1, r3, #26
 80051ae:	bf42      	ittt	mi
 80051b0:	6833      	ldrmi	r3, [r6, #0]
 80051b2:	3302      	addmi	r3, #2
 80051b4:	6033      	strmi	r3, [r6, #0]
 80051b6:	6825      	ldr	r5, [r4, #0]
 80051b8:	f015 0506 	ands.w	r5, r5, #6
 80051bc:	d106      	bne.n	80051cc <_printf_common+0x48>
 80051be:	f104 0a19 	add.w	sl, r4, #25
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dc26      	bgt.n	800521a <_printf_common+0x96>
 80051cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d0:	1e13      	subs	r3, r2, #0
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	0692      	lsls	r2, r2, #26
 80051da:	d42b      	bmi.n	8005234 <_printf_common+0xb0>
 80051dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d01e      	beq.n	8005228 <_printf_common+0xa4>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	68e5      	ldr	r5, [r4, #12]
 80051ee:	6832      	ldr	r2, [r6, #0]
 80051f0:	f003 0306 	and.w	r3, r3, #6
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	bf08      	it	eq
 80051f8:	1aad      	subeq	r5, r5, r2
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	bf0c      	ite	eq
 8005200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005204:	2500      	movne	r5, #0
 8005206:	4293      	cmp	r3, r2
 8005208:	bfc4      	itt	gt
 800520a:	1a9b      	subgt	r3, r3, r2
 800520c:	18ed      	addgt	r5, r5, r3
 800520e:	2600      	movs	r6, #0
 8005210:	341a      	adds	r4, #26
 8005212:	42b5      	cmp	r5, r6
 8005214:	d11a      	bne.n	800524c <_printf_common+0xc8>
 8005216:	2000      	movs	r0, #0
 8005218:	e008      	b.n	800522c <_printf_common+0xa8>
 800521a:	2301      	movs	r3, #1
 800521c:	4652      	mov	r2, sl
 800521e:	4649      	mov	r1, r9
 8005220:	4638      	mov	r0, r7
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d103      	bne.n	8005230 <_printf_common+0xac>
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	3501      	adds	r5, #1
 8005232:	e7c6      	b.n	80051c2 <_printf_common+0x3e>
 8005234:	18e1      	adds	r1, r4, r3
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	2030      	movs	r0, #48	; 0x30
 800523a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800523e:	4422      	add	r2, r4
 8005240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005248:	3302      	adds	r3, #2
 800524a:	e7c7      	b.n	80051dc <_printf_common+0x58>
 800524c:	2301      	movs	r3, #1
 800524e:	4622      	mov	r2, r4
 8005250:	4649      	mov	r1, r9
 8005252:	4638      	mov	r0, r7
 8005254:	47c0      	blx	r8
 8005256:	3001      	adds	r0, #1
 8005258:	d0e6      	beq.n	8005228 <_printf_common+0xa4>
 800525a:	3601      	adds	r6, #1
 800525c:	e7d9      	b.n	8005212 <_printf_common+0x8e>
	...

08005260 <_printf_i>:
 8005260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	4691      	mov	r9, r2
 8005268:	7e27      	ldrb	r7, [r4, #24]
 800526a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800526c:	2f78      	cmp	r7, #120	; 0x78
 800526e:	4680      	mov	r8, r0
 8005270:	469a      	mov	sl, r3
 8005272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005276:	d807      	bhi.n	8005288 <_printf_i+0x28>
 8005278:	2f62      	cmp	r7, #98	; 0x62
 800527a:	d80a      	bhi.n	8005292 <_printf_i+0x32>
 800527c:	2f00      	cmp	r7, #0
 800527e:	f000 80d8 	beq.w	8005432 <_printf_i+0x1d2>
 8005282:	2f58      	cmp	r7, #88	; 0x58
 8005284:	f000 80a3 	beq.w	80053ce <_printf_i+0x16e>
 8005288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800528c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005290:	e03a      	b.n	8005308 <_printf_i+0xa8>
 8005292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005296:	2b15      	cmp	r3, #21
 8005298:	d8f6      	bhi.n	8005288 <_printf_i+0x28>
 800529a:	a001      	add	r0, pc, #4	; (adr r0, 80052a0 <_printf_i+0x40>)
 800529c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	08005289 	.word	0x08005289
 80052ac:	08005289 	.word	0x08005289
 80052b0:	08005289 	.word	0x08005289
 80052b4:	08005289 	.word	0x08005289
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005289 	.word	0x08005289
 80052c0:	08005289 	.word	0x08005289
 80052c4:	08005289 	.word	0x08005289
 80052c8:	08005289 	.word	0x08005289
 80052cc:	08005419 	.word	0x08005419
 80052d0:	0800533d 	.word	0x0800533d
 80052d4:	080053fb 	.word	0x080053fb
 80052d8:	08005289 	.word	0x08005289
 80052dc:	08005289 	.word	0x08005289
 80052e0:	0800543b 	.word	0x0800543b
 80052e4:	08005289 	.word	0x08005289
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	08005289 	.word	0x08005289
 80052f0:	08005289 	.word	0x08005289
 80052f4:	08005403 	.word	0x08005403
 80052f8:	680b      	ldr	r3, [r1, #0]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	600a      	str	r2, [r1, #0]
 8005300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005308:	2301      	movs	r3, #1
 800530a:	e0a3      	b.n	8005454 <_printf_i+0x1f4>
 800530c:	6825      	ldr	r5, [r4, #0]
 800530e:	6808      	ldr	r0, [r1, #0]
 8005310:	062e      	lsls	r6, r5, #24
 8005312:	f100 0304 	add.w	r3, r0, #4
 8005316:	d50a      	bpl.n	800532e <_printf_i+0xce>
 8005318:	6805      	ldr	r5, [r0, #0]
 800531a:	600b      	str	r3, [r1, #0]
 800531c:	2d00      	cmp	r5, #0
 800531e:	da03      	bge.n	8005328 <_printf_i+0xc8>
 8005320:	232d      	movs	r3, #45	; 0x2d
 8005322:	426d      	negs	r5, r5
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005328:	485e      	ldr	r0, [pc, #376]	; (80054a4 <_printf_i+0x244>)
 800532a:	230a      	movs	r3, #10
 800532c:	e019      	b.n	8005362 <_printf_i+0x102>
 800532e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005332:	6805      	ldr	r5, [r0, #0]
 8005334:	600b      	str	r3, [r1, #0]
 8005336:	bf18      	it	ne
 8005338:	b22d      	sxthne	r5, r5
 800533a:	e7ef      	b.n	800531c <_printf_i+0xbc>
 800533c:	680b      	ldr	r3, [r1, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	1d18      	adds	r0, r3, #4
 8005342:	6008      	str	r0, [r1, #0]
 8005344:	0628      	lsls	r0, r5, #24
 8005346:	d501      	bpl.n	800534c <_printf_i+0xec>
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	e002      	b.n	8005352 <_printf_i+0xf2>
 800534c:	0669      	lsls	r1, r5, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0xe8>
 8005350:	881d      	ldrh	r5, [r3, #0]
 8005352:	4854      	ldr	r0, [pc, #336]	; (80054a4 <_printf_i+0x244>)
 8005354:	2f6f      	cmp	r7, #111	; 0x6f
 8005356:	bf0c      	ite	eq
 8005358:	2308      	moveq	r3, #8
 800535a:	230a      	movne	r3, #10
 800535c:	2100      	movs	r1, #0
 800535e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005362:	6866      	ldr	r6, [r4, #4]
 8005364:	60a6      	str	r6, [r4, #8]
 8005366:	2e00      	cmp	r6, #0
 8005368:	bfa2      	ittt	ge
 800536a:	6821      	ldrge	r1, [r4, #0]
 800536c:	f021 0104 	bicge.w	r1, r1, #4
 8005370:	6021      	strge	r1, [r4, #0]
 8005372:	b90d      	cbnz	r5, 8005378 <_printf_i+0x118>
 8005374:	2e00      	cmp	r6, #0
 8005376:	d04d      	beq.n	8005414 <_printf_i+0x1b4>
 8005378:	4616      	mov	r6, r2
 800537a:	fbb5 f1f3 	udiv	r1, r5, r3
 800537e:	fb03 5711 	mls	r7, r3, r1, r5
 8005382:	5dc7      	ldrb	r7, [r0, r7]
 8005384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005388:	462f      	mov	r7, r5
 800538a:	42bb      	cmp	r3, r7
 800538c:	460d      	mov	r5, r1
 800538e:	d9f4      	bls.n	800537a <_printf_i+0x11a>
 8005390:	2b08      	cmp	r3, #8
 8005392:	d10b      	bne.n	80053ac <_printf_i+0x14c>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07df      	lsls	r7, r3, #31
 8005398:	d508      	bpl.n	80053ac <_printf_i+0x14c>
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	6861      	ldr	r1, [r4, #4]
 800539e:	4299      	cmp	r1, r3
 80053a0:	bfde      	ittt	le
 80053a2:	2330      	movle	r3, #48	; 0x30
 80053a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053ac:	1b92      	subs	r2, r2, r6
 80053ae:	6122      	str	r2, [r4, #16]
 80053b0:	f8cd a000 	str.w	sl, [sp]
 80053b4:	464b      	mov	r3, r9
 80053b6:	aa03      	add	r2, sp, #12
 80053b8:	4621      	mov	r1, r4
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7ff fee2 	bl	8005184 <_printf_common>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d14c      	bne.n	800545e <_printf_i+0x1fe>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	b004      	add	sp, #16
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	4835      	ldr	r0, [pc, #212]	; (80054a4 <_printf_i+0x244>)
 80053d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	680e      	ldr	r6, [r1, #0]
 80053d8:	061f      	lsls	r7, r3, #24
 80053da:	f856 5b04 	ldr.w	r5, [r6], #4
 80053de:	600e      	str	r6, [r1, #0]
 80053e0:	d514      	bpl.n	800540c <_printf_i+0x1ac>
 80053e2:	07d9      	lsls	r1, r3, #31
 80053e4:	bf44      	itt	mi
 80053e6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ea:	6023      	strmi	r3, [r4, #0]
 80053ec:	b91d      	cbnz	r5, 80053f6 <_printf_i+0x196>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f023 0320 	bic.w	r3, r3, #32
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	2310      	movs	r3, #16
 80053f8:	e7b0      	b.n	800535c <_printf_i+0xfc>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	2378      	movs	r3, #120	; 0x78
 8005404:	4828      	ldr	r0, [pc, #160]	; (80054a8 <_printf_i+0x248>)
 8005406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800540a:	e7e3      	b.n	80053d4 <_printf_i+0x174>
 800540c:	065e      	lsls	r6, r3, #25
 800540e:	bf48      	it	mi
 8005410:	b2ad      	uxthmi	r5, r5
 8005412:	e7e6      	b.n	80053e2 <_printf_i+0x182>
 8005414:	4616      	mov	r6, r2
 8005416:	e7bb      	b.n	8005390 <_printf_i+0x130>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	6826      	ldr	r6, [r4, #0]
 800541c:	6960      	ldr	r0, [r4, #20]
 800541e:	1d1d      	adds	r5, r3, #4
 8005420:	600d      	str	r5, [r1, #0]
 8005422:	0635      	lsls	r5, r6, #24
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	d501      	bpl.n	800542c <_printf_i+0x1cc>
 8005428:	6018      	str	r0, [r3, #0]
 800542a:	e002      	b.n	8005432 <_printf_i+0x1d2>
 800542c:	0671      	lsls	r1, r6, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0x1c8>
 8005430:	8018      	strh	r0, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	4616      	mov	r6, r2
 8005438:	e7ba      	b.n	80053b0 <_printf_i+0x150>
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	600a      	str	r2, [r1, #0]
 8005440:	681e      	ldr	r6, [r3, #0]
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	2100      	movs	r1, #0
 8005446:	4630      	mov	r0, r6
 8005448:	f7fa feca 	bl	80001e0 <memchr>
 800544c:	b108      	cbz	r0, 8005452 <_printf_i+0x1f2>
 800544e:	1b80      	subs	r0, r0, r6
 8005450:	6060      	str	r0, [r4, #4]
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	2300      	movs	r3, #0
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	e7a8      	b.n	80053b0 <_printf_i+0x150>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	4632      	mov	r2, r6
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d0ab      	beq.n	80053c4 <_printf_i+0x164>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	079b      	lsls	r3, r3, #30
 8005470:	d413      	bmi.n	800549a <_printf_i+0x23a>
 8005472:	68e0      	ldr	r0, [r4, #12]
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	4298      	cmp	r0, r3
 8005478:	bfb8      	it	lt
 800547a:	4618      	movlt	r0, r3
 800547c:	e7a4      	b.n	80053c8 <_printf_i+0x168>
 800547e:	2301      	movs	r3, #1
 8005480:	4632      	mov	r2, r6
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	47d0      	blx	sl
 8005488:	3001      	adds	r0, #1
 800548a:	d09b      	beq.n	80053c4 <_printf_i+0x164>
 800548c:	3501      	adds	r5, #1
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	9903      	ldr	r1, [sp, #12]
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	42ab      	cmp	r3, r5
 8005496:	dcf2      	bgt.n	800547e <_printf_i+0x21e>
 8005498:	e7eb      	b.n	8005472 <_printf_i+0x212>
 800549a:	2500      	movs	r5, #0
 800549c:	f104 0619 	add.w	r6, r4, #25
 80054a0:	e7f5      	b.n	800548e <_printf_i+0x22e>
 80054a2:	bf00      	nop
 80054a4:	08005b39 	.word	0x08005b39
 80054a8:	08005b4a 	.word	0x08005b4a

080054ac <memmove>:
 80054ac:	4288      	cmp	r0, r1
 80054ae:	b510      	push	{r4, lr}
 80054b0:	eb01 0402 	add.w	r4, r1, r2
 80054b4:	d902      	bls.n	80054bc <memmove+0x10>
 80054b6:	4284      	cmp	r4, r0
 80054b8:	4623      	mov	r3, r4
 80054ba:	d807      	bhi.n	80054cc <memmove+0x20>
 80054bc:	1e43      	subs	r3, r0, #1
 80054be:	42a1      	cmp	r1, r4
 80054c0:	d008      	beq.n	80054d4 <memmove+0x28>
 80054c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ca:	e7f8      	b.n	80054be <memmove+0x12>
 80054cc:	4402      	add	r2, r0
 80054ce:	4601      	mov	r1, r0
 80054d0:	428a      	cmp	r2, r1
 80054d2:	d100      	bne.n	80054d6 <memmove+0x2a>
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054de:	e7f7      	b.n	80054d0 <memmove+0x24>

080054e0 <_free_r>:
 80054e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054e2:	2900      	cmp	r1, #0
 80054e4:	d048      	beq.n	8005578 <_free_r+0x98>
 80054e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ea:	9001      	str	r0, [sp, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f1a1 0404 	sub.w	r4, r1, #4
 80054f2:	bfb8      	it	lt
 80054f4:	18e4      	addlt	r4, r4, r3
 80054f6:	f000 f8d3 	bl	80056a0 <__malloc_lock>
 80054fa:	4a20      	ldr	r2, [pc, #128]	; (800557c <_free_r+0x9c>)
 80054fc:	9801      	ldr	r0, [sp, #4]
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	4615      	mov	r5, r2
 8005502:	b933      	cbnz	r3, 8005512 <_free_r+0x32>
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	6014      	str	r4, [r2, #0]
 8005508:	b003      	add	sp, #12
 800550a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800550e:	f000 b8cd 	b.w	80056ac <__malloc_unlock>
 8005512:	42a3      	cmp	r3, r4
 8005514:	d90b      	bls.n	800552e <_free_r+0x4e>
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	1862      	adds	r2, r4, r1
 800551a:	4293      	cmp	r3, r2
 800551c:	bf04      	itt	eq
 800551e:	681a      	ldreq	r2, [r3, #0]
 8005520:	685b      	ldreq	r3, [r3, #4]
 8005522:	6063      	str	r3, [r4, #4]
 8005524:	bf04      	itt	eq
 8005526:	1852      	addeq	r2, r2, r1
 8005528:	6022      	streq	r2, [r4, #0]
 800552a:	602c      	str	r4, [r5, #0]
 800552c:	e7ec      	b.n	8005508 <_free_r+0x28>
 800552e:	461a      	mov	r2, r3
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b10b      	cbz	r3, 8005538 <_free_r+0x58>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d9fa      	bls.n	800552e <_free_r+0x4e>
 8005538:	6811      	ldr	r1, [r2, #0]
 800553a:	1855      	adds	r5, r2, r1
 800553c:	42a5      	cmp	r5, r4
 800553e:	d10b      	bne.n	8005558 <_free_r+0x78>
 8005540:	6824      	ldr	r4, [r4, #0]
 8005542:	4421      	add	r1, r4
 8005544:	1854      	adds	r4, r2, r1
 8005546:	42a3      	cmp	r3, r4
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	d1dd      	bne.n	8005508 <_free_r+0x28>
 800554c:	681c      	ldr	r4, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	6053      	str	r3, [r2, #4]
 8005552:	4421      	add	r1, r4
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	e7d7      	b.n	8005508 <_free_r+0x28>
 8005558:	d902      	bls.n	8005560 <_free_r+0x80>
 800555a:	230c      	movs	r3, #12
 800555c:	6003      	str	r3, [r0, #0]
 800555e:	e7d3      	b.n	8005508 <_free_r+0x28>
 8005560:	6825      	ldr	r5, [r4, #0]
 8005562:	1961      	adds	r1, r4, r5
 8005564:	428b      	cmp	r3, r1
 8005566:	bf04      	itt	eq
 8005568:	6819      	ldreq	r1, [r3, #0]
 800556a:	685b      	ldreq	r3, [r3, #4]
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	bf04      	itt	eq
 8005570:	1949      	addeq	r1, r1, r5
 8005572:	6021      	streq	r1, [r4, #0]
 8005574:	6054      	str	r4, [r2, #4]
 8005576:	e7c7      	b.n	8005508 <_free_r+0x28>
 8005578:	b003      	add	sp, #12
 800557a:	bd30      	pop	{r4, r5, pc}
 800557c:	2000403c 	.word	0x2000403c

08005580 <_malloc_r>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	1ccd      	adds	r5, r1, #3
 8005584:	f025 0503 	bic.w	r5, r5, #3
 8005588:	3508      	adds	r5, #8
 800558a:	2d0c      	cmp	r5, #12
 800558c:	bf38      	it	cc
 800558e:	250c      	movcc	r5, #12
 8005590:	2d00      	cmp	r5, #0
 8005592:	4606      	mov	r6, r0
 8005594:	db01      	blt.n	800559a <_malloc_r+0x1a>
 8005596:	42a9      	cmp	r1, r5
 8005598:	d903      	bls.n	80055a2 <_malloc_r+0x22>
 800559a:	230c      	movs	r3, #12
 800559c:	6033      	str	r3, [r6, #0]
 800559e:	2000      	movs	r0, #0
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a2:	f000 f87d 	bl	80056a0 <__malloc_lock>
 80055a6:	4921      	ldr	r1, [pc, #132]	; (800562c <_malloc_r+0xac>)
 80055a8:	680a      	ldr	r2, [r1, #0]
 80055aa:	4614      	mov	r4, r2
 80055ac:	b99c      	cbnz	r4, 80055d6 <_malloc_r+0x56>
 80055ae:	4f20      	ldr	r7, [pc, #128]	; (8005630 <_malloc_r+0xb0>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	b923      	cbnz	r3, 80055be <_malloc_r+0x3e>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f862 	bl	8005680 <_sbrk_r>
 80055bc:	6038      	str	r0, [r7, #0]
 80055be:	4629      	mov	r1, r5
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 f85d 	bl	8005680 <_sbrk_r>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d123      	bne.n	8005612 <_malloc_r+0x92>
 80055ca:	230c      	movs	r3, #12
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	4630      	mov	r0, r6
 80055d0:	f000 f86c 	bl	80056ac <__malloc_unlock>
 80055d4:	e7e3      	b.n	800559e <_malloc_r+0x1e>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	1b5b      	subs	r3, r3, r5
 80055da:	d417      	bmi.n	800560c <_malloc_r+0x8c>
 80055dc:	2b0b      	cmp	r3, #11
 80055de:	d903      	bls.n	80055e8 <_malloc_r+0x68>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	441c      	add	r4, r3
 80055e4:	6025      	str	r5, [r4, #0]
 80055e6:	e004      	b.n	80055f2 <_malloc_r+0x72>
 80055e8:	6863      	ldr	r3, [r4, #4]
 80055ea:	42a2      	cmp	r2, r4
 80055ec:	bf0c      	ite	eq
 80055ee:	600b      	streq	r3, [r1, #0]
 80055f0:	6053      	strne	r3, [r2, #4]
 80055f2:	4630      	mov	r0, r6
 80055f4:	f000 f85a 	bl	80056ac <__malloc_unlock>
 80055f8:	f104 000b 	add.w	r0, r4, #11
 80055fc:	1d23      	adds	r3, r4, #4
 80055fe:	f020 0007 	bic.w	r0, r0, #7
 8005602:	1ac2      	subs	r2, r0, r3
 8005604:	d0cc      	beq.n	80055a0 <_malloc_r+0x20>
 8005606:	1a1b      	subs	r3, r3, r0
 8005608:	50a3      	str	r3, [r4, r2]
 800560a:	e7c9      	b.n	80055a0 <_malloc_r+0x20>
 800560c:	4622      	mov	r2, r4
 800560e:	6864      	ldr	r4, [r4, #4]
 8005610:	e7cc      	b.n	80055ac <_malloc_r+0x2c>
 8005612:	1cc4      	adds	r4, r0, #3
 8005614:	f024 0403 	bic.w	r4, r4, #3
 8005618:	42a0      	cmp	r0, r4
 800561a:	d0e3      	beq.n	80055e4 <_malloc_r+0x64>
 800561c:	1a21      	subs	r1, r4, r0
 800561e:	4630      	mov	r0, r6
 8005620:	f000 f82e 	bl	8005680 <_sbrk_r>
 8005624:	3001      	adds	r0, #1
 8005626:	d1dd      	bne.n	80055e4 <_malloc_r+0x64>
 8005628:	e7cf      	b.n	80055ca <_malloc_r+0x4a>
 800562a:	bf00      	nop
 800562c:	2000403c 	.word	0x2000403c
 8005630:	20004040 	.word	0x20004040

08005634 <_realloc_r>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	4607      	mov	r7, r0
 8005638:	4614      	mov	r4, r2
 800563a:	460e      	mov	r6, r1
 800563c:	b921      	cbnz	r1, 8005648 <_realloc_r+0x14>
 800563e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005642:	4611      	mov	r1, r2
 8005644:	f7ff bf9c 	b.w	8005580 <_malloc_r>
 8005648:	b922      	cbnz	r2, 8005654 <_realloc_r+0x20>
 800564a:	f7ff ff49 	bl	80054e0 <_free_r>
 800564e:	4625      	mov	r5, r4
 8005650:	4628      	mov	r0, r5
 8005652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005654:	f000 f830 	bl	80056b8 <_malloc_usable_size_r>
 8005658:	42a0      	cmp	r0, r4
 800565a:	d20f      	bcs.n	800567c <_realloc_r+0x48>
 800565c:	4621      	mov	r1, r4
 800565e:	4638      	mov	r0, r7
 8005660:	f7ff ff8e 	bl	8005580 <_malloc_r>
 8005664:	4605      	mov	r5, r0
 8005666:	2800      	cmp	r0, #0
 8005668:	d0f2      	beq.n	8005650 <_realloc_r+0x1c>
 800566a:	4631      	mov	r1, r6
 800566c:	4622      	mov	r2, r4
 800566e:	f7ff fbf7 	bl	8004e60 <memcpy>
 8005672:	4631      	mov	r1, r6
 8005674:	4638      	mov	r0, r7
 8005676:	f7ff ff33 	bl	80054e0 <_free_r>
 800567a:	e7e9      	b.n	8005650 <_realloc_r+0x1c>
 800567c:	4635      	mov	r5, r6
 800567e:	e7e7      	b.n	8005650 <_realloc_r+0x1c>

08005680 <_sbrk_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4d06      	ldr	r5, [pc, #24]	; (800569c <_sbrk_r+0x1c>)
 8005684:	2300      	movs	r3, #0
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	f7fb fc7e 	bl	8000f8c <_sbrk>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_sbrk_r+0x1a>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_sbrk_r+0x1a>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	200040e0 	.word	0x200040e0

080056a0 <__malloc_lock>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__malloc_lock+0x8>)
 80056a2:	f000 b811 	b.w	80056c8 <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	200040e8 	.word	0x200040e8

080056ac <__malloc_unlock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__malloc_unlock+0x8>)
 80056ae:	f000 b80c 	b.w	80056ca <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	200040e8 	.word	0x200040e8

080056b8 <_malloc_usable_size_r>:
 80056b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056bc:	1f18      	subs	r0, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bfbc      	itt	lt
 80056c2:	580b      	ldrlt	r3, [r1, r0]
 80056c4:	18c0      	addlt	r0, r0, r3
 80056c6:	4770      	bx	lr

080056c8 <__retarget_lock_acquire_recursive>:
 80056c8:	4770      	bx	lr

080056ca <__retarget_lock_release_recursive>:
 80056ca:	4770      	bx	lr

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
